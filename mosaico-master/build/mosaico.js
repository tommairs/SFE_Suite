/** 
 * Mosaico - OpenSource Email Template Editor - v0.17.3 - 2018-05-30 
 * Licensed under the GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.en.html)
 * 
 * Copyright (c) 2018 Stefano Bagnara 
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Mosaico = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
var templateSystem=require("../src/js/bindings/choose-template.js");document.addEventListener("DOMContentLoaded",function(e){templateSystem.addTemplate("array","\x3c!-- ko foreach: $data --\x3e\x3c!-- ko block: $data --\x3e\x3c!-- /ko --\x3e\x3c!-- /ko --\x3e"),templateSystem.addTemplate("block-show","\x3c!-- ko block: $data, scrollIntoView: $root.selectedBlock() === $data --\x3e\x3c!-- /ko --\x3e"),templateSystem.addTemplate("block-wysiwyg",'<div class="editable block" data-drop-content="Drop here" data-bind="attr: { \'data-drop-content\': $root.t(\'Drop here\') }, click: function(obj, evt) { $root.selectBlock(obj); return true }, clickBubble: false, css: { selected: $root.selectedBlock() === $data }, scrollIntoView: $root.selectedBlock() === $data">  <div class="mo-blockselectionhelper"></div>  <div class="tools" data-bind="tooltips: {}">    \x3c!-- ko if: typeof $index != \'undefined\' --\x3e    <div title="Drag this handle to move the block" data-bind="attr: { title: $root.t(\'Drag this handle to move the block\') }" class="tool handle"><i class="fa fa-fw fa-sort"></i></div>    \x3c!-- ko if: $index() > 0 --\x3e    <div title="Move this block upside" data-bind="attr: { title: $root.t(\'Move this block upside\') }" class="tool moveup"><i class="fa fa-fw fa-sort-asc" data-bind=\'click: $root.moveBlock.bind($element, $index, $parent, true)\'></i></div>    \x3c!-- /ko --\x3e    \x3c!-- ko if: $index() < $parent.blocks().length -1 --\x3e    <div title="Move this block downside" data-bind="attr: { title: $root.t(\'Move this block downside\') }" class="tool movedown"><i class="fa fa-fw fa-sort-desc" data-bind=\'click: $root.moveBlock.bind($element, $index, $parent, false)\'></i></div>    \x3c!-- /ko --\x3e    <div title="Delete block" class="tool delete" data-bind="attr: { title: $root.t(\'Delete block\') }, click: $root.removeBlock.bind($element, $rawData, $parent)"><i class="fa fa-fw fa-trash-o"></i></div>    <div title="Duplicate block" class="tool clone" data-bind="attr: { title: $root.t(\'Duplicate block\') }, click: $root.duplicateBlock.bind($element, $index, $parent)"><i class="fa fa-fw fa-files-o"></i></div>    \x3c!-- /ko --\x3e    \x3c!-- ko if: typeof $data._nextVariant != \'undefined\' --\x3e<div title="Switch block variant" class="tool variant" data-bind="attr: { title: $root.t(\'Switch block variant\') }, click: $data._nextVariant"><i class="fa fa-fw fa-magic"></i></div>\x3c!-- /ko --\x3e  </div>  \x3c!-- ko block: $data --\x3e\x3c!-- /ko --\x3e</div>'),templateSystem.addTemplate("blocks-show","\x3c!-- ko template: { name: 'block-show', foreach: blocks } --\x3e\x3c!-- /ko --\x3e"),templateSystem.addTemplate("blocks-wysiwyg","<div class=\"sortable-blocks-edit\" data-drop-content=\"Drop here\" data-empty-content=\"Drop here blocks from the Blocks tab\" data-bind=\"attr: { 'data-drop-content': $root.t('Drop here'), 'data-empty-content': $root.t('Drop here blocks from the &quot;Blocks&quot; tab') }, css: { 'empty': ko.utils.unwrapObservable(blocks).length == 0 }, extsortable: { connectClass: 'sortable-blocks-edit', template: 'block-wysiwyg', data: blocks, dragging: $root.dragging, beforeMove: $root.startMultiple, afterMove: $root.stopMultiple, options: { handle: '.handle', placeholder: $root.placeholderHelper } }\"></div>"),templateSystem.addTemplate("customstyle",'<div class="customStyleHelp" data-bind="html: $root.t(\'Customized block.<ul><li>In this status changes to properties will be specific to the current block (instead of being global to all blocks in the same section)</li><li>A <span class=&quot;customStyled&quot;><span>&quot;small cube&quot; </span></span> icon beside the property will mark the customization. By clicking this icon the property value will be reverted to the value defined for the section.</li></ul>\')">Customized block.<ul><li>In this status changes to properties will be specific to the current block (instead of being global to all blocks in the same section)</li><li>A <span class="customStyled"><span>"small cube" </span></span> icon beside the property will mark the customization. By clicking this icon the property value will be reverted to the value defined for the section.</li></ul></div>'),templateSystem.addTemplate("empty",""),templateSystem.addTemplate("error",'[<div style="background-color: #fff0f0" data-bind="text: ko.toJS($data)"></div>]'),templateSystem.addTemplate("gallery-images",'<div data-bind="foreach: items.currentPageData">  <div class="draggable-item" data-bind="if: typeof thumbnailUrl != \'undefined\'">    <div class="draggable image" data-bind="click: $root.addImage, extdraggable: { data: $data, dropContainer: \'#main-wysiwyg-area\', dragging: $root.draggingImage, \'options\': { \'appendTo\': \'#page\' } }, style: { backgroundImage: \'url(\\\'\' + thumbnailUrl + \'\\\')\' }">      <img title="Drag this image and drop it on any template image placeholder" style="display: block;" data-bind="tooltips: {}, attr: { src: thumbnailUrl, \'title\': $root.t(\'Drag this image and drop it on any template image placeholder\') }"/>    </div>  </div></div>\x3c!-- ko if: items.pageCount() > 1 --\x3e<div class="galleryPager" data-bind="buttonset: {}">  <a href="javascript:void(0)" data-bind="click: items.moveFirst, button: { disabled: items.currentPage() == 1, icons: { primary: \'fa fa-fast-backward\' }, text: false }">First</a>  <a href="javascript:void(0)" data-bind="click: items.movePrevious, button: { disabled: items.currentPage() == 1, icons: { primary: \'fa fa-backward\' }, text: false }">Previous</a>  <span data-bind="button: { disabled: true, text: true, label: \' \'+$root.t(\'__current__ of __total__\', { current: items.currentPage(), total: items.pageCount() })+\' \' }"> X of Y </span>  <a href="javascript:void(0)" data-bind="click: items.moveNext, button: { disabled: items.currentPage() == items.pageCount(), icons: { primary: \'fa fa-forward\' }, text: false }">Next</a>  <a href="javascript:void(0)" data-bind="click: items.moveLast, button: { disabled: items.currentPage() == items.pageCount(), icons: { primary: \'fa fa-fast-forward\' }, text: false }">Last</a></div>\x3c!-- /ko --\x3e'),templateSystem.addTemplate("img-wysiwyg",'<table tabfocus="0" cellspacing="0" cellpadding="0" data-drop-content="Drop here" data-bind="style: _stylebind, click: function(obj, evt) { $root.selectItem(_item, _data); return true; }, clickBubble: false, fudroppable: { activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }, extdroppable: { options: { accept: \'.image\', activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }, data: _src, dragged: $root.fileToImage }, css: { selecteditem: $root.isSelectedItem(_item) }, scrollIntoView: $root.isSelectedItem(_item), attr: { \'data-drop-content\': $root.t(\'Drop here\'), width: _width, height: _height, align: _align }"  class="img-wysiwyg selectable-img" style="display: table;"><tr><td class="uploadzone">  <div class="mo-imgselectionhelper"></div>  <div class="mo-uploadzone"></div>  <div class="img-size" data-bind="text: _size">size</div>  <div class="midtools" data-bind="tooltips: {}">    \x3c!-- ko if: _src() != \'\' --\x3e    <div title="Remove image" class="tool delete" data-bind="attr: { title: $root.t(\'Remove image\') }, click: _src.bind(_src, \'\'), clickBubble: false"><i class="fa fa-fw fa-trash-o"></i></div>    \x3c!-- ko if: typeof $root.editImage !== \'undefined\' --\x3e    <div title="Open the image editing tool" class="tool edit" data-bind="attr: { title: $root.t(\'Open the image editing tool\') }, click: $root.editImage.bind($element, _src), clickBubble: false"><i class="fa fa-fw fa-pencil"></i></div>    \x3c!-- /ko --\x3e    \x3c!-- /ko --\x3e    \x3c!-- ko if: _src() == \'\' --\x3e    <div title="Upload a new image" data-bind="attr: { title: $root.t(\'Upload a new image\') }" class="tool upload" style="position: relative; overflow: hidden;"><i class="fa fa-fw fa-upload"></i>      <input class="fileupload nofile" type="file" name="files[]" data-bind="fileupload: { data: _src, onerror: $root.notifier.error, onfile: $root.loadImage, canvasPreview: true }" style="z-index: 20; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-size: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">    </div>    \x3c!-- ko if: typeof $root.selectImage !== \'undefined\' --\x3e    <div title="Select from gallery" class="tool gallery" data-bind="attr: { title: $root.t(\'Select from gallery\') }, click: $root.selectImage.bind($element, _src), clickBubble: true"><i class="fa fa-fw fa-picture-o"></i></div>    \x3c!-- /ko --\x3e    \x3c!-- /ko --\x3e  </div>  \x3c!-- ko template: _template --\x3e\x3c!-- /ko --\x3e  \x3c!-- ko if: _src() == \'\' --\x3e    \x3c!--    <img style="display: block;" class="imgplaceholder" width="200" src="" alt="Insert an image here" data-bind="wysiwygSrc: { src: _src.preloaded, placeholder: _placeholdersrc, width: _width, height: _height, method: _method }" />    --\x3e    <span class="fileuploadtext" style="text-align: center; display: -ms-flexbox; display: flex; align-items: center; flex-align: center; justify-content: center; padding: 1em; position: absolute; top: 0; left: 0; right: 0; bottom: 0;"><span class="textMiddle" style=" text-shadow: 1px 1px 0 #FFFFFF, 0 0 10px #FFFFFF; font-weight: bold;" data-bind="text: $root.t(\'Drop an image here\')">Drop an image here</span></span>  \x3c!-- /ko --\x3e  \x3c!-- ko if: _src() != \'\' --\x3e  \x3c!--    <img style="display: block;" width="200" src="" data-bind="preloader: _src, wysiwygSrc: { src: _src.preloaded, placeholder: _placeholdersrc, width: _width, height: _height, method: _method }" />    --\x3e  \x3c!-- /ko --\x3e  \x3c!-- pulsante per la cancellazione --\x3e  <div title="Drop an image here or click the upload button" data-bind="attr: { title: $root.t(\'Drop an image here or click the upload button\') }, tooltips: {}" class="workzone" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">    \x3c!-- ko if: _src.preloaded && _src() != _src.preloaded() --\x3ePRELOADING....\x3c!-- /ko --\x3e    \x3c!-- ko if: _src() != \'\' --\x3e      <input class="fileupload withfile" type="file" name="files[]" data-bind="fileupload: { data: _src, onerror: $root.notifier.error, onfile: $root.galleryRecent.unshift.bind($root.galleryRecent), canvasPreview: true }" style="z-index: -20; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-zie: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">    \x3c!-- /ko --\x3e    <div class="progress" style="opacity: .5; width: 80%; margin-left: 10%; position: absolute; bottom: 30%; height: 20px; border: 2px solid black;">      <div class="progress-bar progress-bar-success" style="height: 20px; background-color: black; "></div>    </div>  </div></table>'),templateSystem.addTemplate("main",'<div id="page" style="display: none;" data-bind="visible: true, css: { withToolbox: $root.showToolbox, withPreviewFrame: showPreviewFrame }">  <div id="main-edit-area" data-bind="click: function(obj, evt) { $root.selectBlock(null); return true; }, clickBubble: false">    \x3c!-- ko withProperties: { templateMode: \'wysiwyg\', templateModeFallback: \'show\' } --\x3e    <div id="main-wysiwyg-area" data-bind="wysiwygScrollfix: true, scrollable: true, fudroppable: { active: draggingImage }, css: { isdragging: dragging, isdraggingimg: draggingImage }, block: content"></div>    \x3c!-- /ko --\x3e  </div>  <div id="toolbar" class="mo" data-bind="tooltips: {}">    \x3c!-- ko if: typeof $root.undo != \'undefined\' --\x3e    <span data-bind="buttonset: { }" class="leftButtons">    <a title="Undo last operation" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Undo last operation\') }, click: $root.undo.execute, clickBubble: false, button: { disabled: !$root.undo.enabled(), icons: { primary: \'fa fa-reply\' }, label: $root.undo.name, text: true }">UNDO</a>    <a title="Redo last operation" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Redo last operation\') }, click: $root.redo.execute, clickBubble: false, button: { disabled: !$root.redo.enabled(), icons: { primary: \'fa fa-share\' }, label: $root.redo.name, text: true }">REDO</a>    </span>    \x3c!-- ko if: $root.debug --\x3e    <a href="javascript:void(0)" data-bind="click: $root.undoReset, clickBubble: false, button: { disabled: !$root.undo.enabled() && !$root.redo.enabled(), label: \'reset\', text: true }">RESET</a>    \x3c!-- /ko --\x3e    \x3c!-- /ko --\x3e    <span>    <input id="showGallery" type="checkbox" data-bind="checked: $root.showGallery, button: { refreshOn: $root.showGallery,     icons: { primary: \'fa fa-fw fa-picture-o\', secondary: null }, text: true, label: $root.t(\'Gallery\') }"><label title="Show image gallery" for="showGallery" data-bind="attr: { title: $root.t(\'Show image gallery\') }">show gallery</label></input>    </span>    <input id="previewFrameToggle" type="checkbox" data-bind="checked: $root.showPreviewFrame, button: { refreshOn: $root.showPreviewFrame, icons: { primary: \'fa fa-fw fa-tablet\', secondary: null }, text: false, label: $root.t(\'Preview\') }"><label title="Show live preview" for="previewFrameToggle" data-bind="attr: { title: $root.t(\'Show live preview\') }">PREVIEW</label></input>    \x3c!-- ko if: $root.debug --\x3e    <a href="javascript:void(0)" data-bind="click: $root.export, clickBubble: false, button: { label: \'export\', text: true }">EXPORT</a>    <input type="checkbox" data-bind="checked: $root.debug" /> debug    <a href="javascript:void(0)" data-bind="click: $root.loadDefaultBlocks, clickBubble: false, button: { icons: { primary: \'fa fa-fw fa-upload\' }, label: \'Default\', text: true }">LOAD BLOCKS</a>    [<a id="subscriptionsCount" href="javascript:viewModel.loopSubscriptionsCount()">subs</a>]    \x3c!-- /ko --\x3e    <span data-bind="visible: false">    <input type="checkbox" data-bind="checked: $root.showToolbox" /> toolbox    </span>    <div class="rightButtons">    \x3c!-- ko if: typeof $root.save !== \'undefined\' --\x3e    <a title="Save template" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Save template\') }, click: $root.save.execute, clickBubble: false, button: { disabled: !$root.save.enabled(), icons: { primary: \'fa fa-fw fa-cloud-upload\' }, label: $root.t($root.save.name), text: true }">SALVA</a>    \x3c!-- /ko --\x3e    \x3c!-- ko if: typeof $root.test !== \'undefined\' --\x3e    <a title="Show preview and send test" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Show preview and send test\') }, click: $root.test.execute, clickBubble: false, button: { disabled: !$root.test.enabled(), icons: { primary: \'fa fa-fw fa-paper-plane\' }, label: $root.t($root.test.name), text: true }">TEST</a>    \x3c!-- /ko --\x3e    \x3c!-- ko if: typeof $root.download !== \'undefined\' --\x3e    <form id="downloadForm" action="#" method="POST">    <input type="hidden" name="action" value="download" />    <input type="hidden" name="filename" value="email.html" />    <input type="hidden" name="html" id="downloadHtmlTextarea" />    <a title="Download template" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Download template\') }, click: $root.download.execute, clickBubble: false, button: { disabled: !$root.download.enabled(), icons: { primary: \'fa fa-fw fa-download\' }, label: $root.t($root.download.name), text: true }">DOWNLOAD</a>    </form>    \x3c!-- /ko --\x3e    </div>  </div>  \x3c!-- ko if: $root.showToolbox --\x3e  <div id="main-toolbox" class="mo" data-bind="scrollable: true, withProperties: { templateMode: \'edit\' }">    <div data-bind="template: { name: \'toolbox\' }"></div>  </div>  \x3c!-- /ko --\x3e    <div id="main-preview" class="mo" data-bind="scrollable: true, if: $root.showPreviewFrame">    <div id="preview-toolbar">      <div data-bind="visible: $root.showPreviewFrame, buttonset: { }" style="display: inline-block">        <input id="previewLarge" type="radio" name="previewMode" value="large" data-bind="checked: $root.previewMode, button: { text: false, label: \'large\', icons: { primary: \'fa fa-fw fa-desktop\' } }" />        <label for="previewLarge" title="Large screen" data-bind="attr: { title: $root.t(\'Large screen\') }">Large screen</label>        <input id="previewDesktop" type="radio" name="previewMode" value="desktop" data-bind="checked: $root.previewMode, button: { text: false, label: \'desktop\', icons: { primary: \'fa fa-fw fa-tablet\' } }" />        <label for="previewDesktop" title="Tablet" data-bind="attr: { title: $root.t(\'Tablet\') }">Tablet</label>        <input id="previewMobile" type="radio" name="previewMode" value="mobile" data-bind="checked: $root.previewMode, button: { text: false, label: \'mobile\', icons: { primary: \'fa fa-fw fa-mobile\' } }" />        <label for="previewMobile" title="Smartphone" data-bind="attr: { title: $root.t(\'Smartphone\') }">Smartphone</label>      </div>    </div>    <div id="frame-container" data-bind="css: { desktop: $root.previewMode() == \'desktop\', mobile: $root.previewMode() == \'mobile\', large: $root.previewMode() == \'large\' }">      <iframe data-bind="bindIframe: $data"></iframe>    </div>  </div>  <div class="mo" id="mo-body"></div>  <div id="incompatible-template" title="Saved model is obsolete" style="display: none" data-bind="attr: { title: $root.t(\'Saved model is obsolete\') }, html: $root.t(\'<p>The saved model has been created with a previous, non completely compatible version, of the template</p><p>Some content or style in the model <b>COULD BE LOST</b> if you will <b>save</b></p><p>Contact us for more informations!</p>\')">    Incompatible template  </div>  <div id="fake-image-editor" title="Fake image editor" style="display: none" data-bind="attr: { title: $root.t(\'Fake image editor\') }, html: $root.t(\'<p>Fake image editor</p>\')">    <p>Fake image editor</p>  </div></div>\x3c!-- ko if: $root.logoPath --\x3e<div id="loading" class="loading" style="display: block; width: 300px; text-align: center; height: 32px; position: absolute; top:0; bottom: 0; left: 0; right: 0;  margin: auto;" data-bind="attr: { style: \'position: absolute; top: 5px; left: 6px; z-index: 150;\'}, css: { loading: false }">  <a href="/" data-bind="attr: { href: $root.logoUrl, alt: $root.logoAlt }"><img data-bind="attr: { src: $root.logoPath }" width="32" height="32" alt="mosaico" border="0" /></a>  <div style="opacity: 0" data-bind="visible: false">Oppps... !!</div></div>\x3c!-- /ko --\x3e'),templateSystem.addTemplate("toolbox",'<div id="tooltabs" class="tabs_horizontal button_color" data-bind="tabs: { active: $root.selectedTool }">  <ul>    <li data-bind="tooltips: {}"><a title="Blocks ready to be added to the template" data-local="true" href="#toolblocks" data-bind="attr: { title: $root.t(\'Blocks ready to be added to the template\') }"><i class="fa fa-fw fa-cubes"></i> <span data-bind="html: $root.t(\'Blocks\')">Blocks</span></a></li>    <li data-bind="tooltips: {}"><a title="Edit content options" href="#toolcontents" data-local="true" data-bind="attr: { title: $root.t(\'Edit content options\') }"><i class="fa fa-fw fa-pencil"></i> <span data-bind="html: $root.t(\'Content\')">Content</span></a></li>    <li data-bind="tooltips: {}"><a title="Edit style options" href="#toolstyles" data-local="true" data-bind="attr: { title: $root.t(\'Edit style options\') }"><i class="fa fa-fw fa-paint-brush"></i> <span data-bind="html: $root.t(\'Style\')">Style</span></a></li>  </ul>  <div id="toolblocks" data-bind="scrollable: true">    <div class="block-list" data-bind="foreach: blockDefs" style="text-align: center">      <div class="draggable-item" data-bind="withProperties: { templateMode: \'show\' }">        <div class="block" data-bind="extdraggable: { connectClass: \'sortable-blocks-edit\', data: $data, dropContainer: \'#main-wysiwyg-area\', dragging: $root.dragging, \'options\': { handle: \'.handle\', distance: 10, \'appendTo\': \'#page\' } }, click: $root.addBlock" style="position: relative;">          <div title="Click or drag to add this block to the template" class="handle" data-bind="attr: { title: $root.t(\'Click or drag to add this block to the template\') }, tooltips: {}"></div>          <img data-bind="attr: { alt: $root.t(\'Block __name__\', { name: ko.utils.unwrapObservable(type) }), src: $root.templatePath(\'edres/\'+ko.utils.unwrapObservable(type)+\'.png\') }" alt="Block __name__" />        </div>        <a href="javascript:void(0)" class="addblockbutton" data-bind="click: $root.addBlock, button: { label: $root.t(\'Add\') }">Add</a>      </div>    </div>  </div>  <div id="toolcontents" data-bind="scrollable: true">    \x3c!-- ko if: $root.selectedBlock() !== null --\x3e    <div data-bind="block: $root.selectedBlock"></div>    \x3c!-- /ko --\x3e    \x3c!-- ko if: $root.selectedBlock() == null --\x3e    <div class="noSelectedBlock" data-bind="text: $root.t(\'By clicking on message parts you will select a block and content options, if any, will show here\')">By clicking on message parts you will select a block and content options, if any, will show here</div>    \x3c!-- /ko --\x3e    \x3c!-- ko block: content --\x3e\x3c!-- /ko --\x3e  </div>    <div id="toolstyles" data-bind="scrollable: true, withProperties: { templateMode: \'styler\' }">    \x3c!-- ko if: typeof $root.content().theme === \'undefined\' || typeof $root.content().theme().scheme === \'undefined\' || $root.content().theme().scheme() === \'custom\' --\x3e      \x3c!-- ko if: $root.selectedBlock() !== null --\x3e      <div data-bind="block: $root.selectedBlock, css: { workLocal: $root.selectedBlock().customStyle, workGlobal: typeof $root.selectedBlock().customStyle === \'undefined\' || !$root.selectedBlock().customStyle() }"></div>      \x3c!-- /ko --\x3e      \x3c!-- ko if: $root.selectedBlock() == null --\x3e      <div class="noSelectedBlock" data-bind="text: $root.t(\'By clicking on message parts you will select a block and style options, if available, will show here\')">By clicking on message parts you will select a block and style options, if available, will show here</div>      \x3c!-- /ko --\x3e      <div class="workGlobalContent">      \x3c!-- ko block: content --\x3e\x3c!-- /ko --\x3e      </div>    \x3c!-- /ko --\x3e  </div></div>        <div id="toolimages" class="slidebar" data-bind="scrollable: true, css: { hidden: $root.showGallery() === false }">  <div class="close" data-bind="click: $root.showGallery.bind($element, false);">X</div>  <span class="pane-title" data-bind="text: $root.t(\'Gallery:\')">Gallery:</span>  <div data-drop-content="Drop here" class="img-dropzone pane uploadzone" data-bind="attr: { \'data-drop-content\': $root.t(\'Drop here\') }, fudroppable: { activeClass: \'ui-state-highlight\', hoverClass: \'ui-state-draghover\' }">  <div class="mo-uploadzone" style="position: relative; padding: 2em; border: 2px dotted #808080">     <input class="fileupload" type="file" multiple name="files[]" data-bind="fileupload: { onerror: $root.notifier.error, onfile: $root.loadImage }" style="z-index: 10; position: absolute; top: 0; left: 0; right: 0; bottom: 0; min-width: 100%; min-height: 100%; font-zie: 999px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block">     <span data-bind="text: $root.t(\'Click or drag files here\')">Click or drag files here</span>     <div class="workzone" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">       <div class="progress" style="opacity: .5; width: 80%; margin-left: 10%; position: absolute; bottom: 30%; height: 20px; border: 2px solid black;">         <div class="progress-bar progress-bar-success" style="height: 20px; background-color: black; "></div>       </div>     </div>  </div>  </div>  \x3c!-- ko if: $root.showGallery() --\x3e  <div id="toolimagestab" class="tabs_horizontal" data-bind="tabs: { active: $root.selectedImageTab }">    <ul>      <li data-bind="tooltips: {}"><a title="Session images" data-local="true" href="#toolimagesrecent" data-bind="attr: { title: $root.t(\'Session images\') }, text: $root.t(\'Recents\')">Recents</a></li>      <li data-bind="tooltips: {}"><a title="Remote gallery" data-local="true" href="#toolimagesgallery" data-bind="attr: { title: $root.t(\'Remote gallery\') }, text: $root.t(\'Gallery\')">Gallery</a></li>    </ul>    <div id="toolimagesrecent">      \x3c!-- ko if: galleryRecent().length == 0 --\x3e<div class="galleryEmpty" data-bind="text: $root.t(\'No images uploaded, yet\')">No images uploaded, yet</div>\x3c!-- /ko --\x3e      \x3c!-- ko template: {name: \'gallery-images\', data: { items: galleryRecent } } --\x3e# recent gallery #\x3c!-- /ko --\x3e    </div>    <div id="toolimagesgallery" style="text-align: center">    \x3c!-- ko if: $root.galleryLoaded() === false --\x3e<a class="loadbutton" title="Show images from the gallery" href="javascript:void(0)" data-bind="attr: { title: $root.t(\'Show images from the gallery\') }, click: $root.loadGallery, button: { disabled: $root.galleryLoaded, icons: { primary: \'fa fa-fw fa-picture-o\' }, label: $root.galleryLoaded() == \'loading\' ? $root.t(\'Loading...\') : $root.t(\'Load gallery\'), text: true }"># load gally #</a>\x3c!-- /ko --\x3e    \x3c!-- ko if: $root.galleryLoaded() === \'loading\' --\x3e<div class="galleryEmpty" data-bind="text: $root.t(\'Loading gallery...\')">Loading gallery...</div>\x3c!-- /ko --\x3e    \x3c!-- ko if: $root.galleryLoaded() === 0 --\x3e<div class="galleryEmpty" data-bind="text: $root.t(\'The gallery is empty\')">The gallery is empty</div>\x3c!-- /ko --\x3e    \x3c!-- ko template: {name: \'gallery-images\', data: { items: galleryRemote } } --\x3e# remote gallery #\x3c!-- /ko --\x3e    </div>  </div>  \x3c!-- /ko --\x3e</div><div id="tooldebug" class="slidebar" data-bind="css: { hidden: $root.debug() === false }">  <div class="close" data-bind="click: $root.debug.bind($element, false);">X</div>    \x3c!-- ko if: $root.debug --\x3e  Content:  <pre data-bind=\'text: ko.toJSON(content, null, 2)\' style="overflow: auto; height: 20%"></pre>  BlockDefs:  <pre data-bind=\'text: ko.toJSON(blockDefs, null, 2)\' style="overflow: auto; height: 20%"></pre>  \x3c!-- /ko --\x3e  <a href="javascript:void(0)" data-bind="click: $root.exportHTMLtoTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Generate\' }">Output</a>  <a href="javascript:void(0)" data-bind="click: $root.exportJSONtoTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Export\' }">Export</a>  <a href="javascript:void(0)" data-bind="click: $root.importJSONfromTextarea.bind($element, \'#outputhtml\'); clickBubble: false, button: { text: true, label:\'Import\' }">Import</a>  <textarea id="outputhtml" rows="10" style="width: 100%;"></textarea></div><div id="tooltheme" class="ui-widget slidebar" data-bind="css: { hidden: $root.showTheme() === false }">  <div class="close" data-bind="click: $root.showTheme.bind($element, false);">X</div>    \x3c!-- ko withProperties: { templateMode: \'styler\' } --\x3e    \x3c!-- ko if: $root.showTheme --\x3e      \x3c!-- ko block: $root.content().theme --\x3e\x3c!-- /ko --\x3e    \x3c!-- /ko --\x3e  \x3c!-- /ko --\x3e</div>')});

},{"../src/js/bindings/choose-template.js":28}],2:[function(require,module,exports){
(function (global){
"use strict";function compare(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function isBuffer(e){return global.Buffer&&"function"==typeof global.Buffer.isBuffer?global.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var util=require("util/"),hasOwn=Object.prototype.hasOwnProperty,pSlice=Array.prototype.slice,functionsHaveNames="foo"===function(){}.name;function pToString(e){return Object.prototype.toString.call(e)}function isView(e){return!isBuffer(e)&&("function"==typeof global.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var assert=module.exports=ok,regex=/\s*function\s+([^\(\s]*)\s*/;function getName(e){if(util.isFunction(e)){if(functionsHaveNames)return e.name;var t=e.toString().match(regex);return t&&t[1]}}function truncate(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function inspect(e){if(functionsHaveNames||!util.isFunction(e))return util.inspect(e);var t=getName(e);return"[Function"+(t?": "+t:"")+"]"}function getMessage(e){return truncate(inspect(e.actual),128)+" "+e.operator+" "+truncate(inspect(e.expected),128)}function fail(e,t,r,n,i){throw new assert.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ok(e,t){e||fail(e,!0,t,"==",assert.ok)}function _deepEqual(e,t,r,n){if(e===t)return!0;if(isBuffer(e)&&isBuffer(t))return 0===compare(e,t);if(util.isDate(e)&&util.isDate(t))return e.getTime()===t.getTime();if(util.isRegExp(e)&&util.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(isView(e)&&isView(t)&&pToString(e)===pToString(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===compare(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(isBuffer(e)!==isBuffer(t))return!1;var i=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==i&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),objEquiv(e,t,r,n))}return r?e===t:e==t}function isArguments(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function objEquiv(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(util.isPrimitive(e)||util.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=isArguments(e),a=isArguments(t);if(i&&!a||!i&&a)return!1;if(i)return _deepEqual(e=pSlice.call(e),t=pSlice.call(t),r);var s,o,u=objectKeys(e),f=objectKeys(t);if(u.length!==f.length)return!1;for(u.sort(),f.sort(),o=u.length-1;o>=0;o--)if(u[o]!==f[o])return!1;for(o=u.length-1;o>=0;o--)if(!_deepEqual(e[s=u[o]],t[s],r,n))return!1;return!0}function notDeepStrictEqual(e,t,r){_deepEqual(e,t,!0)&&fail(e,t,r,"notDeepStrictEqual",notDeepStrictEqual)}function expectedException(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function _tryBlock(e){var t;try{e()}catch(e){t=e}return t}function _throws(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=_tryBlock(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&fail(i,r,"Missing expected exception"+n);var a="string"==typeof n,s=!e&&util.isError(i),o=!e&&i&&!r;if((s&&a&&expectedException(i,r)||o)&&fail(i,r,"Got unwanted exception"+n),e&&i&&r&&!expectedException(i,r)||!e&&i)throw i}assert.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var t=e.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=getName(t),a=n.indexOf("\n"+i);if(a>=0){var s=n.indexOf("\n",a+1);n=n.substring(s+1)}this.stack=n}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(e,t,r){e!=t&&fail(e,t,r,"==",assert.equal)},assert.notEqual=function(e,t,r){e==t&&fail(e,t,r,"!=",assert.notEqual)},assert.deepEqual=function(e,t,r){_deepEqual(e,t,!1)||fail(e,t,r,"deepEqual",assert.deepEqual)},assert.deepStrictEqual=function(e,t,r){_deepEqual(e,t,!0)||fail(e,t,r,"deepStrictEqual",assert.deepStrictEqual)},assert.notDeepEqual=function(e,t,r){_deepEqual(e,t,!1)&&fail(e,t,r,"notDeepEqual",assert.notDeepEqual)},assert.notDeepStrictEqual=notDeepStrictEqual,assert.strictEqual=function(e,t,r){e!==t&&fail(e,t,r,"===",assert.strictEqual)},assert.notStrictEqual=function(e,t,r){e===t&&fail(e,t,r,"!==",assert.notStrictEqual)},assert.throws=function(e,t,r){_throws(!0,e,t,r)},assert.doesNotThrow=function(e,t,r){_throws(!1,e,t,r)},assert.ifError=function(e){if(e)throw e};var objectKeys=Object.keys||function(e){var t=[];for(var r in e)hasOwn.call(e,r)&&t.push(r);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"util/":24}],3:[function(require,module,exports){
(function (global){
var console,util=require("util"),assert=require("assert"),now=require("date-now"),slice=Array.prototype.slice,times={};console="undefined"!=typeof global&&global.console?global.console:"undefined"!=typeof window&&window.console?window.console:{};for(var functions=[[log,"log"],[info,"info"],[warn,"warn"],[error,"error"],[time,"time"],[timeEnd,"timeEnd"],[trace,"trace"],[dir,"dir"],[consoleAssert,"assert"]],i=0;i<functions.length;i++){var tuple=functions[i],f=tuple[0],name=tuple[1];console[name]||(console[name]=f)}function log(){}function info(){console.log.apply(console,arguments)}function warn(){console.log.apply(console,arguments)}function error(){console.warn.apply(console,arguments)}function time(o){times[o]=now()}function timeEnd(o){var e=times[o];if(!e)throw new Error("No such label: "+o);var n=now()-e;console.log(o+": "+n+"ms")}function trace(){var o=new Error;o.name="Trace",o.message=util.format.apply(null,arguments),console.error(o.stack)}function dir(o){console.log(util.inspect(o)+"\n")}function consoleAssert(o){if(!o){var e=slice.call(arguments,1);assert.ok(!1,util.format.apply(null,e))}}module.exports=console;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"assert":2,"date-now":4,"util":24}],4:[function(require,module,exports){
function now(){return(new Date).getTime()}module.exports=now;

},{}],5:[function(require,module,exports){
!function(t,e){var o=0,i=window.navigator.userAgent,s=i.indexOf("MSIE ")>0,f=s?"-ie":"",n=!s&&(/mozilla/.test(i.toLowerCase())&&!/webkit/.test(i.toLowerCase())),c=[],a=["ffffff","000000","eeece1","1f497d","4f81bd","c0504d","9bbb59","8064a2","4bacc6","f79646"],r=["f2f2f2","7f7f7f","ddd9c3","c6d9f0","dbe5f1","f2dcdb","ebf1dd","e5e0ec","dbeef3","fdeada","d8d8d8","595959","c4bd97","8db3e2","b8cce4","e5b9b7","d7e3bc","ccc1d9","b7dde8","fbd5b5","bfbfbf","3f3f3f","938953","548dd4","95b3d7","d99694","c3d69b","b2a2c7","92cddc","fac08f","a5a5a5","262626","494429","17365d","366092","953734","76923c","5f497a","31859b","e36c09","7f7f7f","0c0c0c","1d1b10","0f243e","244061","632423","4f6128","3f3151","205867","974806"],l=["c00000","ff0000","ffc000","ffff00","92d050","00b050","00b0f0","0070c0","002060","7030a0"],h=[["003366","336699","3366cc","003399","000099","0000cc","000066"],["006666","006699","0099cc","0066cc","0033cc","0000ff","3333ff","333399"],["669999","009999","33cccc","00ccff","0099ff","0066ff","3366ff","3333cc","666699"],["339966","00cc99","00ffcc","00ffff","33ccff","3399ff","6699ff","6666ff","6600ff","6600cc"],["339933","00cc66","00ff99","66ffcc","66ffff","66ccff","99ccff","9999ff","9966ff","9933ff","9900ff"],["006600","00cc00","00ff00","66ff99","99ffcc","ccffff","ccccff","cc99ff","cc66ff","cc33ff","cc00ff","9900cc"],["003300","009933","33cc33","66ff66","99ff99","ccffcc","ffffff","ffccff","ff99ff","ff66ff","ff00ff","cc00cc","660066"],["333300","009900","66ff33","99ff66","ccff99","ffffcc","ffcccc","ff99cc","ff66cc","ff33cc","cc0099","993399"],["336600","669900","99ff33","ccff66","ffff99","ffcc99","ff9999","ff6699","ff3399","cc3399","990099"],["666633","99cc00","ccff33","ffff66","ffcc66","ff9966","ff6666","ff0066","d60094","993366"],["a58800","cccc00","ffff00","ffcc00","ff9933","ff6600","ff0033","cc0066","660033"],["996633","cc9900","ff9900","cc6600","ff3300","ff0000","cc0000","990033"],["663300","996600","cc3300","993300","990000","800000","993333"]],d=function(t){var e=t.toString(16);return 1==e.length&&(e="0"+e),e},p=function(t){return d(Number(t))},v=function(t){var e=d(t);return e+e+e},u=function(t){if(t.length>10){var e=1+t.indexOf("("),o=t.indexOf(")"),i=t.substring(e,o).split(",");return["#",p(i[0]),p(i[1]),p(i[2])].join("")}return t};t.widget("evol.colorpicker",{version:"3.3.1",options:{color:null,customTheme:null,showOn:"both",hideButton:!1,displayIndicator:!0,transparentColor:!1,history:!0,defaultPalette:"theme",strings:"Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet."},_active:!1,_create:function(){var e=this;switch(this._paletteIdx="theme"==this.options.defaultPalette?1:2,this._id="evo-cp"+o++,this._enabled=!0,this.options.showOn=this.options.hideButton?"focus":this.options.showOn,this.element.get(0).tagName){case"INPUT":var i=this.options.color,c=this.element,a=("focus"===this.options.showOn?"":"evo-pointer ")+"evo-colorind"+(n?"-ff":f)+(this.options.hideButton?" evo-hidden-button":""),r="";this._isPopup=!0,this._palette=null;var l=c.val();null!==i?i!=l&&c.val(i).change():""!==l&&(i=this.options.color=l),"#0000ffff"===i?a+=" evo-transparent":r=null!==i?"background-color:"+i:"",c.addClass("colorPicker "+this._id).wrap('<div style="width:'+(this.options.hideButton?this.element.width():this.element.width()+32)+"px;"+(s?"margin-bottom:-21px;":"")+(n?"padding:1px 0;":"")+'" class="evo-cp-wrap"></div>').after('<div class="'+a+'" style="'+r+'"></div>').on("keyup onpaste",function(o){var i=t(this).val();i!=e.options.color&&e._setValue(i,!0)});var h=this.options.showOn;"both"!==h&&"focus"!==h||c.on("focus",function(){e.showPalette()}),"both"!==h&&"button"!==h||c.next().on("click",function(t){return t.stopPropagation(),e.showPalette(),!1});break;default:this._isPopup=!1,this._palette=this.element.html(this._paletteHTML()).attr("aria-haspopup","true"),this._bindColors()}if(this.options.history&&(i&&this._add2History(i),this.options.initialHistory)){var d=this.options.initialHistory;for(var p in d)this._add2History(d[p])}},_paletteHTML:function(){var t=this._paletteIdx=Math.abs(this._paletteIdx),e=this.options,o=e.strings.split(","),i='<div class="evo-pop'+f+' ui-widget ui-widget-content ui-corner-all"'+(this._isPopup?' style="position:absolute"':"")+"><span>"+this["_paletteHTML"+t]()+'</span><div class="evo-more"><a href="javascript:void(0)">'+o[1+t]+"</a>";return e.history&&(i+='<a href="javascript:void(0)" class="evo-hist">'+o[5]+"</a>"),i+="</div>",e.displayIndicator&&(i+=this._colorIndHTML(this.options.color)+this._colorIndHTML("")),i+="</div>"},_colorIndHTML:function(t){var e=s?"evo-colorbox-ie ":"",o="";return t?"#0000ffff"===t?e+="evo-transparent":o="background-color:"+t:o="display:none",'<div class="evo-color" style="float:left"><div style="'+o+'" class="'+e+'"></div><span>'+(t||"")+"</span></div>"},_paletteHTML1:function(){var t,e=this.options,o=e.strings.split(","),i='<td style="background-color:',n=s?'"><div style="width:2px;"></div></td>':'"><span/></td>',c='<tr><th colspan="10" class="ui-widget-content">',h='<table class="evo-palette'+f+'">'+c+o[0]+"</th></tr><tr>";if(e.customTheme)for(t=0,ml=e.customTheme.length;t<ml;t++)h+=i+e.customTheme[t]+n;else{for(i+="#",t=0;t<10;t++)h+=i+a[t]+n;for(h+="</tr>",s||(h+='<tr><th colspan="10"></th></tr>'),h+='<tr class="top">',t=0;t<10;t++)h+=i+r[t]+n;for(var d=1;d<4;d++)for(h+='</tr><tr class="in">',t=0;t<10;t++)h+=i+r[10*d+t]+n;for(h+='</tr><tr class="bottom">',t=40;t<50;t++)h+=i+r[t]+n;for(h+="</tr>"+c,e.transparentColor&&(h+='<div class="evo-transparent evo-tr-box"></div>'),h+=o[1]+"</th></tr><tr>",t=0;t<10;t++)h+=i+l[t]+n}return h+="</tr></table>"},_paletteHTML2:function(){for(var t,e,o='<td style="background-color:#',i=s?'"><div style="width:5px;"></div></td>':'"><span/></td>',n='<table class="evo-palette2'+f+'"><tr>',c='<div class="evo-palcenter">',a=0,r=h.length;a<r;a++){c+=n;var l=h[a];for(t=0,e=l.length;t<e;t++)c+=o+l[t]+i;c+="</tr></table>"}c+='<div class="evo-sep"/>';var d="";for(c+=n,t=255;t>10;t-=10)c+=o+v(t)+i,d+=o+v(t-=10)+i;return c+="</tr></table>"+n+d+"</tr></table></div>"},_switchPalette:function(e){if(this._enabled){var o,i,s,f=this.options,n=f.strings.split(",");if(t(e).hasClass("evo-hist")){var a='<table class="evo-palette"><tr><th class="ui-widget-content">'+n[5]+'</th></tr></tr></table><div class="evo-cHist">';if(0===c.length)a+="<p>&nbsp;"+n[6]+"</p>";else for(var r=c.length-1;r>-1;r--)9===c[r].length?f.transparentColor&&(a+='<div class="evo-transparent"></div>'):a+='<div style="background-color:'+c[r]+'"></div>';a+="</div>",o=-this._paletteIdx,i=a,s=n[4]}else this._paletteIdx<0?(o=-this._paletteIdx,this._palette.find(".evo-hist").show()):o=2==this._paletteIdx?1:2,i=this["_paletteHTML"+o](),s=n[o+1],this._paletteIdx=o;this._paletteIdx=o;var l=this._palette.find(".evo-more").prev().html(i).end().children().eq(0).html(s);o<0&&l.next().hide()}},_downOrUpPositioning:function(){for(var t=this.element,e=0;null!==t&&e<100;){if("visible"!=t.css("overflow")){var o=this._palette.offset().top+this._palette.height(),i=t.offset().top+t.height(),s=this._palette.offset().top-this._palette.height()-this.element.outerHeight(),f=t.offset().top;o>i&&s>f?this._palette.css({bottom:this.element.outerHeight()+"px"}):this._palette.css({bottom:"auto"});break}if("HTML"==t[0].tagName)break;t=t.offsetParent(),e++}},showPalette:function(){if(this._enabled&&(this._active=!0,t(".colorPicker").not("."+this._id).colorpicker("hidePalette"),null===this._palette)){this._palette=this.element.next().after(this._paletteHTML()).next().on("click",function(t){return t.stopPropagation(),!1}),this._bindColors();var e=this;this._isPopup&&(this._downOrUpPositioning(),t(document.body).on("click."+e._id,function(t){t.target!=e.element.get(0)&&e.hidePalette()}).on("keyup."+e._id,function(t){27===t.keyCode&&e.hidePalette()}))}return this},hidePalette:function(){if(this._isPopup&&this._palette){t(document.body).off("click."+this._id);var e=this;this._palette.off("mouseover click","td,.evo-transparent").fadeOut(function(){e._palette.remove(),e._palette=e._cTxt=null}).find(".evo-more a").off("click")}return this},_bindColors:function(){var e=this,o=this.options,i=this._palette.find("div.evo-color"),s=o.history?"td,.evo-cHist>div":"td";o.transparentColor&&(s+=",.evo-transparent"),this._cTxt1=i.eq(0).children().eq(0),this._cTxt2=i.eq(1).children().eq(0),this._palette.on("click",s,function(o){if(e._enabled){var i=t(this);e._setValue(i.hasClass("evo-transparent")?"#0000ffff":u(i.attr("style").substring(17))),e._active=!1}}).on("mouseover",s,function(o){if(e._enabled){var i=t(this),s=i.hasClass("evo-transparent")?"#0000ffff":u(i.attr("style").substring(17));e.options.displayIndicator&&e._setColorInd(s,2),e._active&&e.element.trigger("mouseover.color",s)}}).find(".evo-more a").on("click",function(){e._switchPalette(this)})},val:function(t){return void 0===t?this.options.color:(this._setValue(t),this)},_setValue:function(t,e){t=t.replace(/ /g,""),this.options.color=t,this._isPopup?(e||this.hidePalette(),this._setBoxColor(this.element.val(t).change().next(),t)):this._setColorInd(t,1),this.options.history&&this._paletteIdx>0&&this._add2History(t),this.element.trigger("change.color",t)},_setColorInd:function(t,e){var o=this["_cTxt"+e];this._setBoxColor(o,t),o.next().html(t)},_setBoxColor:function(t,e){"#0000ffff"===e?t.addClass("evo-transparent").removeAttr("style"):t.removeClass("evo-transparent").attr("style","background-color:"+e)},_setOption:function(t,e){"color"==t?this._setValue(e,!0):this.options[t]=e},_add2History:function(t){for(var e=c.length,o=0;o<e;o++)if(t==c[o])return;e>27&&c.shift(),c.push(t)},clear:function(){this.hidePalette().val("")},enable:function(){var t=this.element;return this._isPopup?t.removeAttr("disabled"):t.css({opacity:"1","pointer-events":"auto"}),"focus"!==this.options.showOn&&this.element.next().addClass("evo-pointer"),t.removeAttr("aria-disabled"),this._enabled=!0,this},disable:function(){var t=this.element;return this._isPopup?t.attr("disabled","disabled"):(this.hidePalette(),t.css({opacity:"0.3","pointer-events":"none"})),"focus"!==this.options.showOn&&this.element.next().removeClass("evo-pointer"),t.attr("aria-disabled","true"),this._enabled=!1,this},isDisabled:function(){return!this._enabled},destroy:function(){t(document.body).off("click."+this._id),this._palette&&(this._palette.off("mouseover click","td,.evo-cHist>div,.evo-transparent").find(".evo-more a").off("click"),this._isPopup&&this._palette.remove(),this._palette=this._cTxt=null),this._isPopup&&this.element.next().off("click").remove().end().off("focus").unwrap(),this.element.removeClass("colorPicker "+this.id).empty(),t.Widget.prototype.destroy.call(this)}})}(jQuery);

},{}],6:[function(require,module,exports){
!function(e){"use strict";var r=function(e,r){var t=new Error(e+" at character "+r);throw t.index=r,t.description=e,t},t={"-":!0,"!":!0,"~":!0,"+":!0},n={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},o=function(e){var r,t=0;for(var n in e)(r=n.length)>t&&e.hasOwnProperty(n)&&(t=r);return t},i=o(t),a=o(n),u={true:!0,false:!1,null:null},s=function(e){return n[e]||0},p=function(e,r,t){return{type:"||"===e||"&&"===e?"LogicalExpression":"BinaryExpression",operator:e,left:r,right:t}},f=function(e){return e>=48&&e<=57},c=function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=128&&!n[String.fromCharCode(e)]},l=function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||e>=128&&!n[String.fromCharCode(e)]},d=function(e){for(var o,d,h=0,v=e.charAt,x=e.charCodeAt,y=function(r){return v.call(e,r)},m=function(r){return x.call(e,r)},b=e.length,E=function(){for(var e=m(h);32===e||9===e||10===e||13===e;)e=m(++h)},g=function(){var e,t,n=w();return E(),63!==m(h)?n:(h++,(e=g())||r("Expected expression",h),E(),58===m(h)?(h++,(t=g())||r("Expected expression",h),{type:"ConditionalExpression",test:n,consequent:e,alternate:t}):void r("Expected :",h))},C=function(){E();for(var r=e.substr(h,a),t=r.length;t>0;){if(n.hasOwnProperty(r))return h+=t,r;r=r.substr(0,--t)}return!1},w=function(){var e,t,n,o,i,a,u,f;if(a=O(),!(t=C()))return a;for(i={value:t,prec:s(t)},(u=O())||r("Expected expression after "+t,h),o=[a,i,u];(t=C())&&0!==(n=s(t));){for(i={value:t,prec:n};o.length>2&&n<=o[o.length-2].prec;)u=o.pop(),t=o.pop().value,a=o.pop(),e=p(t,a,u),o.push(e);(e=O())||r("Expected expression after "+t,h),o.push(i,e)}for(e=o[f=o.length-1];f>1;)e=p(o[f-1].value,o[f-2],e),f-=2;return e},O=function(){var r,n,o;if(E(),r=m(h),f(r)||46===r)return U();if(39===r||34===r)return k();if(91===r)return S();for(o=(n=e.substr(h,i)).length;o>0;){if(t.hasOwnProperty(n))return h+=o,{type:"UnaryExpression",operator:n,argument:O(),prefix:!0};n=n.substr(0,--o)}return!(!c(r)&&40!==r)&&A()},U=function(){for(var e,t,n="";f(m(h));)n+=y(h++);if(46===m(h))for(n+=y(h++);f(m(h));)n+=y(h++);if("e"===(e=y(h))||"E"===e){for(n+=y(h++),"+"!==(e=y(h))&&"-"!==e||(n+=y(h++));f(m(h));)n+=y(h++);f(m(h-1))||r("Expected exponent ("+n+y(h)+")",h)}return t=m(h),c(t)?r("Variable names cannot start with a number ("+n+y(h)+")",h):46===t&&r("Unexpected period",h),{type:"Literal",value:parseFloat(n),raw:n}},k=function(){for(var e,t="",n=y(h++),o=!1;h<b;){if((e=y(h++))===n){o=!0;break}if("\\"===e)switch(e=y(h++)){case"n":t+="\n";break;case"r":t+="\r";break;case"t":t+="\t";break;case"b":t+="\b";break;case"f":t+="\f";break;case"v":t+="\v";break;default:t+=e}else t+=e}return o||r('Unclosed quote after "'+t+'"',h),{type:"Literal",value:t,raw:n+t+n}},L=function(){var t,n=m(h),o=h;for(c(n)?h++:r("Unexpected "+y(h),h);h<b&&(n=m(h),l(n));)h++;return t=e.slice(o,h),u.hasOwnProperty(t)?{type:"Literal",value:u[t],raw:t}:"this"===t?{type:"ThisExpression"}:{type:"Identifier",name:t}},j=function(e){for(var t,n,o=[],i=!1;h<b;){if(E(),(t=m(h))===e){i=!0,h++;break}44===t?h++:((n=g())&&"Compound"!==n.type||r("Expected comma",h),o.push(n))}return i||r("Expected "+String.fromCharCode(e),h),o},A=function(){var e,t;for(t=40===(e=m(h))?P():L(),E(),e=m(h);46===e||91===e||40===e;)h++,46===e?(E(),t={type:"MemberExpression",computed:!1,object:t,property:L()}):91===e?(t={type:"MemberExpression",computed:!0,object:t,property:g()},E(),93!==(e=m(h))&&r("Unclosed [",h),h++):40===e&&(t={type:"CallExpression",arguments:j(41),callee:t}),E(),e=m(h);return t},P=function(){h++;var e=g();if(E(),41===m(h))return h++,e;r("Unclosed (",h)},S=function(){return h++,{type:"ArrayExpression",elements:j(93)}},B=[];h<b;)59===(o=m(h))||44===o?h++:(d=g())?B.push(d):h<b&&r('Unexpected "'+y(h)+'"',h);return 1===B.length?B[0]:{type:"Compound",body:B}};if(d.version="0.3.3",d.toString=function(){return"JavaScript Expression Parser (JSEP) v"+d.version},d.addUnaryOp=function(e){return i=Math.max(e.length,i),t[e]=!0,this},d.addBinaryOp=function(e,r){return a=Math.max(e.length,a),n[e]=r,this},d.addLiteral=function(e,r){return u[e]=r,this},d.removeUnaryOp=function(e){return delete t[e],e.length===i&&(i=o(t)),this},d.removeAllUnaryOps=function(){return t={},i=0,this},d.removeBinaryOp=function(e){return delete n[e],e.length===a&&(a=o(n)),this},d.removeAllBinaryOps=function(){return n={},a=0,this},d.removeLiteral=function(e){return delete u[e],this},d.removeAllLiterals=function(){return u={},this},"undefined"==typeof exports){var h=e.jsep;e.jsep=d,d.noConflict=function(){return e.jsep===d&&(e.jsep=h),d}}else"undefined"!=typeof module&&module.exports?exports=module.exports=d:exports.parse=d}(this);

},{}],7:[function(require,module,exports){
"use strict";var utils=require("./utils");module.exports=function(e){function t(t,n,s){s=s||{};var o=utils.parseCSS(n),a=[],i="style";if(s.styleAttributeName&&(i=s.styleAttributeName),o.forEach(function(n){for(var o,l=n[0],u=n[1],p=new utils.Selector(l),c=p.parsed(),f=function(e){if(0===e.length)return;var t=e[e.length-1].pseudos;if(!t)return;for(var n=0;n<t.length;n++)if(r(t[n]))return t[n].name}(c),d=0;d<c.length;++d){var v=c[d];if(v.pseudos)for(var m=0;m<v.pseudos.length;++m){var y=v.pseudos[m];if(e.ignoredPseudos.indexOf(y.name)>=0)return}}if(f){var h=c[c.length-1],g=h.pseudos;h.pseudos=function(e){return e.filter(function(e){return!r(e)})}(h.pseudos),l=c.toString(),h.pseudos=g}try{o=t(l)}catch(e){return}o.each(function(){var r=this;if(!(r.name&&e.nonVisualElements.indexOf(r.name.toUpperCase())>=0)){if(f){var n="pseudo"+f,o=r[n];o||((o=r[n]=t("<span />").get(0)).pseudoElementType=f,o.pseudoElementParent=r,r[n]=o),r=o}if(!r.styleProps){if(r.styleProps={},t(r).attr(i)){var l="* { "+t(r).attr(i)+" } ";c(utils.parseCSS(l)[0][1],new utils.Selector("<style>",!0))}a.push(r)}c(u,p)}function c(t,n){for(var o=0,a=t.length;o<a;o++)if("property"==t[o].type){var i=t[o].name,l=t[o].value,u=null!==t[o].value.match(/!important$/);u&&!s.preserveImportant&&(l=l.replace(/\s*!important$/,""));var p=[t[o].position.start.line,t[o].position.start.col],c=new utils.Property(i,l,n,u?2:0,p),f=r.styleProps[i];e.excludedProperties.indexOf(i)<0&&(f&&f.compare(c)===c||!f)&&(f&&f.selector!==n?delete r.styleProps[i]:f&&(c.nextProp=f),r.styleProps[i]=c)}}})}),a.forEach(function(e){Object.keys(e.styleProps).length;var r=[];Object.keys(e.styleProps).forEach(function(t){for(var n=e.styleProps[t];void 0!==n;)r.push(n),n=n.nextProp}),r.sort(function(e,t){return e.compareFunc(t)});var n=r.filter(function(e){return"content"!==e.prop}).map(function(e){return e.prop+": "+e.value.replace(/["]/g,"'")+";"}).join(" ");n&&t(e).attr(i,n)}),s.inlinePseudoElements&&a.forEach(function(e){if(e.pseudoElementType&&e.styleProps.content){var r=function(e){if("none"===e||"normal"===e)return"";var t=e.match(/^\s*url\s*\(\s*(.*?)\s*\)\s*$/i);if(t){var r=t[1].replace(/^['"]|['"]$/g,"");return{img:r}}return e=(e=e.slice(1,e.length-1)).replace(/\\/g,"")}(e.styleProps.content.value);r.img?(e.name="img",t(e).attr("src",r.img)):t(e).text(r);var n=e.pseudoElementParent;"before"===e.pseudoElementType?t(n).prepend(e):t(n).append(e)}}),s.applyWidthAttributes&&a.forEach(function(e){p(e,"width")}),s.applyHeightAttributes&&a.forEach(function(e){p(e,"height")}),s.applyAttributesTableElements&&a.forEach(function(r){if(!r.name)return;var n=r.name.toUpperCase(),s=Object.keys(e.styleToAttribute);if(e.tableElements.indexOf(n)>-1)for(var o in r.styleProps)if(s.indexOf(r.styleProps[o].prop)>-1){var a=e.styleToAttribute[r.styleProps[o].prop],i=r.styleProps[o].value;"background"===a&&(i=c(i)),t(r).attr(a,i)}}),s.insertPreservedExtraCss&&s.extraCss){var l=utils.getPreservedText(s.extraCss,{mediaQueries:s.preserveMediaQueries,fontFaces:s.preserveFontFaces});if(l){var u=null;!0!==s.insertPreservedExtraCss?u=t(s.insertPreservedExtraCss):((u=t("head")).length||(u=t("body")),u.length||(u=t.root())),u.first().append("<style>"+l+"</style>")}}function p(r,n){if(r.name){var s=r.name.toUpperCase();if(e[n+"Elements"].indexOf(s)>-1)for(var o in r.styleProps)if(r.styleProps[o].prop===n){if(r.styleProps[o].value.match(/px/)){var a=r.styleProps[o].value.replace("px","");return void t(r).attr(n,a)}if(e.tableElements.indexOf(s)>-1&&r.styleProps[o].value.match(/\%/))return void t(r).attr(n,r.styleProps[o].value)}}}function c(e){return 0!==e.indexOf("url(")?e:e.replace(/^url\((["'])?([^"']+)\1\)$/,"$2")}}function r(e){return"before"===e.name||"after"===e.name}return e.ignoredPseudos=["hover","active","focus","visited","link"],e.widthElements=["TABLE","TD","IMG"],e.heightElements=["TABLE","TD","IMG"],e.tableElements=["TABLE","TD","TH","TR","TD","CAPTION","COLGROUP","COL","THEAD","TBODY","TFOOT"],e.nonVisualElements=["HEAD","TITLE","BASE","LINK","STYLE","META","SCRIPT","NOSCRIPT"],e.styleToAttribute={"background-color":"bgcolor","background-image":"background","text-align":"align","vertical-align":"valign"},e.excludedProperties=[],e.juiceDocument=function(e,r){r=utils.getDefaultOptions(r);var n=function(e,t){return function(e,t){var r,n,s,o=[];return e("style").each(function(){if(1===(r=(s=this).childNodes).length){if(n=r[0].data,t.applyStyleTags&&void 0===e(s).attr("data-embed")&&o.push(n),t.removeStyleTags&&void 0===e(s).attr("data-embed")){var a=utils.getPreservedText(s.childNodes[0].nodeValue,{mediaQueries:t.preserveMediaQueries,fontFaces:t.preserveFontFaces});a?s.childNodes[0].nodeValue=a:e(s).remove()}e(s).removeAttr("data-embed")}}),o}(e,t).join("\n")}(e,r);return n+="\n"+r.extraCss,t(e,n,r),e},e.inlineDocument=t,e};

},{"./utils":10}],8:[function(require,module,exports){
"use strict";module.exports=exports=Property;var utils=require("./utils");function Property(t,r,i,p,o){this.prop=t,this.value=r,this.selector=i,this.priority=p||0,this.additionalPriority=o||[]}Property.prototype.compareFunc=function(t){var r=[];r.push.apply(r,this.selector.specificity()),r.push.apply(r,this.additionalPriority),r[0]+=this.priority;var i=[];return i.push.apply(i,t.selector.specificity()),i.push.apply(i,t.additionalPriority),i[0]+=t.priority,utils.compareFunc(r,i)},Property.prototype.compare=function(t){return 1===this.compareFunc(t)?this:t},Property.prototype.toString=function(){return this.prop+": "+this.value.replace(/['"]+/g,"")+";"};

},{"./utils":10}],9:[function(require,module,exports){
"use strict";var parser=require("slick/parser");function Selector(t,e){this.text=t,this.spec=void 0,this.styleAttribute=e||!1}function parse(t){try{return parser(t)[0]}catch(t){return[]}}module.exports=exports=Selector,Selector.prototype.parsed=function(){return this.tokens||(this.tokens=parse(this.text)),this.tokens},Selector.prototype.specificity=function(){var t=this.styleAttribute;return this.spec||(this.spec=function e(r,s){var i=s||parse(r);var a=[t?1:0,0,0,0];var n=[];for(var o=0;o<i.length;o++){var c=i[o],h=c.pseudos;if(c.id&&a[1]++,c.attributes&&(a[2]+=c.attributes.length),c.classList&&(a[2]+=c.classList.length),c.tag&&"*"!==c.tag&&a[3]++,h){a[3]+=h.length;for(var p=0;p<h.length;p++)"not"===h[p].name&&(n.push(h[p].value),a[3]--)}}for(var u=n.length;u--;)for(var l=e(n[u]),v=4;v--;)a[v]+=l[v];return a}(this.text,this.parsed())),this.spec};

},{"slick/parser":19}],10:[function(require,module,exports){
"use strict";var mensch=require("mensch"),own={}.hasOwnProperty,Selector=require("./selector"),Property=require("./property");exports.Selector=Selector,exports.Property=Property,exports.extract=function(e){for(var t=0,r=[],s="",n=0,o=e.length;n<o;n++){var i=e.charAt(n);t?("]"!==i&&")"!==i||t--,s+=i):","===i?(r.push(s),s=""):("["!==i&&"("!==i||t++,(s.length||","!==i&&"\n"!==i&&" "!==i)&&(s+=i))}return s.length&&r.push(s),r},exports.parseCSS=function(e){for(var t=mensch.parse(e,{position:!0,comments:!0}),r=void 0!==t.stylesheet&&t.stylesheet.rules?t.stylesheet.rules:[],s=[],n=0,o=r.length;n<o;n++)if("rule"==r[n].type)for(var i=r[n],p=i.selectors,l=0,a=p.length;l<a;l++)s.push([p[l],i.declarations]);return s},exports.getPreservedText=function(e,t){for(var r=mensch.parse(e,{position:!0,comments:!0}),s=void 0!==r.stylesheet&&r.stylesheet.rules?r.stylesheet.rules:[],n=[],o=s.length-1;o>=0;o--)(t.fontFaces&&"font-face"===s[o].type||t.mediaQueries&&"media"===s[o].type)&&n.unshift(mensch.stringify({stylesheet:{rules:[s[o]]}},{comments:!1,indentation:"  "})),s[o].position.start;return 0!==n.length&&"\n"+n.join("\n")+"\n"},exports.normalizeLineEndings=function(e){return e.replace(/\r\n/g,"\n").replace(/\n/g,"\r\n")},exports.compareFunc=function(e,t){for(var r=Math.min(e.length,t.length),s=0;s<r;s++)if(e[s]!==t[s])return e[s]>t[s]?1:-1;return e.length-t.length},exports.compare=function(e,t){return 1==exports.compareFunc(e,t)?e:t},exports.extend=function(e,t){for(var r in t)own.call(t,r)&&(e[r]=t[r]);return e},exports.getDefaultOptions=function(e){var t=exports.extend({extraCss:"",insertPreservedExtraCss:!0,applyStyleTags:!0,removeStyleTags:!0,preserveMediaQueries:!0,preserveFontFaces:!0,applyWidthAttributes:!0,applyHeightAttributes:!0,applyAttributesTableElements:!0,url:""},e);return t.webResources=t.webResources||{},t};

},{"./property":8,"./selector":9,"mensch":13}],11:[function(require,module,exports){
(function (global){
!function(e){if("function"==typeof define&&define.amd)define(["knockout","jquery","jquery-ui/ui/widgets/sortable","jquery-ui/ui/widgets/draggable","jquery-ui/ui/widgets/droppable"],e);else if("function"==typeof require&&"object"==typeof exports&&"object"==typeof module){var n="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,t="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null;"undefined"!=typeof window?window.jQuery.ui.sortable:"undefined"!=typeof global&&global.jQuery.ui.sortable,"undefined"!=typeof window?window.jQuery.ui.draggable:"undefined"!=typeof global&&global.jQuery.ui.draggable,"undefined"!=typeof window?window.jQuery.ui.droppable:"undefined"!=typeof global&&global.jQuery.ui.droppable,e(n,t)}else e(window.ko,window.jQuery)}(function(e,n){var t="ko_sortItem",o=e.utils.unwrapObservable,i=e.utils.domData.get,a=e.utils.domData.set,d=n.ui&&n.ui.version,r=d&&d.indexOf("1.6.")&&d.indexOf("1.7.")&&(d.indexOf("1.8.")||"1.8.24"===d),s=function(n,o){e.utils.arrayForEach(n,function(e){1===e.nodeType&&(a(e,t,o),a(e,"ko_parentList",i(e.parentNode,"ko_sortList")))})},l=function(n,t){var i,a={},d=o(n())||{};return d.data?(a[t]=d.data,a.name=d.template):a[t]=n(),e.utils.arrayForEach(["afterAdd","afterRender","as","beforeRemove","includeDestroyed","templateEngine","templateOptions","nodes"],function(n){d.hasOwnProperty(n)?a[n]=d[n]:e.bindingHandlers.sortable.hasOwnProperty(n)&&(a[n]=e.bindingHandlers.sortable[n])}),"foreach"===t&&(a.afterRender?(i=a.afterRender,a.afterRender=function(e,n){s.call(n,e,n),i.call(n,e,n)}):a.afterRender=s),a},u=function(e,n){var t=o(n);if(t)for(var i=0;i<e;i++)t[i]&&o(t[i]._destroy)&&e++;return e};e.bindingHandlers.sortable={init:function(d,s,c,p,f){var b,g,m=n(d),v=o(s())||{},y=l(s,"foreach"),h={};!function(t,o){var i,a;o?(a=document.getElementById(o))&&(i=new e.templateSources.domElement(a)).text(n.trim(i.text())):n(t).contents().each(function(){this&&1!==this.nodeType&&t.removeChild(this)})}(d,y.name),n.extend(!0,h,e.bindingHandlers.sortable),v.options&&h.options&&(e.utils.extend(h.options,v.options),delete v.options),e.utils.extend(h,v),h.connectClass&&(e.isObservable(h.allowDrop)||"function"==typeof h.allowDrop)?e.computed({read:function(){var n=o(h.allowDrop),t="function"==typeof n?n.call(this,y.foreach):n;e.utils.toggleDomNodeCssClass(d,h.connectClass,t)},disposeWhenNodeIsRemoved:d},this):e.utils.toggleDomNodeCssClass(d,h.connectClass,h.allowDrop),e.bindingHandlers.template.init(d,function(){return y},c,p,f),b=h.options.start,g=h.options.update,h.options.helper||(h.options.helper=function(e,t){return t.is("tr")&&t.children().each(function(){n(this).width(n(this).width())}),t});var w=setTimeout(function(){var s,l=h.options.receive;m.sortable(e.utils.extend(h.options,{start:function(n,t){var o=t.item[0];a(o,"ko_sourceIndex",e.utils.arrayIndexOf(t.item.parent().children(),o)),t.item.find("input:focus").change(),b&&b.apply(this,arguments)},receive:function(e,n){"function"==typeof l&&l.call(this,e,n),(s=i(n.item[0],"ko_dragItem"))&&(s.clone&&(s=s.clone()),h.dragged&&(s=h.dragged.call(this,s,e,n)||s))},update:function(d,l){var c,p,f,b,m,v=l.item[0],w=l.item.parent()[0],D=i(v,t)||s;if(D||n(v).remove(),s=null,D&&this===w||!r&&n.contains(this,w)){if(c=i(v,"ko_parentList"),f=i(v,"ko_sourceIndex"),p=i(v.parentNode,"ko_sortList"),b=e.utils.arrayIndexOf(l.item.parent().children(),v),y.includeDestroyed||(f=u(f,c),b=u(b,p)),(h.beforeMove||h.afterMove)&&(m={item:D,sourceParent:c,sourceParentNode:c&&l.sender||v.parentNode,sourceIndex:f,targetParent:p,targetIndex:b,cancelDrop:!1},h.beforeMove&&h.beforeMove.call(this,m,d,l)),c?n(c===p?this:l.sender||this).sortable("cancel"):n(v).remove(),m&&m.cancelDrop)return;if(h.hasOwnProperty("strategyMove")&&!1!==h.strategyMove){if(b>=0)if(c)if(c!==p)c.splice(f,1),p.splice(b,0,D),a(v,t,null),l.item.remove();else{var k=o(c);c.valueWillMutate&&c.valueWillMutate(),k.splice(f,1),k.splice(b,0,D),c.valueHasMutated&&c.valueHasMutated()}else p.splice(b,0,D),a(v,t,null),l.item.remove()}else b>=0&&(c&&(c.splice(f,1),e.processAllDeferredBindingUpdates&&e.processAllDeferredBindingUpdates(),e.options&&e.options.deferUpdates&&e.tasks.runEarly()),p.splice(b,0,D)),a(v,t,null);e.processAllDeferredBindingUpdates&&e.processAllDeferredBindingUpdates(),h.afterMove&&h.afterMove.call(this,m,d,l)}g&&g.apply(this,arguments)},connectWith:!!h.connectClass&&"."+h.connectClass})),void 0!==h.isEnabled&&e.computed({read:function(){m.sortable(o(h.isEnabled)?"enable":"disable")},disposeWhenNodeIsRemoved:d})},0);return e.utils.domNodeDisposal.addDisposeCallback(d,function(){(m.data("ui-sortable")||m.data("sortable"))&&m.sortable("destroy"),e.utils.toggleDomNodeCssClass(d,h.connectClass,!1),clearTimeout(w)}),{controlsDescendantBindings:!0}},update:function(n,t,o,i,d){var r=l(t,"foreach");a(n,"ko_sortList",r.foreach),e.bindingHandlers.template.update(n,function(){return r},o,i,d)},connectClass:"ko_container",allowDrop:!0,afterMove:null,beforeMove:null,options:{}},e.bindingHandlers.draggable={init:function(t,i,d,r,s){var u=o(i())||{},c=u.options||{},p=e.utils.extend({},e.bindingHandlers.draggable.options),f=l(i,"data"),b=u.connectClass||e.bindingHandlers.draggable.connectClass,g=void 0!==u.isEnabled?u.isEnabled:e.bindingHandlers.draggable.isEnabled;return u="data"in u?u.data:u,a(t,"ko_dragItem",u),e.utils.extend(p,c),p.connectToSortable=!!b&&"."+b,n(t).draggable(p),void 0!==g&&e.computed({read:function(){n(t).draggable(o(g)?"enable":"disable")},disposeWhenNodeIsRemoved:t}),e.utils.domNodeDisposal.addDisposeCallback(t,function(){n(t).draggable("destroy")}),e.bindingHandlers.template.init(t,function(){return f},d,r,s)},update:function(n,t,o,i,a){var d=l(t,"data");return e.bindingHandlers.template.update(n,function(){return d},o,i,a)},connectClass:e.bindingHandlers.sortable.connectClass,options:{helper:"clone"}},e.bindingHandlers.droppable={init:function(a,d,r,s,l){var u=o(d())||{},c=u.options||{},p=e.utils.extend({},e.bindingHandlers.droppable.options),f=void 0!==u.isEnabled?u.isEnabled:e.bindingHandlers.droppable.isEnabled;e.utils.extend(p,c),u="data"in u?u.data:d(),p.drop=function(e,n){var o=i(n.draggable[0],"ko_dragItem")||i(n.draggable[0],t);u(o)},n(a).droppable(p),void 0!==f&&e.computed({read:function(){n(a).droppable(o(f)?"enable":"disable")},disposeWhenNodeIsRemoved:a}),e.utils.domNodeDisposal.addDisposeCallback(a,function(){n(a).droppable("destroy")})},options:{accept:"*"}}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],12:[function(require,module,exports){
(function (global){
!function(e){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?e("undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null):"function"==typeof define&&define.amd?define(["knockout"],e):e(window.ko)}(function(e){e.subscribable.fn.watch=function(t,a,n,o){var r=typeof t;return"boolean"===r||"undefined"===r?e.watch(this,{enabled:!1!==t}):"function"!==r||e.isSubscribable(t)?e.watch(t,a,n,o||this):e.watch(this,a||{},t,o||this),this},e.watch=function(t,a,n,o){function r(l,c,f,u,s,b){if(l&&0!==a.depth&&(-1===a.depth||f.length<(a.depth||1))){if(a.watchedOnly&&!l.watchable&&l!=t)return;if(!1!==a.enabled&&!0!==a.enabled||(l.watchable=a.enabled),!1===l.watchable)return;!0===a.seal&&(l.watchable=!1);var d=typeof l;if("object"===d||"function"===d){if(l._watcher===o)return;if(a.hide&&e.utils.arrayIndexOf(a.hide,l)>-1)return;var h=[].concat(f,c&&c!==t?c:[]);if("function"!==d){if("[object Object]"===Object.prototype.toString.call(l))e.utils.objectForEach(l,function(t,n){if(n=a.getter?a.getter.call(o,h,l,t):n){if(a.wrap){var i=Object.prototype.toString.call(n);"[object Function]"!==i&&"[object Object]"!==i&&(a.beforeWrap&&!1===a.beforeWrap.call(o,h,l,n)||(n=l[t]="[object Array]"===i?e.observableArray(n):e.observable(n)))}a.unloop&&(n._watcher=u?void 0:o);var c=r(n,s?null:l,h,u,null,t);a.tagFields&&void 0===n._fieldName&&(c||"parentsOnly"!==a.tagFields&&"function"==typeof n||"object"==typeof n)&&(n._fieldName=t)}});else if(!0!==a.hideArrays)for(var p=0;p<l.length;p++)r(l[p],s?null:l,h,u);return!0}if("function"==typeof l.notifySubscribers&&n){if(!0===a.enabled&&!1===l.watchable)return;if(u||!a.beforeWatch||!1!==a.beforeWatch.call(o,h,l,b)){var y="function"==typeof l.pop;if(u?i(l):function(t,i,l,c){i?t.subscribe(function(i){var f;!1===a.splitArrayChanges&&void 0!==(f=n.call(o,l,t,i))&&o(f),e.utils.arrayForEach(i,function(e){if(!1!==a.splitArrayChanges){var i=n.call(o,l,t,e);void 0!==i&&o(i)}e.moved||(!1===a.async?r(e.value,c?null:t,l,"deleted"===e.status):setTimeout(function(){r(e.value,c?null:t,l,"deleted"===e.status)}))})},void 0,"arrayChange")._watcher=o:(t.subscribe(function(){if(!1!==t.watchable){var e=n.call(o,l,t);void 0!==e&&o(e),a.mutable&&"object"==typeof t()&&(!1===a.async?r(t(),c?null:t,l,!1,!0):setTimeout(function(){r(t(),c?null:t,l,!1,!0)}))}},null,"change")._watcher=o,(a.oldValues>0||a.mutable)&&(t.subscribe(function(e){if(a.oldValues>0){var n=t.oldValues?t.oldValues:t.oldValues=[];for(n.unshift(e);n.length>a.oldValues;)n.pop()}a.mutable&&"object"==typeof e&&r(e,c?null:t,l,!0,!0)},null,"beforeChange")._watcher=o))}(l,y,h,s),y)return r(l(),s?null:l,h,u,!0),!0;if(!0!==a.hideWrappedValues)return r(l(),s?null:l,h,u,!0)}}}}}function i(e){var t=e[l];if(!t)throw"Subscriptions field (."+l+") not defined for observable child "+(e._fieldName||"");if(t.change)for(n=t.change.length-1;n>=0;n--)t.change[n]._watcher===o&&t.change[n].dispose();if(t.beforeChange&&(a.mutable||a.oldValues>0))for(n=t.beforeChange.length-1;n>=0;n--)t.beforeChange[n]._watcher===o&&t.beforeChange[n].dispose();if(t.arrayChange)for(var n=t.arrayChange.length-1;n>=0;n--)t.arrayChange[n]._watcher===o&&t.arrayChange[n].dispose()}var l;switch("function"==typeof a&&(o=o||n,n=a,a={}),o=o||this,"function"==typeof e.subscription||e.version){case!0:l="_subscriptions";break;case"3.0.0":l="F";break;case"3.1.0":l="H";break;case"3.2.0":l="M";break;case"3.3.0":l="G";break;case"3.4.0":case"3.4.1":l="K";break;case"3.4.2":l="F";break;case"3.5.0-beta":l="S";break;default:throw"Unsupported Knockout version. Only v3.0.0 to v3.5.0-beta are supported when minified. Current version is "+e.version}return"function"!=typeof t||e.isSubscribable(t)?(r(t,null,[]),{dispose:function(){r(t,null,[],!0)}}):e.computed(t,n,a)}}),window.foo="1.4.0";

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],13:[function(require,module,exports){
module.exports={lex:require("./lib/lexer"),parse:require("./lib/parser"),stringify:require("./lib/stringify")};

},{"./lib/lexer":15,"./lib/parser":16,"./lib/stringify":17}],14:[function(require,module,exports){
(function (process){
function debug(e){return _debug.bind(null,e)}function _debug(e){var n=[].slice.call(arguments,1);n.unshift("["+e+"]"),process.stderr.write(n.join(" ")+"\n")}exports=module.exports=debug;

}).call(this,require('_process'))

},{"_process":18}],15:[function(require,module,exports){
var DEBUG=!1,TIMER=!1,debug=require("./debug")("lex");function lex(e){var a,r,s="",t=0,c=-1,n=0,l=1,o="before-selector",u=[o],i={},b=[],f=["media","keyframes",{name:"-webkit-keyframes",type:"keyframes",prefix:"-webkit-"},{name:"-moz-keyframes",type:"keyframes",prefix:"-moz-"},{name:"-ms-keyframes",type:"keyframes",prefix:"-ms-"},{name:"-o-keyframes",type:"keyframes",prefix:"-o-"},"font-face",{name:"import",state:"before-at-value"},{name:"charset",state:"before-at-value"},"supports","viewport",{name:"namespace",state:"before-at-value"},"document",{name:"-moz-document",type:"document",prefix:"-moz-"},"page"];function m(e){return e?u[u.length-1-e]:o}function g(a){var r=c+1;return a===e.slice(r,r+a.length)}function v(a){var r=e.slice(c).indexOf(a);return r>0&&r}function k(e){return e===p(1)}function p(a){return e[c+(a||1)]}function d(){var e=u.pop();return o=u[u.length-1],e}function h(e){return o=e,u.push(o),u.length}function w(e){var a=o;return u[u.length-1]=o=e,a}function y(a){if(1==(a||1))"\n"==e[c]?(l++,t=1):t++,c++;else{var r=e.slice(c,c+a).split("\n");r.length>1&&(l+=r.length-1,t=1),t+=r[r.length-1].length,c+=a}}function x(){i.end={line:l,col:t},DEBUG&&debug("addToken:",JSON.stringify(i,null,2)),b.push(i),s="",i={}}function E(e){i={type:e,start:{line:l,col:t}}}for(TIMER&&(a=Date.now());y(),r=e[c];)switch(DEBUG&&debug(r,m()),r){case" ":switch(m()){case"selector":case"value":case"value-paren":case"at-group":case"at-value":case"comment":case"double-string":case"single-string":s+=r}break;case"\n":case"\t":case"\r":case"\f":switch(m()){case"value":case"value-paren":case"at-group":case"comment":case"single-string":case"double-string":case"selector":s+=r;break;case"at-value":"\n"===r&&(i.value=s.trim(),x(),d())}break;case":":switch(m()){case"name":i.name=s.trim(),s="",w("before-value");break;case"before-selector":s+=r,E("selector"),h("selector");break;case"before-value":w("value"),s+=r;break;default:s+=r}break;case";":switch(m()){case"name":case"before-value":case"value":s.trim().length>0&&(i.value=s.trim(),x()),w("before-name");break;case"value-paren":s+=r;break;case"at-value":i.value=s.trim(),x(),d();break;case"before-name":break;default:s+=r}break;case"{":switch(m()){case"selector":if("\\"===p(-1)){s+=r;break}i.text=s.trim(),x(),w("before-name"),n+=1;break;case"at-group":switch(i.name=s.trim(),i.type){case"font-face":case"viewport":case"page":h("before-name");break;default:h("before-selector")}x(),n+=1;break;case"name":case"at-rule":i.name=s.trim(),x(),h("before-name"),n+=1;break;case"comment":case"double-string":case"single-string":s+=r;break;case"before-value":w("value"),s+=r}break;case"}":switch(m()){case"before-name":case"name":case"before-value":case"value":s&&(i.value=s.trim()),i.name&&i.value&&x(),E("end"),x(),d(),"at-group"===m()&&(E("at-group-end"),x(),d()),n>0&&(n-=1);break;case"at-group":case"before-selector":case"selector":if("\\"===p(-1)){s+=r;break}n>0&&"at-group"===m(1)&&(E("at-group-end"),x()),n>1&&d(),n>0&&(n-=1);break;case"double-string":case"single-string":case"comment":s+=r}break;case'"':case"'":switch(m()){case"double-string":'"'===r&&"\\"!==p(-1)&&d();break;case"single-string":"'"===r&&"\\"!==p(-1)&&d();break;case"before-at-value":w("at-value"),h('"'===r?"double-string":"single-string");break;case"before-value":w("value"),h('"'===r?"double-string":"single-string");break;case"comment":break;default:"\\"!==p(-1)&&h('"'===r?"double-string":"single-string")}s+=r;break;case"/":switch(m()){case"comment":case"double-string":case"single-string":s+=r;break;case"before-value":case"selector":case"name":case"value":if(k("*")){var D=v("*/");D&&y(D+1)}else"before-value"==m()&&w("value"),s+=r;break;default:k("*")?(E("comment"),h("comment"),y()):s+=r}break;case"*":switch(m()){case"comment":k("/")?(i.text=s,y(),x(),d()):s+=r;break;case"before-selector":s+=r,E("selector"),h("selector");break;case"before-value":w("value"),s+=r;break;default:s+=r}break;case"@":switch(m()){case"comment":case"double-string":case"single-string":s+=r;break;case"before-value":w("value"),s+=r;break;default:for(var z,T,B=!1,G=0,I=f.length;!B&&G<I;++G)g(z=(T=f[G]).name||T)&&(B=!0,E(z),h(T.state||"at-group"),y(z.length),T.prefix&&(i.prefix=T.prefix),T.type&&(i.type=T.type));B||(s+=r)}break;case"(":switch(m()){case"value":h("value-paren");break;case"before-value":w("value")}s+=r;break;case")":switch(m()){case"value-paren":d();break;case"before-value":w("value")}s+=r;break;default:switch(m()){case"before-selector":E("selector"),h("selector");break;case"before-name":E("property"),w("name");break;case"before-value":w("value");break;case"before-at-value":w("at-value")}s+=r}return TIMER&&debug("ran in",Date.now()-a+"ms"),b}exports=module.exports=lex;

},{"./debug":14}],16:[function(require,module,exports){
var _comments,_depth,_position,_tokens,DEBUG=!1,TIMER=!1,debug=require("./debug")("parse"),lex=require("./lexer");function parse(e,r){var t,s;r||(r={}),_comments=!!r.comments,_position=!!r.position,_depth=0,_tokens=Array.isArray(e)?e.slice():lex(e);var n,a=[];for(TIMER&&(t=Date.now());n=next();)(s=parseToken(n))&&a.push(s);return TIMER&&debug("ran in",Date.now()-t+"ms"),{type:"stylesheet",stylesheet:{rules:a}}}function astNode(e,r){var t;r||(r={});for(var s=["type","name","value"],n={},a=0;a<s.length;++a)e[t=s[a]]&&(n[t]=r[t]||e[t]);for(s=Object.keys(r),a=0;a<s.length;++a)n[t=s[a]]||(n[t]=r[t]);return _position&&(n.position={start:e.start,end:e.end}),DEBUG&&debug("astNode:",JSON.stringify(n,null,2)),n}function next(){var e=_tokens.shift();return DEBUG&&debug("next:",JSON.stringify(e,null,2)),e}function parseAtGroup(e){_depth+=1;var r={};switch(e.type){case"font-face":case"viewport":r.declarations=parseDeclarations();break;case"page":r.prefix=e.prefix,r.declarations=parseDeclarations();break;default:r.prefix=e.prefix,r.rules=parseRules()}return astNode(e,r)}function parseAtImport(e){return astNode(e)}function parseCharset(e){return astNode(e)}function parseComment(e){return astNode(e,{text:e.text})}function parseNamespace(e){return astNode(e)}function parseProperty(e){return astNode(e)}function parseSelector(e){return astNode(e,{type:"rule",selectors:e.text.split(",").map(function(e){return e.trim()}),declarations:parseDeclarations(e)})}function parseToken(e){switch(e.type){case"property":return parseProperty(e);case"selector":return parseSelector(e);case"at-group-end":return void(_depth-=1);case"media":case"keyframes":return parseAtGroup(e);case"comment":if(_comments)return parseComment(e);break;case"charset":return parseCharset(e);case"import":return parseAtImport(e);case"namespace":return parseNamespace(e);case"font-face":case"supports":case"viewport":case"document":case"page":return parseAtGroup(e)}DEBUG&&debug("parseToken: unexpected token:",JSON.stringify(e))}function parseTokensWhile(e){for(var r,t,s=[];(t=next())&&e&&e(t);)(r=parseToken(t))&&s.push(r);return t&&"end"!==t.type&&_tokens.unshift(t),s}function parseDeclarations(){return parseTokensWhile(function(e){return"property"===e.type||"comment"===e.type})}function parseRules(){return parseTokensWhile(function(){return _depth})}exports=module.exports=parse;

},{"./debug":14,"./lexer":15}],17:[function(require,module,exports){
var _comments,_compress,_indentation,_n,_s,DEBUG=!1,TIMER=!1,debug=require("./debug")("stringify");function stringify(e,n){var t;n||(n={}),_indentation=n.indentation||"",_compress=!!n.compress,_comments=!!n.comments,_compress?_n=_s="":(_n="\n",_s=" "),TIMER&&(t=Date.now());var r=reduce(e.stylesheet.rules,stringifyNode).join("\n").trim();return TIMER&&debug("ran in",Date.now()-t+"ms"),r}function indent(e){if(this.level||(this.level=1),!e)return _compress?"":Array(this.level).join(_indentation||"");this.level+=e}function stringifyAtRule(e){return"@"+e.type+" "+e.value+";"+_n}function stringifyAtGroup(e){var n="",t=e.prefix||"";e.name&&(n=" "+e.name);var r="page"!==e.type;return"@"+t+e.type+n+_s+stringifyBlock(e,r)+_n}function stringifyComment(e){return _comments?"/*"+(e.text||"")+"*/"+_n:""}function stringifyRule(e){var n;return e.selectors?n=e.selectors.join(","+_n):(n="@"+e.type,n+=e.name?" "+e.name:""),indent()+n+_s+stringifyBlock(e)+_n}function reduce(e,n){return e.reduce(function(e,t){var r="comment"===t.type?stringifyComment(t):n(t);return r&&e.push(r),e},[])}function stringifyBlock(e,n){var t=e.declarations,r=stringifyDeclaration;return e.rules&&(t=e.rules,r=stringifyRule),(t=stringifyChildren(t,r))&&(t=_n+t+(n?"":_n)),"{"+t+indent()+"}"}function stringifyChildren(e,n){if(!e)return"";indent(1);var t=reduce(e,n);return indent(-1),t.length?t.join(_n):""}function stringifyDeclaration(e){if("property"===e.type)return stringifyProperty(e);DEBUG&&debug("stringifyDeclaration: unexpected node:",JSON.stringify(e))}function stringifyNode(e){switch(e.type){case"rule":return stringifyRule(e);case"media":case"keyframes":return stringifyAtGroup(e);case"comment":return stringifyComment(e);case"import":case"charset":case"namespace":return stringifyAtRule(e);case"font-face":case"supports":case"viewport":case"document":case"page":return stringifyAtGroup(e)}DEBUG&&debug("stringifyNode: unexpected node: "+JSON.stringify(e))}function stringifyProperty(e){var n=e.name?e.name+":"+_s:"";return indent()+n+e.value+";"}exports=module.exports=stringify;

},{"./debug":14}],18:[function(require,module,exports){
var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],19:[function(require,module,exports){
"use strict";var escapeRe=/([-.*+?^${}()|[\]\/\\])/g,unescapeRe=/\\/g,escape=function(e){return(e+"").replace(escapeRe,"\\$1")},unescape=function(e){return(e+"").replace(unescapeRe,"")},slickRe=RegExp("^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)".replace(/<combinator>/,"["+escape(">+~`!@$%^&={}\\;</")+"]").replace(/<unicode>/g,"(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])").replace(/<unicode1>/g,"(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])")),Part=function(e){this.combinator=e||" ",this.tag="*"};Part.prototype.toString=function(){if(!this.raw){var e,s,t="";if(t+=this.tag||"*",this.id&&(t+="#"+this.id),this.classes&&(t+="."+this.classList.join(".")),this.attributes)for(e=0;s=this.attributes[e++];)t+="["+s.name+(s.operator?s.operator+'"'+s.value+'"':"")+"]";if(this.pseudos)for(e=0;s=this.pseudos[e++];)t+=":"+s.name,s.value&&(t+="("+s.value+")");this.raw=t}return this.raw};var Expression=function(){this.length=0};Expression.prototype.toString=function(){if(!this.raw){for(var e,s="",t=0;e=this[t++];)1!==t&&(s+=" ")," "!==e.combinator&&(s+=e.combinator+" "),s+=e;this.raw=s}return this.raw};var replacer=function(e,s,t,a,r,i,n,c,u,o,p,l,h,f,g,d){var v,w;if((s||!this.length)&&(v=this[this.length++]=new Expression,s))return"";if(v||(v=this[this.length-1]),(t||a||!v.length)&&(w=v[v.length++]=new Part(t)),w||(w=v[v.length-1]),r)w.tag=unescape(r);else if(i)w.id=unescape(i);else if(n){var m=unescape(n),b=w.classes||(w.classes={});if(!b[m]){b[m]=escape(n);var x=w.classList||(w.classList=[]);x.push(m),x.sort()}}else h?(d=d||g,(w.pseudos||(w.pseudos=[])).push({type:1==l.length?"class":"element",name:unescape(h),escapedName:escape(h),value:d?unescape(d):null,escapedValue:d?escape(d):null})):c&&(p=p?escape(p):null,(w.attributes||(w.attributes=[])).push({operator:u,name:unescape(c),escapedName:escape(c),value:p?unescape(p):null,escapedValue:p?escape(p):null}));return""},Expressions=function(e){this.length=0;for(var s,t=this,a=e;e;){if((s=e.replace(slickRe,function(){return replacer.apply(t,arguments)}))===e)throw new Error(a+" is an invalid expression");e=s}};Expressions.prototype.toString=function(){if(!this.raw){for(var e,s=[],t=0;e=this[t++];)s.push(e);this.raw=s.join(", ")}return this.raw};var cache={},parse=function(e){return null==e?null:(e=(""+e).replace(/^\s+|\s+$/g,""),cache[e]||(cache[e]=new Expressions(e)))};module.exports=parse;

},{}],20:[function(require,module,exports){
!function(t){var e=/^\s+/,r=/\s+$/,n=0,a=t.round,i=t.min,s=t.max,o=t.random;function f(o,h){if(o=o||"",h=h||{},o instanceof f)return o;if(!(this instanceof f))return new f(o,h);var u=function(n){var a={r:0,g:0,b:0},o=1,f=null,h=null,u=null,l=!1,c=!1;"string"==typeof n&&(n=function(t){t=t.replace(e,"").replace(r,"").toLowerCase();var n,a=!1;if(H[t])t=H[t],a=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};if(n=O.rgb.exec(t))return{r:n[1],g:n[2],b:n[3]};if(n=O.rgba.exec(t))return{r:n[1],g:n[2],b:n[3],a:n[4]};if(n=O.hsl.exec(t))return{h:n[1],s:n[2],l:n[3]};if(n=O.hsla.exec(t))return{h:n[1],s:n[2],l:n[3],a:n[4]};if(n=O.hsv.exec(t))return{h:n[1],s:n[2],v:n[3]};if(n=O.hsva.exec(t))return{h:n[1],s:n[2],v:n[3],a:n[4]};if(n=O.hex8.exec(t))return{r:M(n[1]),g:M(n[2]),b:M(n[3]),a:z(n[4]),format:a?"name":"hex8"};if(n=O.hex6.exec(t))return{r:M(n[1]),g:M(n[2]),b:M(n[3]),format:a?"name":"hex"};if(n=O.hex4.exec(t))return{r:M(n[1]+""+n[1]),g:M(n[2]+""+n[2]),b:M(n[3]+""+n[3]),a:z(n[4]+""+n[4]),format:a?"name":"hex8"};if(n=O.hex3.exec(t))return{r:M(n[1]+""+n[1]),g:M(n[2]+""+n[2]),b:M(n[3]+""+n[3]),format:a?"name":"hex"};return!1}(n));"object"==typeof n&&(P(n.r)&&P(n.g)&&P(n.b)?(g=n.r,b=n.g,d=n.b,a={r:255*C(g,255),g:255*C(b,255),b:255*C(d,255)},l=!0,c="%"===String(n.r).substr(-1)?"prgb":"rgb"):P(n.h)&&P(n.s)&&P(n.v)?(f=L(n.s),h=L(n.v),a=function(e,r,n){e=6*C(e,360),r=C(r,100),n=C(n,100);var a=t.floor(e),i=e-a,s=n*(1-r),o=n*(1-i*r),f=n*(1-(1-i)*r),h=a%6;return{r:255*[n,o,s,s,f,n][h],g:255*[f,n,n,o,s,s][h],b:255*[s,s,f,n,n,o][h]}}(n.h,f,h),l=!0,c="hsv"):P(n.h)&&P(n.s)&&P(n.l)&&(f=L(n.s),u=L(n.l),a=function(t,e,r){var n,a,i;function s(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}if(t=C(t,360),e=C(e,100),r=C(r,100),0===e)n=a=i=r;else{var o=r<.5?r*(1+e):r+e-r*e,f=2*r-o;n=s(f,o,t+1/3),a=s(f,o,t),i=s(f,o,t-1/3)}return{r:255*n,g:255*a,b:255*i}}(n.h,f,u),l=!0,c="hsl"),n.hasOwnProperty("a")&&(o=n.a));var g,b,d;return o=F(o),{ok:l,format:n.format||c,r:i(255,s(a.r,0)),g:i(255,s(a.g,0)),b:i(255,s(a.b,0)),a:o}}(o);this._originalInput=o,this._r=u.r,this._g=u.g,this._b=u.b,this._a=u.a,this._roundA=a(100*this._a)/100,this._format=h.format||u.format,this._gradientType=h.gradientType,this._r<1&&(this._r=a(this._r)),this._g<1&&(this._g=a(this._g)),this._b<1&&(this._b=a(this._b)),this._ok=u.ok,this._tc_id=n++}function h(t,e,r){t=C(t,255),e=C(e,255),r=C(r,255);var n,a,o=s(t,e,r),f=i(t,e,r),h=(o+f)/2;if(o==f)n=a=0;else{var u=o-f;switch(a=h>.5?u/(2-o-f):u/(o+f),o){case t:n=(e-r)/u+(e<r?6:0);break;case e:n=(r-t)/u+2;break;case r:n=(t-e)/u+4}n/=6}return{h:n,s:a,l:h}}function u(t,e,r){t=C(t,255),e=C(e,255),r=C(r,255);var n,a,o=s(t,e,r),f=i(t,e,r),h=o,u=o-f;if(a=0===o?0:u/o,o==f)n=0;else{switch(o){case t:n=(e-r)/u+(e<r?6:0);break;case e:n=(r-t)/u+2;break;case r:n=(t-e)/u+4}n/=6}return{h:n,s:a,v:h}}function l(t,e,r,n){var i=[I(a(t).toString(16)),I(a(e).toString(16)),I(a(r).toString(16))];return n&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function c(t,e,r,n){return[I(N(n)),I(a(t).toString(16)),I(a(e).toString(16)),I(a(r).toString(16))].join("")}function g(t,e){e=0===e?0:e||10;var r=f(t).toHsl();return r.s-=e/100,r.s=q(r.s),f(r)}function b(t,e){e=0===e?0:e||10;var r=f(t).toHsl();return r.s+=e/100,r.s=q(r.s),f(r)}function d(t){return f(t).desaturate(100)}function _(t,e){e=0===e?0:e||10;var r=f(t).toHsl();return r.l+=e/100,r.l=q(r.l),f(r)}function p(t,e){e=0===e?0:e||10;var r=f(t).toRgb();return r.r=s(0,i(255,r.r-a(-e/100*255))),r.g=s(0,i(255,r.g-a(-e/100*255))),r.b=s(0,i(255,r.b-a(-e/100*255))),f(r)}function m(t,e){e=0===e?0:e||10;var r=f(t).toHsl();return r.l-=e/100,r.l=q(r.l),f(r)}function v(t,e){var r=f(t).toHsl(),n=(r.h+e)%360;return r.h=n<0?360+n:n,f(r)}function y(t){var e=f(t).toHsl();return e.h=(e.h+180)%360,f(e)}function A(t){var e=f(t).toHsl(),r=e.h;return[f(t),f({h:(r+120)%360,s:e.s,l:e.l}),f({h:(r+240)%360,s:e.s,l:e.l})]}function x(t){var e=f(t).toHsl(),r=e.h;return[f(t),f({h:(r+90)%360,s:e.s,l:e.l}),f({h:(r+180)%360,s:e.s,l:e.l}),f({h:(r+270)%360,s:e.s,l:e.l})]}function k(t){var e=f(t).toHsl(),r=e.h;return[f(t),f({h:(r+72)%360,s:e.s,l:e.l}),f({h:(r+216)%360,s:e.s,l:e.l})]}function w(t,e,r){e=e||6,r=r||30;var n=f(t).toHsl(),a=360/r,i=[f(t)];for(n.h=(n.h-(a*e>>1)+720)%360;--e;)n.h=(n.h+a)%360,i.push(f(n));return i}function S(t,e){e=e||6;for(var r=f(t).toHsv(),n=r.h,a=r.s,i=r.v,s=[],o=1/e;e--;)s.push(f({h:n,s:a,v:i})),i=(i+o)%1;return s}f.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var e,r,n,a=this.toRgb();return e=a.r/255,r=a.g/255,n=a.b/255,.2126*(e<=.03928?e/12.92:t.pow((e+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:t.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:t.pow((n+.055)/1.055,2.4))},setAlpha:function(t){return this._a=F(t),this._roundA=a(100*this._a)/100,this},toHsv:function(){var t=u(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=u(this._r,this._g,this._b),e=a(360*t.h),r=a(100*t.s),n=a(100*t.v);return 1==this._a?"hsv("+e+", "+r+"%, "+n+"%)":"hsva("+e+", "+r+"%, "+n+"%, "+this._roundA+")"},toHsl:function(){var t=h(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=h(this._r,this._g,this._b),e=a(360*t.h),r=a(100*t.s),n=a(100*t.l);return 1==this._a?"hsl("+e+", "+r+"%, "+n+"%)":"hsla("+e+", "+r+"%, "+n+"%, "+this._roundA+")"},toHex:function(t){return l(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,r,n,i){var s=[I(a(t).toString(16)),I(a(e).toString(16)),I(a(r).toString(16)),I(N(n))];if(i&&s[0].charAt(0)==s[0].charAt(1)&&s[1].charAt(0)==s[1].charAt(1)&&s[2].charAt(0)==s[2].charAt(1)&&s[3].charAt(0)==s[3].charAt(1))return s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0)+s[3].charAt(0);return s.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:a(this._r),g:a(this._g),b:a(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+a(this._r)+", "+a(this._g)+", "+a(this._b)+")":"rgba("+a(this._r)+", "+a(this._g)+", "+a(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:a(100*C(this._r,255))+"%",g:a(100*C(this._g,255))+"%",b:a(100*C(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+a(100*C(this._r,255))+"%, "+a(100*C(this._g,255))+"%, "+a(100*C(this._b,255))+"%)":"rgba("+a(100*C(this._r,255))+"%, "+a(100*C(this._g,255))+"%, "+a(100*C(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(R[l(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+c(this._r,this._g,this._b,this._a),r=e,n=this._gradientType?"GradientType = 1, ":"";if(t){var a=f(t);r="#"+c(a._r,a._g,a._b,a._a)}return"progid:DXImageTransform.Microsoft.gradient("+n+"startColorstr="+e+",endColorstr="+r+")"},toString:function(t){var e=!!t;t=t||this._format;var r=!1,n=this._a<1&&this._a>=0;return e||!n||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(r=this.toRgbString()),"prgb"===t&&(r=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(r=this.toHexString()),"hex3"===t&&(r=this.toHexString(!0)),"hex4"===t&&(r=this.toHex8String(!0)),"hex8"===t&&(r=this.toHex8String()),"name"===t&&(r=this.toName()),"hsl"===t&&(r=this.toHslString()),"hsv"===t&&(r=this.toHsvString()),r||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return f(this.toString())},_applyModification:function(t,e){var r=t.apply(null,[this].concat([].slice.call(e)));return this._r=r._r,this._g=r._g,this._b=r._b,this.setAlpha(r._a),this},lighten:function(){return this._applyModification(_,arguments)},brighten:function(){return this._applyModification(p,arguments)},darken:function(){return this._applyModification(m,arguments)},desaturate:function(){return this._applyModification(g,arguments)},saturate:function(){return this._applyModification(b,arguments)},greyscale:function(){return this._applyModification(d,arguments)},spin:function(){return this._applyModification(v,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(w,arguments)},complement:function(){return this._applyCombination(y,arguments)},monochromatic:function(){return this._applyCombination(S,arguments)},splitcomplement:function(){return this._applyCombination(k,arguments)},triad:function(){return this._applyCombination(A,arguments)},tetrad:function(){return this._applyCombination(x,arguments)}},f.fromRatio=function(t,e){if("object"==typeof t){var r={};for(var n in t)t.hasOwnProperty(n)&&(r[n]="a"===n?t[n]:L(t[n]));t=r}return f(t,e)},f.equals=function(t,e){return!(!t||!e)&&f(t).toRgbString()==f(e).toRgbString()},f.random=function(){return f.fromRatio({r:o(),g:o(),b:o()})},f.mix=function(t,e,r){r=0===r?0:r||50;var n=f(t).toRgb(),a=f(e).toRgb(),i=r/100;return f({r:(a.r-n.r)*i+n.r,g:(a.g-n.g)*i+n.g,b:(a.b-n.b)*i+n.b,a:(a.a-n.a)*i+n.a})},f.readability=function(e,r){var n=f(e),a=f(r);return(t.max(n.getLuminance(),a.getLuminance())+.05)/(t.min(n.getLuminance(),a.getLuminance())+.05)},f.isReadable=function(t,e,r){var n,a,i=f.readability(t,e);switch(a=!1,(n=function(t){var e,r;e=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase(),r=(t.size||"small").toLowerCase(),"AA"!==e&&"AAA"!==e&&(e="AA");"small"!==r&&"large"!==r&&(r="small");return{level:e,size:r}}(r)).level+n.size){case"AAsmall":case"AAAlarge":a=i>=4.5;break;case"AAlarge":a=i>=3;break;case"AAAsmall":a=i>=7}return a},f.mostReadable=function(t,e,r){var n,a,i,s,o=null,h=0;a=(r=r||{}).includeFallbackColors,i=r.level,s=r.size;for(var u=0;u<e.length;u++)(n=f.readability(t,e[u]))>h&&(h=n,o=f(e[u]));return f.isReadable(t,o,{level:i,size:s})||!a?o:(r.includeFallbackColors=!1,f.mostReadable(t,["#fff","#000"],r))};var H=f.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},R=f.hexNames=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[t[r]]=r);return e}(H);function F(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function C(e,r){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(e)&&(e="100%");var n=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(e);return e=i(r,s(0,parseFloat(e))),n&&(e=parseInt(e*r,10)/100),t.abs(e-r)<1e-6?1:e%r/parseFloat(r)}function q(t){return i(1,s(0,t))}function M(t){return parseInt(t,16)}function I(t){return 1==t.length?"0"+t:""+t}function L(t){return t<=1&&(t=100*t+"%"),t}function N(e){return t.round(255*parseFloat(e)).toString(16)}function z(t){return M(t)/255}var E,T,j,O=(T="[\\s|\\(]+("+(E="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+E+")[,|\\s]+("+E+")\\s*\\)?",j="[\\s|\\(]+("+E+")[,|\\s]+("+E+")[,|\\s]+("+E+")[,|\\s]+("+E+")\\s*\\)?",{CSS_UNIT:new RegExp(E),rgb:new RegExp("rgb"+T),rgba:new RegExp("rgba"+j),hsl:new RegExp("hsl"+T),hsla:new RegExp("hsla"+j),hsv:new RegExp("hsv"+T),hsva:new RegExp("hsva"+j),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function P(t){return!!O.CSS_UNIT.exec(t)}"undefined"!=typeof module&&module.exports?module.exports=f:"function"==typeof define&&define.amd?define(function(){return f}):window.tinycolor=f}(Math);

},{}],21:[function(require,module,exports){
(function (global){
!function(e){e(["jquery"],function(e){return function(){var t,n,o,s=0,i={error:"error",info:"info",success:"success",warning:"warning"},a={clear:function(n,o){var s=u();t||r(s);l(n,s,o)||function(n){for(var o=t.children(),s=o.length-1;s>=0;s--)l(e(o[s]),n)}(s)},remove:function(n){var o=u();t||r(o);if(n&&0===e(":focus",n).length)return void p(n);t.children().length&&t.remove()},error:function(e,t,n){return d({type:i.error,iconClass:u().iconClasses.error,message:e,optionsOverride:n,title:t})},getContainer:r,info:function(e,t,n){return d({type:i.info,iconClass:u().iconClasses.info,message:e,optionsOverride:n,title:t})},options:{},subscribe:function(e){n=e},success:function(e,t,n){return d({type:i.success,iconClass:u().iconClasses.success,message:e,optionsOverride:n,title:t})},version:"2.1.4",warning:function(e,t,n){return d({type:i.warning,iconClass:u().iconClasses.warning,message:e,optionsOverride:n,title:t})}};return a;function r(n,o){return n||(n=u()),(t=e("#"+n.containerId)).length?t:(o&&(t=function(n){return(t=e("<div/>").attr("id",n.containerId).addClass(n.positionClass)).appendTo(e(n.target)),t}(n)),t)}function l(t,n,o){var s=!(!o||!o.force)&&o.force;return!(!t||!s&&0!==e(":focus",t).length)&&(t[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){p(t)}}),!0)}function c(e){n&&n(e)}function d(n){var i=u(),a=n.iconClass||i.iconClass;if(void 0!==n.optionsOverride&&(i=e.extend(i,n.optionsOverride),a=n.optionsOverride.iconClass||a),!function(e,t){if(e.preventDuplicates){if(t.message===o)return!0;o=t.message}return!1}(i,n)){s++,t=r(i,!0);var l=null,d=e("<div/>"),f=e("<div/>"),g=e("<div/>"),m=e("<div/>"),h=e(i.closeHtml),v={intervalId:null,hideEta:null,maxHideTime:null},C={toastId:s,state:"visible",startTime:new Date,options:i,map:n};return n.iconClass&&d.addClass(i.toastClass).addClass(a),function(){if(n.title){var e=n.title;i.escapeHtml&&(e=w(n.title)),f.append(e).addClass(i.titleClass),d.append(f)}}(),function(){if(n.message){var e=n.message;i.escapeHtml&&(e=w(n.message)),g.append(e).addClass(i.messageClass),d.append(g)}}(),i.closeButton&&(h.addClass(i.closeClass).attr("role","button"),d.prepend(h)),i.progressBar&&(m.addClass(i.progressClass),d.prepend(m)),i.rtl&&d.addClass("rtl"),i.newestOnTop?t.prepend(d):t.append(d),function(){var e="";switch(n.iconClass){case"toast-success":case"toast-info":e="polite";break;default:e="assertive"}d.attr("aria-live",e)}(),d.hide(),d[i.showMethod]({duration:i.showDuration,easing:i.showEasing,complete:i.onShown}),i.timeOut>0&&(l=setTimeout(T,i.timeOut),v.maxHideTime=parseFloat(i.timeOut),v.hideEta=(new Date).getTime()+v.maxHideTime,i.progressBar&&(v.intervalId=setInterval(D,10))),function(){i.closeOnHover&&d.hover(O,b);!i.onclick&&i.tapToDismiss&&d.click(T);i.closeButton&&h&&h.click(function(e){e.stopPropagation?e.stopPropagation():void 0!==e.cancelBubble&&!0!==e.cancelBubble&&(e.cancelBubble=!0),i.onCloseClick&&i.onCloseClick(e),T(!0)});i.onclick&&d.click(function(e){i.onclick(e),T()})}(),c(C),i.debug&&console&&console.log(C),d}function w(e){return null==e&&(e=""),e.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function T(t){var n=t&&!1!==i.closeMethod?i.closeMethod:i.hideMethod,o=t&&!1!==i.closeDuration?i.closeDuration:i.hideDuration,s=t&&!1!==i.closeEasing?i.closeEasing:i.hideEasing;if(!e(":focus",d).length||t)return clearTimeout(v.intervalId),d[n]({duration:o,easing:s,complete:function(){p(d),clearTimeout(l),i.onHidden&&"hidden"!==C.state&&i.onHidden(),C.state="hidden",C.endTime=new Date,c(C)}})}function b(){(i.timeOut>0||i.extendedTimeOut>0)&&(l=setTimeout(T,i.extendedTimeOut),v.maxHideTime=parseFloat(i.extendedTimeOut),v.hideEta=(new Date).getTime()+v.maxHideTime)}function O(){clearTimeout(l),v.hideEta=0,d.stop(!0,!0)[i.showMethod]({duration:i.showDuration,easing:i.showEasing})}function D(){var e=(v.hideEta-(new Date).getTime())/v.maxHideTime*100;m.width(e+"%")}}function u(){return e.extend({},{tapToDismiss:!0,toastClass:"toast",containerId:"toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",onShown:void 0,hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",onHidden:void 0,closeMethod:!1,closeDuration:!1,closeEasing:!1,closeOnHover:!0,extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},iconClass:"toast-info",positionClass:"toast-top-right",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",escapeHtml:!1,target:"body",closeHtml:'<button type="button">&times;</button>',closeClass:"toast-close-button",newestOnTop:!0,preventDuplicates:!1,progressBar:!1,progressClass:"toast-progress",rtl:!1},a.options)}function p(e){t||(t=r()),e.is(":visible")||(e.remove(),e=null,0===t.children().length&&(t.remove(),o=void 0))}}()})}("function"==typeof define&&define.amd?define:function(e,t){"undefined"!=typeof module&&module.exports?module.exports=t("undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null):window.toastr=t(window.jQuery)});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],22:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],23:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],24:[function(require,module,exports){
(function (process,global){
var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}t=1;for(var n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o},exports.deprecate=function(e,r){if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(!0===process.noDeprecation)return e;var t=!1;return function(){if(!t){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),t=!0}return e.apply(this,arguments)}};var debugEnviron,debugs={};function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c,a="",l=!1,p=["{","}"];(isArray(r)&&(l=!0,p=["[","]"]),isFunction(r))&&(a=" [Function"+(r.name?": "+r.name:"")+"]");return isRegExp(r)&&(a=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(a=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(a=" "+formatError(r)),0!==o.length||l&&0!=r.length?t<0?isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),c=l?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,l)}),e.seen.pop(),reduceToSingleString(c,a,p)):p[0]+a+p[1]}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if((c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]}).get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n")):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){return e.reduce(function(e,r){return 0,r.indexOf("\n")>=0&&0,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":23,"_process":18,"inherits":22}],25:[function(require,module,exports){
(function (global){
"use strict";var templateLoader=require("./template-loader.js"),console=require("console-browserify"),ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null;require("./ko-bindings.js");var performanceAwareCaller=require("./timed-call.js").timedCall,addUndoStackExtensionMaker=require("./undomanager/undomain.js"),colorPlugin=require("./ext/color.js"),utilPlugin=require("./ext/util.js"),inlinerPlugin=require("./ext/inliner.js"),localStorageLoader=require("./ext/localstorage.js");if(void 0===ko)throw"Cannot find knockout.js library!";if(void 0===$)throw"Cannot find jquery library!";function _canonicalize(e){var i=global.document.createElement("div");return i.innerHTML="<a></a>",i.firstChild.href=e,i.innerHTML=i.innerHTML,i.firstChild.href}function _appendUrlParameters(e,i){var n=-1==e.indexOf("?")?"?":"&",a=e;for(var t in i)i.hasOwnProperty(t)&&(a+=n+t+"="+encodeURIComponent(i[t]),n="&");return a}var applyBindingOptions=function(e,i){i.bindingHandlers.wysiwygSrc.convertedUrl=function(i,n,a,t){var o=e.imgProcessorBackend?e.imgProcessorBackend:"./upload",r=o.match(/^(https?:\/\/[^\/]*\/).*$/),l=i.match(/^(https?:\/\/[^\/]*\/).*$/);if(null===r||null!==l&&r[1]==l[1])return o.indexOf("?"),_appendUrlParameters(o,{src:i,method:n,params:a+","+t});console.log("Cannot apply backend image resizing to non-local resources ",i,n,a,t,r,l);var d={method:n,width:a};return null!==t&&(d.height=t),_appendUrlParameters(i,d)},i.bindingHandlers.wysiwygSrc.placeholderUrl=function(i,n,a){return _appendUrlParameters(e.imgProcessorBackend?e.imgProcessorBackend:"./upload",{method:"placeholder",params:i+","+n})},e&&e.tinymceConfig&&(i.bindingHandlers.wysiwyg.standardOptions=e.tinymceConfig),e&&e.tinymceConfigFull&&(i.bindingHandlers.wysiwyg.fullOptions=e.tinymceConfigFull)},start=function(e,i,n,a,t){templateLoader.fixPageEvents();var o=[function(i){e&&e.strings&&(i.t=function(n,a){var t=e.strings[n];return void 0===t&&(console.warn("Missing translation string for",n,": using default string"),t=n),i.tt(t,a)})},addUndoStackExtensionMaker(performanceAwareCaller),colorPlugin,utilPlugin,inlinerPlugin];if(void 0!==t)for(var r=0;r<t.length;r++)o.push(t[r]);o.push(function(i){var n={messages:{unknownError:i.t("Unknown error"),uploadedBytes:i.t("Uploaded bytes exceed file size"),maxNumberOfFiles:i.t("Maximum number of files exceeded"),acceptFileTypes:i.t("File type not allowed"),maxFileSize:i.t("File is too large"),minFileSize:i.t("File is too small"),post_max_size:i.t("The uploaded file exceeds the post_max_size directive in php.ini"),max_file_size:i.t("File is too big"),min_file_size:i.t("File is too small"),accept_file_types:i.t("Filetype not allowed"),max_number_of_files:i.t("Maximum number of files exceeded"),max_width:i.t("Image exceeds maximum width"),min_width:i.t("Image requires a minimum width"),max_height:i.t("Image exceeds maximum height"),min_height:i.t("Image requires a minimum height"),abort:i.t("File upload aborted"),image_resize:i.t("Failed to resize image"),generic:i.t("Unexpected upload error")}};e&&e.fileuploadConfig&&(n=$.extend(!0,n,e.fileuploadConfig)),ko.bindingHandlers.fileupload.extendOptions=n});var l=e.fileuploadConfig?e.fileuploadConfig.url:"/upload/";applyBindingOptions(e,ko),$("\x3c!-- ko template: 'main' --\x3e\x3c!-- /ko --\x3e").appendTo(global.document.body),void 0===i&&void 0!==n&&(i=n.template),templateLoader.load(performanceAwareCaller,i,n,a,o,l)},initFromLocalStorage=function(e,i,n){try{var a=localStorageLoader(i,e.emailProcessorBackend),t=void 0!==n?n:[];t.push(a.extension);var o=_canonicalize(a.metadata.template);start(e,o,a.metadata,a.model,t)}catch(e){console.error("TODO not found ",i,e)}},init=function(e,i){var n=global.location.hash?global.location.href.split("#")[1]:void 0;if(e&&(e.template||e.data))if(e.data){var a="string"==typeof a?JSON.parse(e.data):e.data;start(e,void 0,a.metadata,a.content,i)}else start(e,e.template,void 0,void 0,i);else if(n&&7==n.length)initFromLocalStorage(e,n,i);else{if(!n)return!1;start(e,_canonicalize(n),void 0,void 0,i)}return!0};module.exports={isCompatible:templateLoader.isCompatible,init:init,start:start};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./ext/color.js":58,"./ext/inliner.js":59,"./ext/localstorage.js":60,"./ext/util.js":61,"./ko-bindings.js":62,"./template-loader.js":63,"./timed-call.js":64,"./undomanager/undomain.js":65,"console-browserify":3}],26:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify"),addScriptTemplate=function(e,t,n){var o=e.createElement("script");return o.setAttribute("type","text/html"),o.setAttribute("id",t),o.text=n,e.body.appendChild(o),o};ko.bindingHandlers.bindIframe={tpl:'<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body><div data-bind="block: content"></div></body>\r\n</html>\r\n',init:function(e,t){!function(n){try{var o=e.contentDocument;o.open(),o.write(ko.bindingHandlers.bindIframe.tpl),o.close();try{var r=o.body;if(r){for(var i=e.contentWindow.parent.document.getElementsByTagName("script"),d=0;d<i.length;d++)"text/html"==i[d].getAttribute("type")&&i[d].getAttribute("id")&&addScriptTemplate(o,i[d].getAttribute("id"),i[d].innerHTML);var a=o.getElementsByTagName("HTML");ko.utils.domNodeDisposal.addDisposeCallback(e,function(){ko.cleanNode(a[0]||r)}),ko.applyBindings(t(),a[0]||r)}else console.log("no iframedoc",n)}catch(e){throw console.log("error reading iframe.body",e,n),e}}catch(e){throw console.log("error reading iframe contentDocument",e,n),e}}("first call")}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],27:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");ko.bindingHandlers.withProperties={init:function(e,n,o,t,l){var a=l.createChildContext(l.$rawData,null,function(e){ko.utils.extend(e,n())});return ko.applyBindingsToDescendants(a,e),{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.withProperties=!0,ko.bindingHandlers.log={init:function(e,n,o,t,l){console.log("log",n())}},ko.bindingHandlers.block={templateExists:function(e){return!!global.document.getElementById(e)},_chooseTemplate:function(e,n,o,t){var l=n+"-"+o;if(ko.bindingHandlers.block.templateExists(l))return l;if(void 0!==t&&null!==t)return ko.bindingHandlers.block._chooseTemplate(e,n,t);var a=e?"array":"object-"+o;if(ko.bindingHandlers.block.templateExists(a))return a;throw"cannot find template for "+l+"/"+a},_displayMode:function(e,n){var o=void 0!==e.type?ko.utils.unwrapObservable(e.type):"notablock-"+typeof e,t=void 0!==e.splice,l=n.templateMode?n.templateMode:"show";return ko.bindingHandlers.block._chooseTemplate(t,o,l,n.templateModeFallback)},_makeTemplateValueAccessor:function(e,n){return function(){var o,t,l=e(),a=ko.utils.peekObservable(l);if(!a||"object"!=typeof a.data&&"function"!=typeof a.data)o=l;else if(o=a.data,void 0!==a.template){var i=ko.utils.unwrapObservable(a.template),r=n.templateMode?n.templateMode:"show";t=ko.bindingHandlers.block._chooseTemplate(!1,i,r,n.templateModeFallback)}var d=ko.utils.unwrapObservable(o);if(ko.isObservable(d)&&console.log("doubleObservable",d),void 0===t)if(void 0===o)t="empty";else try{t=ko.bindingHandlers.block._displayMode(d,n)}catch(e){throw console.log(e,d,n.$data,n.templateMode),e}return{name:t,data:o,templateEngine:ko.nativeTemplateEngine.instance}}},init:function(e,n,o,t,l){void 0===n()&&console.log("found a null block: check ending commas in arrays defs in IE");var a=ko.bindingHandlers.block._makeTemplateValueAccessor(n,l);return ko.bindingHandlers.template.init(e,a)},update:function(e,n,o,t,l){var a=ko.bindingHandlers.block._makeTemplateValueAccessor(n,l);return ko.bindingHandlers.template.update(e,a,o,t,l)}},ko.expressionRewriting.bindingRewriteValidators.block=!1,ko.virtualElements.allowedBindings.block=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],28:[function(require,module,exports){
"use strict";module.exports=require("./string-template.js");

},{"./string-template.js":43}],29:[function(require,module,exports){
(function (global){
"use strict";require("evol-colorpicker");var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,kojqui="undefined"!=typeof window?window.kojqui:"undefined"!=typeof global?global.kojqui:null,ColorPicker=function(){kojqui.BindingHandler.call(this,"colorpicker")};ColorPicker.prototype=kojqui.utils.createObject(kojqui.BindingHandler.prototype),ColorPicker.prototype.constructor=ColorPicker,ColorPicker.prototype.init=function(o,e,i){var r=e(),n=r.color,l=ko.computed({read:n,write:n,disposeWhenNodeIsRemoved:o});ko.bindingHandlers.value.init(o,function(){return l},i);var t=function(o,e){void 0!==e&&l(e)};$(o).on("change.color",t),ko.computed({read:function(){var e={color:ko.utils.unwrapObservable(l),showOn:"button"};for(var i in r)"color"!==i&&r.hasOwnProperty(i)&&(e[i]=ko.utils.unwrapObservable(r[i]));$(o).colorpicker(e)},disposeWhenNodeIsRemoved:o}),ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("change.color",t),$(o).colorpicker("destroy")})},kojqui.utils.register(ColorPicker);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"evol-colorpicker":5}],30:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null;ko.bindingHandlers.cssText={update:function(e,n,t){var o=ko.utils.unwrapObservable(n());try{e.innerText=o}catch(n){e.styleSheet||(e.innerHTML="a{}"),e.styleSheet.cssText=o}}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],31:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,console=require("console-browserify");ko.bindingHandlers.focusable={focus:function(){},blur:function(){},init:function(o){ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("focusin",ko.bindingHandlers.focusable.focus),$(o).off("focusout",ko.bindingHandlers.focusable.blur)}),$(o).on("focusin",ko.bindingHandlers.focusable.focus),$(o).on("focusout",ko.bindingHandlers.focusable.blur)}},ko.bindingHandlers.scrollable={scroll:function(){},init:function(o){ko.utils.domNodeDisposal.addDisposeCallback(o,function(){$(o).off("scroll",ko.bindingHandlers.scrollable.scroll)}),$(o).on("scroll",ko.bindingHandlers.scrollable.scroll)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],32:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null;!function(e,o){e.utils.unwrapObservable;var n=e.utils.domData.get;e.utils.domData.set,e.bindingHandlers.extdroppable={init:function(t,d,a,l,i){var s,p=o(t),r=e.utils.unwrapObservable(d())||{},u={};o.extend(!0,u,e.bindingHandlers.extdroppable),r.data?(r.options&&u.options&&(e.utils.extend(u.options,r.options),delete r.options),e.utils.extend(u,r)):u.data=r,s=u.options.drop,p.droppable(e.utils.extend(u.options,{drop:function(e,o){var t=o.draggable[0],d=n(t,"ko_sortItem")||n(t,"ko_dragItem");d&&(d.clone&&(d=d.clone()),u.dragged&&(d=u.dragged.call(this,d,e,o)||d),u.data&&u.data(d)),s&&s.apply(this,arguments)}})),void 0!==u.isEnabled&&e.computed({read:function(){p.droppable(e.utils.unwrapObservable(u.isEnabled)?"enable":"disable")},disposeWhenNodeIsRemoved:t})},update:function(e,o,n,t,d){},targetIndex:null,afterMove:null,beforeMove:null,options:{}}}(ko,$);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],33:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null;ko.extenders.paging=function(e,n){var t=ko.observable(n||10),o=ko.observable(1);return e.pageSize=ko.computed({read:t,write:function(e){t(e>0?e:10)}}),e.currentPage=ko.computed({read:o,write:function(n){n>e.pageCount()?o(e.pageCount()):o(n<=0?1:n)}}),e.pageCount=ko.computed(function(){return Math.ceil(e().length/e.pageSize())||1}),e.currentPageData=ko.computed(function(){var n=t(),r=o(),u=n*(r-1),a=n*r;return e().slice(u,a)}),e.moveFirst=function(){e.currentPage(1)},e.movePrevious=function(){e.currentPage(e.currentPage()-1)},e.moveNext=function(){e.currentPage(e.currentPage()+1)},e.moveLast=function(){e.currentPage(e.pageCount())},e};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],34:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,sortable="undefined"!=typeof window?window.jQuery.ui.sortable:"undefined"!=typeof global?global.jQuery.ui.sortable:null,draggable="undefined"!=typeof window?window.jQuery.ui.draggable:"undefined"!=typeof global?global.jQuery.ui.draggable:null,console=require("console-browserify");if(require("knockout-sortable"),void 0===sortable)throw"Cannot find jquery-ui sortable widget dependency!";if(void 0===draggable)throw"Cannot find jquery-ui sortable widget dependency!";var isDraggingHelper=function(e,n){e()?n.type==e()+"stop"&&e(!1):"dragstart"!=n.type&&"sortstart"!=n.type||e(n.type.substring(0,4))},makeExtendedValueAccessor=function(e){return function(){var n=e();ko.utils.peekObservable(n),ko.utils.unwrapObservable(n),"undefined"==n.options&&(n.options={});var o=n.options.start;n.options.start=function(e,r){if(void 0!==n.dragging&&ko.isWritableObservable(n.dragging)&&isDraggingHelper(n.dragging,e),void 0!==n.dropContainer&&(n.scrollInterval=global.setInterval(function(){var e=$(n.dropContainer).scrollTop();$(n.dropContainer).scrollTop(e+n.adding)},20)),void 0!==o)return o(e,r)};var r=n.options.stop;n.options.stop=function(e,o){if(void 0!==n.dragging&&ko.isWritableObservable(n.dragging)&&isDraggingHelper(n.dragging,e),void 0!==n.dropContainer&&global.clearInterval(n.scrollInterval),void 0!==r)return r(e,o)};var i=n.options.drag;return n.options.drag=function(e,o){if(void 0!==n.dropContainer){var r=e.pageY-$(n.dropContainer).offset().top,t=r-$(n.dropContainer).height();n.adding=r<-20?-20:r<0?-10:r<10?-5:t>20?20:t>0?10:t>-10?5:0}if(void 0!==i)return i(e,o)},n}};ko.bindingHandlers.extsortable={init:function(e,n,o,r,i){return ko.bindingHandlers.sortable.init(e,makeExtendedValueAccessor(n),o,r,i)},update:function(e,n,o,r,i){return ko.bindingHandlers.sortable.update(e,makeExtendedValueAccessor(n),o,r,i)}},ko.bindingHandlers.extdraggable={init:function(e,n,o,r,i){return ko.bindingHandlers.draggable.init(e,makeExtendedValueAccessor(n),o,r,i)},update:function(e,n,o,r,i){return ko.bindingHandlers.draggable.update(e,makeExtendedValueAccessor(n),o,r,i)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3,"knockout-sortable":11}],35:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");ko.bindingHandlers.fudroppable={init:function(e,i){var o=i()||{},r={},l=function(e,i,o,r,l,a){e[i]?global.clearTimeout(e[i]):(void 0!==r&&o.classList.add(r),ko.isWriteableObservable(l)&&!l()&&l(!0));var s=function(){e[i]=null,void 0!==r&&o.classList.remove(r),ko.isWriteableObservable(l)&&l()&&l(!1)};"dragleave"==a.type?s():e[i]=global.setTimeout(s,500)};(o.active||o.activeClass)&&ko.utils.registerEventHandler(global,"dragover",l.bind(void 0,r,"activeTimeout",e,o.activeClass,o.active)),o.hoverClass&&ko.utils.registerEventHandler(e,"dragover dragenter dragleave",l.bind(void 0,r,"hoverTimeout",e,o.hoverClass,void 0))}},ko.bindingHandlers.fileupload={extendOptions:{},remoteFilePreprocessor:function(e){return e},init:function(e,i){ko.utils.domNodeDisposal.addDisposeCallback(e,function(){$(e).fileupload("destroy")}),!("WebkitAppearance"in global.document.documentElement.style)||"webkitNbspMode"in global.document.documentElement.style||"StyleMedia"in global?$(e).attr("title",""):$(e).attr("title"," ")},update:function(e,i){var o=i()||{},r=$(e),l=r.parents(".uploadzone"),a=o.data;o.data=void 0;var s=o.canvasPreview;ko.utils.extend(o,{url:"/upload/",dataType:"json",dropZone:l.find(".mo-uploadzone")[0],autoUpload:!0,acceptFileTypes:/(\.|\/)(gif|jpe?g|png)$/i,maxFileSize:1048576,disableImageResize:/Android(?!.*Chrome)|Opera/.test(global.navigator.userAgent),previewMaxWidth:200,previewMaxHeight:200,previewCrop:!1,replaceFileInput:!1,messages:{unknownError:"Unknown error",uploadedBytes:"Uploaded bytes exceed file size",maxNumberOfFiles:"Maximum number of files exceeded",acceptFileTypes:"File type not allowed",maxFileSize:"File is too large",minFileSize:"File is too small",post_max_size:"The uploaded file exceeds the post_max_size directive in php.ini",max_file_size:"File is too big",min_file_size:"File is too small",accept_file_types:"Filetype not allowed",max_number_of_files:"Maximum number of files exceeded",max_width:"Image exceeds maximum width",min_width:"Image requires a minimum width",max_height:"Image exceeds maximum height",min_height:"Image requires a minimum height",abort:"File upload aborted",image_resize:"Failed to resize image",generic:"Unexpected upload error"}}),ko.utils.extend(o,ko.bindingHandlers.fileupload.extendOptions);var n=0,t="",d=function(){0==--n&&(a&&a(t),t="",s&&(l.find("img").show(),l.find("canvas").remove()),l.removeClass("uploading"),l.find(".progress-bar").css("width",0))},u=function(e){if("object"==typeof o.messages&&null!==o.messages){var i=e.match(/^([^ ]+)(.*)$/);if(i&&void 0!==o.messages[i[1]])return o.messages[i[1]]+i[2]}return e};r.fileupload(o);for(var p=["fileuploadadd","fileuploadprocessalways","fileuploadprogressall","fileuploaddone","fileuploadfail"],f=function(e,i){if("fileuploadadd"==e.type&&n++,"fileuploadfail"==e.type&&(console.log("fileuploadfail",e,i),o.onerror&&(""===i.errorThrown&&"error"==i.textStatus?o.onerror(u("generic")):o.onerror(u("generic ("+i.errorThrown+")"))),d()),"fileuploaddone"==e.type)if(void 0!==i.result.files[0].url){if(o.onfile)for(var r=0;r<i.result.files.length;r++)i.result.files[r]=ko.bindingHandlers.fileupload.remoteFilePreprocessor(i.result.files[r]),o.onfile(i.result.files[r]);if(""===t&&(t=i.result.files[0].url),s){var a=new Image;a.onload=d,a.onerror=d,a.src=i.result.files[0].url}else d()}else void 0!==i.result.files[0].error?(console.log("remote error",e,i),o.onerror&&o.onerror(u(i.result.files[0].error)),d()):(console.log("unexpected error",e,i),o.onerror&&o.onerror(u("generic (Unexpected Error retrieving uploaded file)")),d());if("fileuploadprocessalways"==e.type){var p=i.index,f=i.files[p];if(f.preview&&0===p&&0===l.find("canvas").length){if(s){var m=$(f.preview).css("width","100%");l.find("img").hide(),l.prepend(m)}l.addClass("uploading"),l.find(".progress-bar").css("width",0)}f.error&&(o.onerror&&o.onerror(u(f.error)),d())}if("fileuploadprogressall"==e.type){var g=parseInt(i.loaded/i.total*100,10);l.find(".progress-bar").css("width",g+"%")}},m=p.length-1;m>=0;m--){var g=p[m];r.on(g,f)}$.support.fileInput||r.prop("disabled",!0).parent().addClass("disabled")}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],36:[function(require,module,exports){
(function (global){
"use strict";var beforeSubscriptionProp,afterSubscriptionProp,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");if(ko.bindingHandlers.ifSubs={cloneNodes:function(o,e){for(var i=0,n=o.length,r=[];i<n;i++){var s=o[i].cloneNode(!0);r.push(e?ko.cleanNode(s):s)}return r},init:function(o,e,i,n,r){var s,t,u=e();return void 0===u.data.subsCount&&ko.extenders.subscriptionsCount(u.data),ko.computed(function(){var i,n,b=ko.utils.unwrapObservable(e().data.subsCount),p=!t;n=-(void 0!==e().gutter?e().gutter:1),i=b+(s?n:0)>=ko.utils.unwrapObservable(u.threshold),void 0!==e().not&&e().not&&(i=!i),(p||i!==s)&&(p&&ko.computedContext.getDependenciesCount()&&(t=ko.bindingHandlers.ifSubs.cloneNodes(ko.virtualElements.childNodes(o),!0)),i?(p||ko.virtualElements.setDomNodeChildren(o,ko.bindingHandlers.ifSubs.cloneNodes(t)),ko.applyBindingsToDescendants(r,o)):ko.virtualElements.emptyNode(o),s=i)},null,{disposeWhenNodeIsRemoved:o}),{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.ifSubs=!0,"function"==typeof ko.subscription&&void 0!==ko.isWritableObservable)beforeSubscriptionProp="beforeSubscriptionAdd",afterSubscriptionProp="afterSubscriptionRemove";else if("3.2.0"==ko.version)beforeSubscriptionProp="va",afterSubscriptionProp="nb";else if("3.3.0"==ko.version)beforeSubscriptionProp="ja",afterSubscriptionProp="ua";else if("3.4.0"==ko.version)beforeSubscriptionProp="sa",afterSubscriptionProp="Ia";else if("3.4.1"==ko.version)beforeSubscriptionProp="sa",afterSubscriptionProp="Ia";else if("3.4.2"==ko.version)beforeSubscriptionProp="ua",afterSubscriptionProp="Ka";else{if("3.5.0-beta"!=ko.version)throw"Unsupported minimized Knockout version "+ko.version+" (supported DEBUG or minimized 3.2.0 ... 3.5.0-beta)";beforeSubscriptionProp="Pa",afterSubscriptionProp="ab"}ko.extenders.subscriptionsCount=function(o,e,i){if(void 0===o.subsCount){o.subsCount=ko.observable(o.getSubscriptionsCount()).extend({notify:"always"});var n=o[beforeSubscriptionProp],r=o[afterSubscriptionProp];o[beforeSubscriptionProp]=function(r){n&&n.call(o,r);var s=o.getSubscriptionsCount()+1;void 0!==e&&s!=e&&void 0!==i&&s!=i||o.subsCount(s)},o[afterSubscriptionProp]=function(n){r&&r.call(o,n);var s=o.getSubscriptionsCount();void 0!==e&&s!=e&&void 0!==i&&s!=i||o.subsCount(s)}}else console.log("already applied subscriptionCount to observable");return null};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],37:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,spinner="undefined"!=typeof window?window.jQuery.ui.spinner:"undefined"!=typeof global?global.jQuery.ui.spinner:null,console=require("console-browserify");if(void 0===spinner)throw"Cannot find jquery-ui spinner widget dependency!";$.widget("ui.spinner",spinner,{_adjustValue:function(n){this._super(n);var e=this.options;return n=parseFloat(n.toFixed(this._precision())),null!==e.max&&n>e.max?e.max:null!==e.min&&n<e.min?e.min:n}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],38:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,console=require("console-browserify"),tabs="undefined"!=typeof window?window.jQuery.ui.tabs:"undefined"!=typeof global?global.jQuery.ui.tabs:null;if(void 0===tabs)throw"Cannot find jquery-ui tabs widget dependency!";$.widget("ui.tabs",tabs,{_isLocal:function(e){return"true"==e.getAttribute("data-local")||this._superApply(arguments)}});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],39:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null;ko.bindingHandlers.preloader={init:function(e,o){var d=o();if(void 0===d.preloaded){d.preloaded=ko.observable("");var n=function(e){if(e!=d.preloaded())if(""!==e){var o=new Image;o.onload=function(){d.preloaded(e)},o.onerror=function(){d.preloaded(e)},o.src=e}else d.preloaded(e)};d.subscribe(n),n(d())}}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],40:[function(require,module,exports){
(function (global){
"use strict";function pushTemplate(e,t){var n=global.document.createElement("script");n.setAttribute("type","text/html"),n.setAttribute("id",e),n.text=t,global.document.body.appendChild(n)}function removeTemplate(e){var t=global.document.getElementById(e);t&&t.parentNode.removeChild(t)}function init(){}function getTemplateContent(e){var t=global.document.getElementById(e);return t?t.innerHTML:void 0}module.exports={init:init,addTemplate:pushTemplate,removeTemplate:removeTemplate,getTemplateContent:getTemplateContent};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],41:[function(require,module,exports){
(function (global){
"use strict";var timeout,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,console=require("console-browserify"),tinymce="undefined"!=typeof window?window.tinymce:"undefined"!=typeof global?global.tinymce:null,render=function(){if(timeout=void 0,void 0!==tinymce.activeEditor&&null!==tinymce.activeEditor&&void 0!==tinymce.activeEditor.theme&&null!==tinymce.activeEditor.theme&&void 0!==tinymce.activeEditor.theme.panel&&null!==tinymce.activeEditor.theme.panel){(void 0!==tinymce.activeEditor.theme.panel._visible&&tinymce.activeEditor.theme.panel._visible&&tinymce.activeEditor.theme.panel._fixed||void 0!==tinymce.activeEditor.theme.panel.state&&tinymce.activeEditor.theme.panel.state.get("visible")&&tinymce.activeEditor.theme.panel.state.get("fixed"))&&tinymce.activeEditor.theme.panel.fixed(!1);var e=void 0!==tinymce.activeEditor.bodyElement?tinymce.activeEditor.bodyElement:tinymce.activeEditor.dom.settings.root_element;null!==e&&void 0!==e.classList&&e.classList.contains("mce-edit-focus")&&(tinymce.activeEditor.nodeChanged(),tinymce.activeEditor.theme.panel.visible(!0),tinymce.activeEditor.theme.panel.layoutRect().y<=40&&tinymce.activeEditor.theme.panel.moveBy(0,40-tinymce.activeEditor.theme.panel.layoutRect().y))}};ko.bindingHandlers.wysiwygScrollfix={scroll:function(e){timeout&&global.clearTimeout(timeout),timeout=global.setTimeout(render,50)},init:function(e){ko.utils.domNodeDisposal.addDisposeCallback(e,function(){$(e).off("scroll",ko.bindingHandlers.wysiwygScrollfix.scroll)}),$(e).on("scroll",ko.bindingHandlers.wysiwygScrollfix.scroll)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],42:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify"),_scrollIntoView=function(o,e,l,n){var i=l.scrollTop(),t=i-n-(e?20:-20);if(void 0!==l[0].nodeType){var r={scrollTop:Math.round(t)+"px"},s=Math.round(Math.abs(t-i));l.stop().animate(r,s)}else l.scrollTop(t)};ko.bindingHandlers.scrollIntoView={update:function(o,e,l,n,i){if(ko.utils.unwrapObservable(e()))try{for(;8===o.nodeType;)o=o.nextSibling;if(8!==o.nodeType){var t,r=$(o).scrollParent(),s=!1;9==r[0].nodeType?(r=$(r[0].defaultView),t=0,s=!0):t=r.offset().top;var a=r.height(),d=r.scrollTop(),c=t+a,f=$(o),w=f.offset().top;s&&(w-=d);var p=f.height(),u=w+p;w>t&&w+p<c||(p<a?(w<t&&_scrollIntoView(o,!0,r,t-w),u>c&&_scrollIntoView(o,!1,r,c-u)):(w<t&&u<c&&_scrollIntoView(o,!1,r,c-u),w>t&&u>c&&_scrollIntoView(o,!0,r,t-w)))}}catch(o){console.log("TODO exception scrolling into view",o)}}},ko.virtualElements.allowedBindings.scrollIntoView=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],43:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,origTemplateSystem=require("./script-template.js"),templates={};function createStringTemplateEngine(e){var t=e.makeTemplateSource;return e.makeTemplateSource=function(e){return void 0!==templates[e]?new ko.templateSources.stringTemplate(e,templates[e]):t(e)},e}function pushTemplate(e,t){templates[e]=t}function removeTemplate(e){void 0!==templates[e]?templates[e]=void 0:origTemplateSystem.removeTemplate(e)}function init(){ko.setTemplateEngine(createStringTemplateEngine(new ko.nativeTemplateEngine))}function getTemplateContent(e){return void 0!==templates[e]?templates[e]:origTemplateSystem.getTemplateContent(e)}ko.templateSources.stringTemplate=function(e,t){this.templateName=e,this.template=t,this._data={}},ko.utils.extend(ko.templateSources.stringTemplate.prototype,{data:function(e,t){if(1===arguments.length)return this._data[e];this._data[e]=t},text:function(e){if(0===arguments.length)return this.template;this.template=e}}),module.exports={init:init,addTemplate:pushTemplate,removeTemplate:removeTemplate,getTemplateContent:getTemplateContent};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./script-template.js":40}],44:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,kojqui="undefined"!=typeof window?window.kojqui:"undefined"!=typeof global?global.kojqui:null,console=require("console-browserify"),extendValueAccessor=function(o,n){return function(){return ko.utils.extend(n,o()),n}},options={show:{delay:500},track:!0,items:'[title][title!=""][title!=" "]'};ko.bindingHandlers.tooltips={init:function(o,n,i,e,t){if(void 0!==$.fn.tooltip&&void 0!==ko.bindingHandlers.tooltip)return ko.bindingHandlers.tooltip.init(o,extendValueAccessor(n,options),i,e,t)},update:function(o,n,i,e,t){if(void 0!==$.fn.tooltip&&void 0!==ko.bindingHandlers.tooltip)return ko.bindingHandlers.tooltip.update(o,extendValueAccessor(n,options),i,e,t)}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],45:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");ko.bindingHandlers.validatedValue={init:function(e,n,i){var o=n;if(void 0!==e.pattern){var t=new RegExp("^(?:"+e.pattern+")$"),a=ko.computed({read:function(){var i=ko.utils.unwrapObservable(n());return null===i||""===i||t.test(i)?e.classList.remove("invalid"):e.classList.add("invalid"),i},write:ko.isWriteableObservable(n())&&function(i){ko.selectExtensions.writeValue(e,i);var o=ko.selectExtensions.readValue(e);n()(o)},disposeWhenNodeIsRemoved:e});o=function(){return a}}ko.bindingHandlers.value.init(e,o,i)}},ko.expressionRewriting._twoWayBindings.validatedValue=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],46:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");ko.bindingHandlers.uniqueId={currentIndex:0,init:function(e,n){var t=ko.utils.unwrapObservable(n())||{};if(""===t.id()){var i,l,r;r="ko_"+(void 0!==t.type?ko.utils.unwrapObservable(t.type):"block");do{i=r+"_"+ ++ko.bindingHandlers.uniqueId.currentIndex,l=global.document.getElementById(i)}while(l);t.id(i)}}},ko.virtualElements.allowedBindings.uniqueId=!0,ko.bindingHandlers.virtualAttr={update:function(e,n){8!==e.nodeType&&ko.bindingHandlers.attr.update(e,n)}},ko.virtualElements.allowedBindings.virtualAttr=!0,ko.bindingHandlers.virtualAttrStyle={update:function(e,n,t,i,l){if(8!==e.nodeType){var r=["style"];(void 0===l.templateMode||"wysiwyg"!=l.templateMode)&&r.push("replacedstyle");for(var o=ko.utils.unwrapObservable(n()),d=0;d<r.length;d++){var a=r[d];!1===o||null===o||void 0===o?e.removeAttribute(a):e.setAttribute(a,o.toString())}}}},ko.virtualElements.allowedBindings.virtualAttrStyle=!0,ko.bindingHandlers.virtualStyle={update:function(e,n){8!==e.nodeType&&ko.bindingHandlers.style.update(e,n)}},ko.virtualElements.allowedBindings.virtualStyle=!0,ko.bindingHandlers.virtualHtml={init:ko.bindingHandlers.html.init,update:function(e,n){if(8===e.nodeType){var t=ko.utils.unwrapObservable(n());if(ko.virtualElements.emptyNode(e),null!==t&&void 0!==t){"string"!=typeof t&&(t=t.toString());var i=ko.utils.parseHtmlFragment(t);if(i)for(var l=e.nextSibling,r=0,o=i.length;r<o;r++)l.parentNode.insertBefore(i[r],l)}}else ko.bindingHandlers.html.update(e,n);return{controlsDescendantBindings:!0}}},ko.virtualElements.allowedBindings.virtualHtml=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],47:[function(require,module,exports){
(function (global){
"use strict";var tinymce="undefined"!=typeof window?window.tinymce:"undefined"!=typeof global?global.tinymce:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");require("./eventable.js"),ko.bindingHandlers.wysiwygOrHtml={init:function(e,i,n,t,o){return void 0===o.templateMode||"wysiwyg"!=o.templateMode?ko.bindingHandlers.virtualHtml.init():ko.bindingHandlers.wysiwyg.init(e,i,n,t,o)},update:function(e,i,n,t,o){if(void 0===o.templateMode||"wysiwyg"!=o.templateMode)return ko.bindingHandlers.virtualHtml.update(e,i,n,t,o)}},ko.virtualElements.allowedBindings.wysiwygOrHtml=!0,ko.bindingHandlers.wysiwygHref={init:function(e,i,n,t,o){8!==e.nodeType&&(i(),void 0===o.templateMode||"wysiwyg"!=o.templateMode?e.setAttribute("target","_new"):void 0!==n().wysiwygOrHtml?e.setAttribute("href","javascript:void(0)"):(e.removeAttribute("href"),e.setAttribute("disabledhref","#")))},update:function(e,i,n,t,o){if(8!==e.nodeType){var l=void 0===o.templateMode||"wysiwyg"!=o.templateMode,s=ko.utils.unwrapObservable(i());l&&(!1===s||null===s||void 0===s?e.removeAttribute("href"):e.setAttribute("href",s.toString()))}}},ko.virtualElements.allowedBindings.wysiwygHref=!0,ko.bindingHandlers.wysiwygSrc={convertedUrl:function(e,i,n,t){return e+(-1==e.indexOf("?")?"?":"&")+"method="+i+"&width="+n+(null!==t?"&height="+t:"")},placeholderUrl:function(e,i,n){},update:function(e,i,n,t,o){var l=ko.utils.unwrapObservable(i()),s=ko.utils.unwrapObservable(l.src),r=ko.utils.unwrapObservable(l.placeholder),a=ko.utils.unwrapObservable(l.width),d=ko.utils.unwrapObservable(l.height);if(!1===s||null===s||void 0===s||""===s)"object"==typeof r&&null!==r?e.setAttribute("src",ko.bindingHandlers.wysiwygSrc.placeholderUrl(r.width,r.height,r.text)):e.removeAttribute("src");else{var g=ko.utils.unwrapObservable(l.method);g||(g=a>0&&d>0?"cover":"resize");var u=ko.bindingHandlers.wysiwygSrc.convertedUrl(s.toString(),g,a,d);e.setAttribute("src",u)}void 0!==a&&null!==a?e.setAttribute("width",a):e.removeAttribute("width"),void 0!==d&&null!==d?e.setAttribute("height",d):e.removeAttribute("height")}},ko.bindingHandlers.wysiwygId={init:function(e,i,n,t,o){void 0===o.templateMode||"wysiwyg"!=o.templateMode||e.setAttribute("id",ko.utils.unwrapObservable(i()))},update:function(e,i,n,t,o){void 0===o.templateMode||"wysiwyg"!=o.templateMode||e.setAttribute("id",ko.utils.unwrapObservable(i()))}},ko.virtualElements.allowedBindings.wysiwygId=!0,ko.bindingHandlers.wysiwygClick={init:function(e,i,n,t,o){void 0===o.templateMode||"wysiwyg"!=o.templateMode||ko.bindingHandlers.click.init(e,i,n,t,o)}},ko.virtualElements.allowedBindings.wysiwygClick=!0,ko.bindingHandlers.wysiwygCss={update:function(e,i,n,t,o){void 0===o.templateMode||"wysiwyg"!=o.templateMode||ko.bindingHandlers.css.update(e,i,n,t,o)}},ko.virtualElements.allowedBindings.wysiwygCss=!0,ko.bindingHandlers.wysiwygImg={makeTemplateValueAccessor:function(e,i){return function(){var n=void 0!==i.templateMode&&"wysiwyg"==i.templateMode,t=e(),o=ko.utils.peekObservable(t);return ko.utils.unwrapObservable(t),{name:n?o._editTemplate:o._template,templateEngine:ko.nativeTemplateEngine.instance}}},init:function(e,i,n,t,o){return ko.bindingHandlers.template.init(e,ko.bindingHandlers.wysiwygImg.makeTemplateValueAccessor(i,o))},update:function(e,i,n,t,o){return o=o.extend(i()),ko.bindingHandlers.template.update(e,ko.bindingHandlers.wysiwygImg.makeTemplateValueAccessor(i,o),n,t,o)}},ko.virtualElements.allowedBindings.wysiwygImg=!0;var _catchingFire=function(e,i){try{return this.originalFire.apply(this,arguments)}catch(i){console.warn("Cought tinymce exception while firing editor event",e,i)}};ko.bindingHandlers.wysiwyg={debug:!1,getContentOptions:{format:"raw"},useTarget:!1,currentIndex:0,standardOptions:{},initializingClass:"wysiwyg-loading",removeSelectionOnBlur:!0,emptyClass:void 0,fullOptions:{toolbar1:"bold italic forecolor backcolor hr styleselect removeformat | link unlink | pastetext code",plugins:["link hr paste lists textcolor code"]},init:function(e,i,n,t,o){ko.bindingHandlers.focusable.init(e);var l,s=ko.bindingHandlers.wysiwyg.debug&&"function"==typeof console.debug;ko.bindingHandlers.wysiwyg.useTarget?l="@target_"+ ++ko.bindingHandlers.wysiwyg.currentIndex:(l=e.getAttribute("id"))||(l="wysiwyg_"+ ++ko.bindingHandlers.wysiwyg.currentIndex,e.setAttribute("id",l)),ko.bindingHandlers.wysiwyg.initializingClass&&e.classList.add(ko.bindingHandlers.wysiwyg.initializingClass),ko.utils.domNodeDisposal.addDisposeCallback(e,function(){s&&console.debug("Editor for selector",l,"is being removed..."),tinymce.remove("#"+e.getAttribute("id")),s&&console.debug("Editor for selector",l,"has been removed.")});var r=i();if(!ko.isObservable(r))throw"Wysiwyg binding called with non observable";if(8===e.nodeType)throw"Wysiwyg binding called on virtual node, ignoring...."+e.innerHTML;var a,d="DIV"==e.tagName||"TD"==e.tagName,g=!1,u=!1,w={inline:!0,hidden_input:!1,plugins:["paste"],toolbar1:"bold italic",toolbar2:"",preview_styles:!1,paste_as_text:!0,language:"en",schema:"html5",extended_valid_elements:"strong/b,em/i,*[*]",menubar:!1,skin:"gray-flat",forced_root_block:d?"p":"",init_instance_callback:function(i){if(s&&console.debug("Editor for selector",l,"is now initialized."),ko.bindingHandlers.wysiwyg.initializingClass&&e.classList.remove(ko.bindingHandlers.wysiwyg.initializingClass),"function"==typeof console.debug){var n=e.currentStyle?e.currentStyle.display:global.getComputedStyle(e,null).display;"inline"==n&&console.debug("Initializing an editor on an inline element: please note that while it may work, this is unsupported because of a multitude of browser issues",e.tagName,n,l)}},setup:function(i){s&&console.debug("Editor for selector",l,"is now in the setup phase.");var n=function(){0==(e.textContent||e.innerText||"").trim().length?e.classList.add(ko.bindingHandlers.wysiwyg.emptyClass):e.classList.remove(ko.bindingHandlers.wysiwyg.emptyClass)};i.on("change redo undo",function(){if(!g)try{u=!0,r(i.getContent(ko.bindingHandlers.wysiwyg.getContentOptions))}catch(e){console.warn("Unexpected error setting content value for",l,e)}finally{u=!1}ko.bindingHandlers.wysiwyg.emptyClass&&n()}),ko.bindingHandlers.wysiwyg.emptyClass&&i.on("keyup",function(){n()}),i.on("focus",function(){i.nodeChanged(),i.getElement().click()}),ko.bindingHandlers.wysiwyg.removeSelectionOnBlur&&i.on("blur",function(e){global.getSelection().removeAllRanges()}),i.on("BeforeSetContent",function(e){e.initial&&(e.format="raw")}),void 0===i.originalFire&&(i.originalFire=i.fire,i.fire=_catchingFire),a=i}};return ko.bindingHandlers.wysiwyg.useTarget?w.target=e:w.selector="#"+l,ko.utils.extend(w,ko.bindingHandlers.wysiwyg.standardOptions),d&&ko.utils.extend(w,ko.bindingHandlers.wysiwyg.fullOptions),global.setTimeout(function(){s&&console.debug("Editor for selector",l,"is being inizialized ...");var e=tinymce.init(w);s&&console.debug("Editor for selector",l,"init has just been called returning",e),e.then(function(){s&&console.debug("Editor for selector",l,"init promise has resolved.")},function(e){console.log("Editor for selector",l,"init promise has failed.",e)})}),ko.computed(function(){var n=ko.utils.unwrapObservable(i());if(!u){try{g=!0,void 0!==a?a.setContent(n,{format:"raw"}):ko.utils.setHtml(e,n)}catch(e){console.warn("Exception setting content to editable element",typeof a,e)}g=!1}},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./eventable.js":31,"console-browserify":3}],48:[function(require,module,exports){
"use strict";var console=require("console-browserify"),checkModel=function(e,o,t,n,l){var i,f,r,a=0;if(void 0===l&&(l=!1),void 0!==o&&"function"==typeof o.splice)for(i={},f=0;f<o.length;f++)i[o[f].type]=o[f];else i=o;for(var p in e)if(e.hasOwnProperty(p))if(r=void 0!==n?n+"."+p:p,t.hasOwnProperty(p))if(typeof t[p]!=typeof e[p])null!==t[p]&&null!==e[p]&&("string"==typeof t[p]?String(e[p])!=e[p]&&(console.log("TODO Different type 1 ",r,typeof t[p],typeof e[p],t[p],e[p]),a=Math.max(a,2)):"number"==typeof t[p]?Number(e[p])!=e[p]&&(console.log("TODO Different type 2 ",r,typeof t[p],typeof e[p],t[p],e[p]),a=Math.max(a,2)):(console.log("TODO Different type 3 ",r,typeof t[p],typeof e[p],t[p],e[p]),a=Math.max(a,2)));else if("object"==typeof e[p])if(null!==e[p])if(void 0!==e[p].splice){if(e[p].length>0)if(t[p].length>0){var c=0;for(f=0;f<t[p].length;f++)if("string"==typeof t[p][f].type){for(;c<e[p].length&&e[p][c].type!==t[p][f].type;)console.log("ignoring ",r,e[p][c].type," block type in reference not found in model"),c++;if(c>=e[p].length){console.log("WARN cannot find ",r,t[p][f].type," block in reference"),a=Math.max(a,2);break}a=Math.max(a,checkModel(e[p][c],void 0,t[p][f],r+"["+f+"."+t[p][f].type+"]"))}}else for(f=0;f<e[p].length;f++)"string"!=typeof e[p][f].type?(console.log("TODO found an object with no type",r,e[p][f]),a=Math.max(a,2)):i.hasOwnProperty(e[p][f].type)?a=Math.max(a,checkModel(i[e[p][f].type],i,e[p][f],r+"["+f+"."+e[p][f].type+"]")):(console.warn("TODO the model uses a block type not defined by the template. REMOVING IT!!",r,e[p][f]),e[p].splice(f,1),f--,a=Math.max(a,2))}else null===t[p]?l?(console.log("WARN Null object in model ",r,"instead of",e[p],"deleting it"),a=Math.max(a,2),delete e[p]):(console.log("INFO Null object in model ",r,"instead of",e[p],"cloning it from the reference"),a=Math.max(a,1),t[p]=e[p]):a=Math.max(a,checkModel(e[p],i,t[p],r,l));else null!==t[p]&&(console.log("TODO Null in reference but not null in model",r,t[p]),a=Math.max(a,2));else"string"!=typeof e[p]&&"boolean"!=typeof e[p]&&"number"!=typeof e[p]&&(console.log("TODO unsupported type",r,typeof e[p]),a=Math.max(a,2));else l?(console.warn("WARN Property ",r,"found in model is not defined by template: removing it!"),a=Math.max(a,2),delete e[p]):(console.log("INFO Property ",r,"missing in model, cloning from reference!"),a=Math.max(a,1),t[p]=e[p]);return l||(a=Math.max(a,checkModel(t,o,e,void 0!==n?n+"!R":"!R",!0))),a};module.exports=checkModel;

},{"console-browserify":3}],49:[function(require,module,exports){
"use strict";var converterUtils=require("./utils.js"),cssParse=require("mensch/lib/parser.js"),console=require("console-browserify"),domutils=require("./domutils.js"),_declarationValueLookup=function(e,t,r){for(var l=e.length-1;l>=0;l--)if("property"==e[l].type&&e[l].name==t)return _declarationValueUrlPrefixer(e[l].value,r);return null},_propToCamelCase=function(e){return e.replace(/-([a-z])/g,function(e,t,r,l){return t.toUpperCase()})},_declarationValueUrlPrefixer=function(e,t){return e.match(/url\(.*\)/)?e.replace(/(url\()([^\)]*)(\))/g,function(e,r,l,i){var n=l.trim(),o=l.trim().charAt(0);"'"==o||'"'==o?n=n.substr(1,n.length-2):o="";var a=t(n);return null!==a?r+o+a+o+i:e}):e},elaborateDeclarations=function(e,t,r,l,i,n,o){var a="object"==typeof n&&null!==n?n:{},u=null,s=0;void 0===t&&(t=cssParse("#{\n"+e+"}",{comments:!0,position:!0}).stylesheet.rules[0].declarations,s=1);for(var v=t.length-1;v>=0;v--)if("property"==t[v].type)if(!0===o&&"display"==t[v].name&&"none"==t[v].value)null===u&&(u=e),u=converterUtils.removeStyle(u,t[v].position.start,t[v].position.end,s,0,0,"");else{var d=t[v].name.match(/^-ko-(bind-|attr-)?([a-z0-9-]*?)(-if|-ifnot)?$/);if(null!==d){null===u&&void 0!==e&&(u=e);var c,f,p,m="attr-"==d[1],y="bind-"==d[1],h=d[2],b="-if"==d[3]||"-ifnot"==d[3];if(b){if(c=t[v].name.substr(0,t[v].name.length-d[3].length),null===_declarationValueLookup(t,c,r))throw"Unable to find declaration "+c+" for "+t[v].name}else{if((m||y)&&void 0===i&&void 0!==e)throw"Attributes and bind declarations are only allowed in inline styles!";var S,g=!0;if(m?(p=domutils.getAttribute(i,h),g=!1,S="virtualAttr"):y?(S=null,"text"==h?void 0!==i?p=domutils.getInnerText(i):g=!1:"html"==h&&void 0!==i?p=domutils.getInnerHtml(i):g=!1):((g=void 0!==e)&&(p=_declarationValueLookup(t,h,r)),S="virtualStyle"),g&&null===p)throw console.error("Cannot find default value for",t[v].name,t),"Cannot find default value for "+t[v].name+": "+t[v].value+" in "+i+" ("+typeof e+"/"+h+")";var w=p,U=y||m?-1!=h.indexOf("-")?"'"+h+"'":h:_propToCamelCase(h);try{f=converterUtils.expressionBinding(t[v].value,l,w)}catch(e){throw console.error("Model ensure path failed",e.stack,"name",t[v].name,"value",t[v].value,"default",p,"element",i),e}null!==S&&void 0===a[S]&&(a[S]={}),"virtualAttr"==S&&"href"==U&&(S=null,U="wysiwygHref",void 0!==i&&null!==i&&domutils.removeAttribute(i,"href"));var x=_declarationValueLookup(t,t[v].name+"-if",r),_=!1;if(null===x)x=_declarationValueLookup(t,t[v].name+"-ifnot",r),_=!0;else if(null!==_declarationValueLookup(t,t[v].name+"-ifnot",r))throw"Unexpected error: cannot use both -if and -ifnot property conditions";if(null!==x)try{var A=converterUtils.conditionBinding(x,l);f=(_?"!":"")+"("+A+") ? "+f+" : null"}catch(e){throw console.error("Unable to deal with -ko style binding condition",x,t[v].name),e}null!==S?a[S][U]=f:a[U]=f}if(null!==u)try{if(void 0!==i&&null!==i)u=converterUtils.removeStyle(u,t[v].position.start,t[v].position.end,s,0,0,"");else{var k="";b||(k=h+": \x3c!-- ko text: "+f+" --\x3e"+p+"\x3c!-- /ko --\x3e"),u=converterUtils.removeStyle(u,t[v].position.start,t[v].position.end,s,0,0,k)}}catch(e){throw console.warn("Remove style failed",e,"name",t[v]),e}}else{var C=_declarationValueUrlPrefixer(t[v].value,r);if(C!=t[v].value&&(null===u&&void 0!==e&&(u=e),null!==u))try{u=converterUtils.removeStyle(u,t[v].position.start,t[v].position.end,s,0,0,t[v].name+": "+C)}catch(e){throw console.log("Remove style failed replacing url",e,"name",t[v]),e}var V=_propToCamelCase(t[v].name),P="virtualAttrStyle",j=void 0!==a.virtualStyle?a.virtualStyle[V]:void 0,z=" ";void 0===a[P]&&(a[P]="''",z=""),void 0!==j?(a[P]="'"+t[v].name+": '+("+j+")+';"+z+"'+"+a[P],delete a.virtualStyle[V]):a[P]="'"+t[v].name+": "+converterUtils.addSlashes(C)+";"+z+"'+"+a[P]}}if(void 0!==i&&null!==i){for(var L in a.virtualStyle)if(a.virtualStyle.hasOwnProperty(L))throw console.log("Unexpected virtualStyle binding after conversion to virtualAttr.style",L,a.virtualStyle[L],e),"Unexpected virtualStyle binding after conversion to virtualAttr.style for "+L;delete a.virtualStyle;var q=domutils.getAttribute(i,"data-bind"),O=(null!==q?q+", ":"")+_bindingSerializer(a);domutils.setAttribute(i,"data-bind",O)}if(void 0===e){var T=!1;for(var B in a.virtualStyle)if(a.virtualStyle.hasOwnProperty(B)){T=!0;break}if(T){if(void 0!==a.virtualAttrStyle){var D=a.virtualAttrStyle;delete a.virtualAttrStyle,a.virtualAttrStyle=D}}else delete a.virtualStyle;return _bindingSerializer(a)}return u},_bindingSerializer=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&("object"==typeof e[r]?t.push(r+": { "+_bindingSerializer(e[r])+" }"):t.push(r+": "+e[r]));return t.reverse().join(", ")};module.exports=elaborateDeclarations;

},{"./domutils.js":50,"./utils.js":56,"console-browserify":3,"mensch/lib/parser.js":16}],50:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null;function _extend(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var objExtend=function(e,t){return"function"==typeof $.extend?$.extend(!0,e,t):_extend(e,JSON.parse(JSON.stringify(t)))},getAttribute=function(e,t){var n=$(e).attr(t);return void 0===n&&(n=null),n},setAttribute=function(e,t,n){$(e).attr(t,n)},removeAttribute=function(e,t){$(e).removeAttr(t)},getInnerText=function(e){return $(e).text()},getInnerHtml=function(e){return $(e).html()},getLowerTagName=function(e){return""===e.tagName&&"string"==typeof e.name?e.name.toLowerCase():""!==e.tagName?e.tagName.toLowerCase():$(e).prop("tagName").toLowerCase()},setContent=function(e,t){$(e).html(t)},replaceHtml=function(e,t){$(e).replaceWith(t)},removeElements=function(e,t){t&&void 0!==e.detach&&e.detach(),e.remove()};module.exports={getAttribute:getAttribute,setAttribute:setAttribute,removeAttribute:removeAttribute,getInnerText:getInnerText,getInnerHtml:getInnerHtml,getLowerTagName:getLowerTagName,setContent:setContent,replaceHtml:replaceHtml,removeElements:removeElements,objExtend:objExtend};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],51:[function(require,module,exports){
"use strict";var console=require("console-browserify"),elaborateDeclarations=require("./declarations.js"),utils=require("./utils.js"),modelDef=require("./model.js"),_getOptionsObject=function(e){for(var t=e.split("|"),o={},i=0;i<t.length;i++){var l=t[i].split("=");o[l[0].trim()]=l.length>1?l[1].trim():l[0].trim()}return o},_filterProps=function(e,t,o){var i=[];for(var l in e)if(!l.match(/^customStyle$/)&&!l.match(/^_/)&&e.hasOwnProperty(l)){var a=null!==e[l]&&void 0!==e[l]._category&&"style"==e[l]._category;"id"==l||"type"==l||l.match(/Blocks$/)||("styler"==t?(a||o>0)&&i.push(l):"edit"==t?null!==e[l]&&void 0!==e[l]._category&&"content"==e[l]._category&&(void 0===e[l]._context||"block"!=e[l]._context)&&i.push(l):void 0===t&&i.push(l))}return i},_propInput=function(e,t,o,i,l){var a,n="";if(null!==e&&void 0!==e._widget&&(a=e._widget),void 0===a)throw"Unknown data type for "+t;var s="focusable: true";if("edit"==i&&(s+=", event: { focus: function(ui, event) { $($element).click(); } } "),n+='<label class="data-'+a+'"'+("boolean"==a?" data-bind=\"event: { mousedown: function(ui, evt) { if (evt.button == 0) { var input = $($element).find('input'); var ch = input.prop('checked'); setTimeout(function() { input.click(); input.prop('checked', !ch); input.trigger('change'); }, 0); } } }, click: function(ui, evt) { evt.preventDefault(); }, clickBubble: false\"":"")+">",void 0!==l&&void 0!==l[a]){var d=l[a],r={};if(void 0!==d.parameters)for(var c in d.parameters)d.parameters.hasOwnProperty(c)&&void 0!==e["_"+c]&&(r[c]=e["_"+c]);n+=d.html(o,s,r)}else if("boolean"==a)n+='<input type="checkbox" value="nothing" data-bind="checked: '+o+", "+s+'" />',n+='<span class="checkbox-replacer" ></span>';else if("color"==a)n+='<input size="7" type="text" data-bind="colorpicker: { color: '+o+", strings: $root.t('Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet.') }, , "+s+'" />';else if("select"==a){if(void 0!==e._options){var p=_getOptionsObject(e._options);for(var v in n+='<select data-bind="value: '+o+", "+s+'">',p)p.hasOwnProperty(v)&&(n+='<option value="'+v+"\" data-bind=\"text: $root.ut('template', '"+utils.addSlashes(p[v])+"')\">"+p[v]+"</option>");n+="</select>"}}else if("font"==a)n+='<select type="text" data-bind="value: '+o+", "+s+'">',n+='<optgroup label="Sans-Serif Fonts">',n+='<option value="Arial,Helvetica,sans-serif">Arial</option>',n+="<option value=\"'Comic Sans MS',cursive,sans-serif\">Comic Sans MS</option>",n+='<option value="Impact,Charcoal,sans-serif">Impact</option>',n+="<option value=\"'Trebuchet MS',Helvetica,sans-serif\">Trebuchet MS</option>",n+='<option value="Verdana,Geneva,sans-serif">Verdana</option>',n+="</optgroup>",n+='<optgroup label="Serif Fonts">',n+='<option value="Georgia,serif">Georgia</option>',n+="<option value=\"'Times New Roman',Times,serif\">Times New Roman</option>",n+="</optgroup>",n+='<optgroup label="Monospace Fonts">',n+="<option value=\"'Courier New',Courier,monospace\">Courier New</option>",n+="</optgroup>",n+="</select>";else if("url"==a)n+='<div class="ui-textbutton">',n+='<input class="ui-textbutton-input" size="7" type="url" pattern="(mailto:.+@.+|https?://.+\\..+|\\[.*\\].*)" value="nothing" data-bind="css: { withButton: typeof $root.linkDialog !== \'undefined\' }, validatedValue: '+o+", "+s+'" />',n+="<a class=\"ui-textbutton-button\" data-bind=\"visible: typeof $root.linkDialog !== 'undefined', click: typeof $root.linkDialog !== 'undefined' ? $root.linkDialog.bind($element.previousSibling) : false, button: { icons: { primary: 'fa fa-fw fa-ellipsis-h' }, label: 'Opzioni', text: false }\">Opzioni</a>",n+="</div>";else if("integer"==a){var u=0,b=1e3;null!==e&&void 0!==e._max&&(b=e._max),null!==e&&void 0!==e._min&&(u=e._min);var h=b-u>=100?10:1;n+='<input class="number-spinner" size="7" step="'+h+'" type="number" value="-1" data-bind="spinner: { min: '+u+", max: "+b+", page: "+5*h+", value: "+o+" }, valueUpdate: ['change', 'spin'], "+s+'" />'}else n+='<input size="7" type="text" value="nothing" data-bind="value: '+o+", "+s+'" />';return n+"</label>"},_getGlobalStyleProp=function(e,t,o,i){var l;return"object"==typeof t&&null!==t&&void 0===t._widget||void 0!==o&&void 0!==i&&i.length>0&&"object"==typeof e&&void 0!==e[i]&&(l=e[i]),l},_propEditor=function(e,t,o,i,l,a,n,s,d,r,c,p,v,u,b){if(void 0===d&&(d=0),void 0!==n&&"object"==typeof i&&null!==i&&void 0===i._usecount)return"function"==typeof console.debug&&console.debug("Ignoring",a,"property because it is not used by the template","prop:",n,"type:",s,"level:",d,e._templateName),"";var h,f=void 0!==p?n+"._defaultComputed":n,m="",g=f,_=1,y=1;if("object"==typeof i&&null!==i&&void 0===i._widget||void 0===p&&(_+=1),void 0===p&&void 0!==r&&(y+=r),void 0!==n&&v&&(m+="\x3c!-- ko ifSubs: { data: "+g+", threshold: "+y+", gutter: "+_+" } --\x3e"),void 0===n||null!==i&&void 0!==i._name||console.log("Missing label for property ",n),void 0===n&&null!==i&&void 0===i._name&&"theme"!==i.type&&console.log("Missing label for object ",i.type),"object"==typeof i&&null!==i&&void 0===i._widget){var k=_filterProps(i,s,d),x="styler"==s&&null!==i&&void 0!==i.customStyle&&void 0!==p,S="",w="";void 0!==n&&"edit"==s&&(S=", click: function(obj, evt) { $root.selectItem("+n+", $data); return false }, clickBubble: false, css: { selecteditem: $root.isSelectedItem("+n+") }, scrollIntoView: $root.isSelectedItem("+n+"), ",w+=" selectable"),x&&(w+=" supportsCustomStyles"),m+='<div class="objEdit level'+d+w+'" data-bind="tooltips: {}'+S+'">';var $,j,D,B=null!==i&&void 0!==i._name?i._name:void 0!==n?"["+n+"]":"";if(x){var E="Stile";void 0!==l&&null!==l&&void 0!==l._name?E=l._name:console.log("Missing label for theme section ",n,null!==i?i.type:"-"),B="<span class=\"blockSelectionMethod\" data-bind=\"text: customStyle() ? $root.ut('template', '"+utils.addSlashes(B)+"') : $root.ut('template', '"+utils.addSlashes(E)+"')\">Block</span>"}else B="<span data-bind=\"text: $root.ut('template', '"+utils.addSlashes(B)+"')\">"+B+"</span>";m+="<span"+(h=null!==i&&void 0!==i._help?' title="'+utils.addSlashes(i._help)+"\" data-bind=\"attr: { title: $root.ut('template', '"+utils.addSlashes(i._help)+"') }\"":"")+' class="objLabel level'+d+'">'+B+"</span>","edit"==s&&void 0!==i._blockDescription&&(m+="<div class=\"blockDescription\" data-bind=\"html: $root.ut('template', '"+utils.addSlashes(i._blockDescription)+"')\">"+i._blockDescription+"</div>"),x&&(m+='<label class="data-boolean blockCheck" data-bind="tooltips: { }">',m+='<input type="checkbox" value="nothing" data-bind="focusable: true, checked: customStyle" />',m+='<span title="Switch between global and block level styles editing" data-bind="attr: { title: $root.t(\'Switch between global and block level styles editing\') }" class="checkbox-replacer checkbox-replacer-onoff"></span>',m+="</label>",m+="\x3c!-- ko template: { name: 'customstyle', if: customStyle } --\x3e\x3c!-- /ko --\x3e"),void 0!==n&&(m+="\x3c!-- ko with: "+n+" --\x3e",1==d&&void 0!==n&&void 0!==i._previewBindings&&void 0!==e&&(void 0!==u&&(m+='\x3c!-- ko with: $root.content() --\x3e<div class="objPreview" data-bind="'+u+'"></div>\x3c!-- /ko --\x3e'),void 0!==b&&(m+='\x3c!-- ko with: $parent --\x3e<div class="objPreview" data-bind="'+b+'"></div>\x3c!-- /ko --\x3e'),m+='<div class="objPreview"><div class="objPreviewInner" data-bind="'+elaborateDeclarations(void 0,i._previewBindings,o,e.bind(this,a+"."))+'"></div></div>')),0===d&&void 0!==i._previewBindings&&($=elaborateDeclarations(void 0,i._previewBindings,o,e.bind(this,a.length>0?a+".":"")));var C,I=m.length;for(j=0;j<k.length;j++)D=a.length>0?a+"."+k[j]:k[j],"object"==typeof i[k[j]]&&null!==i[k[j]]&&void 0===i[k[j]]._widget||(C=void 0,0===d&&"theme"==k[j]?m+=_propEditor(e,t,o,i[k[j]],void 0,D,k[j],s,0,r,void 0,void 0,v,u):(C=_getGlobalStyleProp(c,i[k[j]],k[j],D),m+=_propEditor(e,t,o,i[k[j]],void 0,D,k[j],s,d+1,r,c,C,v,u,$)));for(j=0;j<k.length;j++)D=a.length>0?a+"."+k[j]:k[j],"object"==typeof i[k[j]]&&null!==i[k[j]]&&void 0===i[k[j]]._widget&&(C=void 0,0===d&&"theme"==k[j]?m+=_propEditor(e,t,o,i[k[j]],void 0,D,k[j],s,0,r,void 0,void 0,v,u):(C=_getGlobalStyleProp(c,i[k[j]],k[j],D),m+=_propEditor(e,t,o,i[k[j]],void 0,D,k[j],s,d+1,r,c,C,v,u,$)));if(0==m.length-I){if("object"==typeof i&&null!==i&&"template"==i._context)return"";m+='<div class="objEmpty" data-bind="html: $root.t(\'Selected element has no editable properties\')">Selected element has no editable properties</div>'}void 0!==n&&(m+="\x3c!-- /ko --\x3e"),m+="</div>"}else{var P=!0;if(void 0===c&&(P=!1),null===i||"object"!=typeof i||void 0!==i._widget){var M=[];void 0!==p&&M.push("css: { notnull: "+n+"() !== null }"),(h=null!==i&&void 0!==i._help?' title="'+utils.addSlashes(i._help)+"\" data-bind=\"attr: { title: $root.ut('template', '"+utils.addSlashes(i._help)+"') }\"":"").length>0&&M.push("tooltips: {}");var T=M.length>0?'data-bind="'+utils.addSlashes(M.join())+'"':"";m+='<div class="propEditor '+(P?"checkboxes":"")+'"'+T+">";var O=null!==i&&void 0!==i._name?i._name:void 0!==n?"["+n+"]":"";m+="<span"+h+' class="propLabel">'+(O="<span data-bind=\"text: $root.ut('template', '"+utils.addSlashes(O)+"')\">"+O+"</span>")+"</span>",m+='<div class="propInput '+(void 0!==c?"local":"")+'" data-bind="css: { default: '+n+'() === null }">',m+=_propInput(i,n,f,s,t),m+="</div>",void 0!==p&&(m+='<div class="propInput global" data-bind="css: { overridden: '+n+'() !== null }">',m+=_propInput(i,n,p,s,t),m+="</div>",P&&(m+='<div class="propCheck"><label data-bind="tooltips: {}"><input type="checkbox" data-bind="focusable: true, click: function(evt, obj) { $root.localGlobalSwitch('+n+", "+p+"); return true; }, checked: "+n+'() !== null">',m+='<span class="checkbox-replacer" data-bind="css: { checked: '+n+"() !== null }, attr: { title: $root.t('This style is specific for this block: click here to remove the custom style and revert to the theme value') }\"></span>",m+="</label></div>")),m+="</div>"}else m+=null===i||"object"!=typeof i?'<div class="propEditor unknown">[A|'+n+"|"+typeof i+"]</div>":'<div class="propEditor unknown">[B|'+n+"|"+typeof i+"]</div>"}return void 0!==n&&v&&(m+="\x3c!-- /ko --\x3e",m+="\x3c!-- ko ifSubs: { not: true, data: "+g+", threshold: "+y+", gutter: 0 } --\x3e",m+='<span class="label notused">('+n+")</span>",m+="\x3c!-- /ko --\x3e"),m},createBlockEditor=function(e,t,o,i,l,a,n,s,d,r,c,p){void 0===c&&(c=!0);var v,u=modelDef.getDef(e,a),b=modelDef.getDef(e,l);void 0!==b._previewBindings&&"thaeme"!=a&&"styler"==n&&(v=elaborateDeclarations(void 0,b._previewBindings,i,modelDef.getBindValue.bind(void 0,e,o,l,l,"")));var h,f=void 0!==r&&r?e[a]._globalStyles:void 0,m=void 0!==r&&r?e[a]._globalStyle:void 0;void 0!==m&&(h=modelDef.getDef(e,"theme")[m.replace(/^(\$theme|_theme_)\./,"")]);var g=modelDef.getBindValue.bind(void 0,e,o,l,a);g._templateName=a;var _='<div class="editor">';_+='<div class="blockType'+(void 0!==f?" withdefaults":"")+'">'+u.type+"</div>";var y=_propEditor(g,t,i,u,h,"",void 0,n,p,d,f,m,c,v);y.length>0&&(_+=y),s(_+="</div>",a,n)},createBlockEditors=function(e,t,o,i,l,a,n,s){createBlockEditor(e,t,o,i,l,a,"edit",n,s),createBlockEditor(e,t,o,i,l,a,"styler",n,s,!0)},generateEditors=function(e,t,o,i,l){var a,n=e._defs,s=e.templateName,d=e._blocks,r=[];for(a=0;a<d.length;a++)void 0!==d[a].container&&r.push(modelDef.generateModel(n,d[a].block)),createBlockEditors(n,t,void 0,o,d[a].root,d[a].block,i,l);return void 0!==n.theme&&createBlockEditor(n,t,void 0,o,s,"theme","styler",i,void 0,!1,!1,-1),r};module.exports=generateEditors;

},{"./declarations.js":49,"./model.js":53,"./utils.js":56,"console-browserify":3}],52:[function(require,module,exports){
"use strict";var modelDef=require("./model.js"),wrappedResultModel=function(e){var r=e._defs,t=e.templateName,l=modelDef.getDef(r,t),a=modelDef.generateResultModel(e);return require("./wrapper.js")(a,l,r)},translateTemplate=function(){var e=require("./parser.js");return e.apply(e,arguments)},generateEditors=function(){var e=require("./editor.js");return e.apply(e,arguments)},checkModel=function(){var e=require("./checkmodel.js");return e.apply(e,arguments)};module.exports={translateTemplate:translateTemplate,wrappedResultModel:wrappedResultModel,generateResultModel:modelDef.generateResultModel,generateEditors:generateEditors,checkModel:checkModel};

},{"./checkmodel.js":48,"./editor.js":51,"./model.js":53,"./parser.js":54,"./wrapper.js":57}],53:[function(require,module,exports){
"use strict";var objExtend=require("./domutils.js").objExtend,console=require("console-browserify"),_valueSet=function(e,t,o,l){var r=o.indexOf(".");if(-1==r)if(void 0===t[o])console.log("Undefined prop "+o+" while setting value "+l+" in model._valueSet");else if(null===t[o])"object"==typeof l&&null!==l&&void 0===l.push&&console.log("nullpropobjectvalue",o,l),t[o]=l;else if("object"==typeof t[o]&&"function"==typeof t[o].push){var n;if("string"==typeof l){var i=l.match(/^\[(.*)\]$/);if(null===i)throw"Unexpected default value for array property "+o+": "+l;n=i[1].split(",")}else{if("object"!=typeof l||void 0===l.push)throw"Unexpected default value for array property "+o+": "+l+" typeof "+typeof l;n=l}for(var a=[],d=0;d<n.length;d++)"@"==n[d].substr(0,1)?a.push(_generateModel(e,n[d].substr(1))):n[d].length>0&&a.push(n[d]);t[o]=a}else"string"==typeof t[o]||"boolean"==typeof t[o]?t[o]=l:"object"==typeof t[o]&&null!==t[o]&&void 0!==t[o]._widget?("object"==typeof l&&null!==l&&console.log("objectvalue",o,t[o]._widget,l),t[o]=l):console.log("setting",typeof t[o],t[o],o,l);else{var f=o.substr(0,r);_valueSet(e,t[f],o.substr(r+1),l)}},_modelCreateOrUpdateBlockDef=function(e,t,o,l){if(void 0!==e[t]&&e[t]._initialized&&!e[t]._writeable)throw console.log("_modelCreateOrUpdateBlockDef",e,t,o,l),"Trying to alter non writeable model: "+t+" / "+o;if(void 0===e[t]&&(e[t]={_writeable:!0},void 0===l&&(l={}),void 0===l.category&&void 0===e[t]._category&&(t.match(/(^t|.T)heme$/)||t.match(/(^s|.S)tyle$/)||t.match(/(^c|.C)olor$/)||t.match(/(^r|.R)adius$/)?l.category="style":l.category="content")),void 0!==l){if(void 0!==l.name&&(e[t]._name=l.name),void 0!==l.themeOverride&&(e[t]._themeOverride=l.themeOverride),void 0!==l.globalStyle){e[t]._globalStyle=l.globalStyle;var r=l.globalStyle.replace(/^(\$theme|_theme_)\./,""),n=r.indexOf("."),i=-1!=n?r.substr(0,n):r;_modelCreateOrUpdateBlockDef(e,"theme",i),(void 0===e[t]._themeOverride||e[t]._themeOverride)&&_modelCreateOrUpdateBlockDef(e,t,"customStyle=false")}void 0!==l.contextName&&(e[t]._context=l.contextName,"block"==l.contextName&&void 0===e[t]._globalStyle&&(e[t]._globalStyle="_theme_.bodyTheme",_modelCreateOrUpdateBlockDef(e,"theme","bodyTheme"),(void 0===e[t]._themeOverride||e[t]._themeOverride)&&_modelCreateOrUpdateBlockDef(e,t,"customStyle=false"))),void 0!==l.extend&&(e[t].type=l.extend)}for(var a in l)l.hasOwnProperty(a)&&void 0!==l[a]&&-1==["name","extend","contextName","globalStyle","themeOverride"].indexOf(a)&&(e[t]["_"+a]=l[a]);void 0!==o&&o.length>0&&(e[t]._props=void 0!==e[t]._props&&e[t]._props.length>0?e[t]._props+" "+o:o)},_removePrefix=function(e){var t=e.match(/^[^A-Z]+([A-Z])(.*)$/);return null!==t?t[1].toLowerCase()+t[2]:null},_generateModelFromDef=function(e,t){var o={};for(var l in e)if(!l.match(/^_.*/)&&e.hasOwnProperty(l)){var r=e[l];if("object"==typeof r&&null!==r&&void 0!==r._complex&&r._complex)o[l]=_generateModelFromDef(r,t);else if("type"==l)o[l]=r;else{if("object"!=typeof r)throw console.error("Unexpected model def",l,r,e),"Unexpected model def ["+l+"]="+r;o[l]=null}}if(void 0!==e._defaultValues){var n=e._defaultValues;for(var i in n)n.hasOwnProperty(i)&&_valueSet(t,o,i,n[i])}return o},_generateModel=function(e,t){var o=_getModelDef(e,t,!1,!0);return _generateModelFromDef(o,e)},_getDef=function(e,t){return _getModelDef(e,t,!1,!0)},_getModelDef=function(e,t,o,l){if(void 0===e[t]){if(-1!=t.indexOf(" "))return null;var r=_removePrefix(t);return null!==r?_getModelDef(e,r,o,l):null}var n=e[t];if("object"!=typeof n)throw"Block definition must be an object: found "+n+" for "+t;if(void 0===n._initialized){if(void 0===n.type&&(-1==t.indexOf(" ")?n.type=t:n.type=t.substr(t.indexOf(" ")+1)),n.type!=t&&void 0===n._widget){var i=_getModelDef(e,n.type,!0);n=objExtend(i,n),e[t]=n}else void 0===n._widget&&void 0===n._props&&n._complex;n._writeable=!0,n._initialized=!0}if(void 0!==n._props){var a=n._props;if((a=a.split(" ")).length>0&&void 0===n._writeable)throw console.error("Altering a non writable object ",t,a,n),"Altering a non writable object: "+t+" def: "+a;void 0===n._processedDefs&&(n._processedDefs={}),void 0===n._globalStyles&&(n._globalStyles={}),void 0===n._defaultValues&&(n._defaultValues={});for(var d=0;d<a.length;d++){var f=a[d];if(0!==f.length){var s=f,u=null,c=f.match(/^([^=\[\]]+)(\[\])?(=?)(.*)$/);if(null!==c&&(f=c[1],"[]"==c[2]&&(void 0===n[f]&&(n[f]=[]),u=[]),"="==c[3]&&(u=f.match(/(^v|V)isible$/)?"true"==String(c[4]).toLowerCase():f.match(/^customStyle$/)?"true"==String(c[4]).toLowerCase():c[4])),null!==u&&void 0===n._defaultValues[f]&&(n._defaultValues[f]=u),void 0===n[f]){var _=_getModelDef(e,t+" "+f,!0);null===_&&(_=_getModelDef(e,f,!0)),n[f]=_}n._processedDefs[f]=s,n._complex=!0}}delete n._props}if(o)return n._writeable=!1,objExtend({},n);if(l)return n._writeable=!1,n;if(void 0===n._writeable||!1===n._writeable)throw"Retrieving non writeable object definition: "+t;return n},_increaseUseCount=function(e,t){if(e){if(void 0===t._usecount)throw console.error("ERROR trying to bind an unused property while readonly",t),"ERROR trying to bind an unused property"}else void 0===t._usecount&&(t._usecount=0),t._usecount++},ensureGlobalStyle=function(e,t,o,l,r,n,i,a){var d=o(n,i,a);if(void 0===e[l]._globalStyles[r]){if(t)throw"Cannot find _globalStyle for "+r+" in "+l+"!";(-1!=r.indexOf(".")||"object"==typeof e[l][r]&&void 0!==e[l][r]._widget)&&(e[l]._globalStyles[r]=d)}else if(e[l]._globalStyles[r]!=d)throw"Unexpected conflicting globalStyle [2] for "+l+"/"+r+": old="+e[l]._globalStyles[r]+" new="+d},modelEnsurePathAndGetBindValue=function(e,t,o,l,r,n,i,a,d,f){var s,u,c;if("$"==i.substr(0,1)){console.warn("DEPRECATED $ in bindingProvider: ",i,r);var _=i.indexOf(".");if(-1==_)throw"Unexpected fullPath: "+i+"/"+n+"/"+r+"/"+a+"/"+d;if(s=i.substr(1,_-1),c=i.substr(_+1),"theme"!=s)throw"Unexpected $ sequence: "+s+" in "+i;var v=c.indexOf(".");u="$root.content().theme()."+(s=c.substr(0,v))+"()."+(c=c.substr(v+1)).replace(new RegExp("\\.","g"),"().")}else if("#"==i.substr(0,1))console.warn("DEPRECATED # in bindingProvider: ",i,r),s=l,u="$root.content()."+(c=i.substr(1)).replace(new RegExp("\\.","g"),"().");else if("_theme_."==i.substr(0,8)){var p=i.indexOf(".",8);u="$root.content().theme()."+(s=i.substr(8,p-8))+"()."+(c=i.substr(p+1)).replace(new RegExp("\\.","g"),"().")}else"_root_."==i.substr(0,7)?(s=l,u="$root.content()."+(c=i.substr(7)).replace(new RegExp("\\.","g"),"().")):(s=r,c=n+i,u=i.replace(new RegExp("\\.","g"),"()."));if(void 0===t[s])throw"Cannot find model def for ["+s+"]";var g,b=c.indexOf("."),h=-1==b?c:c.substr(0,b);if(-1!=s.indexOf("-"))throw console.error("ERROR cannot use - for block names",s),"ERROR unexpected char in block name: "+s;if(-1!=h.indexOf("-"))throw console.error("ERROR cannot use - for property names",h),"ERROR unexpected char in property name: "+s;if(e)return void 0!==t[s]._globalStyle&&void 0!==t[s][h]&&"style"==t[s][h]._category&&(u+="._defaultComputed"),u;if(e){if(void 0!==a)throw"Cannot use defaultValue in readonly mode!";if(d)throw"Cannot use overrideDefault in readonly mode for "+s+"/"+c+"/"+d+"!";if(void 0!==f)throw"Cannot set category for "+s+"/"+c+"/"+f+" in readonly mode!";g=_getModelDef(t,s,!1,!0)}else!1===t[s]._writeable&&console.log("TODO debug use cases for this condition",s,c),g=_getModelDef(t,s,!1===t[s]._writeable);if(null===g)throw"Unexpected model for ["+s+"]";if(void 0===g[h]){if(e)throw"Cannot find path "+h+" for "+s+"!";_modelCreateOrUpdateBlockDef(t,s,h),g=_getModelDef(t,s,!1)}void 0!==t[s]._globalStyle&&void 0!==t[s][h]&&null!==t[s][h]&&"style"==t[s][h]._category&&(u+="._defaultComputed");var y=g;try{if(_increaseUseCount(e,y),-1!=b){var m=c;do{var w=m.substr(0,b);if(void 0===y[w])throw"Found an unexpected prop "+w+" for model "+s+" for "+c;y=y[w],_increaseUseCount(e,y),b=(m=m.substr(b+1)).indexOf(".")}while(-1!=b);if(void 0===y[m]||null===y[m])throw"Found an unexpected path termination "+m+" for model "+s+" for "+c;y=y[m]}else y=y[c];if(void 0===y||null===y)throw"Unexpected null model for "+s+"/"+n+"/"+i;void 0!==f&&(y._category=f),_increaseUseCount(e,y)}catch(e){throw console.error("TODO ERROR Property lookup exception",e,s,c,r,i,t),e}if(void 0!==t[s]._globalStyle&&"object"==typeof t[s][h]&&null!==t[s][h]&&void 0!==t[s][h]._category&&"style"==t[s][h]._category){var x=modelEnsurePathAndGetBindValue.bind(void 0,e,t,o,l,r,""),O=-1!=c.indexOf(".")?c.substr(c.indexOf(".")):"";if(-1!=O.indexOf(".",1))throw"TODO unsupported object nesting! "+c;var D=t[s]._globalStyle+"."+h;"object"==typeof t[s][h]&&null!==t[s][h]&&void 0!==t[s][h]._globalStyle&&(D=t[s][h]._globalStyle),ensureGlobalStyle(t,e,x,s,h,D,void 0,!1);var S=D+O;if(void 0===a&&null!==t[s]._defaultValues[c]&&(a=t[s]._defaultValues[c]),ensureGlobalStyle(t,e,x,s,c,S,a,d),void 0!==a){if(e)throw console.error("Cannot set a new theme default value",S.substr(7),a,"while in readonly mode"),"Cannot set a new theme default value ("+a+") for "+S.substr(7)+" while in readonly mode!";o("default",S.substr(7),a)}a=null}if(void 0!==a)if(void 0===t[s]._defaultValues[c]||void 0!==d&&d){if(e)throw"Cannot set new _defaultValues [1] for "+c+" in "+s+"!";t[s]._defaultValues[c]=a}else if(null===a){if(e&&null!==t[s]._defaultValues[c])throw"Cannot set new _defaultValues [2] for "+c+" in "+s+"!";t[s]._defaultValues[c]=null}else if(t[s]._defaultValues[c]!=a)throw console.error("TODO error!!! Trying to set a new default value for "+s+" "+c+" while it already exists (current: "+t[s]._defaultValues[c]+", new: "+a+")"),"Trying to set a new default value for "+s+" "+c+" while it already exists (current: "+t[s].defaultValues[c]+", new: "+a+")";return u},generateResultModel=function(e){var t=e._defs,o=e.templateName,l=_generateModel(t,o);return void 0!==t.theme&&(l.theme=_generateModel(t,"theme")),l};module.exports={ensurePathAndGetBindValue:modelEnsurePathAndGetBindValue.bind(void 0,!1),getBindValue:modelEnsurePathAndGetBindValue.bind(void 0,!0),generateModel:_generateModel,generateResultModel:generateResultModel,getDef:_getDef,createOrUpdateBlockDef:_modelCreateOrUpdateBlockDef};

},{"./domutils.js":50,"console-browserify":3}],54:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,console=require("console-browserify"),converterUtils=require("./utils.js"),elaborateDeclarations=require("./declarations.js"),processStylesheetRules=require("./stylesheet.js"),modelDef=require("./model.js"),domutils=require("./domutils.js"),wrapElementWithCondition=function(e,t,o){var a=domutils.getAttribute(t,e);try{var i=converterUtils.conditionBinding(a,o);$(t).before("\x3c!-- ko if: "+i+" --\x3e"),$(t).after("\x3c!-- /ko --\x3e"),domutils.removeAttribute(t,e)}catch(o){throw console.warn("Model ensure path failed in if/variant",t,a,e),o}},replacedAttributes=function(e,t){domutils.setAttribute(e,t,domutils.getAttribute(e,"replaced"+t))},processStyle=function(e,t,o,a){var i,r=domutils.getAttribute(e,"replacedstyle"),l=null;a&&(i={uniqueId:"$data",attr:{id:"id"}});var d=null!==domutils.getAttribute(e,"data-ko-display");null===(l=elaborateDeclarations(r,void 0,t,o,e,i,d))?l=r:domutils.removeAttribute(e,"replacedstyle"),null!==l&&(l.trim().length>0?domutils.setAttribute(e,"style",l):domutils.removeAttribute(e,"style"))},_fixRelativePath=function(e,t,o,a){var i=t(domutils.getAttribute(a,e));null!==i&&domutils.setAttribute(a,e,i)},processBlock=function(e,t,o,a,i,r,l,d,s,c){try{var n;if("block"==r)n=domutils.getAttribute(e,"data-ko-block"),domutils.removeAttribute(e,"data-ko-block");else{if("template"!=r)throw"Unexpected context name while processing block: "+r;n=l}$("[data-ko-remove]",e).remove();for(var u=$("[data-ko-block]",e).replaceWith("<replacedblock>"),m=["href","src","data-ko-placeholder-src","background"],h=0;h<m.length;h++){var p=_fixRelativePath.bind(void 0,m[h],i);$("["+m[h]+"]",e).each(p)}var b=domutils.getAttribute(e,"data-ko-properties");null===b&&(b=""),$("[data-ko-properties]",e).each(function(e,t){b.length>0&&(b+=" "),b+=domutils.getAttribute(t,"data-ko-properties"),domutils.removeAttribute(t,"data-ko-properties")}),modelDef.createOrUpdateBlockDef(t,n,b,{contextName:r});var v=modelDef.ensurePathAndGetBindValue.bind(void 0,t,o,l,n,"");"block"==r&&v("id",""),$("style",e).each(function(e,a){var r=domutils.getInnerHtml(a),d=modelDef.createOrUpdateBlockDef.bind(void 0,t),s=modelDef.ensurePathAndGetBindValue.bind(void 0,t,o,l),u=processStylesheetRules(r,void 0,s,d,o,i,l,n);if(u!=r)if(""!==u.trim()){var m=c(u);domutils.setAttribute(a,"data-bind","template: { name: '"+m+"' }"),domutils.setContent(a,"")}else domutils.removeElements($(a))}),processStyle(e,i,v,s);for(var f=["data-ko-display","data-ko-editable","data-ko-wrap","href"],k=0;k<f.length;k++)if(domutils.getAttribute(e,f[k]))throw console.warn("ERROR: Unsupported "+f[k]+" used together with data-ko-block",e),"ERROR: Unsupported "+f[k]+" used together with data-ko-block";return $("[data-ko-link]",e).each(function(e,t){var o=domutils.getAttribute(t,"data-ko-link"),a=domutils.getAttribute(t,"replacedstyle");void 0!==a&&null!==a||(a=""),a=""!==a?"-ko-attr-href: @"+o+"; "+a:"-ko-attr-href: @"+o,domutils.setAttribute(t,"replacedstyle",a),domutils.setAttribute(t,"data-ko-wrap",o),domutils.removeAttribute(t,"data-ko-link")}),$("[replacedstyle]",e).each(function(e,t){processStyle(t,i,v,!1)}),$("[replacedhttp-equiv]",e).each(function(e,t){replacedAttributes(t,"http-equiv")}),$("[data-ko-display]",e).each(function(e,t){wrapElementWithCondition("data-ko-display",t,v)}),$("[data-ko-editable]",e).each(function(e,t){var o,a,i,r,l,d,s=domutils.getAttribute(t,"data-ko-editable");if(s.lastIndexOf(".")>0){var n=s.substr(0,s.lastIndexOf("."));l=v(n)}else l=v(s);if(d="wysiwygClick: function(obj, evt) { $root.selectItem("+l+", $data); return false }, clickBubble: false, wysiwygCss: { selecteditem: $root.isSelectedItem("+l+") }, scrollIntoView: $root.isSelectedItem("+l+")","img"!=domutils.getLowerTagName(t)){a=domutils.getInnerHtml(t);var u=v(s,a,!0,"wysiwyg");if(o="",domutils.getAttribute(t,"id")||(o+="wysiwygId: id()+'_"+s.replace(".","_")+"', "),void 0!==d&&(o+=d+", "),o+="wysiwygOrHtml: "+u,"td"==domutils.getLowerTagName(t)){var m=$('<div data-ko-wrap="false" style="width: 100%; height: 100%"></div>')[0];domutils.setAttribute(m,"data-bind",o);var h=domutils.getInnerHtml($("<div></div>").append(m));domutils.setContent(t,h)}else r=(null!==(i=domutils.getAttribute(t,"data-bind"))?i+", ":"")+o,domutils.setAttribute(t,"data-bind",r),domutils.setContent(t,"");domutils.removeAttribute(t,"data-ko-editable")}else{var p=domutils.getAttribute(t,"width");if(""===p&&(p=null),null===p)throw console.error("ERROR: data-ko-editable images must declare a WIDTH attribute!",t),"ERROR: data-ko-editable images must declare a WIDTH attribute!";var b=domutils.getAttribute(t,"height");""===b&&(b=null);var f=domutils.getAttribute(t,"align"),k=(i=domutils.getAttribute(t,"data-bind"))&&i.match(/virtualAttr: {[^}]* height: ([^,}]*)[,}]/);k&&(b=k[1]);var g=i&&i.match(/virtualAttr: {[^}]* width: ([^,}]*)[,}]/);g&&(p=g[1]);var w,A,y="";(a=domutils.getAttribute(t,"data-ko-placeholder-src"))?y=domutils.getAttribute(t,"src"):a=domutils.getAttribute(t,"src"),p&&b?w=p+"+'x'+"+b:b?p||(w="'h'+"+b+"+''"):w="'w'+"+p+"+''";var x=b||domutils.getAttribute(t,"data-ko-placeholder-height"),_=p||domutils.getAttribute(t,"data-ko-placeholder-width");if(domutils.removeAttribute(t,"src"),domutils.removeAttribute(t,"data-ko-editable"),domutils.removeAttribute(t,"data-ko-placeholder-height"),domutils.removeAttribute(t,"data-ko-placeholder-width"),domutils.removeAttribute(t,"data-ko-placeholder-src"),a&&(A="{ width: "+_+", height: "+x+", text: "+w+"}"),!_||!x)throw console.error("IMG data-ko-editable must declare width and height attributes, or their placeholder counterparts data-ko-placeholder-width/data-ko-placeholder-height",t),"ERROR: IMG data-ko-editable MUST declare width and height attributes, or their placeholder counterparts data-ko-placeholder-width/data-ko-placeholder-height";var D=v(s,y,!1,"wysiwyg");o="wysiwygSrc: { width: "+p+", height: "+b+", src: "+D+", placeholder: "+A+" }",r=(null!==i?i+", ":"")+o,domutils.setAttribute(t,"data-bind",r);var I=c(t),R="{ width: "+p;"left"==f?R+=", float: 'left'":"right"==f?R+=", float: 'right'":"center"==f&&("function"==typeof console.debug?console.debug("Ignoring align=center on an img tag: we don't know how to emulate this alignment in the editor!"):"top"==f?R+=", verticalAlign: 'top'":"middle"==f?R+=", verticalAlign: 'middle'":"bottom"==f&&(R+=", verticalAlign: 'bottom'")),R+="}",$(t).before("\x3c!-- ko wysiwygImg: { _data: $data, _item: "+l+", _template: '"+I+"', _editTemplate: 'img-wysiwyg', _src: "+D+", _width: "+p+", _height: "+b+", _align: "+(null===f?void 0:"'"+f+"'")+", _size: "+w+", _method: "+void 0+", _placeholdersrc: "+A+", _stylebind: "+R+" } --\x3e"),$(t).after("\x3c!-- /ko --\x3e")}}),$("[href]",e).each(function(e,t){var o=domutils.getAttribute(t,"href"),a="wysiwygHref: '"+converterUtils.addSlashes(o)+"'",i=domutils.getAttribute(t,"data-bind"),r=(null!==i?i+", ":"")+a;domutils.setAttribute(t,"data-bind",r)}),$("replacedblock",e).each(function(e,r){var s=u[e],m=processBlock(s,t,o,a,i,"block",n,d,!0,c),h=modelDef.ensurePathAndGetBindValue(t,o,l,n,"",m);$(r).before("\x3c!-- ko block: { data: "+converterUtils.addSlashes(h)+", template: 'block' } --\x3e"),$(r).after("\x3c!-- /ko --\x3e"),$(r).remove()}),$($("[data-ko-wrap]",e).get().reverse(),e).each(function(e,t){var o=domutils.getAttribute(t,"data-ko-wrap");if(void 0===o||""===o||"true"===o)throw"Unsupported empty value for data-ko-wrap: use false value if you want to always remove the tag";var a,i,r=converterUtils.conditionBinding(o,v),l=domutils.getAttribute(t,"data-bind");if(""!==l&&null!==l&&l.match(/(block|wysiwygOrHtml):/)){var d="\x3c!-- ko "+l+" --\x3e"+domutils.getInnerHtml(t)+"\x3c!-- /ko --\x3e";a=c(d),domutils.removeAttribute(t,"data-ko-wrap"),i=c(t),domutils.replaceHtml(t,"\x3c!-- ko template: /* special */ (typeof templateMode != 'undefined' && templateMode == 'wysiwyg') || "+r+" ? '"+i+"' : '"+a+"' --\x3e\x3c!-- /ko --\x3e")}else a=c(domutils.getInnerHtml(t)),domutils.removeAttribute(t,"data-ko-wrap"),domutils.setContent(t,"\x3c!-- ko template: '"+a+"' --\x3e\x3c!-- /ko --\x3e"),i=c(t),domutils.replaceHtml(t,"\x3c!-- ko template: (typeof templateMode != 'undefined' && templateMode == 'wysiwyg') || "+r+" ? '"+i+"' : '"+a+"' --\x3e\x3c!-- /ko --\x3e")}),c(e,n,"show"),a(l,n,r,d),n}catch(t){throw console.error("Exception while parsing the template",t,e),t}};function conditional_replace(e){return e.replace(/<!--\[if ([^\]]*)\]>((?:(?!--)[\s\S])*?)<!\[endif\]-->/g,function(e,t,o){var a="\x3c!-- cc:start --\x3e";a+=o.replace(/<([A-Za-z:]+)/g,"\x3c!-- cc:bo:$1 --\x3e<cc").replace(/<\/([A-Za-z:]+)>/g,"\x3c!-- cc:bc:$1 --\x3e</cc>\x3c!-- cc:ac:$1 --\x3e").replace(/\/>/g,"/>\x3c!-- cc:sc --\x3e"),a+="\x3c!-- cc:end --\x3e";var i='<replacedcc condition="'+t+'" style="display: none">';return(i+=$("<div>").append($(a)).html().replace(/^<!-- cc:start -->/,"").replace(/<!-- cc:end -->$/,""))+"</replacedcc>"})}var translateTemplate=function(e,t,o,a){var i={},r=conditional_replace(t.replace(/(<[^>]+\s)(style|http-equiv)(="[^"]*"[^>]*>)/gi,function(e,t,o,a){return t+"replaced"+o+a})),l="function"==typeof $.parseHTML?$($.parseHTML(r,!1)):$(r),d=l[0],s=[],c=function(e,t,o,a){s.push({root:e,block:t,context:o,container:a})},n=function(e,t,o){if(void 0===i.themes&&(i.themes={}),void 0===i.themes[e]&&(i.themes[e]={}),void 0===i.themes[e][t]||null===i.themes[e][t])i.themes[e][t]=o;else if(void 0!==o&&null!==o){var a=i.themes[e][t];a!=o&&console.log("Error setting a new default for property "+t+" in theme "+e+". old:"+a+" new:"+o+"!")}},u={};$("[data-ko-container]",l).each(function(e,t){var o=domutils.getAttribute(t,"data-ko-container")+"Blocks";domutils.removeAttribute(t,"data-ko-container"),domutils.setAttribute(t,"data-bind","block: "+o);var a=$("> [data-ko-block]",t);domutils.removeElements(a,!0),u[o]=a}),modelDef.createOrUpdateBlockDef(i,"id"),modelDef.createOrUpdateBlockDef(i,"bodyTheme"),modelDef.createOrUpdateBlockDef(i,"blocks","blocks[]"),modelDef.createOrUpdateBlockDef(i,"text"),processBlock(d,i,n,c,o,"template",e,void 0,!1,a);var m=function(t,r,l){processBlock(l,i,n,c,o,"block",e,t,!0,a)};for(var h in u)if(u.hasOwnProperty(h)){var p=u[h],b=h;modelDef.ensurePathAndGetBindValue(i,n,e,e,"",b+".blocks","[]"),p.each(m.bind(void 0,b))}var v={_defs:i,templateName:e,_blocks:s};return void 0!==i[e]._version&&(v.version=i[e]._version),v};module.exports=translateTemplate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./declarations.js":49,"./domutils.js":50,"./model.js":53,"./stylesheet.js":55,"./utils.js":56,"console-browserify":3}],55:[function(require,module,exports){
"use strict";var cssParse=require("mensch/lib/parser.js"),console=require("console-browserify"),converterUtils=require("./utils.js"),elaborateDeclarations=require("./declarations.js"),_removeOptionalQuotes=function(e){return"'"!=e[0]&&'"'!=e[0]||e[e.length-1]!=e[0]?e:e.substr(1,e.length-2).replace(/\\([\s\S])/gm,"$1")},_processStyleSheetRules_processBlockDef=function(e,t){for(var o,s,r,l=0;l<t.length;l++)if("rule"==t[l].type){for(var n=t[l].selectors,i=!1,a=!1,c=0;c<n.length;c++)n[c].match(/:preview$/)?a=!0:i=!0;if(a&&i)throw console.log("cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs ",n),"Cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs";if(!a&&!i)throw console.log("cannot find known selectors in @supports -ko-blockdefs ",n),"Cannot find known selectors in @supports -ko-blockdefs";if(i){o="",s={},r=t[l].declarations;for(var p,u=0;u<r.length;u++)"property"==r[u].type&&(p=_removeOptionalQuotes(r[u].value),"label"==r[u].name?s.name=p:"context"==r[u].name?s.contextName=p:"properties"==r[u].name?o=p:"theme"==r[u].name?s.globalStyle="_theme_."+p:"themeOverride"==r[u].name?s.themeOverride="true"==String(p).toLowerCase():s[r[u].name]=p);for(var d=0;d<n.length;d++)e(n[d],o,s)}if(a)for(var f=0;f<n.length;f++)e(n[f].substr(0,n[f].indexOf(":")),void 0,{previewBindings:t[l].declarations})}},processStylesheetRules=function(e,t,o,s,r,l,n,i){var a,c=e,p=null;if(void 0===t){var u=cssParse(e,{comments:!0,position:!0});if("stylesheet"!=u.type||void 0===u.stylesheet)throw console.log("unable to process styleSheet",u),"Unable to parse stylesheet";t=u.stylesheet.rules}for(var d=t.length-1;d>=0;d--){if("supports"==t[d].type&&"-ko-blockdefs"==t[d].name)_processStyleSheetRules_processBlockDef(s,t[d].rules),c=converterUtils.removeStyle(c,t[d].position.start,p,0,0,0,"");else if("media"==t[d].type||"supports"==t[d].type)c=processStylesheetRules(c,t[d].rules,o,s,r,l,n,i);else if("comment"==t[d].type);else if("rule"==t[d].type){for(var f=t[d].selectors,h="",m=null,v=0;v<f.length;v++){h.length>0&&(h+=", ");var y=f[v].match(/\[data-ko-block=([^ ]*)\]/);if(null!==y){if(null!==m&&m!=y[1])throw"Found multiple block-match attribute selectors: cannot translate it ("+m+" vs "+y[1]+")";m=y[1]}h+="\x3c!-- ko text: templateMode =='wysiwyg' ? '#main-wysiwyg-area ' : '' --\x3e\x3c!-- /ko --\x3e"+f[v]}if(m){var k="\x3c!-- ko foreach: $root.findObjectsOfType($data, '"+m+"') --\x3e",x=p,g=" ";t[d].declarations.length>0&&(t[d].declarations[0].position.start.line!=t[d].position.end.line&&(g="\n"+new Array(t[d].position.start.col).join(" ")),x=t[d].declarations[t[d].declarations.length-1].position.end),null===x?c+=g+"\x3c!-- /ko --\x3e":c=x==p?converterUtils.removeStyle(c,x,p,0,0,0,g+"\x3c!-- /ko --\x3e"):converterUtils.removeStyle(c,x,p,0,0,0,g+"}"+g+"\x3c!-- /ko --\x3e"),h=k+g+h.replace(new RegExp("\\[data-ko-block="+m+"\\]","g"),"\x3c!-- ko text: '#'+id() --\x3e"+m+"\x3c!-- /ko --\x3e"),s(m,"",{contextName:"block"})}var b=m||i;a=o.bind(this,b,"");var w=elaborateDeclarations(c,t[d].declarations,l,a);null!==w&&(c=w),c=converterUtils.removeStyle(c,t[d].position.start,t[d].position.end,0,0,0,h)}else console.log("Unknown rule type",t[d].type,"while parsing <style> rules");p=t[d].position.start}return c};module.exports=processStylesheetRules;

},{"./declarations.js":49,"./utils.js":56,"console-browserify":3,"mensch/lib/parser.js":16}],56:[function(require,module,exports){
"use strict";var console=require("console-browserify"),jsep=require("jsep");jsep.addBinaryOp("or",1),jsep.addBinaryOp("and",2),jsep.addBinaryOp("eq",6),jsep.addBinaryOp("neq",6),jsep.addBinaryOp("lt",7),jsep.addBinaryOp("lte",7),jsep.addBinaryOp("gt",7),jsep.addBinaryOp("gte",7);var addSlashes=function(e){return e.replace(/[\\"'\r\n\t\v\f\b]/g,"\\$&").replace(/\u0000/g,"\\0")},removeStyle=function(e,r,n,t,o,i,a){for(var s=e.split("\n"),p=o,l=i,u=1+t;u<r.line;u++)p+=s[u-1-t].length+1;if(p+=r.col,null!==n){for(var d=1+t;d<n.line;d++)l+=s[d-1-t].length+1;l+=n.col}else l+=e.length+1;return e.substr(0,p-1)+a+e.substr(l-1)},expressionGenerator=function(e,r,n){return function e(r,n,t,o){if(void 0===t&&(t=!0),void 0!==o&&"Identifier"!==r.type&&"MemberExpression"!==r.type&&"function"==typeof console.debug&&console.debug("Cannot apply default value to variable when using expressions"),"BinaryExpression"===r.type||"LogicalExpression"===r.type)return"("+e(r.left,n,t)+" "+function(e){switch(e){case"or":return"||";case"and":return"&&";case"lt":return"<";case"lte":return"<=";case"gt":return">";case"gte":return">=";case"eq":return"==";case"neq":return"!=";default:return e}}(r.operator)+" "+e(r.right,n,t)+")";if("CallExpression"===r.type){var i=r.arguments.map(function(r){return e(r,n,t)});return e(r.callee,n,t)+"("+i.join(", ")+")"}if("UnaryExpression"===r.type)return r.operator+e(r.argument,n,t);if("MemberExpression"==r.type&&r.computed)throw"Unexpected computed member expression";if("MemberExpression"!=r.type||r.computed){if("Literal"===r.type)return r.raw;if("Identifier"===r.type){var a=r.name;return t?n(a,o)+"()":a}if("ConditionalExpression"===r.type)return"("+e(r.test,n,t)+" ? "+e(r.consequent,n,t)+" : "+e(r.alternate,n,t)+")";throw"Compound"===r.type?"Syntax error in expression: operator expected after "+e(r.body[0],n,!1):"Found an unsupported expression type: "+r.type}var s=e(r.object,n,!1)+"."+e(r.property,n,!1);return t&&"Math"!==r.object.name&&"Color"!==r.object.name&&"Util"!==r.object.name?n(s,o)+"()":s}(e,r,void 0,n)},expressionBinding=function(e,r,n){var t;if(void 0!==n&&null!==n){var o=e.trim().replace(/@\[([^\]]+)\]|@([a-zA-Z0-9\._]+)\b/g,"###var###");if("###var###"==(o=o.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")))t=[null,n];else if(o="^"+o.replace(/###var###/g,"(.+)")+"$",!(t=n.trim().match(new RegExp(o))))throw console.log("Cannot find matches",t,"for",n,e,o,e),"Cannot find default value for "+e+" in "+n}try{var i=0,a="'"+e.replace(/@\[([^\]]+)\]|@([a-zA-Z0-9\._]+)\b|(')/g,function(e,n,o,a){if(a)return"\\"+a;i++;var s,p=n||o;if(t&&(void 0!==t[i]?s=t[i].trim():console.log("ABZZZ Cannot find default value for",p,"in",t,"as",i)),n){var l=jsep(n);return"'+"+expressionGenerator(l,r,s)+"+'"}return"'+"+r(p,s)+"()+'"})+"'";return a=a.replace(/(^|[^\\])''\+/g,"$1").replace(/\+''/g,""),0===i&&"false"!==a&&"true"!==a&&console.error("Unexpected expression with no valid @variable references",e),a}catch(r){throw"Exception parsing expression "+e+" "+r}},conditionBinding=function(e,r){var n=jsep(e);return expressionGenerator(n,r)};module.exports={addSlashes:addSlashes,removeStyle:removeStyle,conditionBinding:conditionBinding,expressionBinding:expressionBinding};

},{"console-browserify":3,"jsep":6}],57:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify");function wrap(e){var t=typeof e;if("object"===t&&(e?e.constructor==Date?t="date":"[object Array]"==Object.prototype.toString.call(e)&&(t="array"):t="null"),"array"==t){var n=ko.observableArray();if(!e||0===e.length)return n;for(var o=0,r=e.length;o<r;++o)n.push(wrap(e[o]));return n}if("object"==t){var a={};for(var i in e){var l=e[i];a[i]=wrap(l)}return ko.observable(a)}if("function"==t)return e;var s=ko.observable();return s(e),s}var _getOptionsObjectKeys=function(e){for(var t=e.split("|"),n=[],o=0;o<t.length;o++){var r=t[o].split("=");n.push(r[0].trim())}return n},_makeComputed=function(e,t,n,o,r,a){return ko.computed({read:function(){var n=e();if(null===n){var i=ko.utils.unwrapObservable(o);return void 0===i||"custom"==i?ko.utils.unwrapObservable(t):a[i][r]}return n},write:function(i){var l,s=ko.utils.unwrapObservable(o);if(l=void 0===s||"custom"==s?ko.utils.peekObservable(t):a[s][r],n)e(i==l?null:i);else{var u=ko.utils.peekObservable(e);i==l&&null===u||e(i)}}})},_nextVariantFunction=function(e,t,n){for(var o=e.utils.unwrapObservable(t),r=0;r<n.length&&e.utils.peekObservable(n[r])!=o;r++);r==n.length&&(console.warn("Didn't find a variant!",t,o,n),r=n.length-1);var a=r+1;a==n.length&&(a=0),t(e.utils.peekObservable(n[a]))},_getVariants=function(e){var t=e._variant;if("object"!=typeof e[t]||void 0===e[t]._widget||"string"!=typeof e[t]._options&&"boolean"!==e[t]._widget)throw console.error("Unexpected variant declaration",t,e[t]),"Unexpected variant declaration: cannot find property "+t+" or its _options string and it is not a boolean";return"string"==typeof e[t]._options?_getOptionsObjectKeys(e[t]._options):[!0,!1]},_makeComputedFunction=function(e,t,n,o,r,a,i){if(void 0===e){if(void 0===o.utils.unwrapObservable(i).type)throw console.log("TODO ERROR Found a non-typed def ",e,i),"Found a non-typed def "+e;var l=o.utils.unwrapObservable(o.utils.unwrapObservable(i).type);"object"!=typeof(e=t[l])&&console.log("TODO ERROR Found a non-object def ",e,"for",l)}void 0===r&&void 0!==a&&a&&(r=i);var s="$root.content().",u=e._globalStyles;if(void 0!==u)for(var p in u)if(u.hasOwnProperty(p)){var b,c,v,d="$root.content().theme().scheme";if(u[p].substr(0,s.length)!=s)throw"UNEXPECTED globalStyle path ("+u[p]+") outside selfPath ("+s+")";v=u[p].substr(s.length),c=r,d.substr(0,s.length)==s?b=d.substr(s.length):(console.log("IS THIS CORRECT?",d,s),b=d);for(var f=c,h=v.split("()."),_="",g=!0,k=0;k<h.length;k++)c=o.utils.unwrapObservable(c)[h[k]],g?"theme"==h[k]&&(g=!1):(_.length>0&&(_+="."),_+=h[k]);for(var w=b.split("()."),m=0;m<w.length;m++)f=o.utils.unwrapObservable(f)[w[m]];for(var O=p.split("."),y=i,R=0;R<O.length;R++)y=o.utils.unwrapObservable(y)[O[R]];if(!o.isObservable(y))throw"Unexpected non observable target "+p+"/"+_;y._defaultComputed=_makeComputed(y,c,!0,f,_,n)}if(void 0!==e._variant){for(var F=e._variant.split("."),S=i,j=o.utils.unwrapObservable(i),C=0;C<F.length;C++)S=o.utils.unwrapObservable(S)[F[C]];if(void 0!==S._defaultComputed&&(console.log("Found variant on a style property: beware variants should be only used on content properties because they don't match the theme fallback behaviour",e._variant),S=S._defaultComputed),void 0===S)throw console.log("ERROR looking for variant target",e._variant,i),"ERROR looking for variant target "+e._variant;j._nextVariant=_nextVariantFunction.bind(S,o,S,_getVariants(e))}for(var x in e)if(e.hasOwnProperty(x)){var P=e[x];if("object"==typeof P&&null!==P&&void 0!==P._context&&"block"==P._context){var B=r[x](),E=_makeComputedFunction(t[x],t,n,o,r,a,B);i[x](E)}else if("object"==typeof P&&null!==P&&"blocks"==P.type){for(var D,I,T,A=r[x](),V=A.blocks(),U=0;U<V.length;U++)D=o.utils.unwrapObservable(V[U]),I=o.utils.unwrapObservable(D.type),T=_makeComputedFunction(t[I],t,n,o,r,a,D),V[U](T);var W=A.blocks;_augmentBlocksObservable(W,_blockInstrumentFunction.bind(A,void 0,t,n,o,void 0,r,a)),r[x]._wrap=_makeBlocksWrap.bind(r[x],W._instrumentBlock),r[x]._unwrap=_unwrap.bind(r[x])}}return i},_augmentBlocksObservable=function(e,t){e._instrumentBlock=t,void 0===e.origPush&&(e.origPush=e.push,e.push=_makePush.bind(e),e.origSplice=e.splice,e.splice=_makeSplice.bind(e))},_makeBlocksWrap=function(e,t){var n=ko.toJS(t),o=n.blocks;n.blocks=[];var r=wrap(n)();_augmentBlocksObservable(r.blocks,e);for(var a=0;a<o.length;a++){var i=ko.toJS(o[a]);i.id="block_"+a,r.blocks.push(i)}this(r)},_makePush=function(){if(arguments.length>1)throw"Array push with multiple arguments not implemented";if(arguments.length>0&&ko.isObservable(arguments[0])&&("function"==typeof arguments[0]._unwrap?arguments[0]=arguments[0]._unwrap():console.log("WARN: pushing observable with no _unwrap function (TODO remove me, expected condition)")),ko.isObservable(arguments[0]))return this.origPush.apply(this,arguments);var e=this._instrumentBlock(arguments[0]);return this.origPush.apply(this,[e])},_makeSplice=function(){if(arguments.length>3)throw"Array splice with multiple objects not implemented";if(arguments.length>2&&ko.isObservable(arguments[2])&&("function"==typeof arguments[2]._unwrap?arguments[2]=arguments[2]._unwrap():console.log("WARN: splicing observable with no _unwrap function (TODO remove me, expected condition)")),arguments.length>2&&!ko.isObservable(arguments[2])){var e=this._instrumentBlock(arguments[2]);return this.origSplice.apply(this,[arguments[0],arguments[1],e])}return this.origSplice.apply(this,arguments)},_blockInstrumentFunction=function(e,t,n,o,r,a,i,l){void 0===r&&(r=l);var s=wrap(r);return s(_makeComputedFunction(e,t,n,o,a,i,s())),s._unwrap=_unwrap.bind(s),s},_wrap=function(e,t){this(ko.utils.unwrapObservable(e(ko,t,void 0,!0)))},_unwrap=function(){return ko.toJS(this)},_modelInstrument=function(e,t,n){var o=_blockInstrumentFunction.bind(void 0,t,n,n.themes),r=o(ko,e,void 0,!0);return r._wrap=_wrap.bind(r,o),r._unwrap=_unwrap.bind(r),r};module.exports=_modelInstrument;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],58:[function(require,module,exports){
(function (global){
var tinycolor=require("tinycolor2");function Color(t){this.getBrightness=function(n){return t(n).getBrightness()},this.isLight=function(n){return t(n).isLight()},this.isDark=function(n){return t(n).isDark()},this.getLuminance=function(n){return t(n).getLuminance()},this.lighten=function(n,i){return t(n).lighten(i).toHexString()},this.brighten=function(n,i){return t(n).brighten(i).toHexString()},this.darken=function(n,i){return t(n).darken(i).toHexString()},this.desaturate=function(n,i){return t(n).desaturate(i).toHexString()},this.saturate=function(n,i){return t(n).saturate(i).toHexString()},this.greyscale=function(n){return t(n).greyscale().toHexString()},this.spin=function(n,i){return t(n).spin(i).toHexString()},this.complement=function(n){return t(n).complement().toHexString()},this.mix=t.mix,this.readability=t.readability,this.isReadable=t.isReadable,this.mostReadable=t.mostReadable}var colorPlugin=function(t){global.Color=new Color(tinycolor)};module.exports=colorPlugin;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"tinycolor2":20}],59:[function(require,module,exports){
(function (global){
"use strict";var console=require("console-browserify"),$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,inlineDocument=require("juice/lib/inline")({}).inlineDocument,inlinerPlugin=function(e){e.inline=function(e){$("[style]:not([replacedstyle])",e).each(function(e,n){var i=$(n);i.attr("replacedstyle",i.attr("style"))});var n=[];$('style[data-inline="true"]',e).each(function(e,i){var t=$(i).html();t=(t=t.replace(/<!-- ko ((?!--).)*? -->/g,"")).replace(/<!-- \/ko -->/g,""),n.push(t),$(i).removeAttr("data-inline")});var i=n.join("\n"),t=function(n,i){return void 0===i&&(i=e),$(n,i)};t.root=function(){return $(":root",e)},inlineDocument(t,i,{styleAttributeName:"replacedstyle"})}};module.exports=inlinerPlugin;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3,"juice/lib/inline":7}],60:[function(require,module,exports){
(function (global){
"use strict";var console=require("console-browserify"),ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,$="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,lsLoader=function(e,t){var a=global.localStorage.getItem("metadata-"+e);if(null!==a){var o,l=global.localStorage.getItem("template-"+e);null!==l&&(o=JSON.parse(l));var n=JSON.parse(a);return{metadata:n,model:o,extension:lsCommandPluginFactory(n,t)}}throw"Cannot find stored data for "+e},lsCommandPluginFactory=function(e,t){return function(e,a,o){var l={name:"Save",enabled:ko.observable(!0),execute:function(){l.enabled(!1),o.metadata.changed=Date.now(),void 0===o.metadata.key&&(console.warn("Unable to find key in metadata object...",o.metadata),o.metadata.key=e),global.localStorage.setItem("metadata-"+e,o.exportMetadata()),global.localStorage.setItem("template-"+e,o.exportJSON()),l.enabled(!0)}},n={name:"Test",enabled:ko.observable(!0)},r={name:"Download",enabled:ko.observable(!0)};n.execute=function(){n.enabled(!1);var l=global.localStorage.getItem("testemail");if(null!==l&&"null"!=l||(l=o.t("Insert here the recipient email address")),"function"!=typeof global.prompt)global.alert(o.t("This feature is not supported by your browser")),n.enabled(!0);else if(void 0!==(l=global.prompt(o.t("Test email address"),l))&&null!==l&&l.match(/@/)){global.localStorage.setItem("testemail",l);var r=t||"/dl/",d=$.post(r,{action:"email",rcpt:l,subject:"[test] "+e+" - "+a,html:o.exportHTML()},null,"html");d.fail(function(){console.log("fail",arguments),o.notifier.error(o.t("Unexpected error talking to server: contact us!"))}),d.success(function(){console.log("success",arguments),o.notifier.success(o.t("Test email sent..."))}),d.always(function(){n.enabled(!0)})}else global.alert(o.t("Invalid email address")),n.enabled(!0)},r.execute=function(){r.enabled(!1),o.notifier.info(o.t("Downloading...")),o.exportHTMLtoTextarea("#downloadHtmlTextarea");var e=t||"/dl/";global.document.getElementById("downloadForm").setAttribute("action",e),global.document.getElementById("downloadForm").submit(),r.enabled(!0)},o.save=l,o.test=n,o.download=r}.bind(void 0,e.key,e.name)};module.exports=lsLoader;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],61:[function(require,module,exports){
(function (global){
var utilPlugin=function(e){global.Util={decodeURI:decodeURI,encodeURI:encodeURI,decodeURIComponent:decodeURIComponent,encodeURIComponent:encodeURIComponent}};module.exports=utilPlugin;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],62:[function(require,module,exports){
"use strict";require("knockout-sortable"),require("./bindings/jqueryui-spinner.js"),require("./bindings/jqueryui-tabs.js"),require("./bindings/colorpicker.js"),require("./bindings/blocks.js"),require("./bindings/csstext.js"),require("./bindings/bind-iframe.js"),require("./bindings/extdroppable.js"),require("./bindings/preloader.js"),require("./bindings/fileupload.js"),require("./bindings/virtuals.js"),require("./bindings/wysiwygs.js"),require("./bindings/scrollfix.js"),require("./bindings/if-subs.js"),require("./bindings/extsortables.js"),require("./bindings/eventable.js"),require("./bindings/tooltips.js"),require("./bindings/extender-pagination.js"),require("./bindings/validated-value.js"),require("./bindings/scrollintoview.js");

},{"./bindings/bind-iframe.js":26,"./bindings/blocks.js":27,"./bindings/colorpicker.js":29,"./bindings/csstext.js":30,"./bindings/eventable.js":31,"./bindings/extdroppable.js":32,"./bindings/extender-pagination.js":33,"./bindings/extsortables.js":34,"./bindings/fileupload.js":35,"./bindings/if-subs.js":36,"./bindings/jqueryui-spinner.js":37,"./bindings/jqueryui-tabs.js":38,"./bindings/preloader.js":39,"./bindings/scrollfix.js":41,"./bindings/scrollintoview.js":42,"./bindings/tooltips.js":44,"./bindings/validated-value.js":45,"./bindings/virtuals.js":46,"./bindings/wysiwygs.js":47,"knockout-sortable":11}],63:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,kojqui="undefined"!=typeof window?window.kojqui:"undefined"!=typeof global?global.kojqui:null,templateConverter=require("./converter/main.js"),console=require("console-browserify"),initializeViewmodel=require("./viewmodel.js"),templateSystem=require("./bindings/choose-template.js");if(!$.ui.version.match(/^1\.11\..*$/))throw"Usupported jQuery UI version detected: "+$.ui.version+" (we only support 1.11.*)";var pluginsCall=function(e,t,n,o){var i,a,d,r,l;l=[],void 0!==o&&o?(i=e.length-1,a=0,d=-1):(i=0,a=e.length-1,d=1);for(var s=i;s!=a+d;s+=d)void 0!==e[s][t]&&void 0!==(r=e[s][t].apply(e[s],n))&&l.push(r);return l},origDisposeCallback=ko.utils.domNodeDisposal.addDisposeCallback;ko.utils.domNodeDisposal.addDisposeCallback=function(e,t){origDisposeCallback(e,function(e){try{t(e)}catch(e){"function"==typeof console.debug&&console.debug("Caught unexpected dispose callback exception",e)}})};var bindingPluginMaker=function(e){return{viewModel:function(t){try{e("applyBindings",ko.applyBindings.bind(void 0,t))}catch(e){throw console.warn(e,e.stack),e}},dispose:function(){try{e("unapplyBindings",ko.cleanNode.bind(this,global.document.body))}catch(e){throw console.warn(e,e.stack),e}}}},templateCreator=function(e,t,n,o){var i=n;for(void 0!==n&&void 0!==o&&("object"==typeof t&&"replacedhtml"==t.tagName.toLowerCase()||(i+="-"+o));void 0===i||null===i||e.exists(i);)i="anonymous-"+Math.floor(1e5*Math.random()+1);if("object"==typeof t&&"replacedhtml"==t.tagName.toLowerCase()){var a=$(t),d=$("replacedhead",a),r=$("replacedbody",a);e.adder(i+"-head",d.html()||""),e.adder(i+"-show",r.html()||""),e.adder(i+"-preview",a.html()),e.adder(i+"-wysiwyg",a.html()),d.children().detach(),d.html("\x3c!-- ko block: content --\x3e\x3c!-- /ko --\x3e"),d.before("\x3c!-- ko withProperties: { templateMode: 'head' } --\x3e"),d.after("\x3c!-- /ko --\x3e"),r.html("\x3c!-- ko block: content --\x3e\x3c!-- /ko --\x3e"),e.adder(i+"-iframe",a[0].outerHTML)}else"object"==typeof t?e.adder(i,t.outerHTML):e.adder(i,t);return i};function _viewModelPluginInstance(e){var t;return{viewModel:function(n){t=e(n)},init:function(){void 0!==t&&void 0!==t.init&&t.init()},dispose:function(){void 0!==t&&void 0!==t.dispose&&t.dispose()}}}var _templateUrlConverter=function(e,t){return t.match(/^[^\/]*:/)||t.match(/^\//)||t.match(/^\[/)||t.match(/^#?$/)?null:e+t},templateLoader=function(e,t,n,o,i,a){var d="string"==typeof t?t:n.template,r="./",l=d.lastIndexOf("/");-1!=l&&(r=d.substr(0,l+1));var s,c=_templateUrlConverter.bind(void 0,r);s=void 0===n?{template:d,name:"No name",created:Date.now()}:n,$.get(d,function(t){templateCompiler(e,c,"template",t,o,s,i,a).init()})},templateCompiler=function(e,t,n,o,i,a,d,r){var l=o.match(/^([\S\s]*)([<]html[^>]*>[\S\s]*<\/html>)([\S\s]*)$/i);if(null===l)throw"Unable to find <html> opening and closing tags in the template";var s=l[1],c={"<html":0,"<head":0,"<body":0,"</html":0,"</body":0,"</head":0},u=l[2].replace(/(<\/?)(html|head|body)([^>]*>)/gi,function(e,t,n,o){return c[(t+n).toLowerCase()]+=1,t+"replaced"+n+o});for(var m in c)if(c.hasOwnProperty(m)&&1!=c[m]){if(0===c[m])throw"ERROR: missing mandatory element "+m+">";if(c[m]>1)throw"ERROR: multiple element "+m+"> occourences are not supported (found "+c[m]+" occourences)"}var p=l[3],b=[],h=[];if(void 0!==d)for(var g=0;g<d.length;g++)"function"==typeof d[g]?h.push(_viewModelPluginInstance(d[g])):h.push(d[g]);var v=[],f={adder:function(e,t){if("string"!=typeof t)throw"Template system: cannot create new template "+e;var n=t.match(/(data)?-ko-[^ =:]*/g);n&&console.error("ERROR: found unexpected -ko- attribute in compiled template",e,", you probably mispelled it:",n),templateSystem.addTemplate(e,t),v.push(e)},exists:function(e){return void 0!==templateSystem.getTemplateContent(e)},dispose:function(){for(var e=v.length-1;e>=0;e--)templateSystem.removeTemplate(v[e])}};ko.bindingHandlers.block.templateExists=f.exists;for(var y=templateCreator.bind(void 0,f),w=e("translateTemplate",templateConverter.translateTemplate.bind(void 0,n,u,t,y)),k=e("generateModel",templateConverter.wrappedResultModel.bind(void 0,w)),C={},x=pluginsCall(h,"widget",[$,ko,kojqui]),S=0;S<x.length;S++)C[x[S].widget]=x[S];b.push.apply(b,e("generateEditors",templateConverter.generateEditors.bind(void 0,w,C,t,y,"+$root.contentListeners()")));var E=!1;if(void 0!==i&&null!==i){var M;M="string"==typeof i?ko.utils.parseJson(i):i,2==e("checkModel",templateConverter.checkModel.bind(void 0,k._unwrap(),b,M))&&(console.error("Trying to compile an incompatible template version!",k._unwrap(),b,M),E=!0);try{k._wrap(M)}catch(e){console.error("Unable to inject model content!",e),E=!0}}var T=s+templateSystem.getTemplateContent(n+"-iframe").replace(/(<\/?)replaced(html|head|body)([^>]*>)/gi,function(e,t,n,o){return t+n+o})+p,I=ko.bindingHandlers.bindIframe.tpl;ko.bindingHandlers.bindIframe.tpl=T;var L={dispose:function(){ko.bindingHandlers.bindIframe.tpl=I}};h.push(L),h.push(f);var D=e("initializeViewmodel",initializeViewmodel.bind(this,k,b,t,r));return D.metadata=a,void 0!==D.metadata.editorversion&&"0.17.3"!==D.metadata.editorversion&&console.log("The model being loaded has been created with a different editor version",D.metadata.editorversion,"runtime:","0.17.3"),D.metadata.editorversion="0.17.3",void 0!==w.version&&(void 0!==D.metadata.templateversion&&D.metadata.templateversion!==w.version&&console.log("The model being loaded has been created with a different template version",D.metadata.templateversion,"runtime:",w.version),D.metadata.templateversion=w.version),templateSystem.init(),h.push(bindingPluginMaker(e)),pluginsCall(h,"viewModel",[D]),E&&$("#incompatible-template").dialog({modal:!0,appendTo:"#mo-body",buttons:{Ok:function(){$(this).dialog("close")}}}),{model:D,init:function(){pluginsCall(h,"init",void 0,!0)},dispose:function(){pluginsCall(h,"dispose",void 0,!0)}}},checkFeature=function(e,t){if(!t())throw console.warn("Missing feature",e),"Missing feature "+e},isCompatible=function(){try{return checkFeature("matchMedia",function(){return void 0!==global.matchMedia}),checkFeature("XMLHttpRequest 2",function(){return"XMLHttpRequest"in global&&"withCredentials"in new global.XMLHttpRequest}),checkFeature("ES5 strict",function(){return function(){return void 0===this}()}),checkFeature("CSS borderRadius",function(){return void 0!==global.document.body.style.borderRadius}),checkFeature("CSS boxShadow",function(){return void 0!==global.document.body.style.boxShadow}),checkFeature("CSS boxSizing",function(){return void 0!==global.document.body.style.boxSizing}),checkFeature("CSS backgroundSize",function(){return void 0!==global.document.body.style.backgroundSize}),checkFeature("CSS backgroundOrigin",function(){return void 0!==global.document.body.style.backgroundOrigin}),checkBadBrowserExtensions(),!0}catch(e){return!1}},checkBadBrowserExtensions=function(){var e="checkbadbrowsersframe",t=ko.bindingHandlers.bindIframe.tpl;ko.bindingHandlers.bindIframe.tpl='<!DOCTYPE html>\r\n<html>\r\n<head><title>A</title>\r\n</head>\r\n<body><p style="color: blue" align="right" data-bind="style: { color: \'red\' }">B</p><div data-bind="text: content"></div></body>\r\n</html>\r\n',$("body").append('<iframe id="'+e+'" data-bind="bindIframe: $data"></iframe>');var n=global.document.getElementById(e);ko.applyBindings({content:"dummy content"},n);var o=n.contentWindow.document.doctype,i="<!DOCTYPE "+o.name+(o.publicId?' PUBLIC "'+o.publicId+'"':"")+(!o.publicId&&o.systemId?" SYSTEM":"")+(o.systemId?' "'+o.systemId+'"':"")+">\n"+n.contentWindow.document.documentElement.outerHTML;ko.cleanNode(n),ko.removeNode(n),ko.bindingHandlers.bindIframe.tpl=t;var a='<!DOCTYPE html>\n<html><head><title>A</title>\n</head>\n<body><p align="right" style="color: red;" data-bind="style: { color: \'red\' }">B</p><div data-bind="text: content">dummy content</div>\n\n</body></html>',d='<!DOCTYPE html>\n<html><head><title>A</title>\n</head>\n<body><p style="color: red;" data-bind="style: { color: \'red\' }" align="right">B</p><div data-bind="text: content">dummy content</div>\n\n</body></html>',r='<!DOCTYPE html>\n<html><head><title>A</title>\n</head>\n<body><p style="color: red;" align="right" data-bind="style: { color: \'red\' }">B</p><div data-bind="text: content">dummy content</div>\n\n</body></html>';if(a!==i&&d!==i&&r!==i)throw console.info("BadBrowser.FrameContentCheck",i.length,a.length,d.length,r.length,i==a,i==d,i==r),console.info(i),"Unexpected frame content. Misbehaving browser: "+i.length+"/"+a.length+"/"+d.length+"/"+r.length},fixPageEvents=function(){global.addEventListener&&(global.addEventListener("drag",function(e){(e=e||global.event).preventDefault()},!1),global.addEventListener("dragstart",function(e){(e=e||global.event).preventDefault()},!1),global.addEventListener("dragover",function(e){(e=e||global.event).preventDefault()},!1),global.addEventListener("drop",function(e){(e=e||global.event).preventDefault()},!1),global.document.body.addEventListener("drop",function(e){e.preventDefault()},!1)),global.document.ondragstart&&(global.document.ondragstart=function(){return!1})};module.exports={compile:templateCompiler,load:templateLoader,isCompatible:isCompatible,fixPageEvents:fixPageEvents};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./bindings/choose-template.js":28,"./converter/main.js":52,"./viewmodel.js":68,"console-browserify":3}],64:[function(require,module,exports){
"use strict";var console=require("console-browserify"),_call=function(e){return e()},logs=[],_timedCall=function(e,o){var t,l=(new Date).getTime();"object"==typeof console&&console.time&&console.time(e),t=_call(o),"object"==typeof console&&console.time&&console.timeEnd(e);var n=(new Date).getTime()-l;return"object"!=typeof console||console.time||"function"==typeof console.debug&&console.debug(e,"took",n,"ms"),logs.push({name:e,time:n}),logs.length>100&&logs.unshift(),t};module.exports={timedCall:_timedCall,logs:logs};

},{"console-browserify":3}],65:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,undoManager=require("./undomanager.js"),undoserializer=require("./undoserializer.js"),addUndoStackExtensionMaker=function(e){return function(n){n.contentListeners(n.contentListeners()+2);var o=undoManager(n.content,{levels:100,undoLabel:ko.computed(function(){return n.t("Undo (#COUNT#)")}),redoLabel:ko.computed(function(){return n.t("Redo")})});return n.undo=o.undoCommand,n.undo.execute=e.bind(n,"undo",n.undo.execute),n.redo=o.redoCommand,n.redo.execute=e.bind(n,"redo",n.redo.execute),n.undoReset=e.bind(n,"undoReset",o.reset),n.setUndoModeMerge=o.setModeMerge,n.setUndoModeOnce=o.setModeOnce,o.setModeIgnore(),o.setUndoActionMaker(undoserializer.makeUndoAction.bind(void 0,n.content)),undoserializer.watchEnabled(!0),{pause:function(){o.setModeIgnore()},run:function(){o.setModeOnce()},init:function(){o.setModeOnce()},dispose:function(){n.contentListeners(n.contentListeners()-2),undoserializer.watchEnabled(!1),o.dispose()}}}};module.exports=addUndoStackExtensionMaker;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./undomanager.js":66,"./undoserializer.js":67}],66:[function(require,module,exports){
(function (global){
"use strict";var ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,reactor=require("ko-reactor/dist/ko-reactor.min.js"),console=require("console-browserify"),undoManager=function(e,o){var n,t=ko.observableArray(),i=ko.observableArray(),r=0,d=0,l={levels:100,undoLabel:"undo (#COUNT#)",redoLabel:"redo (#COUNT#)"};o="object"==typeof o?ko.utils.extend(l,o):l;var u=function(e){1==r?a(e,i):2==r?a(e,t):0==r&&(a(e,t),i.removeAll())},a=function(e,t){if(t().length>0){var i=(d=e,void 0!==(r=t()[t().length-1]).mergedAction?r.mergedAction(d):null);if(null!==i)return void(t()[t().length-1]=i)}var r,d;t().length>=o.levels&&t.shift(),n=t,t.push(e)},c=function(e,o,t){return{name:ko.computed(function(){return ko.utils.unwrapObservable(e).replace(/#COUNT#/,t().length)}),enabled:ko.computed(function(){return 0!==t().length}),execute:function(){var e=t.pop();if(e){var i=r;r=o;var l=d;d=3,e(),s(n),d=l,r=i}return!0}}},s=function(e){if(void 0===e)throw"Unexpected operation: stack cleaner called with undefined stack";e().length>0&&void 0!==e()[e().length-1].mergedAction&&delete e()[e().length-1].mergedAction},f=function(e,o){var n=function(e,o){e(),o()}.bind(void 0,e,o);return void 0!==e.mergedAction&&(n.mergedAction=e.mergedAction),n},m=function(e,o,n){if(void 0!==o)e(o);else{if(!n)throw"Unexpected condition: no item and no child.oldValues!";if("deleted"==n.status)e.splice(n.index,0,n.value);else{if("added"!=n.status)throw"Unsupported item.status: "+n.status;e.splice(n.index,1)}}},v=function(e,o,n,t,i){return e.bind(void 0,n,t,i)},g=("function"==typeof reactor?reactor:ko.watch)(e,{depth:-1,oldValues:1,mutable:!0,tagFields:!0},function(e,o,n){var t=void 0!==o.oldValues?o.oldValues[0]:void 0,i=v(m,e,o,t,n);1!=d&&(3==d?void 0!==i&&(i.mergedAction=function(e){return void 0!==e.mergeMe&&e.mergeMe?f(e,this):null},i.mergeMe=!0):void 0!==i&&(o.oldValues&&2==d&&(i.mergedAction=function(e,o,n){return"object"==typeof n.mergeableAction&&e==n.mergeableAction.child?this:null}.bind(i,o,n),i.mergeableAction={child:o,item:n}),n&&"deleted"==n.status?i.mergedAction=function(e,o,n){return"object"==typeof n.mergeableMove&&o.value==n.mergeableMove.item.value?f(n,this):null}.bind(i,o,n):n&&"added"==n.status?i.mergeableMove={child:o,item:n}:n&&console.warn("Unsupported item.status",n.status)),void 0!==i&&u(i))},{});return{push:u,undoCommand:c(o.undoLabel,1,t),redoCommand:c(o.redoLabel,2,i),reset:function(){t.removeAll(),i.removeAll()},setModeOnce:function(){d=2,s(t)},setModeMerge:function(){d=3,s(t)},setModeNormal:function(){d=0,s(t)},setModeIgnore:function(){d=1,s(t)},setUndoActionMaker:function(e){v=e},dispose:function(){g.dispose()}}};module.exports=undoManager;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3,"ko-reactor/dist/ko-reactor.min.js":12}],67:[function(require,module,exports){
(function (global){
"use strict";var listener,watchEnabled,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify"),_reference=function(e,n){for(var t,o,r=0,a=e;r<n.length;)switch(n.charAt(r)){case"(":")"==n.charAt(r+1)&&(a=a()),r+=2;break;case"[":o=n.indexOf("]",r),a=a[n.substring(r+1,o)],r=o+1;break;case".":-1==(t=n.indexOf("(",r))&&(t=n.length),-1==(o=n.indexOf("[",r))&&(o=n.length),o=Math.min(t,o),a=a[n.substring(r+1,o)],r=o}return a},_getPath=function(e,n){for(var t,o="",r=0;r<=e.length;r++)if(t=r<e.length?e[r]:n,ko.isObservable(t)&&(o+="()"),void 0!==t._fieldName)o+="."+t._fieldName;else{if(!(r>0&&"function"==typeof e[r-1].pop))throw console.error("Unexpected parent with no _fieldName and no parent array",r,e),"Unexpected parent with no _fieldName and no parent array";var a=ko.isObservable(e[r-1])?ko.utils.peekObservable(e[r-1]):e[r-1],i=ko.utils.arrayIndexOf(a,t);if(-1==i)throw console.error("Unexpected object not found in parent array",a,t,r,e.length,ko.toJS(a),ko.utils.unwrapObservable(t)),"Unexpected object not found in parent array";o+="["+i+"]"}return o},makeDereferencedUndoAction=function(e,n,t,o,r){e(_reference(n,t),o,r)},_setListener=function(e){listener=e},makeUndoActionDereferenced=function(e,n,t,o,r,a){try{var i=_getPath(t,o);if("object"!=typeof r&&"function"!=typeof r||(r=ko.toJS(r)),void 0===a||"object"!=typeof a.value&&"function"!=typeof a.value||(a=ko.toJS(a)),void 0!==listener)try{listener(i,o,r,a)}catch(e){console.log("Undoserializer ignoring exception in listener callback")}return makeDereferencedUndoAction.bind(void 0,n,e,i,r,a)}catch(e){console.error("Exception processing undo",e,t,o,a)}},_watchEnabled=function(e){if(void 0===e)return watchEnabled;watchEnabled=e};module.exports={dereference:_getPath,reference:_reference,makeUndoAction:makeUndoActionDereferenced,setListener:_setListener,watchEnabled:_watchEnabled};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"console-browserify":3}],68:[function(require,module,exports){
(function (global){
"use strict";var $="undefined"!=typeof window?window.jQuery:"undefined"!=typeof global?global.jQuery:null,ko="undefined"!=typeof window?window.ko:"undefined"!=typeof global?global.ko:null,console=require("console-browserify"),performanceAwareCaller=require("./timed-call.js").timedCall,toastr=require("toastr");function initializeEditor(e,o,t,l){var r={galleryRecent:ko.observableArray([]).extend({paging:16}),galleryRemote:ko.observableArray([]).extend({paging:16}),selectedBlock:ko.observable(null),selectedItem:ko.observable(null),selectedTool:ko.observable(0),selectedImageTab:ko.observable(0),dragging:ko.observable(!1),draggingImage:ko.observable(!1),galleryLoaded:ko.observable(!1),showPreviewFrame:ko.observable(!1),previewMode:ko.observable("mobile"),showToolbox:ko.observable(!0),showTheme:ko.observable(!1),showGallery:ko.observable(!1),debug:ko.observable(!1),contentListeners:ko.observable(0),logoPath:"rs/img/mosaico32.png",logoUrl:".",logoAlt:"mosaico"};return r.content=e,r.blockDefs=o,r.notifier=toastr,r.tt=function(e,o){if(void 0!==o)for(var t in o)o.hasOwnProperty(t)&&(e=e.replace(new RegExp("__"+t+"__","g"),o[t]));return e},r.t=r.tt,r.ut=function(e,o){return o},r.templatePath=t,r.remoteUrlProcessor=function(e){return e},r.remoteFileProcessor=function(e){return void 0!==e.url&&(e.url=r.remoteUrlProcessor(e.url)),void 0!==e.thumbnailUrl&&(e.thumbnailUrl=r.remoteUrlProcessor(e.thumbnailUrl)),e},r.loadGallery=function(){r.galleryLoaded("loading");var e=l||"/upload/";$.getJSON(e,function(e){for(var o=0;o<e.files.length;o++)e.files[o]=r.remoteFileProcessor(e.files[o]);r.galleryLoaded(e.files.length),r.galleryRemote(e.files.reverse())}).fail(function(){r.galleryLoaded(!1),r.notifier.error(r.t("Unexpected error listing files"))})},r.fileToImage=function(e,o,t){return e.url},r.removeBlock=function(e,o){ko.utils.unwrapObservable(r.selectedBlock)==ko.utils.unwrapObservable(e)&&r.selectBlock(null,!0);var t=o.blocks.remove(e);return r.notifier.info(r.t("Block removed: use undo button to restore it...")),t},r.duplicateBlock=function(e,o){var t=ko.utils.unwrapObservable(e),l=ko.toJS(ko.utils.unwrapObservable(o.blocks)[t]);void 0!==l.id&&(l.id=""),o.blocks.splice(t+1,0,l)},r.moveBlock=function(e,o,t){var l=ko.utils.unwrapObservable(e),n=ko.utils.unwrapObservable(o.blocks);if(t&&l>0||!t&&l<n.length-1){var a=l+(t?-1:1),i=n[a];r.startMultiple(),o.blocks.splice(a,1),o.blocks.splice(l,0,i),r.stopMultiple()}},r.loadDefaultBlocks=function(){var e=ko.toJS(r.content().mainBlocks);e.blocks=[];for(var o=ko.utils.unwrapObservable(r.blockDefs),t=0;t<o.length;t++){var l=ko.toJS(o[t]);l.id="block_"+t,e.blocks.push(l)}performanceAwareCaller("setMainBlocks",r.content().mainBlocks._wrap.bind(r.content().mainBlocks,e))},r.addImage=function(e){var o=$("#main-wysiwyg-area .selectable-img.selecteditem");return 1==o.length&&"object"==typeof e&&void 0!==e.url&&(ko.contextFor(o[0])._src(e.url),!0)},r.addBlock=function(e,o){var t,l,n=r.selectedBlock();if(null!==n)for(var a=r.content().mainBlocks().blocks().length-1;a>=0;a--)if(r.content().mainBlocks().blocks()[a]()==n){t=a;break}void 0!==t?(l=t+1,r.content().mainBlocks().blocks.splice(l,0,e),r.notifier.info(r.t("New block added after the selected one (__pos__)",{pos:l}))):(r.content().mainBlocks().blocks.push(e),l=r.content().mainBlocks().blocks().length-1,r.notifier.info(r.t("New block added at the model bottom (__pos__)",{pos:l})));var i=r.content().mainBlocks().blocks()[l]();return r.selectBlock(i,!0),!1},r.findObjectsOfType=function(e,o){var t=[],l=ko.utils.unwrapObservable(e);for(var r in l)if(l.hasOwnProperty(r)){var n=ko.utils.unwrapObservable(l[r]);if(r.match(/Blocks$/))for(var a=ko.utils.unwrapObservable(n.blocks),i=0;i<a.length;i++){var c=ko.utils.unwrapObservable(a[i]);null!==o&&ko.utils.unwrapObservable(c.type)!=o||t.push(c)}else"object"==typeof n&&null!==n&&(null!==o&&ko.utils.unwrapObservable(n.type)!=o||t.push(n))}return t},r.placeholderHelper={element:function(e){return $(e[0].outerHTML).removeClass("ui-draggable").addClass("sortable-placeholder").css("display","block").css("position","relative").css("width","100%").css("height","auto").css("opacity",".8")[0]},update:function(e,o){}},r.startMultiple=function(){void 0!==r.setUndoModeMerge&&r.setUndoModeMerge()},r.stopMultiple=function(){void 0!==r.setUndoModeOnce&&r.setUndoModeOnce()},r.localGlobalSwitch=function(e,o){return e(null===e()?o():null),!1},r.selectItem=function(e,o,t){var l=ko.utils.peekObservable(e);return void 0!==t&&r.selectBlock(t,!1,!0),l!=o&&(e(o),null!==o&&0===r.selectedTool()&&r.selectedTool(1)),!1}.bind(r,r.selectedItem),r.isSelectedItem=function(e){return r.selectedItem()==e},r.selectBlock=function(e,o,t,l){var n=ko.utils.peekObservable(e);l||r.selectItem(null),n!=o&&(e(o),r.showGallery(!1),null===o||t||0!==r.selectedTool()||r.selectedTool(1))}.bind(r,r.selectedBlock),r.countSubscriptions=function(e,o){var t=0;for(var l in e)if(e.hasOwnProperty(l)){var n=e[l];if(ko.isObservable(n)&&(void 0!==n._defaultComputed&&(void 0!==o&&console.log(o+"/"+l+"/_",n._defaultComputed.getSubscriptionsCount()),t+=n._defaultComputed.getSubscriptionsCount()),void 0!==o&&console.log(o+"/"+l+"/-",n.getSubscriptionsCount()),t+=n.getSubscriptionsCount(),n=ko.utils.unwrapObservable(n)),"object"==typeof n&&null!==n){var a=r.countSubscriptions(n,void 0!==o?o+"/"+l+"@":void 0);void 0!==o&&console.log(o+"/"+l+"@",a),t+=a}}return t},r.loopSubscriptionsCount=function(){var e=r.countSubscriptions(r.content());global.document.getElementById("subscriptionsCount").innerHTML=e,global.setTimeout(r.loopSubscriptionsCount,1e3)},r.export=function(){return performanceAwareCaller("exportHTML",r.exportHTML)},r.exportHTML=function(){var e="exportframe";$("body").append('<iframe id="'+e+'" data-bind="bindIframe: $data"></iframe>');var o=global.document.getElementById(e);ko.applyBindings(r,o),ko.cleanNode(o),r.inline&&r.inline(o.contentWindow.document);var t=o.contentWindow.document.doctype,l="<!DOCTYPE "+t.name+(t.publicId?' PUBLIC "'+t.publicId+'"':"")+(!t.publicId&&t.systemId?" SYSTEM":"")+(t.systemId?' "'+t.systemId+'"':"")+">\n"+o.contentWindow.document.documentElement.outerHTML;ko.removeNode(o);var n=(l=(l=(l=(l=(l=(l=(l=(l=(l=(l=(l=(l=l.replace(/<script ([^>]* )?type="text\/html"[^>]*>[\s\S]*?<\/script>/gm,"")).replace(/<!-- ko ((?!--).)*? -->/g,"")).replace(/<!-- \/ko -->/g,"")).replace(/ data-bind="[^"]*"/gm,"")).replace(/ data-mce-(href|src|style)="[^"]*"/gm,"")).replace(/ style="[^"]*"([^>]*) replaced(style="[^"]*")/gm,"$1 $2")).replace(/ replaced(style="[^"]*")([^>]*) style="[^"]*"/gm," $1$2")).replace(/ replaced(style="[^"]*")/gm," $1")).replace(/ http-equiv="[^"]*"([^>]*) replaced(http-equiv="[^"]*")/gm,"$1 $2")).replace(/ replaced(http-equiv="[^"]*")([^>]*) http-equiv="[^"]*"/gm," $1$2")).replace(/ replaced(http-equiv="[^"]*")/gm," $1")).replace(/<replacedcc[^>]* condition="([^"]*)"[^>]*>([\s\S]*?)<\/replacedcc>/g,function(e,o,t){var l="\x3c!--[if "+o.replace(/&amp;/,"&")+"]>";return(l+=t.replace(/<!-- cc:bc:([A-Za-z:]*) -->(<\/cc>)?<!-- cc:ac:\1 -->/g,"</$1>").replace(/><\/cc><!-- cc:sc -->/g,"/>").replace(/<!-- cc:bo:([A-Za-z:]*) --><cc/g,"<$1").replace(/^.*<!-- cc:start -->/,"").replace(/<!-- cc:end -->.*$/,""))+"<![endif]--\x3e"})).match(/ data-[^ =]+(="[^"]+")? /)||l.match(/ replaced([^= ]*=)/);return n&&console.warn("Output HTML contains unexpected data- attributes or replaced attributes",n),l},r.exportHTMLtoTextarea=function(e){$(e).val(r.exportHTML())},r.exportJSONtoTextarea=function(e){$(e).val(r.exportJSON())},r.importJSONfromTextarea=function(e){r.importJSON($(e).val())},r.exportMetadata=function(){return ko.toJSON(r.metadata)},r.exportJSON=function(){return ko.toJSON(r.content)},r.exportJS=function(){return ko.toJS(r.content)},r.importJSON=function(e){var o=ko.utils.parseJson(e);r.content._wrap(o)},r.exportTheme=function(){var e={},o=r.content().theme(),t=function(e,o,l){for(var r in l)if(l.hasOwnProperty(r)){var n=ko.utils.unwrapObservable(l[r]);null!==n&&"object"==typeof n?t(r+".",o,n):o[e+r]=n}};t("",e,o);var l="";for(var n in e)e.hasOwnProperty(n)&&"type"!=n&&(l+=n+": "+e[n]+";\n");return l},r.loadImage=function(e){r.galleryRecent.unshift(e),r.selectedImageTab(0)},r.selectImage=function(e){r.showGallery(!0)},r.dialog=function(e,o){$(e).dialog(o)},r.log=function(e,o){},r.selectedImageTab.subscribe(function(e){1==e&&!1===r.galleryLoaded()&&r.loadGallery()},r,"change"),r}toastr.options={closeButton:!1,debug:!1,positionClass:"toast-bottom-full-width",target:"#mo-body",onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"},module.exports=initializeEditor;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./timed-call.js":64,"console-browserify":3,"toastr":21}]},{},[25,1])(25)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC90ZW1wbGF0ZXMuanMiLCJub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyIsIm5vZGVfbW9kdWxlcy9jb25zb2xlLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZGF0ZS1ub3cvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXZvbC1jb2xvcnBpY2tlci9qcy9ldm9sLWNvbG9ycGlja2VyLmpzIiwibm9kZV9tb2R1bGVzL2pzZXAvYnVpbGQvanNlcC5qcyIsIm5vZGVfbW9kdWxlcy9qdWljZS9saWIvaW5saW5lLmpzIiwibm9kZV9tb2R1bGVzL2p1aWNlL2xpYi9wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9qdWljZS9saWIvc2VsZWN0b3IuanMiLCJub2RlX21vZHVsZXMvanVpY2UvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2tub2Nrb3V0LXNvcnRhYmxlL2J1aWxkL2tub2Nrb3V0LXNvcnRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2tvLXJlYWN0b3IvZGlzdC9rby1yZWFjdG9yLm1pbi5qcyIsIm5vZGVfbW9kdWxlcy9tZW5zY2gvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbWVuc2NoL2xpYi9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9tZW5zY2gvbGliL2xleGVyLmpzIiwibm9kZV9tb2R1bGVzL21lbnNjaC9saWIvcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL21lbnNjaC9saWIvc3RyaW5naWZ5LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9zbGljay9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvdGlueWNvbG9yMi90aW55Y29sb3IuanMiLCJub2RlX21vZHVsZXMvdG9hc3RyL3RvYXN0ci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwic3JjL2pzL2FwcC5qcyIsInNyYy9qcy9iaW5kaW5ncy9iaW5kLWlmcmFtZS5qcyIsInNyYy9qcy9iaW5kaW5ncy9ibG9ja3MuanMiLCJzcmMvanMvYmluZGluZ3MvY2hvb3NlLXRlbXBsYXRlLmpzIiwic3JjL2pzL2JpbmRpbmdzL2NvbG9ycGlja2VyLmpzIiwic3JjL2pzL2JpbmRpbmdzL2Nzc3RleHQuanMiLCJzcmMvanMvYmluZGluZ3MvZXZlbnRhYmxlLmpzIiwic3JjL2pzL2JpbmRpbmdzL2V4dGRyb3BwYWJsZS5qcyIsInNyYy9qcy9iaW5kaW5ncy9leHRlbmRlci1wYWdpbmF0aW9uLmpzIiwic3JjL2pzL2JpbmRpbmdzL2V4dHNvcnRhYmxlcy5qcyIsInNyYy9qcy9iaW5kaW5ncy9maWxldXBsb2FkLmpzIiwic3JjL2pzL2JpbmRpbmdzL2lmLXN1YnMuanMiLCJzcmMvanMvYmluZGluZ3MvanF1ZXJ5dWktc3Bpbm5lci5qcyIsInNyYy9qcy9iaW5kaW5ncy9qcXVlcnl1aS10YWJzLmpzIiwic3JjL2pzL2JpbmRpbmdzL3ByZWxvYWRlci5qcyIsInNyYy9qcy9iaW5kaW5ncy9zY3JpcHQtdGVtcGxhdGUuanMiLCJzcmMvanMvYmluZGluZ3Mvc2Nyb2xsZml4LmpzIiwic3JjL2pzL2JpbmRpbmdzL3Njcm9sbGludG92aWV3LmpzIiwic3JjL2pzL2JpbmRpbmdzL3N0cmluZy10ZW1wbGF0ZS5qcyIsInNyYy9qcy9iaW5kaW5ncy90b29sdGlwcy5qcyIsInNyYy9qcy9iaW5kaW5ncy92YWxpZGF0ZWQtdmFsdWUuanMiLCJzcmMvanMvYmluZGluZ3MvdmlydHVhbHMuanMiLCJzcmMvanMvYmluZGluZ3Mvd3lzaXd5Z3MuanMiLCJzcmMvanMvY29udmVydGVyL2NoZWNrbW9kZWwuanMiLCJzcmMvanMvY29udmVydGVyL2RlY2xhcmF0aW9ucy5qcyIsInNyYy9qcy9jb252ZXJ0ZXIvZG9tdXRpbHMuanMiLCJzcmMvanMvY29udmVydGVyL2VkaXRvci5qcyIsInNyYy9qcy9jb252ZXJ0ZXIvbWFpbi5qcyIsInNyYy9qcy9jb252ZXJ0ZXIvbW9kZWwuanMiLCJzcmMvanMvY29udmVydGVyL3BhcnNlci5qcyIsInNyYy9qcy9jb252ZXJ0ZXIvc3R5bGVzaGVldC5qcyIsInNyYy9qcy9jb252ZXJ0ZXIvdXRpbHMuanMiLCJzcmMvanMvY29udmVydGVyL3dyYXBwZXIuanMiLCJzcmMvanMvZXh0L2NvbG9yLmpzIiwic3JjL2pzL2V4dC9pbmxpbmVyLmpzIiwic3JjL2pzL2V4dC9sb2NhbHN0b3JhZ2UuanMiLCJzcmMvanMvZXh0L3V0aWwuanMiLCJzcmMvanMva28tYmluZGluZ3MuanMiLCJzcmMvanMvdGVtcGxhdGUtbG9hZGVyLmpzIiwic3JjL2pzL3RpbWVkLWNhbGwuanMiLCJzcmMvanMvdW5kb21hbmFnZXIvdW5kb21haW4uanMiLCJzcmMvanMvdW5kb21hbmFnZXIvdW5kb21hbmFnZXIuanMiLCJzcmMvanMvdW5kb21hbmFnZXIvdW5kb3NlcmlhbGl6ZXIuanMiLCJzcmMvanMvdmlld21vZGVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwidmFyIHRlbXBsYXRlU3lzdGVtPXJlcXVpcmUoXCIuLi9zcmMvanMvYmluZGluZ3MvY2hvb3NlLXRlbXBsYXRlLmpzXCIpO2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oZSl7dGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJhcnJheVwiLFwiXFx4M2MhLS0ga28gZm9yZWFjaDogJGRhdGEgLS1cXHgzZVxceDNjIS0tIGtvIGJsb2NrOiAkZGF0YSAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImJsb2NrLXNob3dcIixcIlxceDNjIS0tIGtvIGJsb2NrOiAkZGF0YSwgc2Nyb2xsSW50b1ZpZXc6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PT0gJGRhdGEgLS1cXHgzZVxceDNjIS0tIC9rbyAtLVxceDNlXCIpLHRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKFwiYmxvY2std3lzaXd5Z1wiLCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUgYmxvY2tcIiBkYXRhLWRyb3AtY29udGVudD1cIkRyb3AgaGVyZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgXFwnZGF0YS1kcm9wLWNvbnRlbnRcXCc6ICRyb290LnQoXFwnRHJvcCBoZXJlXFwnKSB9LCBjbGljazogZnVuY3Rpb24ob2JqLCBldnQpIHsgJHJvb3Quc2VsZWN0QmxvY2sob2JqKTsgcmV0dXJuIHRydWUgfSwgY2xpY2tCdWJibGU6IGZhbHNlLCBjc3M6IHsgc2VsZWN0ZWQ6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PT0gJGRhdGEgfSwgc2Nyb2xsSW50b1ZpZXc6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PT0gJGRhdGFcIj4gIDxkaXYgY2xhc3M9XCJtby1ibG9ja3NlbGVjdGlvbmhlbHBlclwiPjwvZGl2PiAgPGRpdiBjbGFzcz1cInRvb2xzXCIgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+ICAgIFxceDNjIS0tIGtvIGlmOiB0eXBlb2YgJGluZGV4ICE9IFxcJ3VuZGVmaW5lZFxcJyAtLVxceDNlICAgIDxkaXYgdGl0bGU9XCJEcmFnIHRoaXMgaGFuZGxlIHRvIG1vdmUgdGhlIGJsb2NrXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdEcmFnIHRoaXMgaGFuZGxlIHRvIG1vdmUgdGhlIGJsb2NrXFwnKSB9XCIgY2xhc3M9XCJ0b29sIGhhbmRsZVwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtc29ydFwiPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0ga28gaWY6ICRpbmRleCgpID4gMCAtLVxceDNlICAgIDxkaXYgdGl0bGU9XCJNb3ZlIHRoaXMgYmxvY2sgdXBzaWRlXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdNb3ZlIHRoaXMgYmxvY2sgdXBzaWRlXFwnKSB9XCIgY2xhc3M9XCJ0b29sIG1vdmV1cFwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtc29ydC1hc2NcIiBkYXRhLWJpbmQ9XFwnY2xpY2s6ICRyb290Lm1vdmVCbG9jay5iaW5kKCRlbGVtZW50LCAkaW5kZXgsICRwYXJlbnQsIHRydWUpXFwnPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6ICRpbmRleCgpIDwgJHBhcmVudC5ibG9ja3MoKS5sZW5ndGggLTEgLS1cXHgzZSAgICA8ZGl2IHRpdGxlPVwiTW92ZSB0aGlzIGJsb2NrIGRvd25zaWRlXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdNb3ZlIHRoaXMgYmxvY2sgZG93bnNpZGVcXCcpIH1cIiBjbGFzcz1cInRvb2wgbW92ZWRvd25cIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXNvcnQtZGVzY1wiIGRhdGEtYmluZD1cXCdjbGljazogJHJvb3QubW92ZUJsb2NrLmJpbmQoJGVsZW1lbnQsICRpbmRleCwgJHBhcmVudCwgZmFsc2UpXFwnPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgPGRpdiB0aXRsZT1cIkRlbGV0ZSBibG9ja1wiIGNsYXNzPVwidG9vbCBkZWxldGVcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ0RlbGV0ZSBibG9ja1xcJykgfSwgY2xpY2s6ICRyb290LnJlbW92ZUJsb2NrLmJpbmQoJGVsZW1lbnQsICRyYXdEYXRhLCAkcGFyZW50KVwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtdHJhc2gtb1wiPjwvaT48L2Rpdj4gICAgPGRpdiB0aXRsZT1cIkR1cGxpY2F0ZSBibG9ja1wiIGNsYXNzPVwidG9vbCBjbG9uZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnRHVwbGljYXRlIGJsb2NrXFwnKSB9LCBjbGljazogJHJvb3QuZHVwbGljYXRlQmxvY2suYmluZCgkZWxlbWVudCwgJGluZGV4LCAkcGFyZW50KVwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtZmlsZXMtb1wiPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6IHR5cGVvZiAkZGF0YS5fbmV4dFZhcmlhbnQgIT0gXFwndW5kZWZpbmVkXFwnIC0tXFx4M2U8ZGl2IHRpdGxlPVwiU3dpdGNoIGJsb2NrIHZhcmlhbnRcIiBjbGFzcz1cInRvb2wgdmFyaWFudFwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnU3dpdGNoIGJsb2NrIHZhcmlhbnRcXCcpIH0sIGNsaWNrOiAkZGF0YS5fbmV4dFZhcmlhbnRcIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLW1hZ2ljXCI+PC9pPjwvZGl2PlxceDNjIS0tIC9rbyAtLVxceDNlICA8L2Rpdj4gIFxceDNjIS0tIGtvIGJsb2NrOiAkZGF0YSAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2U8L2Rpdj4nKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImJsb2Nrcy1zaG93XCIsXCJcXHgzYyEtLSBrbyB0ZW1wbGF0ZTogeyBuYW1lOiAnYmxvY2stc2hvdycsIGZvcmVhY2g6IGJsb2NrcyB9IC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImJsb2Nrcy13eXNpd3lnXCIsXCI8ZGl2IGNsYXNzPVxcXCJzb3J0YWJsZS1ibG9ja3MtZWRpdFxcXCIgZGF0YS1kcm9wLWNvbnRlbnQ9XFxcIkRyb3AgaGVyZVxcXCIgZGF0YS1lbXB0eS1jb250ZW50PVxcXCJEcm9wIGhlcmUgYmxvY2tzIGZyb20gdGhlIEJsb2NrcyB0YWJcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyAnZGF0YS1kcm9wLWNvbnRlbnQnOiAkcm9vdC50KCdEcm9wIGhlcmUnKSwgJ2RhdGEtZW1wdHktY29udGVudCc6ICRyb290LnQoJ0Ryb3AgaGVyZSBibG9ja3MgZnJvbSB0aGUgJnF1b3Q7QmxvY2tzJnF1b3Q7IHRhYicpIH0sIGNzczogeyAnZW1wdHknOiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGJsb2NrcykubGVuZ3RoID09IDAgfSwgZXh0c29ydGFibGU6IHsgY29ubmVjdENsYXNzOiAnc29ydGFibGUtYmxvY2tzLWVkaXQnLCB0ZW1wbGF0ZTogJ2Jsb2NrLXd5c2l3eWcnLCBkYXRhOiBibG9ja3MsIGRyYWdnaW5nOiAkcm9vdC5kcmFnZ2luZywgYmVmb3JlTW92ZTogJHJvb3Quc3RhcnRNdWx0aXBsZSwgYWZ0ZXJNb3ZlOiAkcm9vdC5zdG9wTXVsdGlwbGUsIG9wdGlvbnM6IHsgaGFuZGxlOiAnLmhhbmRsZScsIHBsYWNlaG9sZGVyOiAkcm9vdC5wbGFjZWhvbGRlckhlbHBlciB9IH1cXFwiPjwvZGl2PlwiKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImN1c3RvbXN0eWxlXCIsJzxkaXYgY2xhc3M9XCJjdXN0b21TdHlsZUhlbHBcIiBkYXRhLWJpbmQ9XCJodG1sOiAkcm9vdC50KFxcJ0N1c3RvbWl6ZWQgYmxvY2suPHVsPjxsaT5JbiB0aGlzIHN0YXR1cyBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgd2lsbCBiZSBzcGVjaWZpYyB0byB0aGUgY3VycmVudCBibG9jayAoaW5zdGVhZCBvZiBiZWluZyBnbG9iYWwgdG8gYWxsIGJsb2NrcyBpbiB0aGUgc2FtZSBzZWN0aW9uKTwvbGk+PGxpPkEgPHNwYW4gY2xhc3M9JnF1b3Q7Y3VzdG9tU3R5bGVkJnF1b3Q7PjxzcGFuPiZxdW90O3NtYWxsIGN1YmUmcXVvdDsgPC9zcGFuPjwvc3Bhbj4gaWNvbiBiZXNpZGUgdGhlIHByb3BlcnR5IHdpbGwgbWFyayB0aGUgY3VzdG9taXphdGlvbi4gQnkgY2xpY2tpbmcgdGhpcyBpY29uIHRoZSBwcm9wZXJ0eSB2YWx1ZSB3aWxsIGJlIHJldmVydGVkIHRvIHRoZSB2YWx1ZSBkZWZpbmVkIGZvciB0aGUgc2VjdGlvbi48L2xpPjwvdWw+XFwnKVwiPkN1c3RvbWl6ZWQgYmxvY2suPHVsPjxsaT5JbiB0aGlzIHN0YXR1cyBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgd2lsbCBiZSBzcGVjaWZpYyB0byB0aGUgY3VycmVudCBibG9jayAoaW5zdGVhZCBvZiBiZWluZyBnbG9iYWwgdG8gYWxsIGJsb2NrcyBpbiB0aGUgc2FtZSBzZWN0aW9uKTwvbGk+PGxpPkEgPHNwYW4gY2xhc3M9XCJjdXN0b21TdHlsZWRcIj48c3Bhbj5cInNtYWxsIGN1YmVcIiA8L3NwYW4+PC9zcGFuPiBpY29uIGJlc2lkZSB0aGUgcHJvcGVydHkgd2lsbCBtYXJrIHRoZSBjdXN0b21pemF0aW9uLiBCeSBjbGlja2luZyB0aGlzIGljb24gdGhlIHByb3BlcnR5IHZhbHVlIHdpbGwgYmUgcmV2ZXJ0ZWQgdG8gdGhlIHZhbHVlIGRlZmluZWQgZm9yIHRoZSBzZWN0aW9uLjwvbGk+PC91bD48L2Rpdj4nKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImVtcHR5XCIsXCJcIiksdGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJlcnJvclwiLCdbPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICNmZmYwZjBcIiBkYXRhLWJpbmQ9XCJ0ZXh0OiBrby50b0pTKCRkYXRhKVwiPjwvZGl2Pl0nKSx0ZW1wbGF0ZVN5c3RlbS5hZGRUZW1wbGF0ZShcImdhbGxlcnktaW1hZ2VzXCIsJzxkaXYgZGF0YS1iaW5kPVwiZm9yZWFjaDogaXRlbXMuY3VycmVudFBhZ2VEYXRhXCI+ICA8ZGl2IGNsYXNzPVwiZHJhZ2dhYmxlLWl0ZW1cIiBkYXRhLWJpbmQ9XCJpZjogdHlwZW9mIHRodW1ibmFpbFVybCAhPSBcXCd1bmRlZmluZWRcXCdcIj4gICAgPGRpdiBjbGFzcz1cImRyYWdnYWJsZSBpbWFnZVwiIGRhdGEtYmluZD1cImNsaWNrOiAkcm9vdC5hZGRJbWFnZSwgZXh0ZHJhZ2dhYmxlOiB7IGRhdGE6ICRkYXRhLCBkcm9wQ29udGFpbmVyOiBcXCcjbWFpbi13eXNpd3lnLWFyZWFcXCcsIGRyYWdnaW5nOiAkcm9vdC5kcmFnZ2luZ0ltYWdlLCBcXCdvcHRpb25zXFwnOiB7IFxcJ2FwcGVuZFRvXFwnOiBcXCcjcGFnZVxcJyB9IH0sIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogXFwndXJsKFxcXFxcXCdcXCcgKyB0aHVtYm5haWxVcmwgKyBcXCdcXFxcXFwnKVxcJyB9XCI+ICAgICAgPGltZyB0aXRsZT1cIkRyYWcgdGhpcyBpbWFnZSBhbmQgZHJvcCBpdCBvbiBhbnkgdGVtcGxhdGUgaW1hZ2UgcGxhY2Vob2xkZXJcIiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrO1wiIGRhdGEtYmluZD1cInRvb2x0aXBzOiB7fSwgYXR0cjogeyBzcmM6IHRodW1ibmFpbFVybCwgXFwndGl0bGVcXCc6ICRyb290LnQoXFwnRHJhZyB0aGlzIGltYWdlIGFuZCBkcm9wIGl0IG9uIGFueSB0ZW1wbGF0ZSBpbWFnZSBwbGFjZWhvbGRlclxcJykgfVwiLz4gICAgPC9kaXY+ICA8L2Rpdj48L2Rpdj5cXHgzYyEtLSBrbyBpZjogaXRlbXMucGFnZUNvdW50KCkgPiAxIC0tXFx4M2U8ZGl2IGNsYXNzPVwiZ2FsbGVyeVBhZ2VyXCIgZGF0YS1iaW5kPVwiYnV0dG9uc2V0OiB7fVwiPiAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImNsaWNrOiBpdGVtcy5tb3ZlRmlyc3QsIGJ1dHRvbjogeyBkaXNhYmxlZDogaXRlbXMuY3VycmVudFBhZ2UoKSA9PSAxLCBpY29uczogeyBwcmltYXJ5OiBcXCdmYSBmYS1mYXN0LWJhY2t3YXJkXFwnIH0sIHRleHQ6IGZhbHNlIH1cIj5GaXJzdDwvYT4gIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBkYXRhLWJpbmQ9XCJjbGljazogaXRlbXMubW92ZVByZXZpb3VzLCBidXR0b246IHsgZGlzYWJsZWQ6IGl0ZW1zLmN1cnJlbnRQYWdlKCkgPT0gMSwgaWNvbnM6IHsgcHJpbWFyeTogXFwnZmEgZmEtYmFja3dhcmRcXCcgfSwgdGV4dDogZmFsc2UgfVwiPlByZXZpb3VzPC9hPiAgPHNwYW4gZGF0YS1iaW5kPVwiYnV0dG9uOiB7IGRpc2FibGVkOiB0cnVlLCB0ZXh0OiB0cnVlLCBsYWJlbDogXFwnIFxcJyskcm9vdC50KFxcJ19fY3VycmVudF9fIG9mIF9fdG90YWxfX1xcJywgeyBjdXJyZW50OiBpdGVtcy5jdXJyZW50UGFnZSgpLCB0b3RhbDogaXRlbXMucGFnZUNvdW50KCkgfSkrXFwnIFxcJyB9XCI+IFggb2YgWSA8L3NwYW4+ICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgZGF0YS1iaW5kPVwiY2xpY2s6IGl0ZW1zLm1vdmVOZXh0LCBidXR0b246IHsgZGlzYWJsZWQ6IGl0ZW1zLmN1cnJlbnRQYWdlKCkgPT0gaXRlbXMucGFnZUNvdW50KCksIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZvcndhcmRcXCcgfSwgdGV4dDogZmFsc2UgfVwiPk5leHQ8L2E+ICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgZGF0YS1iaW5kPVwiY2xpY2s6IGl0ZW1zLm1vdmVMYXN0LCBidXR0b246IHsgZGlzYWJsZWQ6IGl0ZW1zLmN1cnJlbnRQYWdlKCkgPT0gaXRlbXMucGFnZUNvdW50KCksIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZhc3QtZm9yd2FyZFxcJyB9LCB0ZXh0OiBmYWxzZSB9XCI+TGFzdDwvYT48L2Rpdj5cXHgzYyEtLSAva28gLS1cXHgzZScpLHRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKFwiaW1nLXd5c2l3eWdcIiwnPHRhYmxlIHRhYmZvY3VzPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiIGRhdGEtZHJvcC1jb250ZW50PVwiRHJvcCBoZXJlXCIgZGF0YS1iaW5kPVwic3R5bGU6IF9zdHlsZWJpbmQsIGNsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RJdGVtKF9pdGVtLCBfZGF0YSk7IHJldHVybiB0cnVlOyB9LCBjbGlja0J1YmJsZTogZmFsc2UsIGZ1ZHJvcHBhYmxlOiB7IGFjdGl2ZUNsYXNzOiBcXCd1aS1zdGF0ZS1oaWdobGlnaHRcXCcsIGhvdmVyQ2xhc3M6IFxcJ3VpLXN0YXRlLWRyYWdob3ZlclxcJyB9LCBleHRkcm9wcGFibGU6IHsgb3B0aW9uczogeyBhY2NlcHQ6IFxcJy5pbWFnZVxcJywgYWN0aXZlQ2xhc3M6IFxcJ3VpLXN0YXRlLWhpZ2hsaWdodFxcJywgaG92ZXJDbGFzczogXFwndWktc3RhdGUtZHJhZ2hvdmVyXFwnIH0sIGRhdGE6IF9zcmMsIGRyYWdnZWQ6ICRyb290LmZpbGVUb0ltYWdlIH0sIGNzczogeyBzZWxlY3RlZGl0ZW06ICRyb290LmlzU2VsZWN0ZWRJdGVtKF9pdGVtKSB9LCBzY3JvbGxJbnRvVmlldzogJHJvb3QuaXNTZWxlY3RlZEl0ZW0oX2l0ZW0pLCBhdHRyOiB7IFxcJ2RhdGEtZHJvcC1jb250ZW50XFwnOiAkcm9vdC50KFxcJ0Ryb3AgaGVyZVxcJyksIHdpZHRoOiBfd2lkdGgsIGhlaWdodDogX2hlaWdodCwgYWxpZ246IF9hbGlnbiB9XCIgIGNsYXNzPVwiaW1nLXd5c2l3eWcgc2VsZWN0YWJsZS1pbWdcIiBzdHlsZT1cImRpc3BsYXk6IHRhYmxlO1wiPjx0cj48dGQgY2xhc3M9XCJ1cGxvYWR6b25lXCI+ICA8ZGl2IGNsYXNzPVwibW8taW1nc2VsZWN0aW9uaGVscGVyXCI+PC9kaXY+ICA8ZGl2IGNsYXNzPVwibW8tdXBsb2Fkem9uZVwiPjwvZGl2PiAgPGRpdiBjbGFzcz1cImltZy1zaXplXCIgZGF0YS1iaW5kPVwidGV4dDogX3NpemVcIj5zaXplPC9kaXY+ICA8ZGl2IGNsYXNzPVwibWlkdG9vbHNcIiBkYXRhLWJpbmQ9XCJ0b29sdGlwczoge31cIj4gICAgXFx4M2MhLS0ga28gaWY6IF9zcmMoKSAhPSBcXCdcXCcgLS1cXHgzZSAgICA8ZGl2IHRpdGxlPVwiUmVtb3ZlIGltYWdlXCIgY2xhc3M9XCJ0b29sIGRlbGV0ZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnUmVtb3ZlIGltYWdlXFwnKSB9LCBjbGljazogX3NyYy5iaW5kKF9zcmMsIFxcJ1xcJyksIGNsaWNrQnViYmxlOiBmYWxzZVwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtdHJhc2gtb1wiPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0ga28gaWY6IHR5cGVvZiAkcm9vdC5lZGl0SW1hZ2UgIT09IFxcJ3VuZGVmaW5lZFxcJyAtLVxceDNlICAgIDxkaXYgdGl0bGU9XCJPcGVuIHRoZSBpbWFnZSBlZGl0aW5nIHRvb2xcIiBjbGFzcz1cInRvb2wgZWRpdFwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnT3BlbiB0aGUgaW1hZ2UgZWRpdGluZyB0b29sXFwnKSB9LCBjbGljazogJHJvb3QuZWRpdEltYWdlLmJpbmQoJGVsZW1lbnQsIF9zcmMpLCBjbGlja0J1YmJsZTogZmFsc2VcIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXBlbmNpbFwiPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6IF9zcmMoKSA9PSBcXCdcXCcgLS1cXHgzZSAgICA8ZGl2IHRpdGxlPVwiVXBsb2FkIGEgbmV3IGltYWdlXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdVcGxvYWQgYSBuZXcgaW1hZ2VcXCcpIH1cIiBjbGFzcz1cInRvb2wgdXBsb2FkXCIgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7IG92ZXJmbG93OiBoaWRkZW47XCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS11cGxvYWRcIj48L2k+ICAgICAgPGlucHV0IGNsYXNzPVwiZmlsZXVwbG9hZCBub2ZpbGVcIiB0eXBlPVwiZmlsZVwiIG5hbWU9XCJmaWxlc1tdXCIgZGF0YS1iaW5kPVwiZmlsZXVwbG9hZDogeyBkYXRhOiBfc3JjLCBvbmVycm9yOiAkcm9vdC5ub3RpZmllci5lcnJvciwgb25maWxlOiAkcm9vdC5sb2FkSW1hZ2UsIGNhbnZhc1ByZXZpZXc6IHRydWUgfVwiIHN0eWxlPVwiei1pbmRleDogMjA7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBtaW4td2lkdGg6IDEwMCU7IG1pbi1oZWlnaHQ6IDEwMCU7IGZvbnQtc2l6ZTogOTk5cHg7IHRleHQtYWxpZ246IHJpZ2h0OyBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7IG9wYWNpdHk6IDA7IG91dGxpbmU6IG5vbmU7IGN1cnNvcjogaW5oZXJpdDsgZGlzcGxheTogYmxvY2tcIj4gICAgPC9kaXY+ICAgIFxceDNjIS0tIGtvIGlmOiB0eXBlb2YgJHJvb3Quc2VsZWN0SW1hZ2UgIT09IFxcJ3VuZGVmaW5lZFxcJyAtLVxceDNlICAgIDxkaXYgdGl0bGU9XCJTZWxlY3QgZnJvbSBnYWxsZXJ5XCIgY2xhc3M9XCJ0b29sIGdhbGxlcnlcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1NlbGVjdCBmcm9tIGdhbGxlcnlcXCcpIH0sIGNsaWNrOiAkcm9vdC5zZWxlY3RJbWFnZS5iaW5kKCRlbGVtZW50LCBfc3JjKSwgY2xpY2tCdWJibGU6IHRydWVcIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXBpY3R1cmUtb1wiPjwvaT48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgIDwvZGl2PiAgXFx4M2MhLS0ga28gdGVtcGxhdGU6IF90ZW1wbGF0ZSAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2UgIFxceDNjIS0tIGtvIGlmOiBfc3JjKCkgPT0gXFwnXFwnIC0tXFx4M2UgICAgXFx4M2MhLS0gICAgPGltZyBzdHlsZT1cImRpc3BsYXk6IGJsb2NrO1wiIGNsYXNzPVwiaW1ncGxhY2Vob2xkZXJcIiB3aWR0aD1cIjIwMFwiIHNyYz1cIlwiIGFsdD1cIkluc2VydCBhbiBpbWFnZSBoZXJlXCIgZGF0YS1iaW5kPVwid3lzaXd5Z1NyYzogeyBzcmM6IF9zcmMucHJlbG9hZGVkLCBwbGFjZWhvbGRlcjogX3BsYWNlaG9sZGVyc3JjLCB3aWR0aDogX3dpZHRoLCBoZWlnaHQ6IF9oZWlnaHQsIG1ldGhvZDogX21ldGhvZCB9XCIgLz4gICAgLS1cXHgzZSAgICA8c3BhbiBjbGFzcz1cImZpbGV1cGxvYWR0ZXh0XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IGRpc3BsYXk6IC1tcy1mbGV4Ym94OyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBmbGV4LWFsaWduOiBjZW50ZXI7IGp1c3RpZnktY29udGVudDogY2VudGVyOyBwYWRkaW5nOiAxZW07IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwO1wiPjxzcGFuIGNsYXNzPVwidGV4dE1pZGRsZVwiIHN0eWxlPVwiIHRleHQtc2hhZG93OiAxcHggMXB4IDAgI0ZGRkZGRiwgMCAwIDEwcHggI0ZGRkZGRjsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIgZGF0YS1iaW5kPVwidGV4dDogJHJvb3QudChcXCdEcm9wIGFuIGltYWdlIGhlcmVcXCcpXCI+RHJvcCBhbiBpbWFnZSBoZXJlPC9zcGFuPjwvc3Bhbj4gIFxceDNjIS0tIC9rbyAtLVxceDNlICBcXHgzYyEtLSBrbyBpZjogX3NyYygpICE9IFxcJ1xcJyAtLVxceDNlICBcXHgzYyEtLSAgICA8aW1nIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XCIgd2lkdGg9XCIyMDBcIiBzcmM9XCJcIiBkYXRhLWJpbmQ9XCJwcmVsb2FkZXI6IF9zcmMsIHd5c2l3eWdTcmM6IHsgc3JjOiBfc3JjLnByZWxvYWRlZCwgcGxhY2Vob2xkZXI6IF9wbGFjZWhvbGRlcnNyYywgd2lkdGg6IF93aWR0aCwgaGVpZ2h0OiBfaGVpZ2h0LCBtZXRob2Q6IF9tZXRob2QgfVwiIC8+ICAgIC0tXFx4M2UgIFxceDNjIS0tIC9rbyAtLVxceDNlICBcXHgzYyEtLSBwdWxzYW50ZSBwZXIgbGEgY2FuY2VsbGF6aW9uZSAtLVxceDNlICA8ZGl2IHRpdGxlPVwiRHJvcCBhbiBpbWFnZSBoZXJlIG9yIGNsaWNrIHRoZSB1cGxvYWQgYnV0dG9uXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdEcm9wIGFuIGltYWdlIGhlcmUgb3IgY2xpY2sgdGhlIHVwbG9hZCBidXR0b25cXCcpIH0sIHRvb2x0aXBzOiB7fVwiIGNsYXNzPVwid29ya3pvbmVcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBvdmVyZmxvdzogaGlkZGVuO1wiPiAgICBcXHgzYyEtLSBrbyBpZjogX3NyYy5wcmVsb2FkZWQgJiYgX3NyYygpICE9IF9zcmMucHJlbG9hZGVkKCkgLS1cXHgzZVBSRUxPQURJTkcuLi4uXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6IF9zcmMoKSAhPSBcXCdcXCcgLS1cXHgzZSAgICAgIDxpbnB1dCBjbGFzcz1cImZpbGV1cGxvYWQgd2l0aGZpbGVcIiB0eXBlPVwiZmlsZVwiIG5hbWU9XCJmaWxlc1tdXCIgZGF0YS1iaW5kPVwiZmlsZXVwbG9hZDogeyBkYXRhOiBfc3JjLCBvbmVycm9yOiAkcm9vdC5ub3RpZmllci5lcnJvciwgb25maWxlOiAkcm9vdC5nYWxsZXJ5UmVjZW50LnVuc2hpZnQuYmluZCgkcm9vdC5nYWxsZXJ5UmVjZW50KSwgY2FudmFzUHJldmlldzogdHJ1ZSB9XCIgc3R5bGU9XCJ6LWluZGV4OiAtMjA7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBtaW4td2lkdGg6IDEwMCU7IG1pbi1oZWlnaHQ6IDEwMCU7IGZvbnQtemllOiA5OTlweDsgdGV4dC1hbGlnbjogcmlnaHQ7IGZpbHRlcjogYWxwaGEob3BhY2l0eT0wKTsgb3BhY2l0eTogMDsgb3V0bGluZTogbm9uZTsgY3Vyc29yOiBpbmhlcml0OyBkaXNwbGF5OiBibG9ja1wiPiAgICBcXHgzYyEtLSAva28gLS1cXHgzZSAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIiBzdHlsZT1cIm9wYWNpdHk6IC41OyB3aWR0aDogODAlOyBtYXJnaW4tbGVmdDogMTAlOyBwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzAlOyBoZWlnaHQ6IDIwcHg7IGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1wiPiAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcIiBzdHlsZT1cImhlaWdodDogMjBweDsgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7IFwiPjwvZGl2PiAgICA8L2Rpdj4gIDwvZGl2PjwvdGFibGU+JyksdGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJtYWluXCIsJzxkaXYgaWQ9XCJwYWdlXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiIGRhdGEtYmluZD1cInZpc2libGU6IHRydWUsIGNzczogeyB3aXRoVG9vbGJveDogJHJvb3Quc2hvd1Rvb2xib3gsIHdpdGhQcmV2aWV3RnJhbWU6IHNob3dQcmV2aWV3RnJhbWUgfVwiPiAgPGRpdiBpZD1cIm1haW4tZWRpdC1hcmVhXCIgZGF0YS1iaW5kPVwiY2xpY2s6IGZ1bmN0aW9uKG9iaiwgZXZ0KSB7ICRyb290LnNlbGVjdEJsb2NrKG51bGwpOyByZXR1cm4gdHJ1ZTsgfSwgY2xpY2tCdWJibGU6IGZhbHNlXCI+ICAgIFxceDNjIS0tIGtvIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogXFwnd3lzaXd5Z1xcJywgdGVtcGxhdGVNb2RlRmFsbGJhY2s6IFxcJ3Nob3dcXCcgfSAtLVxceDNlICAgIDxkaXYgaWQ9XCJtYWluLXd5c2l3eWctYXJlYVwiIGRhdGEtYmluZD1cInd5c2l3eWdTY3JvbGxmaXg6IHRydWUsIHNjcm9sbGFibGU6IHRydWUsIGZ1ZHJvcHBhYmxlOiB7IGFjdGl2ZTogZHJhZ2dpbmdJbWFnZSB9LCBjc3M6IHsgaXNkcmFnZ2luZzogZHJhZ2dpbmcsIGlzZHJhZ2dpbmdpbWc6IGRyYWdnaW5nSW1hZ2UgfSwgYmxvY2s6IGNvbnRlbnRcIj48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgIDwvZGl2PiAgPGRpdiBpZD1cInRvb2xiYXJcIiBjbGFzcz1cIm1vXCIgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+ICAgIFxceDNjIS0tIGtvIGlmOiB0eXBlb2YgJHJvb3QudW5kbyAhPSBcXCd1bmRlZmluZWRcXCcgLS1cXHgzZSAgICA8c3BhbiBkYXRhLWJpbmQ9XCJidXR0b25zZXQ6IHsgfVwiIGNsYXNzPVwibGVmdEJ1dHRvbnNcIj4gICAgPGEgdGl0bGU9XCJVbmRvIGxhc3Qgb3BlcmF0aW9uXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnVW5kbyBsYXN0IG9wZXJhdGlvblxcJykgfSwgY2xpY2s6ICRyb290LnVuZG8uZXhlY3V0ZSwgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgZGlzYWJsZWQ6ICEkcm9vdC51bmRvLmVuYWJsZWQoKSwgaWNvbnM6IHsgcHJpbWFyeTogXFwnZmEgZmEtcmVwbHlcXCcgfSwgbGFiZWw6ICRyb290LnVuZG8ubmFtZSwgdGV4dDogdHJ1ZSB9XCI+VU5ETzwvYT4gICAgPGEgdGl0bGU9XCJSZWRvIGxhc3Qgb3BlcmF0aW9uXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnUmVkbyBsYXN0IG9wZXJhdGlvblxcJykgfSwgY2xpY2s6ICRyb290LnJlZG8uZXhlY3V0ZSwgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgZGlzYWJsZWQ6ICEkcm9vdC5yZWRvLmVuYWJsZWQoKSwgaWNvbnM6IHsgcHJpbWFyeTogXFwnZmEgZmEtc2hhcmVcXCcgfSwgbGFiZWw6ICRyb290LnJlZG8ubmFtZSwgdGV4dDogdHJ1ZSB9XCI+UkVETzwvYT4gICAgPC9zcGFuPiAgICBcXHgzYyEtLSBrbyBpZjogJHJvb3QuZGVidWcgLS1cXHgzZSAgICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgZGF0YS1iaW5kPVwiY2xpY2s6ICRyb290LnVuZG9SZXNldCwgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgZGlzYWJsZWQ6ICEkcm9vdC51bmRvLmVuYWJsZWQoKSAmJiAhJHJvb3QucmVkby5lbmFibGVkKCksIGxhYmVsOiBcXCdyZXNldFxcJywgdGV4dDogdHJ1ZSB9XCI+UkVTRVQ8L2E+ICAgIFxceDNjIS0tIC9rbyAtLVxceDNlICAgIFxceDNjIS0tIC9rbyAtLVxceDNlICAgIDxzcGFuPiAgICA8aW5wdXQgaWQ9XCJzaG93R2FsbGVyeVwiIHR5cGU9XCJjaGVja2JveFwiIGRhdGEtYmluZD1cImNoZWNrZWQ6ICRyb290LnNob3dHYWxsZXJ5LCBidXR0b246IHsgcmVmcmVzaE9uOiAkcm9vdC5zaG93R2FsbGVyeSwgICAgIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLXBpY3R1cmUtb1xcJywgc2Vjb25kYXJ5OiBudWxsIH0sIHRleHQ6IHRydWUsIGxhYmVsOiAkcm9vdC50KFxcJ0dhbGxlcnlcXCcpIH1cIj48bGFiZWwgdGl0bGU9XCJTaG93IGltYWdlIGdhbGxlcnlcIiBmb3I9XCJzaG93R2FsbGVyeVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnU2hvdyBpbWFnZSBnYWxsZXJ5XFwnKSB9XCI+c2hvdyBnYWxsZXJ5PC9sYWJlbD48L2lucHV0PiAgICA8L3NwYW4+ICAgIDxpbnB1dCBpZD1cInByZXZpZXdGcmFtZVRvZ2dsZVwiIHR5cGU9XCJjaGVja2JveFwiIGRhdGEtYmluZD1cImNoZWNrZWQ6ICRyb290LnNob3dQcmV2aWV3RnJhbWUsIGJ1dHRvbjogeyByZWZyZXNoT246ICRyb290LnNob3dQcmV2aWV3RnJhbWUsIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLXRhYmxldFxcJywgc2Vjb25kYXJ5OiBudWxsIH0sIHRleHQ6IGZhbHNlLCBsYWJlbDogJHJvb3QudChcXCdQcmV2aWV3XFwnKSB9XCI+PGxhYmVsIHRpdGxlPVwiU2hvdyBsaXZlIHByZXZpZXdcIiBmb3I9XCJwcmV2aWV3RnJhbWVUb2dnbGVcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1Nob3cgbGl2ZSBwcmV2aWV3XFwnKSB9XCI+UFJFVklFVzwvbGFiZWw+PC9pbnB1dD4gICAgXFx4M2MhLS0ga28gaWY6ICRyb290LmRlYnVnIC0tXFx4M2UgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImNsaWNrOiAkcm9vdC5leHBvcnQsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGxhYmVsOiBcXCdleHBvcnRcXCcsIHRleHQ6IHRydWUgfVwiPkVYUE9SVDwvYT4gICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGRhdGEtYmluZD1cImNoZWNrZWQ6ICRyb290LmRlYnVnXCIgLz4gZGVidWcgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImNsaWNrOiAkcm9vdC5sb2FkRGVmYXVsdEJsb2NrcywgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgaWNvbnM6IHsgcHJpbWFyeTogXFwnZmEgZmEtZncgZmEtdXBsb2FkXFwnIH0sIGxhYmVsOiBcXCdEZWZhdWx0XFwnLCB0ZXh0OiB0cnVlIH1cIj5MT0FEIEJMT0NLUzwvYT4gICAgWzxhIGlkPVwic3Vic2NyaXB0aW9uc0NvdW50XCIgaHJlZj1cImphdmFzY3JpcHQ6dmlld01vZGVsLmxvb3BTdWJzY3JpcHRpb25zQ291bnQoKVwiPnN1YnM8L2E+XSAgICBcXHgzYyEtLSAva28gLS1cXHgzZSAgICA8c3BhbiBkYXRhLWJpbmQ9XCJ2aXNpYmxlOiBmYWxzZVwiPiAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1iaW5kPVwiY2hlY2tlZDogJHJvb3Quc2hvd1Rvb2xib3hcIiAvPiB0b29sYm94ICAgIDwvc3Bhbj4gICAgPGRpdiBjbGFzcz1cInJpZ2h0QnV0dG9uc1wiPiAgICBcXHgzYyEtLSBrbyBpZjogdHlwZW9mICRyb290LnNhdmUgIT09IFxcJ3VuZGVmaW5lZFxcJyAtLVxceDNlICAgIDxhIHRpdGxlPVwiU2F2ZSB0ZW1wbGF0ZVwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1NhdmUgdGVtcGxhdGVcXCcpIH0sIGNsaWNrOiAkcm9vdC5zYXZlLmV4ZWN1dGUsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGRpc2FibGVkOiAhJHJvb3Quc2F2ZS5lbmFibGVkKCksIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLWNsb3VkLXVwbG9hZFxcJyB9LCBsYWJlbDogJHJvb3QudCgkcm9vdC5zYXZlLm5hbWUpLCB0ZXh0OiB0cnVlIH1cIj5TQUxWQTwvYT4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6IHR5cGVvZiAkcm9vdC50ZXN0ICE9PSBcXCd1bmRlZmluZWRcXCcgLS1cXHgzZSAgICA8YSB0aXRsZT1cIlNob3cgcHJldmlldyBhbmQgc2VuZCB0ZXN0XCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnU2hvdyBwcmV2aWV3IGFuZCBzZW5kIHRlc3RcXCcpIH0sIGNsaWNrOiAkcm9vdC50ZXN0LmV4ZWN1dGUsIGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IGRpc2FibGVkOiAhJHJvb3QudGVzdC5lbmFibGVkKCksIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLXBhcGVyLXBsYW5lXFwnIH0sIGxhYmVsOiAkcm9vdC50KCRyb290LnRlc3QubmFtZSksIHRleHQ6IHRydWUgfVwiPlRFU1Q8L2E+ICAgIFxceDNjIS0tIC9rbyAtLVxceDNlICAgIFxceDNjIS0tIGtvIGlmOiB0eXBlb2YgJHJvb3QuZG93bmxvYWQgIT09IFxcJ3VuZGVmaW5lZFxcJyAtLVxceDNlICAgIDxmb3JtIGlkPVwiZG93bmxvYWRGb3JtXCIgYWN0aW9uPVwiI1wiIG1ldGhvZD1cIlBPU1RcIj4gICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiYWN0aW9uXCIgdmFsdWU9XCJkb3dubG9hZFwiIC8+ICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImZpbGVuYW1lXCIgdmFsdWU9XCJlbWFpbC5odG1sXCIgLz4gICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiaHRtbFwiIGlkPVwiZG93bmxvYWRIdG1sVGV4dGFyZWFcIiAvPiAgICA8YSB0aXRsZT1cIkRvd25sb2FkIHRlbXBsYXRlXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnRG93bmxvYWQgdGVtcGxhdGVcXCcpIH0sIGNsaWNrOiAkcm9vdC5kb3dubG9hZC5leGVjdXRlLCBjbGlja0J1YmJsZTogZmFsc2UsIGJ1dHRvbjogeyBkaXNhYmxlZDogISRyb290LmRvd25sb2FkLmVuYWJsZWQoKSwgaWNvbnM6IHsgcHJpbWFyeTogXFwnZmEgZmEtZncgZmEtZG93bmxvYWRcXCcgfSwgbGFiZWw6ICRyb290LnQoJHJvb3QuZG93bmxvYWQubmFtZSksIHRleHQ6IHRydWUgfVwiPkRPV05MT0FEPC9hPiAgICA8L2Zvcm0+ICAgIFxceDNjIS0tIC9rbyAtLVxceDNlICAgIDwvZGl2PiAgPC9kaXY+ICBcXHgzYyEtLSBrbyBpZjogJHJvb3Quc2hvd1Rvb2xib3ggLS1cXHgzZSAgPGRpdiBpZD1cIm1haW4tdG9vbGJveFwiIGNsYXNzPVwibW9cIiBkYXRhLWJpbmQ9XCJzY3JvbGxhYmxlOiB0cnVlLCB3aXRoUHJvcGVydGllczogeyB0ZW1wbGF0ZU1vZGU6IFxcJ2VkaXRcXCcgfVwiPiAgICA8ZGl2IGRhdGEtYmluZD1cInRlbXBsYXRlOiB7IG5hbWU6IFxcJ3Rvb2xib3hcXCcgfVwiPjwvZGl2PiAgPC9kaXY+ICBcXHgzYyEtLSAva28gLS1cXHgzZSAgICA8ZGl2IGlkPVwibWFpbi1wcmV2aWV3XCIgY2xhc3M9XCJtb1wiIGRhdGEtYmluZD1cInNjcm9sbGFibGU6IHRydWUsIGlmOiAkcm9vdC5zaG93UHJldmlld0ZyYW1lXCI+ICAgIDxkaXYgaWQ9XCJwcmV2aWV3LXRvb2xiYXJcIj4gICAgICA8ZGl2IGRhdGEtYmluZD1cInZpc2libGU6ICRyb290LnNob3dQcmV2aWV3RnJhbWUsIGJ1dHRvbnNldDogeyB9XCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2tcIj4gICAgICAgIDxpbnB1dCBpZD1cInByZXZpZXdMYXJnZVwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJwcmV2aWV3TW9kZVwiIHZhbHVlPVwibGFyZ2VcIiBkYXRhLWJpbmQ9XCJjaGVja2VkOiAkcm9vdC5wcmV2aWV3TW9kZSwgYnV0dG9uOiB7IHRleHQ6IGZhbHNlLCBsYWJlbDogXFwnbGFyZ2VcXCcsIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLWRlc2t0b3BcXCcgfSB9XCIgLz4gICAgICAgIDxsYWJlbCBmb3I9XCJwcmV2aWV3TGFyZ2VcIiB0aXRsZT1cIkxhcmdlIHNjcmVlblwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnTGFyZ2Ugc2NyZWVuXFwnKSB9XCI+TGFyZ2Ugc2NyZWVuPC9sYWJlbD4gICAgICAgIDxpbnB1dCBpZD1cInByZXZpZXdEZXNrdG9wXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInByZXZpZXdNb2RlXCIgdmFsdWU9XCJkZXNrdG9wXCIgZGF0YS1iaW5kPVwiY2hlY2tlZDogJHJvb3QucHJldmlld01vZGUsIGJ1dHRvbjogeyB0ZXh0OiBmYWxzZSwgbGFiZWw6IFxcJ2Rlc2t0b3BcXCcsIGljb25zOiB7IHByaW1hcnk6IFxcJ2ZhIGZhLWZ3IGZhLXRhYmxldFxcJyB9IH1cIiAvPiAgICAgICAgPGxhYmVsIGZvcj1cInByZXZpZXdEZXNrdG9wXCIgdGl0bGU9XCJUYWJsZXRcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1RhYmxldFxcJykgfVwiPlRhYmxldDwvbGFiZWw+ICAgICAgICA8aW5wdXQgaWQ9XCJwcmV2aWV3TW9iaWxlXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInByZXZpZXdNb2RlXCIgdmFsdWU9XCJtb2JpbGVcIiBkYXRhLWJpbmQ9XCJjaGVja2VkOiAkcm9vdC5wcmV2aWV3TW9kZSwgYnV0dG9uOiB7IHRleHQ6IGZhbHNlLCBsYWJlbDogXFwnbW9iaWxlXFwnLCBpY29uczogeyBwcmltYXJ5OiBcXCdmYSBmYS1mdyBmYS1tb2JpbGVcXCcgfSB9XCIgLz4gICAgICAgIDxsYWJlbCBmb3I9XCJwcmV2aWV3TW9iaWxlXCIgdGl0bGU9XCJTbWFydHBob25lXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdTbWFydHBob25lXFwnKSB9XCI+U21hcnRwaG9uZTwvbGFiZWw+ICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPVwiZnJhbWUtY29udGFpbmVyXCIgZGF0YS1iaW5kPVwiY3NzOiB7IGRlc2t0b3A6ICRyb290LnByZXZpZXdNb2RlKCkgPT0gXFwnZGVza3RvcFxcJywgbW9iaWxlOiAkcm9vdC5wcmV2aWV3TW9kZSgpID09IFxcJ21vYmlsZVxcJywgbGFyZ2U6ICRyb290LnByZXZpZXdNb2RlKCkgPT0gXFwnbGFyZ2VcXCcgfVwiPiAgICAgIDxpZnJhbWUgZGF0YS1iaW5kPVwiYmluZElmcmFtZTogJGRhdGFcIj48L2lmcmFtZT4gICAgPC9kaXY+ICA8L2Rpdj4gIDxkaXYgY2xhc3M9XCJtb1wiIGlkPVwibW8tYm9keVwiPjwvZGl2PiAgPGRpdiBpZD1cImluY29tcGF0aWJsZS10ZW1wbGF0ZVwiIHRpdGxlPVwiU2F2ZWQgbW9kZWwgaXMgb2Jzb2xldGVcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1NhdmVkIG1vZGVsIGlzIG9ic29sZXRlXFwnKSB9LCBodG1sOiAkcm9vdC50KFxcJzxwPlRoZSBzYXZlZCBtb2RlbCBoYXMgYmVlbiBjcmVhdGVkIHdpdGggYSBwcmV2aW91cywgbm9uIGNvbXBsZXRlbHkgY29tcGF0aWJsZSB2ZXJzaW9uLCBvZiB0aGUgdGVtcGxhdGU8L3A+PHA+U29tZSBjb250ZW50IG9yIHN0eWxlIGluIHRoZSBtb2RlbCA8Yj5DT1VMRCBCRSBMT1NUPC9iPiBpZiB5b3Ugd2lsbCA8Yj5zYXZlPC9iPjwvcD48cD5Db250YWN0IHVzIGZvciBtb3JlIGluZm9ybWF0aW9ucyE8L3A+XFwnKVwiPiAgICBJbmNvbXBhdGlibGUgdGVtcGxhdGUgIDwvZGl2PiAgPGRpdiBpZD1cImZha2UtaW1hZ2UtZWRpdG9yXCIgdGl0bGU9XCJGYWtlIGltYWdlIGVkaXRvclwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnRmFrZSBpbWFnZSBlZGl0b3JcXCcpIH0sIGh0bWw6ICRyb290LnQoXFwnPHA+RmFrZSBpbWFnZSBlZGl0b3I8L3A+XFwnKVwiPiAgICA8cD5GYWtlIGltYWdlIGVkaXRvcjwvcD4gIDwvZGl2PjwvZGl2PlxceDNjIS0tIGtvIGlmOiAkcm9vdC5sb2dvUGF0aCAtLVxceDNlPGRpdiBpZD1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmdcIiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrOyB3aWR0aDogMzAwcHg7IHRleHQtYWxpZ246IGNlbnRlcjsgaGVpZ2h0OiAzMnB4OyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDowOyBib3R0b206IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwOyAgbWFyZ2luOiBhdXRvO1wiIGRhdGEtYmluZD1cImF0dHI6IHsgc3R5bGU6IFxcJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiA1cHg7IGxlZnQ6IDZweDsgei1pbmRleDogMTUwO1xcJ30sIGNzczogeyBsb2FkaW5nOiBmYWxzZSB9XCI+ICA8YSBocmVmPVwiL1wiIGRhdGEtYmluZD1cImF0dHI6IHsgaHJlZjogJHJvb3QubG9nb1VybCwgYWx0OiAkcm9vdC5sb2dvQWx0IH1cIj48aW1nIGRhdGEtYmluZD1cImF0dHI6IHsgc3JjOiAkcm9vdC5sb2dvUGF0aCB9XCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgYWx0PVwibW9zYWljb1wiIGJvcmRlcj1cIjBcIiAvPjwvYT4gIDxkaXYgc3R5bGU9XCJvcGFjaXR5OiAwXCIgZGF0YS1iaW5kPVwidmlzaWJsZTogZmFsc2VcIj5PcHBwcy4uLiAhITwvZGl2PjwvZGl2PlxceDNjIS0tIC9rbyAtLVxceDNlJyksdGVtcGxhdGVTeXN0ZW0uYWRkVGVtcGxhdGUoXCJ0b29sYm94XCIsJzxkaXYgaWQ9XCJ0b29sdGFic1wiIGNsYXNzPVwidGFic19ob3Jpem9udGFsIGJ1dHRvbl9jb2xvclwiIGRhdGEtYmluZD1cInRhYnM6IHsgYWN0aXZlOiAkcm9vdC5zZWxlY3RlZFRvb2wgfVwiPiAgPHVsPiAgICA8bGkgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+PGEgdGl0bGU9XCJCbG9ja3MgcmVhZHkgdG8gYmUgYWRkZWQgdG8gdGhlIHRlbXBsYXRlXCIgZGF0YS1sb2NhbD1cInRydWVcIiBocmVmPVwiI3Rvb2xibG9ja3NcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ0Jsb2NrcyByZWFkeSB0byBiZSBhZGRlZCB0byB0aGUgdGVtcGxhdGVcXCcpIH1cIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLWN1YmVzXCI+PC9pPiA8c3BhbiBkYXRhLWJpbmQ9XCJodG1sOiAkcm9vdC50KFxcJ0Jsb2Nrc1xcJylcIj5CbG9ja3M8L3NwYW4+PC9hPjwvbGk+ICAgIDxsaSBkYXRhLWJpbmQ9XCJ0b29sdGlwczoge31cIj48YSB0aXRsZT1cIkVkaXQgY29udGVudCBvcHRpb25zXCIgaHJlZj1cIiN0b29sY29udGVudHNcIiBkYXRhLWxvY2FsPVwidHJ1ZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnRWRpdCBjb250ZW50IG9wdGlvbnNcXCcpIH1cIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXBlbmNpbFwiPjwvaT4gPHNwYW4gZGF0YS1iaW5kPVwiaHRtbDogJHJvb3QudChcXCdDb250ZW50XFwnKVwiPkNvbnRlbnQ8L3NwYW4+PC9hPjwvbGk+ICAgIDxsaSBkYXRhLWJpbmQ9XCJ0b29sdGlwczoge31cIj48YSB0aXRsZT1cIkVkaXQgc3R5bGUgb3B0aW9uc1wiIGhyZWY9XCIjdG9vbHN0eWxlc1wiIGRhdGEtbG9jYWw9XCJ0cnVlXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdFZGl0IHN0eWxlIG9wdGlvbnNcXCcpIH1cIj48aSBjbGFzcz1cImZhIGZhLWZ3IGZhLXBhaW50LWJydXNoXCI+PC9pPiA8c3BhbiBkYXRhLWJpbmQ9XCJodG1sOiAkcm9vdC50KFxcJ1N0eWxlXFwnKVwiPlN0eWxlPC9zcGFuPjwvYT48L2xpPiAgPC91bD4gIDxkaXYgaWQ9XCJ0b29sYmxvY2tzXCIgZGF0YS1iaW5kPVwic2Nyb2xsYWJsZTogdHJ1ZVwiPiAgICA8ZGl2IGNsYXNzPVwiYmxvY2stbGlzdFwiIGRhdGEtYmluZD1cImZvcmVhY2g6IGJsb2NrRGVmc1wiIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyXCI+ICAgICAgPGRpdiBjbGFzcz1cImRyYWdnYWJsZS1pdGVtXCIgZGF0YS1iaW5kPVwid2l0aFByb3BlcnRpZXM6IHsgdGVtcGxhdGVNb2RlOiBcXCdzaG93XFwnIH1cIj4gICAgICAgIDxkaXYgY2xhc3M9XCJibG9ja1wiIGRhdGEtYmluZD1cImV4dGRyYWdnYWJsZTogeyBjb25uZWN0Q2xhc3M6IFxcJ3NvcnRhYmxlLWJsb2Nrcy1lZGl0XFwnLCBkYXRhOiAkZGF0YSwgZHJvcENvbnRhaW5lcjogXFwnI21haW4td3lzaXd5Zy1hcmVhXFwnLCBkcmFnZ2luZzogJHJvb3QuZHJhZ2dpbmcsIFxcJ29wdGlvbnNcXCc6IHsgaGFuZGxlOiBcXCcuaGFuZGxlXFwnLCBkaXN0YW5jZTogMTAsIFxcJ2FwcGVuZFRvXFwnOiBcXCcjcGFnZVxcJyB9IH0sIGNsaWNrOiAkcm9vdC5hZGRCbG9ja1wiIHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlO1wiPiAgICAgICAgICA8ZGl2IHRpdGxlPVwiQ2xpY2sgb3IgZHJhZyB0byBhZGQgdGhpcyBibG9jayB0byB0aGUgdGVtcGxhdGVcIiBjbGFzcz1cImhhbmRsZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnQ2xpY2sgb3IgZHJhZyB0byBhZGQgdGhpcyBibG9jayB0byB0aGUgdGVtcGxhdGVcXCcpIH0sIHRvb2x0aXBzOiB7fVwiPjwvZGl2PiAgICAgICAgICA8aW1nIGRhdGEtYmluZD1cImF0dHI6IHsgYWx0OiAkcm9vdC50KFxcJ0Jsb2NrIF9fbmFtZV9fXFwnLCB7IG5hbWU6IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodHlwZSkgfSksIHNyYzogJHJvb3QudGVtcGxhdGVQYXRoKFxcJ2VkcmVzL1xcJytrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHR5cGUpK1xcJy5wbmdcXCcpIH1cIiBhbHQ9XCJCbG9jayBfX25hbWVfX1wiIC8+ICAgICAgICA8L2Rpdj4gICAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImFkZGJsb2NrYnV0dG9uXCIgZGF0YS1iaW5kPVwiY2xpY2s6ICRyb290LmFkZEJsb2NrLCBidXR0b246IHsgbGFiZWw6ICRyb290LnQoXFwnQWRkXFwnKSB9XCI+QWRkPC9hPiAgICAgIDwvZGl2PiAgICA8L2Rpdj4gIDwvZGl2PiAgPGRpdiBpZD1cInRvb2xjb250ZW50c1wiIGRhdGEtYmluZD1cInNjcm9sbGFibGU6IHRydWVcIj4gICAgXFx4M2MhLS0ga28gaWY6ICRyb290LnNlbGVjdGVkQmxvY2soKSAhPT0gbnVsbCAtLVxceDNlICAgIDxkaXYgZGF0YS1iaW5kPVwiYmxvY2s6ICRyb290LnNlbGVjdGVkQmxvY2tcIj48L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6ICRyb290LnNlbGVjdGVkQmxvY2soKSA9PSBudWxsIC0tXFx4M2UgICAgPGRpdiBjbGFzcz1cIm5vU2VsZWN0ZWRCbG9ja1wiIGRhdGEtYmluZD1cInRleHQ6ICRyb290LnQoXFwnQnkgY2xpY2tpbmcgb24gbWVzc2FnZSBwYXJ0cyB5b3Ugd2lsbCBzZWxlY3QgYSBibG9jayBhbmQgY29udGVudCBvcHRpb25zLCBpZiBhbnksIHdpbGwgc2hvdyBoZXJlXFwnKVwiPkJ5IGNsaWNraW5nIG9uIG1lc3NhZ2UgcGFydHMgeW91IHdpbGwgc2VsZWN0IGEgYmxvY2sgYW5kIGNvbnRlbnQgb3B0aW9ucywgaWYgYW55LCB3aWxsIHNob3cgaGVyZTwvZGl2PiAgICBcXHgzYyEtLSAva28gLS1cXHgzZSAgICBcXHgzYyEtLSBrbyBibG9jazogY29udGVudCAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2UgIDwvZGl2PiAgICA8ZGl2IGlkPVwidG9vbHN0eWxlc1wiIGRhdGEtYmluZD1cInNjcm9sbGFibGU6IHRydWUsIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogXFwnc3R5bGVyXFwnIH1cIj4gICAgXFx4M2MhLS0ga28gaWY6IHR5cGVvZiAkcm9vdC5jb250ZW50KCkudGhlbWUgPT09IFxcJ3VuZGVmaW5lZFxcJyB8fCB0eXBlb2YgJHJvb3QuY29udGVudCgpLnRoZW1lKCkuc2NoZW1lID09PSBcXCd1bmRlZmluZWRcXCcgfHwgJHJvb3QuY29udGVudCgpLnRoZW1lKCkuc2NoZW1lKCkgPT09IFxcJ2N1c3RvbVxcJyAtLVxceDNlICAgICAgXFx4M2MhLS0ga28gaWY6ICRyb290LnNlbGVjdGVkQmxvY2soKSAhPT0gbnVsbCAtLVxceDNlICAgICAgPGRpdiBkYXRhLWJpbmQ9XCJibG9jazogJHJvb3Quc2VsZWN0ZWRCbG9jaywgY3NzOiB7IHdvcmtMb2NhbDogJHJvb3Quc2VsZWN0ZWRCbG9jaygpLmN1c3RvbVN0eWxlLCB3b3JrR2xvYmFsOiB0eXBlb2YgJHJvb3Quc2VsZWN0ZWRCbG9jaygpLmN1c3RvbVN0eWxlID09PSBcXCd1bmRlZmluZWRcXCcgfHwgISRyb290LnNlbGVjdGVkQmxvY2soKS5jdXN0b21TdHlsZSgpIH1cIj48L2Rpdj4gICAgICBcXHgzYyEtLSAva28gLS1cXHgzZSAgICAgIFxceDNjIS0tIGtvIGlmOiAkcm9vdC5zZWxlY3RlZEJsb2NrKCkgPT0gbnVsbCAtLVxceDNlICAgICAgPGRpdiBjbGFzcz1cIm5vU2VsZWN0ZWRCbG9ja1wiIGRhdGEtYmluZD1cInRleHQ6ICRyb290LnQoXFwnQnkgY2xpY2tpbmcgb24gbWVzc2FnZSBwYXJ0cyB5b3Ugd2lsbCBzZWxlY3QgYSBibG9jayBhbmQgc3R5bGUgb3B0aW9ucywgaWYgYXZhaWxhYmxlLCB3aWxsIHNob3cgaGVyZVxcJylcIj5CeSBjbGlja2luZyBvbiBtZXNzYWdlIHBhcnRzIHlvdSB3aWxsIHNlbGVjdCBhIGJsb2NrIGFuZCBzdHlsZSBvcHRpb25zLCBpZiBhdmFpbGFibGUsIHdpbGwgc2hvdyBoZXJlPC9kaXY+ICAgICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgICA8ZGl2IGNsYXNzPVwid29ya0dsb2JhbENvbnRlbnRcIj4gICAgICBcXHgzYyEtLSBrbyBibG9jazogY29udGVudCAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgICA8L2Rpdj4gICAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgIDwvZGl2PjwvZGl2PiAgICAgICAgPGRpdiBpZD1cInRvb2xpbWFnZXNcIiBjbGFzcz1cInNsaWRlYmFyXCIgZGF0YS1iaW5kPVwic2Nyb2xsYWJsZTogdHJ1ZSwgY3NzOiB7IGhpZGRlbjogJHJvb3Quc2hvd0dhbGxlcnkoKSA9PT0gZmFsc2UgfVwiPiAgPGRpdiBjbGFzcz1cImNsb3NlXCIgZGF0YS1iaW5kPVwiY2xpY2s6ICRyb290LnNob3dHYWxsZXJ5LmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcIj5YPC9kaXY+ICA8c3BhbiBjbGFzcz1cInBhbmUtdGl0bGVcIiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC50KFxcJ0dhbGxlcnk6XFwnKVwiPkdhbGxlcnk6PC9zcGFuPiAgPGRpdiBkYXRhLWRyb3AtY29udGVudD1cIkRyb3AgaGVyZVwiIGNsYXNzPVwiaW1nLWRyb3B6b25lIHBhbmUgdXBsb2Fkem9uZVwiIGRhdGEtYmluZD1cImF0dHI6IHsgXFwnZGF0YS1kcm9wLWNvbnRlbnRcXCc6ICRyb290LnQoXFwnRHJvcCBoZXJlXFwnKSB9LCBmdWRyb3BwYWJsZTogeyBhY3RpdmVDbGFzczogXFwndWktc3RhdGUtaGlnaGxpZ2h0XFwnLCBob3ZlckNsYXNzOiBcXCd1aS1zdGF0ZS1kcmFnaG92ZXJcXCcgfVwiPiAgPGRpdiBjbGFzcz1cIm1vLXVwbG9hZHpvbmVcIiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZTsgcGFkZGluZzogMmVtOyBib3JkZXI6IDJweCBkb3R0ZWQgIzgwODA4MFwiPiAgICAgPGlucHV0IGNsYXNzPVwiZmlsZXVwbG9hZFwiIHR5cGU9XCJmaWxlXCIgbXVsdGlwbGUgbmFtZT1cImZpbGVzW11cIiBkYXRhLWJpbmQ9XCJmaWxldXBsb2FkOiB7IG9uZXJyb3I6ICRyb290Lm5vdGlmaWVyLmVycm9yLCBvbmZpbGU6ICRyb290LmxvYWRJbWFnZSB9XCIgc3R5bGU9XCJ6LWluZGV4OiAxMDsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwOyBib3R0b206IDA7IG1pbi13aWR0aDogMTAwJTsgbWluLWhlaWdodDogMTAwJTsgZm9udC16aWU6IDk5OXB4OyB0ZXh0LWFsaWduOiByaWdodDsgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTApOyBvcGFjaXR5OiAwOyBvdXRsaW5lOiBub25lOyBjdXJzb3I6IGluaGVyaXQ7IGRpc3BsYXk6IGJsb2NrXCI+ICAgICA8c3BhbiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC50KFxcJ0NsaWNrIG9yIGRyYWcgZmlsZXMgaGVyZVxcJylcIj5DbGljayBvciBkcmFnIGZpbGVzIGhlcmU8L3NwYW4+ICAgICA8ZGl2IGNsYXNzPVwid29ya3pvbmVcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBvdmVyZmxvdzogaGlkZGVuO1wiPiAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIiBzdHlsZT1cIm9wYWNpdHk6IC41OyB3aWR0aDogODAlOyBtYXJnaW4tbGVmdDogMTAlOyBwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzAlOyBoZWlnaHQ6IDIwcHg7IGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1wiPiAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcIiBzdHlsZT1cImhlaWdodDogMjBweDsgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7IFwiPjwvZGl2PiAgICAgICA8L2Rpdj4gICAgIDwvZGl2PiAgPC9kaXY+ICA8L2Rpdj4gIFxceDNjIS0tIGtvIGlmOiAkcm9vdC5zaG93R2FsbGVyeSgpIC0tXFx4M2UgIDxkaXYgaWQ9XCJ0b29saW1hZ2VzdGFiXCIgY2xhc3M9XCJ0YWJzX2hvcml6b250YWxcIiBkYXRhLWJpbmQ9XCJ0YWJzOiB7IGFjdGl2ZTogJHJvb3Quc2VsZWN0ZWRJbWFnZVRhYiB9XCI+ICAgIDx1bD4gICAgICA8bGkgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+PGEgdGl0bGU9XCJTZXNzaW9uIGltYWdlc1wiIGRhdGEtbG9jYWw9XCJ0cnVlXCIgaHJlZj1cIiN0b29saW1hZ2VzcmVjZW50XCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdTZXNzaW9uIGltYWdlc1xcJykgfSwgdGV4dDogJHJvb3QudChcXCdSZWNlbnRzXFwnKVwiPlJlY2VudHM8L2E+PC9saT4gICAgICA8bGkgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9XCI+PGEgdGl0bGU9XCJSZW1vdGUgZ2FsbGVyeVwiIGRhdGEtbG9jYWw9XCJ0cnVlXCIgaHJlZj1cIiN0b29saW1hZ2VzZ2FsbGVyeVwiIGRhdGEtYmluZD1cImF0dHI6IHsgdGl0bGU6ICRyb290LnQoXFwnUmVtb3RlIGdhbGxlcnlcXCcpIH0sIHRleHQ6ICRyb290LnQoXFwnR2FsbGVyeVxcJylcIj5HYWxsZXJ5PC9hPjwvbGk+ICAgIDwvdWw+ICAgIDxkaXYgaWQ9XCJ0b29saW1hZ2VzcmVjZW50XCI+ICAgICAgXFx4M2MhLS0ga28gaWY6IGdhbGxlcnlSZWNlbnQoKS5sZW5ndGggPT0gMCAtLVxceDNlPGRpdiBjbGFzcz1cImdhbGxlcnlFbXB0eVwiIGRhdGEtYmluZD1cInRleHQ6ICRyb290LnQoXFwnTm8gaW1hZ2VzIHVwbG9hZGVkLCB5ZXRcXCcpXCI+Tm8gaW1hZ2VzIHVwbG9hZGVkLCB5ZXQ8L2Rpdj5cXHgzYyEtLSAva28gLS1cXHgzZSAgICAgIFxceDNjIS0tIGtvIHRlbXBsYXRlOiB7bmFtZTogXFwnZ2FsbGVyeS1pbWFnZXNcXCcsIGRhdGE6IHsgaXRlbXM6IGdhbGxlcnlSZWNlbnQgfSB9IC0tXFx4M2UjIHJlY2VudCBnYWxsZXJ5ICNcXHgzYyEtLSAva28gLS1cXHgzZSAgICA8L2Rpdj4gICAgPGRpdiBpZD1cInRvb2xpbWFnZXNnYWxsZXJ5XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4gICAgXFx4M2MhLS0ga28gaWY6ICRyb290LmdhbGxlcnlMb2FkZWQoKSA9PT0gZmFsc2UgLS1cXHgzZTxhIGNsYXNzPVwibG9hZGJ1dHRvblwiIHRpdGxlPVwiU2hvdyBpbWFnZXMgZnJvbSB0aGUgZ2FsbGVyeVwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7IHRpdGxlOiAkcm9vdC50KFxcJ1Nob3cgaW1hZ2VzIGZyb20gdGhlIGdhbGxlcnlcXCcpIH0sIGNsaWNrOiAkcm9vdC5sb2FkR2FsbGVyeSwgYnV0dG9uOiB7IGRpc2FibGVkOiAkcm9vdC5nYWxsZXJ5TG9hZGVkLCBpY29uczogeyBwcmltYXJ5OiBcXCdmYSBmYS1mdyBmYS1waWN0dXJlLW9cXCcgfSwgbGFiZWw6ICRyb290LmdhbGxlcnlMb2FkZWQoKSA9PSBcXCdsb2FkaW5nXFwnID8gJHJvb3QudChcXCdMb2FkaW5nLi4uXFwnKSA6ICRyb290LnQoXFwnTG9hZCBnYWxsZXJ5XFwnKSwgdGV4dDogdHJ1ZSB9XCI+IyBsb2FkIGdhbGx5ICM8L2E+XFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gaWY6ICRyb290LmdhbGxlcnlMb2FkZWQoKSA9PT0gXFwnbG9hZGluZ1xcJyAtLVxceDNlPGRpdiBjbGFzcz1cImdhbGxlcnlFbXB0eVwiIGRhdGEtYmluZD1cInRleHQ6ICRyb290LnQoXFwnTG9hZGluZyBnYWxsZXJ5Li4uXFwnKVwiPkxvYWRpbmcgZ2FsbGVyeS4uLjwvZGl2PlxceDNjIS0tIC9rbyAtLVxceDNlICAgIFxceDNjIS0tIGtvIGlmOiAkcm9vdC5nYWxsZXJ5TG9hZGVkKCkgPT09IDAgLS1cXHgzZTxkaXYgY2xhc3M9XCJnYWxsZXJ5RW1wdHlcIiBkYXRhLWJpbmQ9XCJ0ZXh0OiAkcm9vdC50KFxcJ1RoZSBnYWxsZXJ5IGlzIGVtcHR5XFwnKVwiPlRoZSBnYWxsZXJ5IGlzIGVtcHR5PC9kaXY+XFx4M2MhLS0gL2tvIC0tXFx4M2UgICAgXFx4M2MhLS0ga28gdGVtcGxhdGU6IHtuYW1lOiBcXCdnYWxsZXJ5LWltYWdlc1xcJywgZGF0YTogeyBpdGVtczogZ2FsbGVyeVJlbW90ZSB9IH0gLS1cXHgzZSMgcmVtb3RlIGdhbGxlcnkgI1xceDNjIS0tIC9rbyAtLVxceDNlICAgIDwvZGl2PiAgPC9kaXY+ICBcXHgzYyEtLSAva28gLS1cXHgzZTwvZGl2PjxkaXYgaWQ9XCJ0b29sZGVidWdcIiBjbGFzcz1cInNsaWRlYmFyXCIgZGF0YS1iaW5kPVwiY3NzOiB7IGhpZGRlbjogJHJvb3QuZGVidWcoKSA9PT0gZmFsc2UgfVwiPiAgPGRpdiBjbGFzcz1cImNsb3NlXCIgZGF0YS1iaW5kPVwiY2xpY2s6ICRyb290LmRlYnVnLmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcIj5YPC9kaXY+ICAgIFxceDNjIS0tIGtvIGlmOiAkcm9vdC5kZWJ1ZyAtLVxceDNlICBDb250ZW50OiAgPHByZSBkYXRhLWJpbmQ9XFwndGV4dDoga28udG9KU09OKGNvbnRlbnQsIG51bGwsIDIpXFwnIHN0eWxlPVwib3ZlcmZsb3c6IGF1dG87IGhlaWdodDogMjAlXCI+PC9wcmU+ICBCbG9ja0RlZnM6ICA8cHJlIGRhdGEtYmluZD1cXCd0ZXh0OiBrby50b0pTT04oYmxvY2tEZWZzLCBudWxsLCAyKVxcJyBzdHlsZT1cIm92ZXJmbG93OiBhdXRvOyBoZWlnaHQ6IDIwJVwiPjwvcHJlPiAgXFx4M2MhLS0gL2tvIC0tXFx4M2UgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBkYXRhLWJpbmQ9XCJjbGljazogJHJvb3QuZXhwb3J0SFRNTHRvVGV4dGFyZWEuYmluZCgkZWxlbWVudCwgXFwnI291dHB1dGh0bWxcXCcpOyBjbGlja0J1YmJsZTogZmFsc2UsIGJ1dHRvbjogeyB0ZXh0OiB0cnVlLCBsYWJlbDpcXCdHZW5lcmF0ZVxcJyB9XCI+T3V0cHV0PC9hPiAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImNsaWNrOiAkcm9vdC5leHBvcnRKU09OdG9UZXh0YXJlYS5iaW5kKCRlbGVtZW50LCBcXCcjb3V0cHV0aHRtbFxcJyk7IGNsaWNrQnViYmxlOiBmYWxzZSwgYnV0dG9uOiB7IHRleHQ6IHRydWUsIGxhYmVsOlxcJ0V4cG9ydFxcJyB9XCI+RXhwb3J0PC9hPiAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGRhdGEtYmluZD1cImNsaWNrOiAkcm9vdC5pbXBvcnRKU09OZnJvbVRleHRhcmVhLmJpbmQoJGVsZW1lbnQsIFxcJyNvdXRwdXRodG1sXFwnKTsgY2xpY2tCdWJibGU6IGZhbHNlLCBidXR0b246IHsgdGV4dDogdHJ1ZSwgbGFiZWw6XFwnSW1wb3J0XFwnIH1cIj5JbXBvcnQ8L2E+ICA8dGV4dGFyZWEgaWQ9XCJvdXRwdXRodG1sXCIgcm93cz1cIjEwXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj48L3RleHRhcmVhPjwvZGl2PjxkaXYgaWQ9XCJ0b29sdGhlbWVcIiBjbGFzcz1cInVpLXdpZGdldCBzbGlkZWJhclwiIGRhdGEtYmluZD1cImNzczogeyBoaWRkZW46ICRyb290LnNob3dUaGVtZSgpID09PSBmYWxzZSB9XCI+ICA8ZGl2IGNsYXNzPVwiY2xvc2VcIiBkYXRhLWJpbmQ9XCJjbGljazogJHJvb3Quc2hvd1RoZW1lLmJpbmQoJGVsZW1lbnQsIGZhbHNlKTtcIj5YPC9kaXY+ICAgIFxceDNjIS0tIGtvIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogXFwnc3R5bGVyXFwnIH0gLS1cXHgzZSAgICBcXHgzYyEtLSBrbyBpZjogJHJvb3Quc2hvd1RoZW1lIC0tXFx4M2UgICAgICBcXHgzYyEtLSBrbyBibG9jazogJHJvb3QuY29udGVudCgpLnRoZW1lIC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZSAgICBcXHgzYyEtLSAva28gLS1cXHgzZSAgXFx4M2MhLS0gL2tvIC0tXFx4M2U8L2Rpdj4nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SbGJYQnNZWFJsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUowWlcxd2JHRjBaVk41YzNSbGJTSXNJbkpsY1hWcGNtVWlMQ0prYjJOMWJXVnVkQ0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKbGRtVnVkQ0lzSW1Ga1pGUmxiWEJzWVhSbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeDVRMEZETjBKRExGTkJRVk5ETEdsQ1FVRnBRaXh0UWtGQmIwSXNVMEZCVTBNc1IwRkRka1JLTEdWQlFXVkxMRmxCUVZrc1VVRkJVeXh6UjBGRGNFTk1MR1ZCUVdWTExGbEJRVmtzWVVGQll5eHhSMEZEZWtOTUxHVkJRV1ZMTEZsQlFWa3NaMEpCUVdsQ0xDdG5SVUZETlVOTUxHVkJRV1ZMTEZsQlFWa3NZMEZCWlN4NVJrRkRNVU5NTEdWQlFXVkxMRmxCUVZrc2FVSkJRV3RDTEdkdFFrRkROME5NTEdWQlFXVkxMRmxCUVZrc1kwRkJaU3gxTWtKQlF6RkRUQ3hsUVVGbFN5eFpRVUZaTEZGQlFWTXNTVUZEY0VOTUxHVkJRV1ZMTEZsQlFWa3NVVUZCVXl4dlJrRkRjRU5NTEdWQlFXVkxMRmxCUVZrc2FVSkJRV3RDTERoelJFRkROME5NTEdWQlFXVkxMRmxCUVZrc1kwRkJaU3c0YzBwQlF6RkRUQ3hsUVVGbFN5eFpRVUZaTEU5QlFWRXNOQzlQUVVOdVEwd3NaVUZCWlVzc1dVRkJXU3hWUVVGWElpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDJKMWFXeGtMM1JsYlhCc1lYUmxjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGNvbXBhcmUoZSx0KXtpZihlPT09dClyZXR1cm4gMDtmb3IodmFyIHI9ZS5sZW5ndGgsbj10Lmxlbmd0aCxpPTAsYT1NYXRoLm1pbihyLG4pO2k8YTsrK2kpaWYoZVtpXSE9PXRbaV0pe3I9ZVtpXSxuPXRbaV07YnJlYWt9cmV0dXJuIHI8bj8tMTpuPHI/MTowfWZ1bmN0aW9uIGlzQnVmZmVyKGUpe3JldHVybiBnbG9iYWwuQnVmZmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyP2dsb2JhbC5CdWZmZXIuaXNCdWZmZXIoZSk6IShudWxsPT1lfHwhZS5faXNCdWZmZXIpfXZhciB1dGlsPXJlcXVpcmUoXCJ1dGlsL1wiKSxoYXNPd249T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxwU2xpY2U9QXJyYXkucHJvdG90eXBlLnNsaWNlLGZ1bmN0aW9uc0hhdmVOYW1lcz1cImZvb1wiPT09ZnVuY3Rpb24oKXt9Lm5hbWU7ZnVuY3Rpb24gcFRvU3RyaW5nKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gaXNWaWV3KGUpe3JldHVybiFpc0J1ZmZlcihlKSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldz9BcnJheUJ1ZmZlci5pc1ZpZXcoZSk6ISFlJiYoZSBpbnN0YW5jZW9mIERhdGFWaWV3fHwhIShlLmJ1ZmZlciYmZS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpKSl9dmFyIGFzc2VydD1tb2R1bGUuZXhwb3J0cz1vayxyZWdleD0vXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO2Z1bmN0aW9uIGdldE5hbWUoZSl7aWYodXRpbC5pc0Z1bmN0aW9uKGUpKXtpZihmdW5jdGlvbnNIYXZlTmFtZXMpcmV0dXJuIGUubmFtZTt2YXIgdD1lLnRvU3RyaW5nKCkubWF0Y2gocmVnZXgpO3JldHVybiB0JiZ0WzFdfX1mdW5jdGlvbiB0cnVuY2F0ZShlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2UubGVuZ3RoPHQ/ZTplLnNsaWNlKDAsdCk6ZX1mdW5jdGlvbiBpbnNwZWN0KGUpe2lmKGZ1bmN0aW9uc0hhdmVOYW1lc3x8IXV0aWwuaXNGdW5jdGlvbihlKSlyZXR1cm4gdXRpbC5pbnNwZWN0KGUpO3ZhciB0PWdldE5hbWUoZSk7cmV0dXJuXCJbRnVuY3Rpb25cIisodD9cIjogXCIrdDpcIlwiKStcIl1cIn1mdW5jdGlvbiBnZXRNZXNzYWdlKGUpe3JldHVybiB0cnVuY2F0ZShpbnNwZWN0KGUuYWN0dWFsKSwxMjgpK1wiIFwiK2Uub3BlcmF0b3IrXCIgXCIrdHJ1bmNhdGUoaW5zcGVjdChlLmV4cGVjdGVkKSwxMjgpfWZ1bmN0aW9uIGZhaWwoZSx0LHIsbixpKXt0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHttZXNzYWdlOnIsYWN0dWFsOmUsZXhwZWN0ZWQ6dCxvcGVyYXRvcjpuLHN0YWNrU3RhcnRGdW5jdGlvbjppfSl9ZnVuY3Rpb24gb2soZSx0KXtlfHxmYWlsKGUsITAsdCxcIj09XCIsYXNzZXJ0Lm9rKX1mdW5jdGlvbiBfZGVlcEVxdWFsKGUsdCxyLG4pe2lmKGU9PT10KXJldHVybiEwO2lmKGlzQnVmZmVyKGUpJiZpc0J1ZmZlcih0KSlyZXR1cm4gMD09PWNvbXBhcmUoZSx0KTtpZih1dGlsLmlzRGF0ZShlKSYmdXRpbC5pc0RhdGUodCkpcmV0dXJuIGUuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk7aWYodXRpbC5pc1JlZ0V4cChlKSYmdXRpbC5pc1JlZ0V4cCh0KSlyZXR1cm4gZS5zb3VyY2U9PT10LnNvdXJjZSYmZS5nbG9iYWw9PT10Lmdsb2JhbCYmZS5tdWx0aWxpbmU9PT10Lm11bHRpbGluZSYmZS5sYXN0SW5kZXg9PT10Lmxhc3RJbmRleCYmZS5pZ25vcmVDYXNlPT09dC5pZ25vcmVDYXNlO2lmKG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZXx8bnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXtpZihpc1ZpZXcoZSkmJmlzVmlldyh0KSYmcFRvU3RyaW5nKGUpPT09cFRvU3RyaW5nKHQpJiYhKGUgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXl8fGUgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKXJldHVybiAwPT09Y29tcGFyZShuZXcgVWludDhBcnJheShlLmJ1ZmZlciksbmV3IFVpbnQ4QXJyYXkodC5idWZmZXIpKTtpZihpc0J1ZmZlcihlKSE9PWlzQnVmZmVyKHQpKXJldHVybiExO3ZhciBpPShuPW58fHthY3R1YWw6W10sZXhwZWN0ZWQ6W119KS5hY3R1YWwuaW5kZXhPZihlKTtyZXR1cm4tMSE9PWkmJmk9PT1uLmV4cGVjdGVkLmluZGV4T2YodCl8fChuLmFjdHVhbC5wdXNoKGUpLG4uZXhwZWN0ZWQucHVzaCh0KSxvYmpFcXVpdihlLHQscixuKSl9cmV0dXJuIHI/ZT09PXQ6ZT09dH1mdW5jdGlvbiBpc0FyZ3VtZW50cyhlKXtyZXR1cm5cIltvYmplY3QgQXJndW1lbnRzXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gb2JqRXF1aXYoZSx0LHIsbil7aWYobnVsbD09PWV8fHZvaWQgMD09PWV8fG51bGw9PT10fHx2b2lkIDA9PT10KXJldHVybiExO2lmKHV0aWwuaXNQcmltaXRpdmUoZSl8fHV0aWwuaXNQcmltaXRpdmUodCkpcmV0dXJuIGU9PT10O2lmKHImJk9iamVjdC5nZXRQcm90b3R5cGVPZihlKSE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KSlyZXR1cm4hMTt2YXIgaT1pc0FyZ3VtZW50cyhlKSxhPWlzQXJndW1lbnRzKHQpO2lmKGkmJiFhfHwhaSYmYSlyZXR1cm4hMTtpZihpKXJldHVybiBfZGVlcEVxdWFsKGU9cFNsaWNlLmNhbGwoZSksdD1wU2xpY2UuY2FsbCh0KSxyKTt2YXIgcyxvLHU9b2JqZWN0S2V5cyhlKSxmPW9iamVjdEtleXModCk7aWYodS5sZW5ndGghPT1mLmxlbmd0aClyZXR1cm4hMTtmb3IodS5zb3J0KCksZi5zb3J0KCksbz11Lmxlbmd0aC0xO28+PTA7by0tKWlmKHVbb10hPT1mW29dKXJldHVybiExO2ZvcihvPXUubGVuZ3RoLTE7bz49MDtvLS0paWYoIV9kZWVwRXF1YWwoZVtzPXVbb11dLHRbc10scixuKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBub3REZWVwU3RyaWN0RXF1YWwoZSx0LHIpe19kZWVwRXF1YWwoZSx0LCEwKSYmZmFpbChlLHQscixcIm5vdERlZXBTdHJpY3RFcXVhbFwiLG5vdERlZXBTdHJpY3RFcXVhbCl9ZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oZSx0KXtpZighZXx8IXQpcmV0dXJuITE7aWYoXCJbb2JqZWN0IFJlZ0V4cF1cIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXJldHVybiB0LnRlc3QoZSk7dHJ5e2lmKGUgaW5zdGFuY2VvZiB0KXJldHVybiEwfWNhdGNoKGUpe31yZXR1cm4hRXJyb3IuaXNQcm90b3R5cGVPZih0KSYmITA9PT10LmNhbGwoe30sZSl9ZnVuY3Rpb24gX3RyeUJsb2NrKGUpe3ZhciB0O3RyeXtlKCl9Y2F0Y2goZSl7dD1lfXJldHVybiB0fWZ1bmN0aW9uIF90aHJvd3MoZSx0LHIsbil7dmFyIGk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihuPXIscj1udWxsKSxpPV90cnlCbG9jayh0KSxuPShyJiZyLm5hbWU/XCIgKFwiK3IubmFtZStcIikuXCI6XCIuXCIpKyhuP1wiIFwiK246XCIuXCIpLGUmJiFpJiZmYWlsKGkscixcIk1pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uXCIrbik7dmFyIGE9XCJzdHJpbmdcIj09dHlwZW9mIG4scz0hZSYmdXRpbC5pc0Vycm9yKGkpLG89IWUmJmkmJiFyO2lmKChzJiZhJiZleHBlY3RlZEV4Y2VwdGlvbihpLHIpfHxvKSYmZmFpbChpLHIsXCJHb3QgdW53YW50ZWQgZXhjZXB0aW9uXCIrbiksZSYmaSYmciYmIWV4cGVjdGVkRXhjZXB0aW9uKGkscil8fCFlJiZpKXRocm93IGl9YXNzZXJ0LkFzc2VydGlvbkVycm9yPWZ1bmN0aW9uKGUpe3RoaXMubmFtZT1cIkFzc2VydGlvbkVycm9yXCIsdGhpcy5hY3R1YWw9ZS5hY3R1YWwsdGhpcy5leHBlY3RlZD1lLmV4cGVjdGVkLHRoaXMub3BlcmF0b3I9ZS5vcGVyYXRvcixlLm1lc3NhZ2U/KHRoaXMubWVzc2FnZT1lLm1lc3NhZ2UsdGhpcy5nZW5lcmF0ZWRNZXNzYWdlPSExKToodGhpcy5tZXNzYWdlPWdldE1lc3NhZ2UodGhpcyksdGhpcy5nZW5lcmF0ZWRNZXNzYWdlPSEwKTt2YXIgdD1lLnN0YWNrU3RhcnRGdW5jdGlvbnx8ZmFpbDtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHQpO2Vsc2V7dmFyIHI9bmV3IEVycm9yO2lmKHIuc3RhY2spe3ZhciBuPXIuc3RhY2ssaT1nZXROYW1lKHQpLGE9bi5pbmRleE9mKFwiXFxuXCIraSk7aWYoYT49MCl7dmFyIHM9bi5pbmRleE9mKFwiXFxuXCIsYSsxKTtuPW4uc3Vic3RyaW5nKHMrMSl9dGhpcy5zdGFjaz1ufX19LHV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLEVycm9yKSxhc3NlcnQuZmFpbD1mYWlsLGFzc2VydC5vaz1vayxhc3NlcnQuZXF1YWw9ZnVuY3Rpb24oZSx0LHIpe2UhPXQmJmZhaWwoZSx0LHIsXCI9PVwiLGFzc2VydC5lcXVhbCl9LGFzc2VydC5ub3RFcXVhbD1mdW5jdGlvbihlLHQscil7ZT09dCYmZmFpbChlLHQscixcIiE9XCIsYXNzZXJ0Lm5vdEVxdWFsKX0sYXNzZXJ0LmRlZXBFcXVhbD1mdW5jdGlvbihlLHQscil7X2RlZXBFcXVhbChlLHQsITEpfHxmYWlsKGUsdCxyLFwiZGVlcEVxdWFsXCIsYXNzZXJ0LmRlZXBFcXVhbCl9LGFzc2VydC5kZWVwU3RyaWN0RXF1YWw9ZnVuY3Rpb24oZSx0LHIpe19kZWVwRXF1YWwoZSx0LCEwKXx8ZmFpbChlLHQscixcImRlZXBTdHJpY3RFcXVhbFwiLGFzc2VydC5kZWVwU3RyaWN0RXF1YWwpfSxhc3NlcnQubm90RGVlcEVxdWFsPWZ1bmN0aW9uKGUsdCxyKXtfZGVlcEVxdWFsKGUsdCwhMSkmJmZhaWwoZSx0LHIsXCJub3REZWVwRXF1YWxcIixhc3NlcnQubm90RGVlcEVxdWFsKX0sYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbD1ub3REZWVwU3RyaWN0RXF1YWwsYXNzZXJ0LnN0cmljdEVxdWFsPWZ1bmN0aW9uKGUsdCxyKXtlIT09dCYmZmFpbChlLHQscixcIj09PVwiLGFzc2VydC5zdHJpY3RFcXVhbCl9LGFzc2VydC5ub3RTdHJpY3RFcXVhbD1mdW5jdGlvbihlLHQscil7ZT09PXQmJmZhaWwoZSx0LHIsXCIhPT1cIixhc3NlcnQubm90U3RyaWN0RXF1YWwpfSxhc3NlcnQudGhyb3dzPWZ1bmN0aW9uKGUsdCxyKXtfdGhyb3dzKCEwLGUsdCxyKX0sYXNzZXJ0LmRvZXNOb3RUaHJvdz1mdW5jdGlvbihlLHQscil7X3Rocm93cyghMSxlLHQscil9LGFzc2VydC5pZkVycm9yPWZ1bmN0aW9uKGUpe2lmKGUpdGhyb3cgZX07dmFyIG9iamVjdEtleXM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKWhhc093bi5jYWxsKGUscikmJnQucHVzaChyKTtyZXR1cm4gdH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWeWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKamIyMXdZWEpsSWl3aVlTSXNJbUlpTENKNElpd2liR1Z1WjNSb0lpd2llU0lzSW1raUxDSnNaVzRpTENKTllYUm9JaXdpYldsdUlpd2lhWE5DZFdabVpYSWlMQ0puYkc5aVlXd2lMQ0pDZFdabVpYSWlMQ0pmYVhOQ2RXWm1aWElpTENKMWRHbHNJaXdpY21WeGRXbHlaU0lzSW1oaGMwOTNiaUlzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWNGTnNhV05sSWl3aVFYSnlZWGtpTENKemJHbGpaU0lzSW1aMWJtTjBhVzl1YzBoaGRtVk9ZVzFsY3lJc0ltNWhiV1VpTENKd1ZHOVRkSEpwYm1jaUxDSnZZbW9pTENKMGIxTjBjbWx1WnlJc0ltTmhiR3dpTENKcGMxWnBaWGNpTENKaGNuSmlkV1lpTENKQmNuSmhlVUoxWm1abGNpSXNJa1JoZEdGV2FXVjNJaXdpWW5WbVptVnlJaXdpWVhOelpYSjBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW05cklpd2ljbVZuWlhnaUxDSm5aWFJPWVcxbElpd2lablZ1WXlJc0ltbHpSblZ1WTNScGIyNGlMQ0p0WVhSamFDSXNJblJ5ZFc1allYUmxJaXdpY3lJc0ltNGlMQ0pwYm5Od1pXTjBJaXdpYzI5dFpYUm9hVzVuSWl3aWNtRjNibUZ0WlNJc0ltZGxkRTFsYzNOaFoyVWlMQ0p6Wld4bUlpd2lZV04wZFdGc0lpd2liM0JsY21GMGIzSWlMQ0psZUhCbFkzUmxaQ0lzSW1aaGFXd2lMQ0p0WlhOellXZGxJaXdpYzNSaFkydFRkR0Z5ZEVaMWJtTjBhVzl1SWl3aVFYTnpaWEowYVc5dVJYSnliM0lpTENKMllXeDFaU0lzSWw5a1pXVndSWEYxWVd3aUxDSnpkSEpwWTNRaUxDSnRaVzF2Y3lJc0ltbHpSR0YwWlNJc0ltZGxkRlJwYldVaUxDSnBjMUpsWjBWNGNDSXNJbk52ZFhKalpTSXNJbTExYkhScGJHbHVaU0lzSW14aGMzUkpibVJsZUNJc0ltbG5ibTl5WlVOaGMyVWlMQ0pHYkc5aGRETXlRWEp5WVhraUxDSkdiRzloZERZMFFYSnlZWGtpTENKVmFXNTBPRUZ5Y21GNUlpd2lZV04wZFdGc1NXNWtaWGdpTENKcGJtUmxlRTltSWl3aWNIVnphQ0lzSW05aWFrVnhkV2wySWl3aWFYTkJjbWQxYldWdWRITWlMQ0p2WW1wbFkzUWlMQ0poWTNSMVlXeFdhWE5wZEdWa1QySnFaV04wY3lJc0luVnVaR1ZtYVc1bFpDSXNJbWx6VUhKcGJXbDBhWFpsSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKaFNYTkJjbWR6SWl3aVlrbHpRWEpuY3lJc0ltdGxlU0lzSW10aElpd2liMkpxWldOMFMyVjVjeUlzSW10aUlpd2ljMjl5ZENJc0ltNXZkRVJsWlhCVGRISnBZM1JGY1hWaGJDSXNJbVY0Y0dWamRHVmtSWGhqWlhCMGFXOXVJaXdpZEdWemRDSXNJbVVpTENKRmNuSnZjaUlzSW1selVISnZkRzkwZVhCbFQyWWlMQ0pmZEhKNVFteHZZMnNpTENKaWJHOWpheUlzSW1WeWNtOXlJaXdpWDNSb2NtOTNjeUlzSW5Ob2IzVnNaRlJvY205M0lpd2lWSGx3WlVWeWNtOXlJaXdpZFhObGNsQnliM1pwWkdWa1RXVnpjMkZuWlNJc0ltbHpWVzUzWVc1MFpXUkZlR05sY0hScGIyNGlMQ0pwYzBWeWNtOXlJaXdpYVhOVmJtVjRjR1ZqZEdWa1JYaGpaWEIwYVc5dUlpd2liM0IwYVc5dWN5SXNJblJvYVhNaUxDSm5aVzVsY21GMFpXUk5aWE56WVdkbElpd2lZMkZ3ZEhWeVpWTjBZV05yVkhKaFkyVWlMQ0psY25JaUxDSnpkR0ZqYXlJc0ltOTFkQ0lzSW1adVgyNWhiV1VpTENKcFpIZ2lMQ0p1WlhoMFgyeHBibVVpTENKemRXSnpkSEpwYm1jaUxDSnBibWhsY21sMGN5SXNJbVZ4ZFdGc0lpd2libTkwUlhGMVlXd2lMQ0prWldWd1JYRjFZV3dpTENKa1pXVndVM1J5YVdOMFJYRjFZV3dpTENKdWIzUkVaV1Z3UlhGMVlXd2lMQ0p6ZEhKcFkzUkZjWFZoYkNJc0ltNXZkRk4wY21samRFVnhkV0ZzSWl3aWRHaHliM2R6SWl3aVpHOWxjMDV2ZEZSb2NtOTNJaXdpYVdaRmNuSnZjaUlzSW10bGVYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCVjBFc1UwRkJVMEVzVVVGQlVVTXNSVUZCUjBNc1IwRkRiRUlzUjBGQlNVUXNTVUZCVFVNc1JVRkRVaXhQUVVGUExFVkJUVlFzU1VGSVFTeEpRVUZKUXl4RlFVRkpSaXhGUVVGRlJ5eFBRVU5PUXl4RlFVRkpTQ3hGUVVGRlJTeFBRVVZFUlN4RlFVRkpMRVZCUVVkRExFVkJRVTFETEV0QlFVdERMRWxCUVVsT0xFVkJRVWRGTEVkQlFVbERMRVZCUVVsRExFbEJRVTlFTEVWQlF5OURMRWRCUVVsTUxFVkJRVVZMTEV0QlFVOUtMRVZCUVVWSkxFZEJRVWtzUTBGRGFrSklMRVZCUVVsR0xFVkJRVVZMTEVkQlEwNUVMRVZCUVVsSUxFVkJRVVZKTEVkQlEwNHNUVUZKU2l4UFFVRkpTQ3hGUVVGSlJTeEhRVU5GTEVWQlJVNUJMRVZCUVVsR0xFVkJRME1zUlVGRlJpeEZRVVZVTEZOQlFWTlBMRk5CUVZOU0xFZEJRMmhDTEU5QlFVbFRMRTlCUVU5RExGRkJRVFJETEcxQ1FVRXpRa1FzVDBGQlQwTXNUMEZCVDBZc1UwRkRha05ETEU5QlFVOURMRTlCUVU5R0xGTkJRVk5TTEV0QlJXcENMRTFCUVV4QkxFbEJRV0ZCTEVWQlFVVlhMRmRCTmtJelFpeEpRVUZKUXl4TFFVRlBReXhSUVVGUkxGTkJRMlpETEU5QlFWTkRMRTlCUVU5RExGVkJRVlZETEdWQlF6RkNReXhQUVVGVFF5eE5RVUZOU0N4VlFVRlZTU3hOUVVONlFrTXNiVUpCUTJkRExGRkJRVE5DTEdGQlFXdENReXhMUVVVelFpeFRRVUZUUXl4VlFVRlhReXhIUVVOc1FpeFBRVUZQVkN4UFFVRlBReXhWUVVGVlV5eFRRVUZUUXl4TFFVRkxSaXhIUVVWNFF5eFRRVUZUUnl4UFFVRlBReXhIUVVOa0xFOUJRVWx3UWl4VFFVRlRiMElzUzBGSGNVSXNiVUpCUVhaQ2JrSXNUMEZCVDI5Q0xHTkJSMmRDTEcxQ1FVRjJRa0VzV1VGQldVWXNUMEZEWkVVc1dVRkJXVVlzVDBGQlQwTXNTMEZGZGtKQkxFbEJSMFJCTEdGQlFXdENSU3hoUVVkc1FrWXNSVUZCVDBjc1VVRkJWVWdzUlVGQlQwY3NhMEpCUVd0Q1JpeG5Ra0ZUYUVRc1NVRkJTVWNzVDBGQlUwTXNUMEZCVDBNc1VVRkJWVU1zUjBGUE1VSkRMRTFCUVZFc09FSkJSVm9zVTBGQlUwTXNVVUZCVVVNc1IwRkRaaXhIUVVGTE1VSXNTMEZCU3pKQ0xGZEJRVmRFTEVkQlFYSkNMRU5CUjBFc1IwRkJTV3BDTEcxQ1FVTkdMRTlCUVU5cFFpeEZRVUZMYUVJc1MwRkZaQ3hKUVVOSmEwSXNSVUZFVFVZc1JVRkJTMklzVjBGRFEyVXNUVUZCVFVvc1QwRkRkRUlzVDBGQlQwa3NSMEZCVTBFc1JVRkJUU3hKUVhsRGVFSXNVMEZCVTBNc1UwRkJVME1zUlVGQlIwTXNSMEZEYmtJc1RVRkJhVUlzYVVKQlFVNUVMRVZCUTBaQkxFVkJRVVY0UXl4UFFVRlRlVU1zUlVGQlNVUXNSVUZCU1VFc1JVRkJSWFJDTEUxQlFVMHNSVUZCUjNWQ0xFZEJSVGxDUkN4RlFVZFlMRk5CUVZORkxGRkJRVkZETEVkQlEyWXNSMEZCU1hoQ0xIRkNRVUYxUWxRc1MwRkJTekpDTEZkQlFWZE5MRWRCUTNwRExFOUJRVTlxUXl4TFFVRkxaME1zVVVGQlVVTXNSMEZGZEVJc1NVRkJTVU1zUlVGQlZWUXNVVUZCVVZFc1IwRkZkRUlzVFVGQlR5eGhRVVJKUXl4RlFVRlZMRXRCUVU5QkxFVkJRVlVzU1VGRFZDeEpRVVV2UWl4VFFVRlRReXhYUVVGWFF5eEhRVU5zUWl4UFFVRlBVQ3hUUVVGVFJ5eFJRVUZSU1N4RlFVRkxReXhSUVVGVExFdEJRVThzU1VGRGRFTkVMRVZCUVV0RkxGTkJRVmNzU1VGRGFFSlVMRk5CUVZOSExGRkJRVkZKTEVWQlFVdEhMRlZCUVZjc1MwRmpNVU1zVTBGQlUwTXNTMEZCUzBnc1JVRkJVVVVzUlVGQlZVVXNSVUZCVTBnc1JVRkJWVWtzUjBGRGFrUXNUVUZCVFN4SlFVRkpkRUlzVDBGQlQzVkNMR2RDUVVObVJpeFJRVUZUUVN4RlFVTlVTaXhQUVVGUlFTeEZRVU5TUlN4VFFVRlZRU3hGUVVOV1JDeFRRVUZWUVN4RlFVTldTU3h0UWtGQmIwSkJMRWxCWTNoQ0xGTkJRVk51UWl4SFFVRkhjVUlzUlVGQlQwZ3NSMEZEV2tjc1IwRkJUMG9zUzBGQlMwa3NSMEZCVHl4RlFVRk5TQ3hGUVVGVExFdEJRVTF5UWl4UFFVRlBSeXhKUVc5RGRFUXNVMEZCVTNOQ0xGZEJRVmRTTEVWQlFWRkZMRVZCUVZWUExFVkJRVkZETEVkQlJUVkRMRWRCUVVsV0xFbEJRVmRGTEVWQlEySXNUMEZCVHl4RlFVTkdMRWRCUVVrelF5eFRRVUZUZVVNc1NVRkJWM3BETEZOQlFWTXlReXhIUVVOMFF5eFBRVUZ4UXl4SlFVRTVRbkpFTEZGQlFWRnRSQ3hGUVVGUlJTeEhRVWxzUWl4SFFVRkpka01zUzBGQlMyZEVMRTlCUVU5WUxFbEJRVmR5UXl4TFFVRkxaMFFzVDBGQlQxUXNSMEZETlVNc1QwRkJUMFlzUlVGQlQxa3NXVUZCWTFZc1JVRkJVMVVzVlVGTGFFTXNSMEZCU1dwRUxFdEJRVXRyUkN4VFFVRlRZaXhKUVVGWGNrTXNTMEZCUzJ0RUxGTkJRVk5ZTEVkQlEyaEVMRTlCUVU5R0xFVkJRVTlqTEZOQlFWZGFMRVZCUVZOWkxGRkJRek5DWkN4RlFVRlBlRU1zVTBGQlZ6QkRMRVZCUVZNeFF5eFJRVU16UW5kRExFVkJRVTlsTEZsQlFXTmlMRVZCUVZOaExGZEJRemxDWml4RlFVRlBaMElzV1VGQlkyUXNSVUZCVTJNc1YwRkRPVUpvUWl4RlFVRlBhVUlzWVVGQlpXWXNSVUZCVTJVc1YwRkpha01zUjBGQlowSXNUMEZCV0dwQ0xFZEJRWEZETEdsQ1FVRllRU3hIUVVOaUxFOUJRV0pGTEVkQlFYbERMR2xDUVVGaVFTeEZRVk5xUXl4RFFVRkJMRWRCUVVsNFFpeFBRVUZQYzBJc1NVRkJWM1JDTEU5QlFVOTNRaXhKUVVONlFqVkNMRlZCUVZVd1FpeExRVUZaTVVJc1ZVRkJWVFJDTEUxQlF6bENSaXhoUVVGclFtdENMR05CUTJ4Q2JFSXNZVUZCYTBKdFFpeGpRVU0zUWl4UFFVTnZSQ3hKUVVRM1EzUkZMRkZCUVZFc1NVRkJTWFZGTEZkQlFWZHdRaXhGUVVGUGJFSXNVVUZEZEVJc1NVRkJTWE5ETEZkQlFWZHNRaXhGUVVGVGNFSXNVMEZSYkVNc1IwRkJTWFpDTEZOQlFWTjVReXhMUVVGWmVrTXNVMEZCVXpKRExFZEJRM1pETEU5QlFVOHNSVUZKVUN4SlFVRkpiVUlzUjBGR1NsZ3NSVUZCVVVFc1NVRkJWVllzVlVGQldVVXNZMEZGVGtZc1QwRkJUM05DTEZGQlFWRjBRaXhIUVVOMlF5eFBRVUZ4UWl4SlFVRnFRbkZDTEVkQlEwVkJMRWxCUVdkQ1dDeEZRVUZOVWl4VFFVRlRiMElzVVVGQlVYQkNMRXRCU3pkRFVTeEZRVUZOVml4UFFVRlBkVUlzUzBGQlMzWkNMRWRCUTJ4Q1ZTeEZRVUZOVWl4VFFVRlRjVUlzUzBGQlMzSkNMRWRCUldKelFpeFRRVUZUZUVJc1JVRkJVVVVzUlVGQlZVOHNSVUZCVVVNc1NVRndRekZETEU5QlFVOUVMRVZCUVZOVUxFbEJRVmRGTEVWQlFWZEdMRWRCUVZWRkxFVkJkME53UkN4VFFVRlRkVUlzV1VGQldVTXNSMEZEYmtJc1RVRkJhVVFzYzBKQlFURkROVVFzVDBGQlQwTXNWVUZCVlZNc1UwRkJVME1zUzBGQlMybEVMRWRCUjNoRExGTkJRVk5HTEZOQlFWTXhSU3hGUVVGSFF5eEZRVUZITUVRc1JVRkJVV3RDTEVkQlF6bENMRWRCUVZVc1QwRkJUamRGTEZGQlFXOUNPRVVzU1VGQlRqbEZMRWRCUVhsQ0xFOUJRVTVETEZGQlFXOUNOa1VzU1VGQlRqZEZMRVZCUTJwRUxFOUJRVThzUlVGRlZDeEhRVUZKV1N4TFFVRkxhMFVzV1VGQldTOUZMRWxCUVUxaExFdEJRVXRyUlN4WlFVRlpPVVVzUjBGRE1VTXNUMEZCVDBRc1NVRkJUVU1zUlVGRFppeEhRVUZKTUVRc1IwRkJWVE5ETEU5QlFVOW5SU3hsUVVGbGFFWXNTMEZCVDJkQ0xFOUJRVTluUlN4bFFVRmxMMFVzUjBGREwwUXNUMEZCVHl4RlFVTlVMRWxCUVVsblJpeEZRVUZWVGl4WlFVRlpNMFVzUjBGRGRFSnJSaXhGUVVGVlVDeFpRVUZaTVVVc1IwRkRNVUlzUjBGQlMyZEdMRWxCUVZsRExFbEJRV05FTEVkQlFWZERMRVZCUTNoRExFOUJRVThzUlVGRFZDeEhRVUZKUkN4RlFVZEdMRTlCUVU5MlFpeFhRVVpRTVVRc1JVRkJTVzFDTEU5QlFVOVJMRXRCUVVzelFpeEhRVU5vUWtNc1JVRkJTV3RDTEU5QlFVOVJMRXRCUVVzeFFpeEhRVU5STUVRc1IwRkZNVUlzU1VGRlNYZENMRVZCUVVzNVJTeEZRVVpNSzBVc1JVRkJTME1zVjBGQlYzSkdMRWRCUTJoQ2MwWXNSVUZCUzBRc1YwRkJWM0JHTEVkQlNYQkNMRWRCUVVsdFJpeEZRVUZIYWtZc1UwRkJWMjFHTEVWQlFVZHVSaXhQUVVOdVFpeFBRVUZQTEVWQlMxUXNTVUZJUVdsR0xFVkJRVWRITEU5QlEwaEVMRVZCUVVkRExFOUJSVVZzUml4RlFVRkpLMFVzUlVGQlIycEdMRTlCUVZNc1JVRkJSMFVzUjBGQlN5eEZRVUZIUVN4SlFVTTVRaXhIUVVGSkswVXNSVUZCUnk5RkxFdEJRVTlwUml4RlFVRkhha1lzUjBGRFppeFBRVUZQTEVWQlNWZ3NTVUZCUzBFc1JVRkJTU3RGTEVWQlFVZHFSaXhQUVVGVExFVkJRVWRGTEVkQlFVc3NSVUZCUjBFc1NVRkZPVUlzU1VGQlMzRkVMRmRCUVZjeFJDeEZRVVJvUW0xR0xFVkJRVTFETEVWQlFVY3ZSU3hKUVVObFNpeEZRVUZGYTBZc1IwRkJUWGhDTEVWQlFWRnJRaXhIUVVOMFF5eFBRVUZQTEVWQlJWZ3NUMEZCVHl4RlFXRlVMRk5CUVZOWExHMUNRVUZ0UW5SRExFVkJRVkZGTEVWQlFWVkZMRWRCUTNoRFNTeFhRVUZYVWl4RlFVRlJSU3hIUVVGVkxFbEJReTlDUXl4TFFVRkxTQ3hGUVVGUlJTeEZRVUZWUlN4RlFVRlRMSEZDUVVGelFtdERMRzlDUVhWQ01VUXNVMEZCVTBNc2EwSkJRV3RDZGtNc1JVRkJVVVVzUjBGRGFrTXNTVUZCUzBZc1NVRkJWMFVzUlVGRFpDeFBRVUZQTEVWQlIxUXNSMEZCWjBRc2JVSkJRVFZEY0VNc1QwRkJUME1zVlVGQlZWTXNVMEZCVTBNc1MwRkJTM2xDTEVkQlEycERMRTlCUVU5QkxFVkJRVk56UXl4TFFVRkxlRU1zUjBGSGRrSXNTVUZEUlN4SFFVRkpRU3hoUVVGclFrVXNSVUZEY0VJc1QwRkJUeXhGUVVWVUxFMUJRVTkxUXl4SlFVbFVMRTlCUVVsRExFMUJRVTFETEdOQlFXTjZReXhMUVVsaExFbEJRVGxDUVN4RlFVRlRla0lzVVVGQlUzVkNMRWRCUnpOQ0xGTkJRVk0wUXl4VlFVRlZReXhIUVVOcVFpeEpRVUZKUXl4RlFVTktMRWxCUTBWRUxFbEJRMEVzVFVGQlQwb3NSMEZEVUVzc1JVRkJVVXdzUlVGRlZpeFBRVUZQU3l4RlFVZFVMRk5CUVZORExGRkJRVkZETEVWQlFXRklMRVZCUVU4elF5eEZRVUZWUlN4SFFVTTNReXhKUVVGSlNpeEZRVVZLTEVkQlFYRkNMRzFDUVVGV05rTXNSVUZEVkN4TlFVRk5MRWxCUVVsSkxGVkJRVlVzZFVOQlIwVXNhVUpCUVdJdlF5eEpRVU5VUlN4RlFVRlZSaXhGUVVOV1FTeEZRVUZYTEUxQlIySkdMRVZCUVZNMFF5eFZRVUZWUXl4SFFVVnVRbnBETEVkQlFWZEdMRWRCUVZsQkxFVkJRVk0zUWl4TFFVRlBMRXRCUVU4MlFpeEZRVUZUTjBJc1MwRkJUeXhMUVVGUExFMUJRekZFSzBJc1JVRkJWU3hKUVVGTlFTeEZRVUZWTEV0QlJXcERORU1zU1VGQlowSm9SQ3hIUVVOc1FrY3NTMEZCUzBnc1JVRkJVVVVzUlVGQlZTdzJRa0ZCSzBKRkxFZEJSM2hFTEVsQlFVazRReXhGUVVGNVF5eHBRa0ZCV2psRExFVkJRemRDSzBNc1IwRkJkVUpJTEVkQlFXVnlSaXhMUVVGTGVVWXNVVUZCVVhCRUxFZEJRMjVFY1VRc1IwRkJlVUpNTEVkQlFXVm9SQ3hKUVVGWFJTeEZRVk4yUkN4SlFWQkxhVVFzUjBGRFJFUXNSMEZEUVZnc2EwSkJRV3RDZGtNc1JVRkJVVVVzU1VGRE1VSnRSQ3hKUVVOR2JFUXNTMEZCUzBnc1JVRkJVVVVzUlVGQlZTeDVRa0ZCTWtKRkxFZEJSeTlETkVNc1IwRkJaV2hFTEVkQlFWVkZMRWxCUTNwQ2NVTXNhMEpCUVd0Q2RrTXNSVUZCVVVVc1MwRkJaMEk0UXl4SFFVRmxhRVFzUlVGRE5VUXNUVUZCVFVFc1JVRjJWbFpxUWl4UFFVRlBkVUlzWlVGQmFVSXNVMEZCZDBKblJDeEhRVU01UTBNc1MwRkJTMnhHTEV0QlFVOHNhVUpCUTFwclJpeExRVUZMZGtRc1QwRkJVM05FTEVWQlFWRjBSQ3hQUVVOMFFuVkVMRXRCUVV0eVJDeFRRVUZYYjBRc1JVRkJVWEJFTEZOQlEzaENjVVFzUzBGQlMzUkVMRk5CUVZkeFJDeEZRVUZSY2tRc1UwRkRjRUp4UkN4RlFVRlJiRVFzVTBGRFZtMUVMRXRCUVV0dVJDeFJRVUZWYTBRc1JVRkJVV3hFTEZGQlEzWkNiVVFzUzBGQlMwTXNhMEpCUVcxQ0xFbEJSWGhDUkN4TFFVRkxia1FzVVVGQlZVNHNWMEZCVjNsRUxFMUJRekZDUVN4TFFVRkxReXhyUWtGQmJVSXNSMEZGTVVJc1NVRkJTVzVFTEVWQlFYRkNhVVFzUlVGQlVXcEVMRzlDUVVGelFrWXNTMEZEZGtRc1IwRkJTWFZETEUxQlFVMWxMR3RDUVVOU1ppeE5RVUZOWlN4clFrRkJhMEpHTEV0QlFVMXNSQ3hQUVVONlFpeERRVVZNTEVsQlFVbHhSQ3hGUVVGTkxFbEJRVWxvUWl4TlFVTmtMRWRCUVVsblFpeEZRVUZKUXl4TlFVRlBMRU5CUTJJc1NVRkJTVU1zUlVGQlRVWXNSVUZCU1VNc1RVRkhWa1VzUlVGQlZYcEZMRkZCUVZGcFFpeEhRVU5zUW5sRUxFVkJRVTFHTEVWQlFVbDBReXhSUVVGUkxFdEJRVTkxUXl4SFFVTTNRaXhIUVVGSlF5eEhRVUZQTEVWQlFVY3NRMEZIV2l4SlFVRkpReXhGUVVGWlNDeEZRVUZKZEVNc1VVRkJVU3hMUVVGTmQwTXNSVUZCVFN4SFFVTjRRMFlzUlVGQlRVRXNSVUZCU1Vrc1ZVRkJWVVFzUlVGQldTeEhRVWRzUTFJc1MwRkJTMGtzVFVGQlVVTXNTMEZOYmtKcVJ5eExRVUZMYzBjc1UwRkJVMnhHTEU5QlFVOTFRaXhsUVVGblFtOURMRTlCTmtOeVF6TkVMRTlCUVU5dlFpeExRVUZQUVN4TFFWbGtjRUlzVDBGQlQwY3NSMEZCUzBFc1IwRk5Xa2dzVDBGQlQyMUdMRTFCUVZFc1UwRkJaV3hGTEVWQlFWRkZMRVZCUVZWRkxFZEJRekZEU2l4SFFVRlZSU3hIUVVGVlF5eExRVUZMU0N4RlFVRlJSU3hGUVVGVlJTeEZRVUZUTEV0QlFVMXlRaXhQUVVGUGJVWXNVVUZOZGtWdVJpeFBRVUZQYjBZc1UwRkJWeXhUUVVGclFtNUZMRVZCUVZGRkxFVkJRVlZGTEVkQlEyaEVTaXhIUVVGVlJTeEhRVU5hUXl4TFFVRkxTQ3hGUVVGUlJTeEZRVUZWUlN4RlFVRlRMRXRCUVUxeVFpeFBRVUZQYjBZc1YwRlBha1J3Uml4UFFVRlBjVVlzVlVGQldTeFRRVUZ0UW5CRkxFVkJRVkZGTEVWQlFWVkZMRWRCUTJwRVNTeFhRVUZYVWl4RlFVRlJSU3hIUVVGVkxFbEJRMmhEUXl4TFFVRkxTQ3hGUVVGUlJTeEZRVUZWUlN4RlFVRlRMRmxCUVdGeVFpeFBRVUZQY1VZc1dVRkplRVJ5Uml4UFFVRlBjMFlzWjBKQlFXdENMRk5CUVhsQ2NrVXNSVUZCVVVVc1JVRkJWVVVzUjBGRE4wUkpMRmRCUVZkU0xFVkJRVkZGTEVkQlFWVXNTVUZEYUVORExFdEJRVXRJTEVWQlFWRkZMRVZCUVZWRkxFVkJRVk1zYTBKQlFXMUNja0lzVDBGQlQzTkdMR3RDUVhWSU9VUjBSaXhQUVVGUGRVWXNZVUZCWlN4VFFVRnpRblJGTEVWQlFWRkZMRVZCUVZWRkxFZEJRM2hFU1N4WFFVRlhVaXhGUVVGUlJTeEhRVUZWTEVsQlF5OUNReXhMUVVGTFNDeEZRVUZSUlN4RlFVRlZSU3hGUVVGVExHVkJRV2RDY2tJc1QwRkJUM1ZHTEdWQlNUTkVka1lzVDBGQlQzVkVMRzFDUVVGeFFrRXNiVUpCVnpWQ2RrUXNUMEZCVDNkR0xGbEJRV01zVTBGQmNVSjJSU3hGUVVGUlJTeEZRVUZWUlN4SFFVTjBSRW9zU1VGQlYwVXNSMEZEWWtNc1MwRkJTMGdzUlVGQlVVVXNSVUZCVlVVc1JVRkJVeXhOUVVGUGNrSXNUMEZCVDNkR0xHTkJUMnhFZUVZc1QwRkJUM2xHTEdWQlFXbENMRk5CUVhkQ2VFVXNSVUZCVVVVc1JVRkJWVVVzUjBGRE5VUktMRWxCUVZkRkxFZEJRMkpETEV0QlFVdElMRVZCUVZGRkxFVkJRVlZGTEVWQlFWTXNUVUZCVDNKQ0xFOUJRVTk1Uml4cFFrRXJSV3hFZWtZc1QwRkJUekJHTEU5QlFWTXNVMEZCVXpWQ0xFVkJRVzFDUXl4RlFVRnRRakZETEVkQlF6ZEVNa01zVTBGQlVTeEZRVUZOUml4RlFVRlBReXhGUVVGUE1VTXNTVUZKT1VKeVFpeFBRVUZQTWtZc1lVRkJaU3hUUVVGVE4wSXNSVUZCYlVKRExFVkJRVzFDTVVNc1IwRkRia1V5UXl4VFFVRlJMRVZCUVU5R0xFVkJRVTlETEVWQlFVOHhReXhKUVVjdlFuSkNMRTlCUVU4MFJpeFJRVUZWTEZOQlFWTnFRaXhIUVVGUExFZEJRVWxCTEVWQlFVc3NUVUZCVFVFc1IwRkZhRVFzU1VGQlNYWkNMRmRCUVdGeVJTeFBRVUZQT0Vjc1RVRkJVU3hUUVVGVmNrY3NSMEZEZUVNc1NVRkJTWEZITEV0QlEwb3NTVUZCU3l4SlFVRkpNME1zUzBGQlR6RkVMRVZCUTFaV0xFOUJRVTlaTEV0QlFVdEdMRVZCUVVzd1JDeEpRVUZOTWtNc1JVRkJTM0pFTEV0QlFVdFZMRWRCUlhaRExFOUJRVTh5UXlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl1YjJSbFgyMXZaSFZzWlhNdllYTnpaWEowTDJGemMyVnlkQzVxY3lKOSIsInZhciBjb25zb2xlLHV0aWw9cmVxdWlyZShcInV0aWxcIiksYXNzZXJ0PXJlcXVpcmUoXCJhc3NlcnRcIiksbm93PXJlcXVpcmUoXCJkYXRlLW5vd1wiKSxzbGljZT1BcnJheS5wcm90b3R5cGUuc2xpY2UsdGltZXM9e307Y29uc29sZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwuY29uc29sZT9nbG9iYWwuY29uc29sZTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuY29uc29sZT93aW5kb3cuY29uc29sZTp7fTtmb3IodmFyIGZ1bmN0aW9ucz1bW2xvZyxcImxvZ1wiXSxbaW5mbyxcImluZm9cIl0sW3dhcm4sXCJ3YXJuXCJdLFtlcnJvcixcImVycm9yXCJdLFt0aW1lLFwidGltZVwiXSxbdGltZUVuZCxcInRpbWVFbmRcIl0sW3RyYWNlLFwidHJhY2VcIl0sW2RpcixcImRpclwiXSxbY29uc29sZUFzc2VydCxcImFzc2VydFwiXV0saT0wO2k8ZnVuY3Rpb25zLmxlbmd0aDtpKyspe3ZhciB0dXBsZT1mdW5jdGlvbnNbaV0sZj10dXBsZVswXSxuYW1lPXR1cGxlWzFdO2NvbnNvbGVbbmFtZV18fChjb25zb2xlW25hbWVdPWYpfWZ1bmN0aW9uIGxvZygpe31mdW5jdGlvbiBpbmZvKCl7Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSxhcmd1bWVudHMpfWZ1bmN0aW9uIHdhcm4oKXtjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZXJyb3IoKXtjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSxhcmd1bWVudHMpfWZ1bmN0aW9uIHRpbWUobyl7dGltZXNbb109bm93KCl9ZnVuY3Rpb24gdGltZUVuZChvKXt2YXIgZT10aW1lc1tvXTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsOiBcIitvKTt2YXIgbj1ub3coKS1lO2NvbnNvbGUubG9nKG8rXCI6IFwiK24rXCJtc1wiKX1mdW5jdGlvbiB0cmFjZSgpe3ZhciBvPW5ldyBFcnJvcjtvLm5hbWU9XCJUcmFjZVwiLG8ubWVzc2FnZT11dGlsLmZvcm1hdC5hcHBseShudWxsLGFyZ3VtZW50cyksY29uc29sZS5lcnJvcihvLnN0YWNrKX1mdW5jdGlvbiBkaXIobyl7Y29uc29sZS5sb2codXRpbC5pbnNwZWN0KG8pK1wiXFxuXCIpfWZ1bmN0aW9uIGNvbnNvbGVBc3NlcnQobyl7aWYoIW8pe3ZhciBlPXNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2Fzc2VydC5vayghMSx1dGlsLmZvcm1hdC5hcHBseShudWxsLGUpKX19bW9kdWxlLmV4cG9ydHM9Y29uc29sZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbU52Ym5OdmJHVWlMQ0oxZEdsc0lpd2ljbVZ4ZFdseVpTSXNJbUZ6YzJWeWRDSXNJbTV2ZHlJc0luTnNhV05sSWl3aVFYSnlZWGtpTENKd2NtOTBiM1I1Y0dVaUxDSjBhVzFsY3lJc0ltZHNiMkpoYkNJc0luZHBibVJ2ZHlJc0ltWjFibU4wYVc5dWN5SXNJbXh2WnlJc0ltbHVabThpTENKM1lYSnVJaXdpWlhKeWIzSWlMQ0owYVcxbElpd2lkR2x0WlVWdVpDSXNJblJ5WVdObElpd2laR2x5SWl3aVkyOXVjMjlzWlVGemMyVnlkQ0lzSW1raUxDSnNaVzVuZEdnaUxDSjBkWEJzWlNJc0ltWWlMQ0p1WVcxbElpd2lZWEJ3YkhraUxDSmhjbWQxYldWdWRITWlMQ0pzWVdKbGJDSXNJa1Z5Y205eUlpd2laSFZ5WVhScGIyNGlMQ0psY25JaUxDSnRaWE56WVdkbElpd2labTl5YldGMElpd2ljM1JoWTJzaUxDSnZZbXBsWTNRaUxDSnBibk53WldOMElpd2laWGh3Y21WemMybHZiaUlzSW1GeWNpSXNJbU5oYkd3aUxDSnZheUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlMwbEJMRkZCVEVGRExFdEJRVTlETEZGQlFWRXNVVUZEWmtNc1QwRkJVMFFzVVVGQlVTeFZRVU5xUWtVc1NVRkJUVVlzVVVGQlVTeFpRVVZrUnl4TlFVRlJReXhOUVVGTlF5eFZRVUZWUml4TlFVVjRRa2NzVTBGSFFWSXNVVUZFYTBJc2IwSkJRVmhUTEZGQlFUQkNRU3hQUVVGUFZDeFJRVU01UWxNc1QwRkJUMVFzVVVGRFVTeHZRa0ZCV0ZVc1VVRkJNRUpCTEU5QlFVOVdMRkZCUTNKRFZTeFBRVUZQVml4WFFXbENja0lzU1VGYVFTeEpRVUZKVnl4WlFVTkRReXhKUVVGTExGRkJRMHhETEV0QlFVMHNVMEZEVGtNc1MwRkJUU3hUUVVOT1F5eE5RVUZQTEZWQlExQkRMRXRCUVUwc1UwRkRUa01zVVVGQlV5eFpRVU5VUXl4TlFVRlBMRlZCUTFCRExFbEJRVXNzVVVGRFRFTXNZMEZCWlN4WFFVZFlReXhGUVVGSkxFVkJRVWRCTEVWQlFVbFdMRlZCUVZWWExFOUJRVkZFTEVsQlFVc3NRMEZEZGtNc1NVRkJTVVVzVFVGQlVWb3NWVUZCVlZVc1IwRkRiRUpITEVWQlFVbEVMRTFCUVUwc1IwRkRWa1VzUzBGQlQwWXNUVUZCVFN4SFFVVmFka0lzVVVGQlVYbENMRkZCUTFSNlFpeFJRVUZSZVVJc1RVRkJVVVFzUjBGTmVFSXNVMEZCVTFvc1QwRkZWQ3hUUVVGVFF5eFBRVU5NWWl4UlFVRlJXU3hKUVVGSll5eE5RVUZOTVVJc1VVRkJVekpDTEZkQlJ5OUNMRk5CUVZOaUxFOUJRMHhrTEZGQlFWRlpMRWxCUVVsakxFMUJRVTB4UWl4UlFVRlRNa0lzVjBGSEwwSXNVMEZCVTFvc1VVRkRUR1lzVVVGQlVXTXNTMEZCUzFrc1RVRkJUVEZDTEZGQlFWTXlRaXhYUVVkb1F5eFRRVUZUV0N4TFFVRkxXU3hIUVVOV2NFSXNUVUZCVFc5Q0xFZEJRVk40UWl4TlFVZHVRaXhUUVVGVFlTeFJRVUZSVnl4SFFVTmlMRWxCUVVsYUxFVkJRVTlTTEUxQlFVMXZRaXhIUVVOcVFpeEpRVUZMV2l4RlFVTkVMRTFCUVUwc1NVRkJTV0VzVFVGQlRTeHJRa0ZCYjBKRUxFZEJSM2hETEVsQlFVbEZMRVZCUVZjeFFpeE5RVUZSV1N4RlFVTjJRbWhDTEZGQlFWRlpMRWxCUVVsblFpeEZRVUZSTEV0QlFVOUZMRVZCUVZjc1RVRkhNVU1zVTBGQlUxb3NVVUZEVEN4SlFVRkpZU3hGUVVGTkxFbEJRVWxHTEUxQlEyUkZMRVZCUVVsT0xFdEJRVThzVVVGRFdFMHNSVUZCU1VNc1VVRkJWUzlDTEV0QlFVdG5ReXhQUVVGUFVDeE5RVUZOTEV0QlFVMURMRmRCUTNSRE0wSXNVVUZCVVdVc1RVRkJUV2RDTEVWQlFVbEhMRTlCUjNSQ0xGTkJRVk5tTEVsQlFVbG5RaXhIUVVOVWJrTXNVVUZCVVZrc1NVRkJTVmdzUzBGQlMyMURMRkZCUVZGRUxFZEJRVlVzVFVGSGRrTXNVMEZCVTJZc1kwRkJZMmxDTEVkQlEyNUNMRWxCUVV0QkxFVkJRVmtzUTBGRFlpeEpRVUZKUXl4RlFVRk5ha01zVFVGQlRXdERMRXRCUVV0YUxGVkJRVmNzUjBGRGFFTjRRaXhQUVVGUGNVTXNTVUZCUnl4RlFVRlBka01zUzBGQlMyZERMRTlCUVU5UUxFMUJRVTBzUzBGQlRWa3NTMEUxUTJwRVJ5eFBRVUZQUXl4UlFVRlZNVU1pTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZibTlrWlY5dGIyUjFiR1Z6TDJOdmJuTnZiR1V0WW5KdmQzTmxjbWxtZVM5cGJtUmxlQzVxY3lKOSIsImZ1bmN0aW9uIG5vdygpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfW1vZHVsZS5leHBvcnRzPW5vdztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbTV2ZHlJc0lrUmhkR1VpTENKblpYUlVhVzFsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUlVFc1UwRkJVMEVzVFVGRFRDeFBRVUZQTEVsQlFVbERMRTFCUVU5RExGVkJTSFJDUXl4UFFVRlBReXhSUVVGVlNpSXNJbVpwYkdVaU9pSXZkbUZ5TDNkM2R5OXRiM05oYVdOdkxXMWhjM1JsY2k5dWIyUmxYMjF2WkhWc1pYTXZaR0YwWlMxdWIzY3ZhVzVrWlhndWFuTWlmUT09IiwiIWZ1bmN0aW9uKHQsZSl7dmFyIG89MCxpPXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LHM9aS5pbmRleE9mKFwiTVNJRSBcIik+MCxmPXM/XCItaWVcIjpcIlwiLG49IXMmJigvbW96aWxsYS8udGVzdChpLnRvTG93ZXJDYXNlKCkpJiYhL3dlYmtpdC8udGVzdChpLnRvTG93ZXJDYXNlKCkpKSxjPVtdLGE9W1wiZmZmZmZmXCIsXCIwMDAwMDBcIixcImVlZWNlMVwiLFwiMWY0OTdkXCIsXCI0ZjgxYmRcIixcImMwNTA0ZFwiLFwiOWJiYjU5XCIsXCI4MDY0YTJcIixcIjRiYWNjNlwiLFwiZjc5NjQ2XCJdLHI9W1wiZjJmMmYyXCIsXCI3ZjdmN2ZcIixcImRkZDljM1wiLFwiYzZkOWYwXCIsXCJkYmU1ZjFcIixcImYyZGNkYlwiLFwiZWJmMWRkXCIsXCJlNWUwZWNcIixcImRiZWVmM1wiLFwiZmRlYWRhXCIsXCJkOGQ4ZDhcIixcIjU5NTk1OVwiLFwiYzRiZDk3XCIsXCI4ZGIzZTJcIixcImI4Y2NlNFwiLFwiZTViOWI3XCIsXCJkN2UzYmNcIixcImNjYzFkOVwiLFwiYjdkZGU4XCIsXCJmYmQ1YjVcIixcImJmYmZiZlwiLFwiM2YzZjNmXCIsXCI5Mzg5NTNcIixcIjU0OGRkNFwiLFwiOTViM2Q3XCIsXCJkOTk2OTRcIixcImMzZDY5YlwiLFwiYjJhMmM3XCIsXCI5MmNkZGNcIixcImZhYzA4ZlwiLFwiYTVhNWE1XCIsXCIyNjI2MjZcIixcIjQ5NDQyOVwiLFwiMTczNjVkXCIsXCIzNjYwOTJcIixcIjk1MzczNFwiLFwiNzY5MjNjXCIsXCI1ZjQ5N2FcIixcIjMxODU5YlwiLFwiZTM2YzA5XCIsXCI3ZjdmN2ZcIixcIjBjMGMwY1wiLFwiMWQxYjEwXCIsXCIwZjI0M2VcIixcIjI0NDA2MVwiLFwiNjMyNDIzXCIsXCI0ZjYxMjhcIixcIjNmMzE1MVwiLFwiMjA1ODY3XCIsXCI5NzQ4MDZcIl0sbD1bXCJjMDAwMDBcIixcImZmMDAwMFwiLFwiZmZjMDAwXCIsXCJmZmZmMDBcIixcIjkyZDA1MFwiLFwiMDBiMDUwXCIsXCIwMGIwZjBcIixcIjAwNzBjMFwiLFwiMDAyMDYwXCIsXCI3MDMwYTBcIl0saD1bW1wiMDAzMzY2XCIsXCIzMzY2OTlcIixcIjMzNjZjY1wiLFwiMDAzMzk5XCIsXCIwMDAwOTlcIixcIjAwMDBjY1wiLFwiMDAwMDY2XCJdLFtcIjAwNjY2NlwiLFwiMDA2Njk5XCIsXCIwMDk5Y2NcIixcIjAwNjZjY1wiLFwiMDAzM2NjXCIsXCIwMDAwZmZcIixcIjMzMzNmZlwiLFwiMzMzMzk5XCJdLFtcIjY2OTk5OVwiLFwiMDA5OTk5XCIsXCIzM2NjY2NcIixcIjAwY2NmZlwiLFwiMDA5OWZmXCIsXCIwMDY2ZmZcIixcIjMzNjZmZlwiLFwiMzMzM2NjXCIsXCI2NjY2OTlcIl0sW1wiMzM5OTY2XCIsXCIwMGNjOTlcIixcIjAwZmZjY1wiLFwiMDBmZmZmXCIsXCIzM2NjZmZcIixcIjMzOTlmZlwiLFwiNjY5OWZmXCIsXCI2NjY2ZmZcIixcIjY2MDBmZlwiLFwiNjYwMGNjXCJdLFtcIjMzOTkzM1wiLFwiMDBjYzY2XCIsXCIwMGZmOTlcIixcIjY2ZmZjY1wiLFwiNjZmZmZmXCIsXCI2NmNjZmZcIixcIjk5Y2NmZlwiLFwiOTk5OWZmXCIsXCI5OTY2ZmZcIixcIjk5MzNmZlwiLFwiOTkwMGZmXCJdLFtcIjAwNjYwMFwiLFwiMDBjYzAwXCIsXCIwMGZmMDBcIixcIjY2ZmY5OVwiLFwiOTlmZmNjXCIsXCJjY2ZmZmZcIixcImNjY2NmZlwiLFwiY2M5OWZmXCIsXCJjYzY2ZmZcIixcImNjMzNmZlwiLFwiY2MwMGZmXCIsXCI5OTAwY2NcIl0sW1wiMDAzMzAwXCIsXCIwMDk5MzNcIixcIjMzY2MzM1wiLFwiNjZmZjY2XCIsXCI5OWZmOTlcIixcImNjZmZjY1wiLFwiZmZmZmZmXCIsXCJmZmNjZmZcIixcImZmOTlmZlwiLFwiZmY2NmZmXCIsXCJmZjAwZmZcIixcImNjMDBjY1wiLFwiNjYwMDY2XCJdLFtcIjMzMzMwMFwiLFwiMDA5OTAwXCIsXCI2NmZmMzNcIixcIjk5ZmY2NlwiLFwiY2NmZjk5XCIsXCJmZmZmY2NcIixcImZmY2NjY1wiLFwiZmY5OWNjXCIsXCJmZjY2Y2NcIixcImZmMzNjY1wiLFwiY2MwMDk5XCIsXCI5OTMzOTlcIl0sW1wiMzM2NjAwXCIsXCI2Njk5MDBcIixcIjk5ZmYzM1wiLFwiY2NmZjY2XCIsXCJmZmZmOTlcIixcImZmY2M5OVwiLFwiZmY5OTk5XCIsXCJmZjY2OTlcIixcImZmMzM5OVwiLFwiY2MzMzk5XCIsXCI5OTAwOTlcIl0sW1wiNjY2NjMzXCIsXCI5OWNjMDBcIixcImNjZmYzM1wiLFwiZmZmZjY2XCIsXCJmZmNjNjZcIixcImZmOTk2NlwiLFwiZmY2NjY2XCIsXCJmZjAwNjZcIixcImQ2MDA5NFwiLFwiOTkzMzY2XCJdLFtcImE1ODgwMFwiLFwiY2NjYzAwXCIsXCJmZmZmMDBcIixcImZmY2MwMFwiLFwiZmY5OTMzXCIsXCJmZjY2MDBcIixcImZmMDAzM1wiLFwiY2MwMDY2XCIsXCI2NjAwMzNcIl0sW1wiOTk2NjMzXCIsXCJjYzk5MDBcIixcImZmOTkwMFwiLFwiY2M2NjAwXCIsXCJmZjMzMDBcIixcImZmMDAwMFwiLFwiY2MwMDAwXCIsXCI5OTAwMzNcIl0sW1wiNjYzMzAwXCIsXCI5OTY2MDBcIixcImNjMzMwMFwiLFwiOTkzMzAwXCIsXCI5OTAwMDBcIixcIjgwMDAwMFwiLFwiOTkzMzMzXCJdXSxkPWZ1bmN0aW9uKHQpe3ZhciBlPXQudG9TdHJpbmcoMTYpO3JldHVybiAxPT1lLmxlbmd0aCYmKGU9XCIwXCIrZSksZX0scD1mdW5jdGlvbih0KXtyZXR1cm4gZChOdW1iZXIodCkpfSx2PWZ1bmN0aW9uKHQpe3ZhciBlPWQodCk7cmV0dXJuIGUrZStlfSx1PWZ1bmN0aW9uKHQpe2lmKHQubGVuZ3RoPjEwKXt2YXIgZT0xK3QuaW5kZXhPZihcIihcIiksbz10LmluZGV4T2YoXCIpXCIpLGk9dC5zdWJzdHJpbmcoZSxvKS5zcGxpdChcIixcIik7cmV0dXJuW1wiI1wiLHAoaVswXSkscChpWzFdKSxwKGlbMl0pXS5qb2luKFwiXCIpfXJldHVybiB0fTt0LndpZGdldChcImV2b2wuY29sb3JwaWNrZXJcIix7dmVyc2lvbjpcIjMuMy4xXCIsb3B0aW9uczp7Y29sb3I6bnVsbCxjdXN0b21UaGVtZTpudWxsLHNob3dPbjpcImJvdGhcIixoaWRlQnV0dG9uOiExLGRpc3BsYXlJbmRpY2F0b3I6ITAsdHJhbnNwYXJlbnRDb2xvcjohMSxoaXN0b3J5OiEwLGRlZmF1bHRQYWxldHRlOlwidGhlbWVcIixzdHJpbmdzOlwiVGhlbWUgQ29sb3JzLFN0YW5kYXJkIENvbG9ycyxXZWIgQ29sb3JzLFRoZW1lIENvbG9ycyxCYWNrIHRvIFBhbGV0dGUsSGlzdG9yeSxObyBoaXN0b3J5IHlldC5cIn0sX2FjdGl2ZTohMSxfY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztzd2l0Y2godGhpcy5fcGFsZXR0ZUlkeD1cInRoZW1lXCI9PXRoaXMub3B0aW9ucy5kZWZhdWx0UGFsZXR0ZT8xOjIsdGhpcy5faWQ9XCJldm8tY3BcIitvKyssdGhpcy5fZW5hYmxlZD0hMCx0aGlzLm9wdGlvbnMuc2hvd09uPXRoaXMub3B0aW9ucy5oaWRlQnV0dG9uP1wiZm9jdXNcIjp0aGlzLm9wdGlvbnMuc2hvd09uLHRoaXMuZWxlbWVudC5nZXQoMCkudGFnTmFtZSl7Y2FzZVwiSU5QVVRcIjp2YXIgaT10aGlzLm9wdGlvbnMuY29sb3IsYz10aGlzLmVsZW1lbnQsYT0oXCJmb2N1c1wiPT09dGhpcy5vcHRpb25zLnNob3dPbj9cIlwiOlwiZXZvLXBvaW50ZXIgXCIpK1wiZXZvLWNvbG9yaW5kXCIrKG4/XCItZmZcIjpmKSsodGhpcy5vcHRpb25zLmhpZGVCdXR0b24/XCIgZXZvLWhpZGRlbi1idXR0b25cIjpcIlwiKSxyPVwiXCI7dGhpcy5faXNQb3B1cD0hMCx0aGlzLl9wYWxldHRlPW51bGw7dmFyIGw9Yy52YWwoKTtudWxsIT09aT9pIT1sJiZjLnZhbChpKS5jaGFuZ2UoKTpcIlwiIT09bCYmKGk9dGhpcy5vcHRpb25zLmNvbG9yPWwpLFwiIzAwMDBmZmZmXCI9PT1pP2ErPVwiIGV2by10cmFuc3BhcmVudFwiOnI9bnVsbCE9PWk/XCJiYWNrZ3JvdW5kLWNvbG9yOlwiK2k6XCJcIixjLmFkZENsYXNzKFwiY29sb3JQaWNrZXIgXCIrdGhpcy5faWQpLndyYXAoJzxkaXYgc3R5bGU9XCJ3aWR0aDonKyh0aGlzLm9wdGlvbnMuaGlkZUJ1dHRvbj90aGlzLmVsZW1lbnQud2lkdGgoKTp0aGlzLmVsZW1lbnQud2lkdGgoKSszMikrXCJweDtcIisocz9cIm1hcmdpbi1ib3R0b206LTIxcHg7XCI6XCJcIikrKG4/XCJwYWRkaW5nOjFweCAwO1wiOlwiXCIpKydcIiBjbGFzcz1cImV2by1jcC13cmFwXCI+PC9kaXY+JykuYWZ0ZXIoJzxkaXYgY2xhc3M9XCInK2ErJ1wiIHN0eWxlPVwiJytyKydcIj48L2Rpdj4nKS5vbihcImtleXVwIG9ucGFzdGVcIixmdW5jdGlvbihvKXt2YXIgaT10KHRoaXMpLnZhbCgpO2khPWUub3B0aW9ucy5jb2xvciYmZS5fc2V0VmFsdWUoaSwhMCl9KTt2YXIgaD10aGlzLm9wdGlvbnMuc2hvd09uO1wiYm90aFwiIT09aCYmXCJmb2N1c1wiIT09aHx8Yy5vbihcImZvY3VzXCIsZnVuY3Rpb24oKXtlLnNob3dQYWxldHRlKCl9KSxcImJvdGhcIiE9PWgmJlwiYnV0dG9uXCIhPT1ofHxjLm5leHQoKS5vbihcImNsaWNrXCIsZnVuY3Rpb24odCl7cmV0dXJuIHQuc3RvcFByb3BhZ2F0aW9uKCksZS5zaG93UGFsZXR0ZSgpLCExfSk7YnJlYWs7ZGVmYXVsdDp0aGlzLl9pc1BvcHVwPSExLHRoaXMuX3BhbGV0dGU9dGhpcy5lbGVtZW50Lmh0bWwodGhpcy5fcGFsZXR0ZUhUTUwoKSkuYXR0cihcImFyaWEtaGFzcG9wdXBcIixcInRydWVcIiksdGhpcy5fYmluZENvbG9ycygpfWlmKHRoaXMub3B0aW9ucy5oaXN0b3J5JiYoaSYmdGhpcy5fYWRkMkhpc3RvcnkoaSksdGhpcy5vcHRpb25zLmluaXRpYWxIaXN0b3J5KSl7dmFyIGQ9dGhpcy5vcHRpb25zLmluaXRpYWxIaXN0b3J5O2Zvcih2YXIgcCBpbiBkKXRoaXMuX2FkZDJIaXN0b3J5KGRbcF0pfX0sX3BhbGV0dGVIVE1MOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fcGFsZXR0ZUlkeD1NYXRoLmFicyh0aGlzLl9wYWxldHRlSWR4KSxlPXRoaXMub3B0aW9ucyxvPWUuc3RyaW5ncy5zcGxpdChcIixcIiksaT0nPGRpdiBjbGFzcz1cImV2by1wb3AnK2YrJyB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbFwiJysodGhpcy5faXNQb3B1cD8nIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGVcIic6XCJcIikrXCI+PHNwYW4+XCIrdGhpc1tcIl9wYWxldHRlSFRNTFwiK3RdKCkrJzwvc3Bhbj48ZGl2IGNsYXNzPVwiZXZvLW1vcmVcIj48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+JytvWzErdF0rXCI8L2E+XCI7cmV0dXJuIGUuaGlzdG9yeSYmKGkrPSc8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCJldm8taGlzdFwiPicrb1s1XStcIjwvYT5cIiksaSs9XCI8L2Rpdj5cIixlLmRpc3BsYXlJbmRpY2F0b3ImJihpKz10aGlzLl9jb2xvckluZEhUTUwodGhpcy5vcHRpb25zLmNvbG9yKSt0aGlzLl9jb2xvckluZEhUTUwoXCJcIikpLGkrPVwiPC9kaXY+XCJ9LF9jb2xvckluZEhUTUw6ZnVuY3Rpb24odCl7dmFyIGU9cz9cImV2by1jb2xvcmJveC1pZSBcIjpcIlwiLG89XCJcIjtyZXR1cm4gdD9cIiMwMDAwZmZmZlwiPT09dD9lKz1cImV2by10cmFuc3BhcmVudFwiOm89XCJiYWNrZ3JvdW5kLWNvbG9yOlwiK3Q6bz1cImRpc3BsYXk6bm9uZVwiLCc8ZGl2IGNsYXNzPVwiZXZvLWNvbG9yXCIgc3R5bGU9XCJmbG9hdDpsZWZ0XCI+PGRpdiBzdHlsZT1cIicrbysnXCIgY2xhc3M9XCInK2UrJ1wiPjwvZGl2PjxzcGFuPicrKHR8fFwiXCIpK1wiPC9zcGFuPjwvZGl2PlwifSxfcGFsZXR0ZUhUTUwxOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLm9wdGlvbnMsbz1lLnN0cmluZ3Muc3BsaXQoXCIsXCIpLGk9Jzx0ZCBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6JyxuPXM/J1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoycHg7XCI+PC9kaXY+PC90ZD4nOidcIj48c3Bhbi8+PC90ZD4nLGM9Jzx0cj48dGggY29sc3Bhbj1cIjEwXCIgY2xhc3M9XCJ1aS13aWRnZXQtY29udGVudFwiPicsaD0nPHRhYmxlIGNsYXNzPVwiZXZvLXBhbGV0dGUnK2YrJ1wiPicrYytvWzBdK1wiPC90aD48L3RyPjx0cj5cIjtpZihlLmN1c3RvbVRoZW1lKWZvcih0PTAsbWw9ZS5jdXN0b21UaGVtZS5sZW5ndGg7dDxtbDt0KyspaCs9aStlLmN1c3RvbVRoZW1lW3RdK247ZWxzZXtmb3IoaSs9XCIjXCIsdD0wO3Q8MTA7dCsrKWgrPWkrYVt0XStuO2ZvcihoKz1cIjwvdHI+XCIsc3x8KGgrPSc8dHI+PHRoIGNvbHNwYW49XCIxMFwiPjwvdGg+PC90cj4nKSxoKz0nPHRyIGNsYXNzPVwidG9wXCI+Jyx0PTA7dDwxMDt0KyspaCs9aStyW3RdK247Zm9yKHZhciBkPTE7ZDw0O2QrKylmb3IoaCs9JzwvdHI+PHRyIGNsYXNzPVwiaW5cIj4nLHQ9MDt0PDEwO3QrKyloKz1pK3JbMTAqZCt0XStuO2ZvcihoKz0nPC90cj48dHIgY2xhc3M9XCJib3R0b21cIj4nLHQ9NDA7dDw1MDt0KyspaCs9aStyW3RdK247Zm9yKGgrPVwiPC90cj5cIitjLGUudHJhbnNwYXJlbnRDb2xvciYmKGgrPSc8ZGl2IGNsYXNzPVwiZXZvLXRyYW5zcGFyZW50IGV2by10ci1ib3hcIj48L2Rpdj4nKSxoKz1vWzFdK1wiPC90aD48L3RyPjx0cj5cIix0PTA7dDwxMDt0KyspaCs9aStsW3RdK259cmV0dXJuIGgrPVwiPC90cj48L3RhYmxlPlwifSxfcGFsZXR0ZUhUTUwyOmZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbz0nPHRkIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjojJyxpPXM/J1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDo1cHg7XCI+PC9kaXY+PC90ZD4nOidcIj48c3Bhbi8+PC90ZD4nLG49Jzx0YWJsZSBjbGFzcz1cImV2by1wYWxldHRlMicrZisnXCI+PHRyPicsYz0nPGRpdiBjbGFzcz1cImV2by1wYWxjZW50ZXJcIj4nLGE9MCxyPWgubGVuZ3RoO2E8cjthKyspe2MrPW47dmFyIGw9aFthXTtmb3IodD0wLGU9bC5sZW5ndGg7dDxlO3QrKyljKz1vK2xbdF0raTtjKz1cIjwvdHI+PC90YWJsZT5cIn1jKz0nPGRpdiBjbGFzcz1cImV2by1zZXBcIi8+Jzt2YXIgZD1cIlwiO2ZvcihjKz1uLHQ9MjU1O3Q+MTA7dC09MTApYys9byt2KHQpK2ksZCs9byt2KHQtPTEwKStpO3JldHVybiBjKz1cIjwvdHI+PC90YWJsZT5cIituK2QrXCI8L3RyPjwvdGFibGU+PC9kaXY+XCJ9LF9zd2l0Y2hQYWxldHRlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX2VuYWJsZWQpe3ZhciBvLGkscyxmPXRoaXMub3B0aW9ucyxuPWYuc3RyaW5ncy5zcGxpdChcIixcIik7aWYodChlKS5oYXNDbGFzcyhcImV2by1oaXN0XCIpKXt2YXIgYT0nPHRhYmxlIGNsYXNzPVwiZXZvLXBhbGV0dGVcIj48dHI+PHRoIGNsYXNzPVwidWktd2lkZ2V0LWNvbnRlbnRcIj4nK25bNV0rJzwvdGg+PC90cj48L3RyPjwvdGFibGU+PGRpdiBjbGFzcz1cImV2by1jSGlzdFwiPic7aWYoMD09PWMubGVuZ3RoKWErPVwiPHA+Jm5ic3A7XCIrbls2XStcIjwvcD5cIjtlbHNlIGZvcih2YXIgcj1jLmxlbmd0aC0xO3I+LTE7ci0tKTk9PT1jW3JdLmxlbmd0aD9mLnRyYW5zcGFyZW50Q29sb3ImJihhKz0nPGRpdiBjbGFzcz1cImV2by10cmFuc3BhcmVudFwiPjwvZGl2PicpOmErPSc8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonK2Nbcl0rJ1wiPjwvZGl2Pic7YSs9XCI8L2Rpdj5cIixvPS10aGlzLl9wYWxldHRlSWR4LGk9YSxzPW5bNF19ZWxzZSB0aGlzLl9wYWxldHRlSWR4PDA/KG89LXRoaXMuX3BhbGV0dGVJZHgsdGhpcy5fcGFsZXR0ZS5maW5kKFwiLmV2by1oaXN0XCIpLnNob3coKSk6bz0yPT10aGlzLl9wYWxldHRlSWR4PzE6MixpPXRoaXNbXCJfcGFsZXR0ZUhUTUxcIitvXSgpLHM9bltvKzFdLHRoaXMuX3BhbGV0dGVJZHg9bzt0aGlzLl9wYWxldHRlSWR4PW87dmFyIGw9dGhpcy5fcGFsZXR0ZS5maW5kKFwiLmV2by1tb3JlXCIpLnByZXYoKS5odG1sKGkpLmVuZCgpLmNoaWxkcmVuKCkuZXEoMCkuaHRtbChzKTtvPDAmJmwubmV4dCgpLmhpZGUoKX19LF9kb3duT3JVcFBvc2l0aW9uaW5nOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZWxlbWVudCxlPTA7bnVsbCE9PXQmJmU8MTAwOyl7aWYoXCJ2aXNpYmxlXCIhPXQuY3NzKFwib3ZlcmZsb3dcIikpe3ZhciBvPXRoaXMuX3BhbGV0dGUub2Zmc2V0KCkudG9wK3RoaXMuX3BhbGV0dGUuaGVpZ2h0KCksaT10Lm9mZnNldCgpLnRvcCt0LmhlaWdodCgpLHM9dGhpcy5fcGFsZXR0ZS5vZmZzZXQoKS50b3AtdGhpcy5fcGFsZXR0ZS5oZWlnaHQoKS10aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSxmPXQub2Zmc2V0KCkudG9wO28+aSYmcz5mP3RoaXMuX3BhbGV0dGUuY3NzKHtib3R0b206dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkrXCJweFwifSk6dGhpcy5fcGFsZXR0ZS5jc3Moe2JvdHRvbTpcImF1dG9cIn0pO2JyZWFrfWlmKFwiSFRNTFwiPT10WzBdLnRhZ05hbWUpYnJlYWs7dD10Lm9mZnNldFBhcmVudCgpLGUrK319LHNob3dQYWxldHRlOmZ1bmN0aW9uKCl7aWYodGhpcy5fZW5hYmxlZCYmKHRoaXMuX2FjdGl2ZT0hMCx0KFwiLmNvbG9yUGlja2VyXCIpLm5vdChcIi5cIit0aGlzLl9pZCkuY29sb3JwaWNrZXIoXCJoaWRlUGFsZXR0ZVwiKSxudWxsPT09dGhpcy5fcGFsZXR0ZSkpe3RoaXMuX3BhbGV0dGU9dGhpcy5lbGVtZW50Lm5leHQoKS5hZnRlcih0aGlzLl9wYWxldHRlSFRNTCgpKS5uZXh0KCkub24oXCJjbGlja1wiLGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0b3BQcm9wYWdhdGlvbigpLCExfSksdGhpcy5fYmluZENvbG9ycygpO3ZhciBlPXRoaXM7dGhpcy5faXNQb3B1cCYmKHRoaXMuX2Rvd25PclVwUG9zaXRpb25pbmcoKSx0KGRvY3VtZW50LmJvZHkpLm9uKFwiY2xpY2suXCIrZS5faWQsZnVuY3Rpb24odCl7dC50YXJnZXQhPWUuZWxlbWVudC5nZXQoMCkmJmUuaGlkZVBhbGV0dGUoKX0pLm9uKFwia2V5dXAuXCIrZS5faWQsZnVuY3Rpb24odCl7Mjc9PT10LmtleUNvZGUmJmUuaGlkZVBhbGV0dGUoKX0pKX1yZXR1cm4gdGhpc30saGlkZVBhbGV0dGU6ZnVuY3Rpb24oKXtpZih0aGlzLl9pc1BvcHVwJiZ0aGlzLl9wYWxldHRlKXt0KGRvY3VtZW50LmJvZHkpLm9mZihcImNsaWNrLlwiK3RoaXMuX2lkKTt2YXIgZT10aGlzO3RoaXMuX3BhbGV0dGUub2ZmKFwibW91c2VvdmVyIGNsaWNrXCIsXCJ0ZCwuZXZvLXRyYW5zcGFyZW50XCIpLmZhZGVPdXQoZnVuY3Rpb24oKXtlLl9wYWxldHRlLnJlbW92ZSgpLGUuX3BhbGV0dGU9ZS5fY1R4dD1udWxsfSkuZmluZChcIi5ldm8tbW9yZSBhXCIpLm9mZihcImNsaWNrXCIpfXJldHVybiB0aGlzfSxfYmluZENvbG9yczpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbz10aGlzLm9wdGlvbnMsaT10aGlzLl9wYWxldHRlLmZpbmQoXCJkaXYuZXZvLWNvbG9yXCIpLHM9by5oaXN0b3J5P1widGQsLmV2by1jSGlzdD5kaXZcIjpcInRkXCI7by50cmFuc3BhcmVudENvbG9yJiYocys9XCIsLmV2by10cmFuc3BhcmVudFwiKSx0aGlzLl9jVHh0MT1pLmVxKDApLmNoaWxkcmVuKCkuZXEoMCksdGhpcy5fY1R4dDI9aS5lcSgxKS5jaGlsZHJlbigpLmVxKDApLHRoaXMuX3BhbGV0dGUub24oXCJjbGlja1wiLHMsZnVuY3Rpb24obyl7aWYoZS5fZW5hYmxlZCl7dmFyIGk9dCh0aGlzKTtlLl9zZXRWYWx1ZShpLmhhc0NsYXNzKFwiZXZvLXRyYW5zcGFyZW50XCIpP1wiIzAwMDBmZmZmXCI6dShpLmF0dHIoXCJzdHlsZVwiKS5zdWJzdHJpbmcoMTcpKSksZS5fYWN0aXZlPSExfX0pLm9uKFwibW91c2VvdmVyXCIscyxmdW5jdGlvbihvKXtpZihlLl9lbmFibGVkKXt2YXIgaT10KHRoaXMpLHM9aS5oYXNDbGFzcyhcImV2by10cmFuc3BhcmVudFwiKT9cIiMwMDAwZmZmZlwiOnUoaS5hdHRyKFwic3R5bGVcIikuc3Vic3RyaW5nKDE3KSk7ZS5vcHRpb25zLmRpc3BsYXlJbmRpY2F0b3ImJmUuX3NldENvbG9ySW5kKHMsMiksZS5fYWN0aXZlJiZlLmVsZW1lbnQudHJpZ2dlcihcIm1vdXNlb3Zlci5jb2xvclwiLHMpfX0pLmZpbmQoXCIuZXZvLW1vcmUgYVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtlLl9zd2l0Y2hQYWxldHRlKHRoaXMpfSl9LHZhbDpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dD90aGlzLm9wdGlvbnMuY29sb3I6KHRoaXMuX3NldFZhbHVlKHQpLHRoaXMpfSxfc2V0VmFsdWU6ZnVuY3Rpb24odCxlKXt0PXQucmVwbGFjZSgvIC9nLFwiXCIpLHRoaXMub3B0aW9ucy5jb2xvcj10LHRoaXMuX2lzUG9wdXA/KGV8fHRoaXMuaGlkZVBhbGV0dGUoKSx0aGlzLl9zZXRCb3hDb2xvcih0aGlzLmVsZW1lbnQudmFsKHQpLmNoYW5nZSgpLm5leHQoKSx0KSk6dGhpcy5fc2V0Q29sb3JJbmQodCwxKSx0aGlzLm9wdGlvbnMuaGlzdG9yeSYmdGhpcy5fcGFsZXR0ZUlkeD4wJiZ0aGlzLl9hZGQySGlzdG9yeSh0KSx0aGlzLmVsZW1lbnQudHJpZ2dlcihcImNoYW5nZS5jb2xvclwiLHQpfSxfc2V0Q29sb3JJbmQ6ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzW1wiX2NUeHRcIitlXTt0aGlzLl9zZXRCb3hDb2xvcihvLHQpLG8ubmV4dCgpLmh0bWwodCl9LF9zZXRCb3hDb2xvcjpmdW5jdGlvbih0LGUpe1wiIzAwMDBmZmZmXCI9PT1lP3QuYWRkQ2xhc3MoXCJldm8tdHJhbnNwYXJlbnRcIikucmVtb3ZlQXR0cihcInN0eWxlXCIpOnQucmVtb3ZlQ2xhc3MoXCJldm8tdHJhbnNwYXJlbnRcIikuYXR0cihcInN0eWxlXCIsXCJiYWNrZ3JvdW5kLWNvbG9yOlwiK2UpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7XCJjb2xvclwiPT10P3RoaXMuX3NldFZhbHVlKGUsITApOnRoaXMub3B0aW9uc1t0XT1lfSxfYWRkMkhpc3Rvcnk6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPWMubGVuZ3RoLG89MDtvPGU7bysrKWlmKHQ9PWNbb10pcmV0dXJuO2U+MjcmJmMuc2hpZnQoKSxjLnB1c2godCl9LGNsZWFyOmZ1bmN0aW9uKCl7dGhpcy5oaWRlUGFsZXR0ZSgpLnZhbChcIlwiKX0sZW5hYmxlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbGVtZW50O3JldHVybiB0aGlzLl9pc1BvcHVwP3QucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpOnQuY3NzKHtvcGFjaXR5OlwiMVwiLFwicG9pbnRlci1ldmVudHNcIjpcImF1dG9cIn0pLFwiZm9jdXNcIiE9PXRoaXMub3B0aW9ucy5zaG93T24mJnRoaXMuZWxlbWVudC5uZXh0KCkuYWRkQ2xhc3MoXCJldm8tcG9pbnRlclwiKSx0LnJlbW92ZUF0dHIoXCJhcmlhLWRpc2FibGVkXCIpLHRoaXMuX2VuYWJsZWQ9ITAsdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudDtyZXR1cm4gdGhpcy5faXNQb3B1cD90LmF0dHIoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIik6KHRoaXMuaGlkZVBhbGV0dGUoKSx0LmNzcyh7b3BhY2l0eTpcIjAuM1wiLFwicG9pbnRlci1ldmVudHNcIjpcIm5vbmVcIn0pKSxcImZvY3VzXCIhPT10aGlzLm9wdGlvbnMuc2hvd09uJiZ0aGlzLmVsZW1lbnQubmV4dCgpLnJlbW92ZUNsYXNzKFwiZXZvLXBvaW50ZXJcIiksdC5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSx0aGlzLl9lbmFibGVkPSExLHRoaXN9LGlzRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5fZW5hYmxlZH0sZGVzdHJveTpmdW5jdGlvbigpe3QoZG9jdW1lbnQuYm9keSkub2ZmKFwiY2xpY2suXCIrdGhpcy5faWQpLHRoaXMuX3BhbGV0dGUmJih0aGlzLl9wYWxldHRlLm9mZihcIm1vdXNlb3ZlciBjbGlja1wiLFwidGQsLmV2by1jSGlzdD5kaXYsLmV2by10cmFuc3BhcmVudFwiKS5maW5kKFwiLmV2by1tb3JlIGFcIikub2ZmKFwiY2xpY2tcIiksdGhpcy5faXNQb3B1cCYmdGhpcy5fcGFsZXR0ZS5yZW1vdmUoKSx0aGlzLl9wYWxldHRlPXRoaXMuX2NUeHQ9bnVsbCksdGhpcy5faXNQb3B1cCYmdGhpcy5lbGVtZW50Lm5leHQoKS5vZmYoXCJjbGlja1wiKS5yZW1vdmUoKS5lbmQoKS5vZmYoXCJmb2N1c1wiKS51bndyYXAoKSx0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb2xvclBpY2tlciBcIit0aGlzLmlkKS5lbXB0eSgpLHQuV2lkZ2V0LnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyl9fSl9KGpRdWVyeSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVYyYjJ3dFkyOXNiM0p3YVdOclpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpDSXNJblZ1WkdWbWFXNWxaQ0lzSWw5cFpIZ2lMQ0oxWVNJc0luZHBibVJ2ZHlJc0ltNWhkbWxuWVhSdmNpSXNJblZ6WlhKQloyVnVkQ0lzSW1selNVVWlMQ0pwYm1SbGVFOW1JaXdpWDJsbElpd2lhWE5OYjNvaUxDSjBaWE4wSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0pvYVhOMGIzSjVJaXdpWW1GelpWUm9aVzFsUTI5c2IzSnpJaXdpYzNWaVZHaGxiV1ZEYjJ4dmNuTWlMQ0p6ZEdGdVpHRnlaRU52Ykc5eWN5SXNJbmRsWWtOdmJHOXljeUlzSW1sdWRESklaWGdpTENKcElpd2lhQ0lzSW5SdlUzUnlhVzVuSWl3aWJHVnVaM1JvSWl3aWMzUXlTR1Y0SWl3aWN5SXNJazUxYldKbGNpSXNJbWx1ZERKSVpYZ3pJaXdpZEc5SVpYZ3pJaXdpWXlJc0luQXhJaXdpY0RJaUxDSmpjeUlzSW5OMVluTjBjbWx1WnlJc0luTndiR2wwSWl3aWFtOXBiaUlzSW5kcFpHZGxkQ0lzSW5abGNuTnBiMjRpTENKdmNIUnBiMjV6SWl3aVkyOXNiM0lpTENKamRYTjBiMjFVYUdWdFpTSXNJbk5vYjNkUGJpSXNJbWhwWkdWQ2RYUjBiMjRpTENKa2FYTndiR0Y1U1c1a2FXTmhkRzl5SWl3aWRISmhibk53WVhKbGJuUkRiMnh2Y2lJc0ltUmxabUYxYkhSUVlXeGxkSFJsSWl3aWMzUnlhVzVuY3lJc0lsOWhZM1JwZG1VaUxDSmZZM0psWVhSbElpd2lkR2hoZENJc0luUm9hWE1pTENKZmNHRnNaWFIwWlVsa2VDSXNJbDlwWkNJc0lsOWxibUZpYkdWa0lpd2laV3hsYldWdWRDSXNJbWRsZENJc0luUmhaMDVoYldVaUxDSmxJaXdpWTNOeklpd2ljM1I1YkdVaUxDSmZhWE5RYjNCMWNDSXNJbDl3WVd4bGRIUmxJaXdpZGlJc0luWmhiQ0lzSW1Ob1lXNW5aU0lzSW1Ga1pFTnNZWE56SWl3aWQzSmhjQ0lzSW5kcFpIUm9JaXdpWVdaMFpYSWlMQ0p2YmlJc0ltVjJkQ0lzSWw5elpYUldZV3gxWlNJc0luTm9iM2RRWVd4bGRIUmxJaXdpYm1WNGRDSXNJbk4wYjNCUWNtOXdZV2RoZEdsdmJpSXNJbWgwYld3aUxDSmZjR0ZzWlhSMFpVaFVUVXdpTENKaGRIUnlJaXdpWDJKcGJtUkRiMnh2Y25NaUxDSmZZV1JrTWtocGMzUnZjbmtpTENKcGJtbDBhV0ZzU0dsemRHOXllU0lzSW5CSlpIZ2lMQ0pOWVhSb0lpd2lZV0p6SWl3aWIzQjBjeUlzSW14aFltVnNjeUlzSWw5amIyeHZja2x1WkVoVVRVd2lMQ0pmY0dGc1pYUjBaVWhVVFV3eElpd2liMVJFSWl3aVkxUkVJaXdpYjFSU1ZFZ2lMQ0p0YkNJc0luSWlMQ0pmY0dGc1pYUjBaVWhVVFV3eUlpd2lhVTFoZUNJc0ltOVVZV0pzWlZSU0lpd2ljazFoZUNJc0ltZ3lJaXdpWDNOM2FYUmphRkJoYkdWMGRHVWlMQ0pzYVc1cklpd2lhV1I0SWl3aVkyOXVkR1Z1ZENJc0lteGhZbVZzSWl3aWFHRnpRMnhoYzNNaUxDSm1hVzVrSWl3aWMyaHZkeUlzSW5CeVpYWWlMQ0psYm1RaUxDSmphR2xzWkhKbGJpSXNJbVZ4SWl3aWFHbGtaU0lzSWw5a2IzZHVUM0pWY0ZCdmMybDBhVzl1YVc1bklpd2laV3dpTENKaWIzUjBJaXdpYjJabWMyVjBJaXdpZEc5d0lpd2lhR1ZwWjJoMElpd2ljRUp2ZEhRaUxDSnZkWFJsY2tobGFXZG9kQ0lzSW5CVWIzQWlMQ0ppYjNSMGIyMGlMQ0p2Wm1aelpYUlFZWEpsYm5RaUxDSnViM1FpTENKamIyeHZjbkJwWTJ0bGNpSXNJbVJ2WTNWdFpXNTBJaXdpWW05a2VTSXNJblJoY21kbGRDSXNJbWhwWkdWUVlXeGxkSFJsSWl3aWEyVjVRMjlrWlNJc0ltOW1aaUlzSW1aaFpHVlBkWFFpTENKeVpXMXZkbVVpTENKZlkxUjRkQ0lzSW1Weklpd2ljMlZzSWl3aVgyTlVlSFF4SWl3aVgyTlVlSFF5SWl3aUpIUm9hWE1pTENKZmMyVjBRMjlzYjNKSmJtUWlMQ0owY21sbloyVnlJaXdpZG1Gc2RXVWlMQ0p1YjBocFpHVWlMQ0p5WlhCc1lXTmxJaXdpWDNObGRFSnZlRU52Ykc5eUlpd2lKR0p2ZUNJc0luSmxiVzkyWlVGMGRISWlMQ0p5WlcxdmRtVkRiR0Z6Y3lJc0lsOXpaWFJQY0hScGIyNGlMQ0pyWlhraUxDSnphR2xtZENJc0luQjFjMmdpTENKamJHVmhjaUlzSW1WdVlXSnNaU0lzSW05d1lXTnBkSGtpTENKd2IybHVkR1Z5TFdWMlpXNTBjeUlzSW1ScGMyRmliR1VpTENKcGMwUnBjMkZpYkdWa0lpd2laR1Z6ZEhKdmVTSXNJblZ1ZDNKaGNDSXNJbWxrSWl3aVpXMXdkSGtpTENKWGFXUm5aWFFpTENKd2NtOTBiM1I1Y0dVaUxDSmpZV3hzSWl3aWFsRjFaWEo1SWwwc0ltMWhjSEJwYm1keklqb2lRMEZaUVN4VFFVRlhRU3hGUVVGSFF5eEhRVVZrTEVsQlFVbERMRVZCUVVzc1JVRkRVa01zUlVGQlIwTXNUMEZCVDBNc1ZVRkJWVU1zVlVGRGNFSkRMRVZCUVV0S0xFVkJRVWRMTEZGQlFWRXNVMEZCVXl4RlFVTjZRa01zUlVGQlNVWXNSVUZCU3l4TlFVRk5MRWRCUTJaSExFZEJRVTFJTEVsQlFWY3NWVUZCVlVrc1MwRkJTMUlzUlVGQlIxTXNhVUpCUVcxQ0xGTkJRVk5FTEV0QlFVdFNMRVZCUVVkVExHZENRVU4yUlVNc1MwRkRRVU1zUjBGQmFVSXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNWVUZEYkVkRExFZEJRV2RDTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlEyaEhMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUTJwR0xGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRMnBHTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlEycEdMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRlZCUTJ4R1F5eEhRVUZuUWl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VlFVTnFSME1zU1VGRFJTeFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhYUVVOMFJDeFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGZEJReTlFTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFhRVU40UlN4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4WFFVTnFSaXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGZEJRekZHTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4WFFVTnVSeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFhRVU0xUnl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1YwRkRia2NzVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFhRVU14Uml4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4WFFVTnFSaXhUUVVGVExGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1YwRkRlRVVzVTBGQlV5eFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhYUVVNdlJDeFRRVUZUTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1UwRkJVeXhYUVVkNFJFTXNSVUZCVVN4VFFVRlRReXhIUVVOb1FpeEpRVUZKUXl4RlFVRkZSQ3hGUVVGRlJTeFRRVUZUTEVsQlNXcENMRTlCU0dFc1IwRkJWa1FzUlVGQlJVVXNVMEZEU2tZc1JVRkJSU3hKUVVGSlFTeEhRVVZCUVN4SFFVVlNSeXhGUVVGUExGTkJRVk5ETEVkQlEyWXNUMEZCVDA0c1JVRkJVVThzVDBGQlQwUXNTMEZGZGtKRkxFVkJRVk1zVTBGQlUxQXNSMEZEYWtJc1NVRkJTVU1zUlVGQlJVWXNSVUZCVVVNc1IwRkRaQ3hQUVVGUFF5eEZRVUZGUVN4RlFVRkZRU3hIUVVWYVR5eEZRVUZQTEZOQlFWTkRMRWRCUTJZc1IwRkJSMEVzUlVGQlJVNHNUMEZCVHl4SFFVRkhMRU5CUTJRc1NVRkJTVThzUlVGQlJ5eEZRVUZGUkN4RlFVRkZjRUlzVVVGQlVTeExRVU5zUW5OQ0xFVkJRVWRHTEVWQlFVVndRaXhSUVVGUkxFdEJRMkoxUWl4RlFVRkhTQ3hGUVVGRlNTeFZRVUZWU0N4RlFVRkhReXhIUVVGSlJ5eE5RVUZOTEV0QlF6ZENMRTlCUVZFc1NVRkJTVllzUlVGQlQxRXNSVUZCUnl4SlFVRkpVaXhGUVVGUFVTeEZRVUZITEVsQlFVbFNMRVZCUVU5UkxFVkJRVWNzUzBGQlMwY3NTMEZCU3l4SlFVVTFSQ3hQUVVGUFRpeEhRVWxXTlVJc1JVRkJSVzFETEU5QlFWRXNiMEpCUlZSRExGRkJRVk1zVVVGRlZFTXNVMEZEUTBNc1RVRkJUeXhMUVVOUVF5eFpRVUZoTEV0QlEySkRMRTlCUVZFc1QwRkRVa01zV1VGQldTeEZRVU5hUXl4clFrRkJhMElzUlVGRGJFSkRMR3RDUVVGclFpeEZRVU5zUWpsQ0xGTkJRVk1zUlVGRFZDdENMR1ZCUVdkQ0xGRkJRMmhDUXl4UlFVRlRMR2RIUVVsV1F5eFRRVUZUTEVWQlJWUkRMRkZCUVZNc1YwRkRVaXhKUVVGSlF5eEZRVUZMUXl4TFFVdFVMRTlCU2tGQkxFdEJRVXRETEZsQlFYbERMRk5CUVRkQ1JDeExRVUZMV2l4UlFVRlJUeXhsUVVGM1FpeEZRVUZGTEVWQlEzaEVTeXhMUVVGTFJTeEpRVUZKTEZOQlFWTnFSQ3hKUVVOc1FpdERMRXRCUVV0SExGVkJRVk1zUlVGRFpFZ3NTMEZCUzFvc1VVRkJVVWNzVDBGQlQxTXNTMEZCUzFvc1VVRkJVVWtzVjBGQlZ5eFJRVUZSVVN4TFFVRkxXaXhSUVVGUlJ5eFBRVU14UkZNc1MwRkJTMGtzVVVGQlVVTXNTVUZCU1N4SFFVRkhReXhUUVVNeFFpeEpRVUZMTEZGQlEwb3NTVUZCU1dwQ0xFVkJRVTFYTEV0QlFVdGFMRkZCUVZGRExFMUJRM1JDYTBJc1JVRkJSVkFzUzBGQlMwa3NVVUZEVUVrc1IwRkJORUlzVlVGQmRFSlNMRXRCUVV0YUxGRkJRVkZITEU5QlFXdENMRWRCUVVjc1owSkJRV2RDTEdkQ1FVRm5RamxDTEVWQlFVMHNUVUZCVFVRc1NVRkJUWGRETEV0QlFVdGFMRkZCUVZGSkxGZEJRVmNzY1VKQlFYRkNMRWxCUTNaSmFVSXNSVUZCVFN4SFFVTlFWQ3hMUVVGTFZTeFZRVUZUTEVWQlEyUldMRXRCUVV0WExGTkJRVk1zUzBGRFpDeEpRVUZKUXl4RlFVRkZUQ3hGUVVGRlRTeE5RVU5ITEU5QlFWSjRRaXhGUVVORlFTeEhRVUZUZFVJc1IwRkJSMHdzUlVGQlJVMHNTVUZCU1hoQ0xFZEJRVTk1UWl4VFFVVjBRaXhMUVVGS1JpeEpRVU5HZGtJc1JVRkJUVmNzUzBGQlMxb3NVVUZCVVVNc1RVRkJUWFZDTEVkQmFFVnVRaXhqUVcxRlRIWkNMRVZCUTBadFFpeEhRVUZMTEcxQ1FVVk1ReXhGUVVGbExFOUJRVkp3UWl4RlFVRmxMRzlDUVVGdlFrRXNSVUZCVHl4SFFVVnNSR3RDTEVWQlFVVlJMRk5CUVZNc1pVRkJaV1lzUzBGQlMwVXNTMEZETjBKakxFdEJRVXNzYzBKQlFYTkNhRUlzUzBGQlMxb3NVVUZCVVVrc1YwRkJWMUVzUzBGQlMwa3NVVUZCVVdFc1VVRkJVV3BDTEV0QlFVdEpMRkZCUVZGaExGRkJRVkVzU1VGQlNTeFBRVU5vUnpORUxFVkJRVXNzZFVKQlFYVkNMRXRCUXpWQ1J5eEZRVUZOTEdsQ1FVRnBRaXhKUVVONFFpeG5RMEZEUVhsRUxFMUJRVTBzWlVGQlpWWXNSVUZCU1N4WlFVRlpReXhGUVVGTkxGbEJRek5EVlN4SFFVRkhMR2RDUVVGcFFpeFRRVUZUUXl4SFFVTTNRaXhKUVVGSmVrTXNSVUZCUlRWQ0xFVkJRVVZwUkN4TlFVRk5ZU3hOUVVOWWJFTXNSMEZCUjI5Q0xFVkJRVXRZTEZGQlFWRkRMRTlCUTJ4Q1ZTeEZRVUZMYzBJc1ZVRkJWVEZETEVkQlFVY3NTMEZIY2tJc1NVRkJTVmtzUlVGQlQxTXNTMEZCUzFvc1VVRkJVVWNzVDBGRFdpeFRRVUZVUVN4SFFVRTBRaXhWUVVGVVFTeEhRVU55UW1kQ0xFVkJRVVZaTEVkQlFVY3NVVUZCVXl4WFFVTmljRUlzUlVGQlMzVkNMR2RDUVVkTExGTkJRVlF2UWl4SFFVRTBRaXhYUVVGVVFTeEhRVU55UW1kQ0xFVkJRVVZuUWl4UFFVRlBTaXhIUVVGSExGRkJRVk1zVTBGQlUwTXNSMEZITjBJc1QwRkdRVUVzUlVGQlNVa3NhMEpCUTBwNlFpeEZRVUZMZFVJc1pVRkRSU3hKUVVkVUxFMUJRMFFzVVVGRFEzUkNMRXRCUVV0VkxGVkJRVk1zUlVGRFpGWXNTMEZCUzFjc1UwRkJVMWdzUzBGQlMwa3NVVUZCVVhGQ0xFdEJRVXQ2UWl4TFFVRkxNRUlzWjBKQlEyNURReXhMUVVGTExHZENRVUZuUWl4UlFVTjJRak5DTEV0QlFVczBRaXhqUVVWUUxFZEJRVWMxUWl4TFFVRkxXaXhSUVVGUmVFSXNWVUZEV25sQ0xFZEJRMFpYTEV0QlFVczJRaXhoUVVGaGVFTXNSMEZGWmxjc1MwRkJTMW9zVVVGQlVUQkRMR2RDUVVGblFpeERRVU5vUXl4SlFVRkpia1FzUlVGQlNYRkNMRXRCUVV0YUxGRkJRVkV3UXl4bFFVTnlRaXhKUVVGTExFbEJRVWsxUkN4TFFVRkxVeXhGUVVOaWNVSXNTMEZCU3paQ0xHRkJRV0ZzUkN4RlFVRkZWQ3hOUVUxNFFuZEVMR0ZCUVdNc1YwRkRZaXhKUVVGSlN5eEZRVUZMTDBJc1MwRkJTME1zV1VGQldTdENMRXRCUVV0RExFbEJRVWxxUXl4TFFVRkxReXhoUVVOMlEybERMRVZCUVV0c1F5eExRVUZMV2l4UlFVTldLME1zUlVGQlQwUXNSVUZCUzNSRExGRkJRVkZhTEUxQlFVMHNTMEZGZGtKaUxFVkJRVVVzYzBKQlFYTkNXQ3hGUVVGSkxDdERRVU01UW5kRExFdEJRVXRWTEZOQlFWTXNOa0pCUVRaQ0xFbEJRVWtzVlVGRmRrTldMRXRCUVVzc1pVRkJaU3RDTEV0QlFWRXNOa1JCUldsQ1NTeEZRVUZQTEVWQlFVVktMRWRCUVUwc1QwRlZkRVVzVDBGVVIwY3NSVUZCUzNSRkxGVkJRMUJQTEVkQlFVY3NhVVJCUVdsRVowVXNSVUZCVHl4SFFVRkhMRkZCUlM5RWFFVXNSMEZCUnl4VFFVVkJLMFFzUlVGQlMzcERMRzFDUVVOUWRFSXNSMEZCUnpaQ0xFdEJRVXR2UXl4alFVRmpjRU1zUzBGQlMxb3NVVUZCVVVNc1QwRkJUMWNzUzBGQlMyOURMR05CUVdNc1MwRkZPVVJxUlN4SFFVRkhMRlZCU1VwcFJTeGpRVUZsTEZOQlFWTjZSQ3hIUVVOMlFpeEpRVUZKTmtJc1JVRkJTV3hFTEVWQlFVc3NiVUpCUVcxQ0xFZEJReTlDYlVRc1JVRkJUU3hIUVZkUUxFOUJWRWM1UWl4RlFXaEtUeXhqUVdsS1RrRXNSVUZEUmpaQ0xFZEJRVXNzYTBKQlJVeERMRVZCUVUwc2IwSkJRVzlDT1VJc1JVRkhNMEk0UWl4RlFVRk5MR1ZCUlVFc2VVUkJRMU5CTEVWQlFVMHNXVUZCV1VRc1JVRkJTU3hyUWtGRGNFTTNRaXhIUVVGSkxFbEJRVWtzYVVKQlIxZ3dSQ3hqUVVGbExGZEJRMlFzU1VGTFEyNUZMRVZCVEVkblJTeEZRVUZMYkVNc1MwRkJTMW9zVVVGRFlpdERMRVZCUVU5RUxFVkJRVXQwUXl4UlFVRlJXaXhOUVVGTkxFdEJRekZDYzBRc1JVRkJTU3dyUWtGRFNrTXNSVUZCU1dwR0xFVkJRVXNzZDBOQlFYZERMR2xDUVVOcVJHdEdMRVZCUVUwc2EwUkJSMGh5UlN4RlFVRkZMRFJDUVVFMFFsZ3NSVUZCU1N4TFFVRkxaMFlzUlVGQlRVd3NSVUZCVHl4SFFVRkhMR2xDUVVVelJDeEhRVUZKUkN4RlFVRkxOVU1zV1VGRFVpeEpRVUZMY0VJc1JVRkJSU3hGUVVGSGRVVXNSMEZCUjFBc1JVRkJTelZETEZsQlFWbHFRaXhQUVVGUFNDeEZRVUZGZFVVc1IwRkJSM1pGTEVsQlEzcERReXhIUVVGSGJVVXNSVUZCU1Vvc1JVRkJTelZETEZsQlFWbHdRaXhIUVVGSGNVVXNUVUZGZEVJc1EwRkhUaXhKUVVaQlJDeEhRVUZMTEVsQlJVUndSU3hGUVVGRkxFVkJRVVZCTEVWQlFVVXNSMEZCUjBFc1NVRkRXa01zUjBGQlIyMUZMRVZCUVVsNlJTeEZRVUZuUWtzc1IwRkJSM0ZGTEVWQlVUTkNMRWxCVGtGd1JTeEhRVUZITEZGQlEwTmlMRWxCUTBoaExFZEJRVWNzYlVOQlJVcEJMRWRCUVVjc2JVSkJSVU5FTEVWQlFVVXNSVUZCUlVFc1JVRkJSU3hIUVVGSFFTeEpRVU5hUXl4SFFVRkhiVVVzUlVGQlNYaEZMRVZCUVdWSkxFZEJRVWR4UlN4RlFVVXhRaXhKUVVGSkxFbEJRVWxITEVWQlFVVXNSVUZCUlVFc1JVRkJSU3hGUVVGRlFTeEpRVVZtTEVsQlJFRjJSU3hIUVVGSExIVkNRVU5EUkN4RlFVRkZMRVZCUVVWQkxFVkJRVVVzUjBGQlIwRXNTVUZEV2tNc1IwRkJSMjFGTEVWQlFVbDRSU3hGUVVGcFFpeEhRVUZHTkVVc1JVRkJTM2hGTEVkQlFVZHhSU3hGUVVsb1F5eEpRVVJCY0VVc1IwRkJSeXd5UWtGRFEwUXNSVUZCUlN4SFFVRkhRU3hGUVVGRkxFZEJRVWRCTEVsQlEySkRMRWRCUVVkdFJTeEZRVUZKZUVVc1JVRkJaVWtzUjBGQlIzRkZMRVZCVXpGQ0xFbEJVRUZ3UlN4SFFVRkhMRkZCUVZGeFJTeEZRVVZTVGl4RlFVRkxlRU1zYlVKQlExQjJRaXhIUVVGSExHdEVRVVZLUVN4SFFVRkhaMFVzUlVGQlR5eEhRVUZITEdsQ1FVVlVha1VzUlVGQlJTeEZRVUZGUVN4RlFVRkZMRWRCUVVkQkxFbEJRMXBETEVkQlFVZHRSU3hGUVVGSmRrVXNSVUZCWlVjc1IwRkJSM0ZGTEVWQlNUTkNMRTlCUkVGd1JTeEhRVUZITEdsQ1FVbEtkMFVzWTBGQlpTeFhRVk5rTEVsQlVrRXNTVUZCU1hwRkxFVkJRVWN3UlN4RlFVTk9UaXhGUVVGSkxHZERRVU5LUXl4RlFVRkpha1lzUlVGQlN5eDNRMEZCZDBNc2FVSkJRMnBFZFVZc1JVRkJVeXcyUWtGQk5rSnlSaXhGUVVGSkxGTkJSM1pEVnl4RlFVRkZMRGhDUVVWRmRVVXNSVUZCUlN4RlFVRkZTU3hGUVVGTE9VVXNSVUZCVlVzc1QwRkJUM0ZGTEVWQlFVVkpMRVZCUVV0S0xFbEJRVWtzUTBGRE5VTjJSU3hIUVVGSE1FVXNSVUZEU0N4SlFVRkpMMFFzUlVGQlIyUXNSVUZCVlRCRkxFZEJRMnBDTEVsQlFVbDRSU3hGUVVGRkxFVkJRVVV3UlN4RlFVRkxPVVFzUlVGQlIxUXNUMEZCVDBnc1JVRkJSVEJGTEVWQlFVc3hSU3hKUVVNM1FrTXNSMEZCUjIxRkxFVkJRVWw0UkN4RlFVRkhXaXhIUVVGSGNVVXNSVUZGWkhCRkxFZEJWbE1zWjBKQldWWkJMRWRCUVVjc2VVSkJSVWdzU1VGQlNUUkZMRVZCUVVjc1IwRkZVQ3hKUVVSQk5VVXNSMEZCUnpCRkxFVkJRME16UlN4RlFVRkZMRWxCUVVsQkxFVkJRVVVzUjBGQlIwRXNSMEZCUnl4SFFVTnFRa01zUjBGQlIyMUZMRVZCUVVrM1JDeEZRVUZUVUN4SFFVRkhjVVVzUlVGRmJrSlJMRWRCUVVsVUxFVkJRVWszUkN4RlFVUlNVQ3hIUVVGSExFbEJRMmxDY1VVc1JVRkhja0lzVDBGRVFYQkZMRWRCY2tKVkxHZENRWEZDUlRCRkxFVkJRVk5GTEVWQmNrSllMSFZDUVhsQ1dFTXNaVUZCWjBJc1UwRkJVME1zUjBGRGVFSXNSMEZCUjJwRUxFdEJRVXRITEZOQlFWTXNRMEZEYUVJc1NVRkJTU3RETEVWQlEwaERMRVZCUTBGRExFVkJRMEZzUWl4RlFVRkxiRU1zUzBGQlMxb3NVVUZEVml0RExFVkJRVTlFTEVWQlFVdDBReXhSUVVGUldpeE5RVUZOTEV0QlF6TkNMRWRCUVVkcVF5eEZRVUZGYTBjc1IwRkJUVWtzVTBGQlV5eFpRVUZaTEVOQlJTOUNMRWxCUVVsc1JpeEZRVUZGTEdkRlFVTk1aMFVzUlVGQlR5eEhRVUZITEdsRVFVVllMRWRCUVc5Q0xFbEJRV3BDZGtVc1JVRkJVVk1zVDBGRFZrWXNSMEZCUnl4WlFVRlpaMFVzUlVGQlR5eEhRVUZITEZsQlJYcENMRWxCUVVrc1NVRkJTV3BGTEVWQlFVVk9MRVZCUVZGVExFOUJRVThzUlVGQlJVZ3NSMEZCUnl4RlFVRkZRU3hKUVVOU0xFbEJRWEJDVGl4RlFVRlJUU3hIUVVGSFJ5eFBRVU5XTmtRc1JVRkJTM2hETEcxQ1FVTlFka0lzUjBGQlJ5eDFRMEZIU2tFc1IwRkJSeXhuUTBGQlowTlFMRVZCUVZGTkxFZEJRVWNzVjBGSmFrUkRMRWRCUVVjc1UwRkRTQ3RGTEVkQlFVdHNSQ3hMUVVGTFF5eFpRVU5XYTBRc1JVRkJVV2hHTEVWQlExSnBSaXhGUVVGTmFrSXNSVUZCVHl4UlFVZFdia01zUzBGQlMwTXNXVUZCV1N4SFFVTnVRbWxFTEVkQlFVdHNSQ3hMUVVGTFF5eFpRVU5XUkN4TFFVRkxWeXhUUVVGVE1rTXNTMEZCU3l4aFFVRmhReXhSUVVWb1Ewd3NSVUZCZFVJc1IwRkJiRUpzUkN4TFFVRkxReXhaUVVGblFpeEZRVUZGTEVWQlJUZENhMFFzUlVGQlVXNUVMRXRCUVVzc1pVRkJaV3RFTEV0QlF6VkNSU3hGUVVGTmFrSXNSVUZCVDJVc1JVRkJTU3hIUVVOcVFteEVMRXRCUVV0RExGbEJRVmxwUkN4RlFVVnNRbXhFTEV0QlFVdERMRmxCUVZscFJDeEZRVU5xUWl4SlFVRkpNME1zUlVGQlJWQXNTMEZCUzFjc1UwRkJVekpETEV0QlFVc3NZVUZEZGtKRkxFOUJRVTh2UWl4TFFVRkxNRUlzUjBGQlUwMHNUVUZEY2tKRExGZEJRVmRETEVkQlFVY3NSMEZCUjJ4RExFdEJRVXN5UWl4SFFVTnlRa1lzUlVGQlNTeEhRVU5PTTBNc1JVRkJSV2RDTEU5QlFVOXhReXhUUVV0YVF5eHhRa0ZCYzBJc1YwRkhja0lzU1VGR1FTeEpRVUZKUXl4RlFVRkxPVVFzUzBGQlMwa3NVVUZEWW14RExFVkJRVWtzUlVGRFV5eFBRVUZRTkVZc1IwRkJaVFZHTEVWQlFVa3NTMEZCU3l4RFFVVTVRaXhIUVVFd1FpeFhRVUYwUWpSR0xFVkJRVWQwUkN4SlFVRkpMRmxCUVRCQ0xFTkJRM0JETEVsQlFVbDFSQ3hGUVVGUEwwUXNTMEZCUzFjc1UwRkJVM0ZFTEZOQlFWTkRMRWxCUVUxcVJTeExRVUZMVnl4VFFVRlRkVVFzVTBGRGNrUkRMRVZCUVZGTUxFVkJRVWRGTEZOQlFWTkRMRWxCUVUxSUxFVkJRVWRKTEZOQlF6ZENSQ3hGUVVGTmFrVXNTMEZCUzFjc1UwRkJVM0ZFTEZOQlFWTkRMRWxCUVUxcVJTeExRVUZMVnl4VFFVRlRkVVFzVTBGQlYyeEZMRXRCUVV0SkxGRkJRVkZuUlN4alFVTjZSVU1zUlVGQlQxQXNSVUZCUjBVc1UwRkJVME1zU1VGRFZrWXNSVUZCVDBrc1IwRkJVMFlzUlVGQlRVa3NSVUZGTDBKeVJTeExRVUZMVnl4VFFVRlRTQ3hMUVVGTk9FUXNUMEZCVVhSRkxFdEJRVXRKTEZGQlFWRm5SU3hqUVVGakxFOUJSWFpFY0VVc1MwRkJTMWNzVTBGQlUwZ3NTMEZCVFRoRUxFOUJRVkVzVTBGRk4wSXNUVUZGUkN4SFFVRnhRaXhSUVVGcVFsSXNSVUZCUnl4SFFVRkhlRVFzVVVGQmJVSXNUVUZEZUVKM1JDeEZRVUZMUVN4RlFVRkhVeXhsUVVOaWNrY3NUVUZKUm05RUxGbEJRV0VzVjBGRFdpeEhRVUZIZEVJc1MwRkJTMGNzVjBGRFVFZ3NTMEZCUzBnc1UwRkJVU3hGUVVOaU9VTXNSVUZCUlN4blFrRkJaMEo1U0N4SlFVRkpMRWxCUVVsNFJTeExRVUZMUlN4TFFVRkxkVVVzV1VGQldTeGxRVU0zUWl4UFFVRm9RbnBGTEV0QlFVdFhMRlZCUVdkQ0xFTkJRM1pDV0N4TFFVRkxWeXhUUVVGVFdDeExRVUZMU1N4UlFVRlJiVUlzVDBGRGVrSk1MRTFCUVUxc1FpeExRVUZMTUVJc1owSkJRV2RDU0N4UFFVTXpRa29zUjBGQlJ5eFJRVUZSTEZOQlFWTkRMRWRCUlhCQ0xFOUJSRUZCTEVWQlFVbEpMRzFDUVVOSExFbEJSVlI0UWl4TFFVRkxORUlzWTBGRFRDeEpRVUZKTjBJc1JVRkJTME1zUzBGRFRrRXNTMEZCUzFVc1YwRkRVRllzUzBGQlN6WkVMSFZDUVVOTU9VY3NSVUZCUlRKSUxGTkJRVk5ETEUxQlFVMTRSQ3hIUVVGSExGTkJRVk53UWl4RlFVRkxSeXhKUVVGTExGTkJRVk5yUWl4SFFVTTFRMEVzUlVGQlNYZEVMRkZCUVZFM1JTeEZRVUZMU3l4UlFVRlJReXhKUVVGSkxFbEJReTlDVGl4RlFVRkxPRVVzWjBKQlJVb3hSQ3hIUVVGSExGTkJRVk53UWl4RlFVRkxSeXhKUVVGTExGTkJRVk5yUWl4SFFVTm9RaXhMUVVGa1FTeEZRVUZKTUVRc1UwRkRUaTlGTEVWQlFVczRSU3hwUWtGTlZpeFBRVUZQTjBVc1RVRkhValpGTEZsQlFXRXNWMEZEV2l4SFFVRkhOMFVzUzBGQlMxVXNWVUZCV1ZZc1MwRkJTMWNzVTBGQlV5eERRVU5xUXpWRUxFVkJRVVV5U0N4VFFVRlRReXhOUVVGTlNTeEpRVUZKTEZOQlFWTXZSU3hMUVVGTFJTeExRVU51UXl4SlFVRkpTQ3hGUVVGTFF5eExRVU5VUVN4TFFVRkxWeXhUUVVGVGIwVXNTVUZCU1N4clFrRkJiVUlzZFVKQlEyNURReXhSUVVGUkxGZEJRMUpxUml4RlFVRkxXU3hUUVVGVGMwVXNVMEZEWkd4R0xFVkJRVXRaTEZOQlFWTmFMRVZCUVV0dFJpeE5RVUZOTEU5QlJYcENOVUlzUzBGQlN5eGxRVUZsZVVJc1NVRkJTU3hUUVVVelFpeFBRVUZQTDBVc1RVRkhValJDTEZsQlFXRXNWMEZEV2l4SlFVRkpOMElzUlVGQlMwTXNTMEZEVW10RExFVkJRVXRzUXl4TFFVRkxXaXhSUVVOV0swWXNSVUZCUjI1R0xFdEJRVXRYTEZOQlFWTXlReXhMUVVGTExHbENRVU4wUWpoQ0xFVkJRVWxzUkN4RlFVRkxkRVVzVVVGQlVTeHZRa0ZCYjBJc1MwRkZia056UlN4RlFVRkxlRU1zYlVKQlExQXdSaXhIUVVGTExIRkNRVVZPY0VZc1MwRkJTM0ZHTEU5QlFVOUdMRVZCUVVkNFFpeEhRVUZITEVkQlFVZEVMRmRCUVZkRExFZEJRVWNzUjBGRGJrTXpSQ3hMUVVGTGMwWXNUMEZCVDBnc1JVRkJSM2hDTEVkQlFVY3NSMEZCUjBRc1YwRkJWME1zUjBGQlJ5eEhRVU51UXpORUxFdEJRVXRYTEZOQlEwaFJMRWRCUVVjc1VVRkJVMmxGTEVWQlFVc3NVMEZCVTJoRkxFZEJRekZDTEVkQlFVZHlRaXhGUVVGTFNTeFRRVUZUTEVOQlEyaENMRWxCUVVsdlJpeEZRVUZOZUVrc1JVRkJSV2xFTEUxQlExcEVMRVZCUVV0elFpeFZRVUZWYTBVc1JVRkJUV3hETEZOQlFWTXNiVUpCZUZoMlFpeFpRWGRZY1VRelJTeEZRVUZQTmtjc1JVRkJUVFZFTEV0QlFVc3NVMEZCVXpWRExGVkJRVlVzVFVGRGFrZG5RaXhGUVVGTFJpeFRRVUZSTEV0QlIyUnpRaXhIUVVGSExGbEJRV0ZwUlN4RlFVRkxMRk5CUVZOb1JTeEhRVU01UWl4SFFVRkhja0lzUlVGQlMwa3NVMEZCVXl4RFFVTm9RaXhKUVVGSmIwWXNSVUZCVFhoSkxFVkJRVVZwUkN4TlFVTllja0lzUlVGQlJUUkhMRVZCUVUxc1F5eFRRVUZUTEcxQ1FTOVlXQ3haUVN0WWVVTXpSU3hGUVVGUE5rY3NSVUZCVFRWRUxFdEJRVXNzVTBGQlV6VkRMRlZCUVZVc1MwRkRiRVpuUWl4RlFVRkxXQ3hSUVVGUlN5eHJRa0ZEWmswc1JVRkJTM2xHTEdGQlFXRTNSeXhGUVVGRkxFZEJSV3hDYjBJc1JVRkJTMFlzVTBGRFVFVXNSVUZCUzBzc1VVRkJVWEZHTEZGQlFWRXNhMEpCUVcxQ09VY3NUVUZKTVVNeVJTeExRVUZMTEdWQlFXVnVReXhIUVVGSExGRkJRVk1zVjBGRGFFTndRaXhGUVVGTGFVUXNaVUZCWldoRUxGTkJTWFpDWVN4SlFVRkxMRk5CUVZNMlJTeEhRVU5pTEZsQlFXdENMRWxCUVZCQkxFVkJRMGd4Uml4TFFVRkxXaXhSUVVGUlF5eFBRVVZ3UWxjc1MwRkJTM0ZDTEZWQlFWVnhSU3hIUVVOU01VWXNUMEZKVkhGQ0xGVkJRVmNzVTBGQlV6RkRMRVZCUVVkblNDeEhRVU4wUW1oSUxFVkJRVWxCTEVWQlFVVnBTQ3hSUVVGUkxFdEJRVXNzU1VGRGJrSTFSaXhMUVVGTFdpeFJRVUZSUXl4TlFVRk5WaXhGUVVOb1FuRkNMRXRCUVV0VkxGVkJRMGhwUml4SFFVTklNMFlzUzBGQlN6WkZMR05CUlU0M1JTeExRVUZMTmtZc1lVRkJZVGRHTEV0QlFVdEpMRkZCUVZGVExFbEJRVWxzUXl4SFFVRkhiVU1zVTBGQlUxTXNUMEZCVVRWRExFbEJSWFpFY1VJc1MwRkJTM2RHTEdGQlFXRTNSeXhGUVVGRkxFZEJSV3hDY1VJc1MwRkJTMW9zVVVGQlVYaENMRk5CUVZkdlF5eExRVUZMUXl4WlFVRlpMRWRCUXpORFJDeExRVUZMTmtJc1lVRkJZV3hFTEVkQlJXNUNjVUlzUzBGQlMwa3NVVUZCVVhGR0xGRkJRVkVzWlVGQlowSTVSeXhKUVVkMFF6WkhMR0ZCUVdNc1UwRkJVemRITEVWQlFVZDFSU3hIUVVONlFpeEpRVUZKTkVNc1JVRkJTemxHTEV0QlFVc3NVVUZCVVd0RUxFZEJRM1JDYkVRc1MwRkJTelpHTEdGQlFXRkRMRVZCUVUxdVNDeEhRVU40UW0xSUxFVkJRVXQyUlN4UFFVRlBSU3hMUVVGTE9VTXNTVUZIYkVKclNDeGhRVUZqTEZOQlFWTkRMRVZCUVUxdVNDeEhRVGRoYkVJc1kwRTRZVkJCTEVWQlEwWnRTQ3hGUVVGTEwwVXNVMEZCVXl4dFFrRkRXbWRHTEZkQlFWY3NVMEZGWWtRc1JVRkJTMFVzV1VGQldTeHRRa0ZEWm5KRkxFdEJRVXNzVVVGQlVTeHZRa0ZCYjBKb1JDeEpRVWx5UTNOSUxGZEJRVmtzVTBGQlUwTXNSVUZCUzFJc1IwRkRha0lzVTBGQlRGRXNSVUZEUm14SExFdEJRVXR4UWl4VlFVRlZjVVVzUjBGQlR5eEhRVVYwUWpGR0xFdEJRVXRhTEZGQlFWRTRSeXhIUVVGTFVpeEhRVWx3UWpkRUxHRkJRV01zVTBGQlUyeEVMRWRCUjNSQ0xFbEJSa0VzU1VGQlNXbEZMRVZCUVV0b1JpeEZRVUZSVXl4UFFVVlVTQ3hGUVVGRkxFVkJRVVZCTEVWQlFVVXdSU3hGUVVGTE1VVXNTVUZEYkVJc1IwRkJSMU1zUjBGQlIyWXNSVUZCVVUwc1IwRkRZaXhQUVVsRE1FVXNSVUZCU3l4SlFVTlFhRVlzUlVGQlVYVkpMRkZCUjFSMlNTeEZRVUZSZDBrc1MwRkJTM3BJTEVsQlIyUXdTQ3hOUVVGUExGZEJRMDV5Unl4TFFVRkxOa1VzWTBGQlkyaEZMRWxCUVVrc1MwRkhlRUo1Uml4UFFVRlJMRmRCUTFBc1NVRkJTUzlHTEVWQlFVVlFMRXRCUVV0SkxGRkJZMWdzVDBGaVIwb3NTMEZCUzFVc1UwRkRVRWdzUlVGQlJYZEdMRmRCUVZjc1dVRkZZbmhHTEVWQlFVVkRMRXRCUTBRclJpeFJRVUZYTEVsQlExaERMR2xDUVVGclFpeFRRVWRMTEZWQlFYUkNlRWNzUzBGQlMxb3NVVUZCVVVjc1VVRkRabE1zUzBGQlMwa3NVVUZCVVcxQ0xFOUJRVTlTTEZOQlFWTXNaVUZGT1VKU0xFVkJRVVYzUml4WFFVRlhMR2xDUVVOaUwwWXNTMEZCUzBjc1ZVRkJVeXhGUVVOUVNDeE5RVWRTZVVjc1VVRkJVeXhYUVVOU0xFbEJRVWxzUnl4RlFVRkZVQ3hMUVVGTFNTeFJRV1ZZTEU5QlpFZEtMRXRCUVV0VkxGTkJRMUJJTEVWQlFVVnZRaXhMUVVGTExGZEJRVmtzWVVGRmJrSXpRaXhMUVVGTE5rVXNZMEZEVEhSRkxFVkJRVVZETEV0QlEwUXJSaXhSUVVGWExFMUJRMWhETEdsQ1FVRnJRaXhWUVVkTExGVkJRWFJDZUVjc1MwRkJTMW9zVVVGQlVVY3NVVUZEWmxNc1MwRkJTMGtzVVVGQlVXMUNMRTlCUVU5NVJTeFpRVUZaTEdWQlJXcERla1lzUlVGQlJXOUNMRXRCUVVzc1owSkJRV2RDTEZGQlEzWkNNMElzUzBGQlMwY3NWVUZCVXl4RlFVTlFTQ3hOUVVkU01FY3NWMEZCV1N4WFFVTllMRTlCUVZFeFJ5eExRVUZMUnl4VlFVZGtkMGNzVVVGQlV5eFhRVU5TTlVvc1JVRkJSVEpJTEZOQlFWTkRMRTFCUVUxSkxFbEJRVWtzVTBGQlV5OUZMRXRCUVV0RkxFdEJRMmhEUml4TFFVRkxWeXhYUVVOUVdDeExRVUZMVnl4VFFVRlRiMFVzU1VGQlNTeHJRa0ZCYlVJc2MwTkJRMjVEZWtJc1MwRkJTeXhsUVVGbGVVSXNTVUZCU1N4VFFVTjJRaTlGTEV0QlFVdFZMRlZCUTFCV0xFdEJRVXRYTEZOQlFWTnpSU3hUUVVWbWFrWXNTMEZCUzFjc1UwRkJVMWdzUzBGQlMydEdMRTFCUVUwc1RVRkZka0pzUml4TFFVRkxWU3hWUVVOUVZpeExRVUZMU1N4UlFVTkliVUlzVDBGQlQzZEVMRWxCUVVrc1UwRkJVMFVzVTBGRGNFSjRRaXhOUVVGTmMwSXNTVUZCU1N4VFFVRlROa0lzVTBGRmRFSTFSeXhMUVVGTFNTeFJRVUZSTkVZc1dVRkJXU3hsUVVGbGFFY3NTMEZCU3paSExFbEJRVWxETEZGQlEycEVMMG9zUlVGQlJXZExMRTlCUVU5RExGVkJRVlZNTEZGQlFWRk5MRXRCUVV0cVNDeFRRVEZwUW14RExFTkJLMmxDUjJ0SUlpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDI1dlpHVmZiVzlrZFd4bGN5OWxkbTlzTFdOdmJHOXljR2xqYTJWeUwycHpMMlYyYjJ3dFkyOXNiM0p3YVdOclpYSXVhbk1pZlE9PSIsIiFmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1mdW5jdGlvbihlLHIpe3ZhciB0PW5ldyBFcnJvcihlK1wiIGF0IGNoYXJhY3RlciBcIityKTt0aHJvdyB0LmluZGV4PXIsdC5kZXNjcmlwdGlvbj1lLHR9LHQ9e1wiLVwiOiEwLFwiIVwiOiEwLFwiflwiOiEwLFwiK1wiOiEwfSxuPXtcInx8XCI6MSxcIiYmXCI6MixcInxcIjozLFwiXlwiOjQsXCImXCI6NSxcIj09XCI6NixcIiE9XCI6NixcIj09PVwiOjYsXCIhPT1cIjo2LFwiPFwiOjcsXCI+XCI6NyxcIjw9XCI6NyxcIj49XCI6NyxcIjw8XCI6OCxcIj4+XCI6OCxcIj4+PlwiOjgsXCIrXCI6OSxcIi1cIjo5LFwiKlwiOjEwLFwiL1wiOjEwLFwiJVwiOjEwfSxvPWZ1bmN0aW9uKGUpe3ZhciByLHQ9MDtmb3IodmFyIG4gaW4gZSkocj1uLmxlbmd0aCk+dCYmZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHQ9cik7cmV0dXJuIHR9LGk9byh0KSxhPW8obiksdT17dHJ1ZTohMCxmYWxzZTohMSxudWxsOm51bGx9LHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fDB9LHA9ZnVuY3Rpb24oZSxyLHQpe3JldHVybnt0eXBlOlwifHxcIj09PWV8fFwiJiZcIj09PWU/XCJMb2dpY2FsRXhwcmVzc2lvblwiOlwiQmluYXJ5RXhwcmVzc2lvblwiLG9wZXJhdG9yOmUsbGVmdDpyLHJpZ2h0OnR9fSxmPWZ1bmN0aW9uKGUpe3JldHVybiBlPj00OCYmZTw9NTd9LGM9ZnVuY3Rpb24oZSl7cmV0dXJuIDM2PT09ZXx8OTU9PT1lfHxlPj02NSYmZTw9OTB8fGU+PTk3JiZlPD0xMjJ8fGU+PTEyOCYmIW5bU3RyaW5nLmZyb21DaGFyQ29kZShlKV19LGw9ZnVuY3Rpb24oZSl7cmV0dXJuIDM2PT09ZXx8OTU9PT1lfHxlPj02NSYmZTw9OTB8fGU+PTk3JiZlPD0xMjJ8fGU+PTQ4JiZlPD01N3x8ZT49MTI4JiYhbltTdHJpbmcuZnJvbUNoYXJDb2RlKGUpXX0sZD1mdW5jdGlvbihlKXtmb3IodmFyIG8sZCxoPTAsdj1lLmNoYXJBdCx4PWUuY2hhckNvZGVBdCx5PWZ1bmN0aW9uKHIpe3JldHVybiB2LmNhbGwoZSxyKX0sbT1mdW5jdGlvbihyKXtyZXR1cm4geC5jYWxsKGUscil9LGI9ZS5sZW5ndGgsRT1mdW5jdGlvbigpe2Zvcih2YXIgZT1tKGgpOzMyPT09ZXx8OT09PWV8fDEwPT09ZXx8MTM9PT1lOyllPW0oKytoKX0sZz1mdW5jdGlvbigpe3ZhciBlLHQsbj13KCk7cmV0dXJuIEUoKSw2MyE9PW0oaCk/bjooaCsrLChlPWcoKSl8fHIoXCJFeHBlY3RlZCBleHByZXNzaW9uXCIsaCksRSgpLDU4PT09bShoKT8oaCsrLCh0PWcoKSl8fHIoXCJFeHBlY3RlZCBleHByZXNzaW9uXCIsaCkse3R5cGU6XCJDb25kaXRpb25hbEV4cHJlc3Npb25cIix0ZXN0Om4sY29uc2VxdWVudDplLGFsdGVybmF0ZTp0fSk6dm9pZCByKFwiRXhwZWN0ZWQgOlwiLGgpKX0sQz1mdW5jdGlvbigpe0UoKTtmb3IodmFyIHI9ZS5zdWJzdHIoaCxhKSx0PXIubGVuZ3RoO3Q+MDspe2lmKG4uaGFzT3duUHJvcGVydHkocikpcmV0dXJuIGgrPXQscjtyPXIuc3Vic3RyKDAsLS10KX1yZXR1cm4hMX0sdz1mdW5jdGlvbigpe3ZhciBlLHQsbixvLGksYSx1LGY7aWYoYT1PKCksISh0PUMoKSkpcmV0dXJuIGE7Zm9yKGk9e3ZhbHVlOnQscHJlYzpzKHQpfSwodT1PKCkpfHxyKFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBhZnRlciBcIit0LGgpLG89W2EsaSx1XTsodD1DKCkpJiYwIT09KG49cyh0KSk7KXtmb3IoaT17dmFsdWU6dCxwcmVjOm59O28ubGVuZ3RoPjImJm48PW9bby5sZW5ndGgtMl0ucHJlYzspdT1vLnBvcCgpLHQ9by5wb3AoKS52YWx1ZSxhPW8ucG9wKCksZT1wKHQsYSx1KSxvLnB1c2goZSk7KGU9TygpKXx8cihcIkV4cGVjdGVkIGV4cHJlc3Npb24gYWZ0ZXIgXCIrdCxoKSxvLnB1c2goaSxlKX1mb3IoZT1vW2Y9by5sZW5ndGgtMV07Zj4xOyllPXAob1tmLTFdLnZhbHVlLG9bZi0yXSxlKSxmLT0yO3JldHVybiBlfSxPPWZ1bmN0aW9uKCl7dmFyIHIsbixvO2lmKEUoKSxyPW0oaCksZihyKXx8NDY9PT1yKXJldHVybiBVKCk7aWYoMzk9PT1yfHwzND09PXIpcmV0dXJuIGsoKTtpZig5MT09PXIpcmV0dXJuIFMoKTtmb3Iobz0obj1lLnN1YnN0cihoLGkpKS5sZW5ndGg7bz4wOyl7aWYodC5oYXNPd25Qcm9wZXJ0eShuKSlyZXR1cm4gaCs9byx7dHlwZTpcIlVuYXJ5RXhwcmVzc2lvblwiLG9wZXJhdG9yOm4sYXJndW1lbnQ6TygpLHByZWZpeDohMH07bj1uLnN1YnN0cigwLC0tbyl9cmV0dXJuISghYyhyKSYmNDAhPT1yKSYmQSgpfSxVPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQsbj1cIlwiO2YobShoKSk7KW4rPXkoaCsrKTtpZig0Nj09PW0oaCkpZm9yKG4rPXkoaCsrKTtmKG0oaCkpOyluKz15KGgrKyk7aWYoXCJlXCI9PT0oZT15KGgpKXx8XCJFXCI9PT1lKXtmb3Iobis9eShoKyspLFwiK1wiIT09KGU9eShoKSkmJlwiLVwiIT09ZXx8KG4rPXkoaCsrKSk7ZihtKGgpKTspbis9eShoKyspO2YobShoLTEpKXx8cihcIkV4cGVjdGVkIGV4cG9uZW50IChcIituK3koaCkrXCIpXCIsaCl9cmV0dXJuIHQ9bShoKSxjKHQpP3IoXCJWYXJpYWJsZSBuYW1lcyBjYW5ub3Qgc3RhcnQgd2l0aCBhIG51bWJlciAoXCIrbit5KGgpK1wiKVwiLGgpOjQ2PT09dCYmcihcIlVuZXhwZWN0ZWQgcGVyaW9kXCIsaCkse3R5cGU6XCJMaXRlcmFsXCIsdmFsdWU6cGFyc2VGbG9hdChuKSxyYXc6bn19LGs9ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1cIlwiLG49eShoKyspLG89ITE7aDxiOyl7aWYoKGU9eShoKyspKT09PW4pe289ITA7YnJlYWt9aWYoXCJcXFxcXCI9PT1lKXN3aXRjaChlPXkoaCsrKSl7Y2FzZVwiblwiOnQrPVwiXFxuXCI7YnJlYWs7Y2FzZVwiclwiOnQrPVwiXFxyXCI7YnJlYWs7Y2FzZVwidFwiOnQrPVwiXFx0XCI7YnJlYWs7Y2FzZVwiYlwiOnQrPVwiXFxiXCI7YnJlYWs7Y2FzZVwiZlwiOnQrPVwiXFxmXCI7YnJlYWs7Y2FzZVwidlwiOnQrPVwiXFx2XCI7YnJlYWs7ZGVmYXVsdDp0Kz1lfWVsc2UgdCs9ZX1yZXR1cm4gb3x8cignVW5jbG9zZWQgcXVvdGUgYWZ0ZXIgXCInK3QrJ1wiJyxoKSx7dHlwZTpcIkxpdGVyYWxcIix2YWx1ZTp0LHJhdzpuK3Qrbn19LEw9ZnVuY3Rpb24oKXt2YXIgdCxuPW0oaCksbz1oO2ZvcihjKG4pP2grKzpyKFwiVW5leHBlY3RlZCBcIit5KGgpLGgpO2g8YiYmKG49bShoKSxsKG4pKTspaCsrO3JldHVybiB0PWUuc2xpY2UobyxoKSx1Lmhhc093blByb3BlcnR5KHQpP3t0eXBlOlwiTGl0ZXJhbFwiLHZhbHVlOnVbdF0scmF3OnR9OlwidGhpc1wiPT09dD97dHlwZTpcIlRoaXNFeHByZXNzaW9uXCJ9Ont0eXBlOlwiSWRlbnRpZmllclwiLG5hbWU6dH19LGo9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4sbz1bXSxpPSExO2g8Yjspe2lmKEUoKSwodD1tKGgpKT09PWUpe2k9ITAsaCsrO2JyZWFrfTQ0PT09dD9oKys6KChuPWcoKSkmJlwiQ29tcG91bmRcIiE9PW4udHlwZXx8cihcIkV4cGVjdGVkIGNvbW1hXCIsaCksby5wdXNoKG4pKX1yZXR1cm4gaXx8cihcIkV4cGVjdGVkIFwiK1N0cmluZy5mcm9tQ2hhckNvZGUoZSksaCksb30sQT1mdW5jdGlvbigpe3ZhciBlLHQ7Zm9yKHQ9NDA9PT0oZT1tKGgpKT9QKCk6TCgpLEUoKSxlPW0oaCk7NDY9PT1lfHw5MT09PWV8fDQwPT09ZTspaCsrLDQ2PT09ZT8oRSgpLHQ9e3R5cGU6XCJNZW1iZXJFeHByZXNzaW9uXCIsY29tcHV0ZWQ6ITEsb2JqZWN0OnQscHJvcGVydHk6TCgpfSk6OTE9PT1lPyh0PXt0eXBlOlwiTWVtYmVyRXhwcmVzc2lvblwiLGNvbXB1dGVkOiEwLG9iamVjdDp0LHByb3BlcnR5OmcoKX0sRSgpLDkzIT09KGU9bShoKSkmJnIoXCJVbmNsb3NlZCBbXCIsaCksaCsrKTo0MD09PWUmJih0PXt0eXBlOlwiQ2FsbEV4cHJlc3Npb25cIixhcmd1bWVudHM6aig0MSksY2FsbGVlOnR9KSxFKCksZT1tKGgpO3JldHVybiB0fSxQPWZ1bmN0aW9uKCl7aCsrO3ZhciBlPWcoKTtpZihFKCksNDE9PT1tKGgpKXJldHVybiBoKyssZTtyKFwiVW5jbG9zZWQgKFwiLGgpfSxTPWZ1bmN0aW9uKCl7cmV0dXJuIGgrKyx7dHlwZTpcIkFycmF5RXhwcmVzc2lvblwiLGVsZW1lbnRzOmooOTMpfX0sQj1bXTtoPGI7KTU5PT09KG89bShoKSl8fDQ0PT09bz9oKys6KGQ9ZygpKT9CLnB1c2goZCk6aDxiJiZyKCdVbmV4cGVjdGVkIFwiJyt5KGgpKydcIicsaCk7cmV0dXJuIDE9PT1CLmxlbmd0aD9CWzBdOnt0eXBlOlwiQ29tcG91bmRcIixib2R5OkJ9fTtpZihkLnZlcnNpb249XCIwLjMuM1wiLGQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkphdmFTY3JpcHQgRXhwcmVzc2lvbiBQYXJzZXIgKEpTRVApIHZcIitkLnZlcnNpb259LGQuYWRkVW5hcnlPcD1mdW5jdGlvbihlKXtyZXR1cm4gaT1NYXRoLm1heChlLmxlbmd0aCxpKSx0W2VdPSEwLHRoaXN9LGQuYWRkQmluYXJ5T3A9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gYT1NYXRoLm1heChlLmxlbmd0aCxhKSxuW2VdPXIsdGhpc30sZC5hZGRMaXRlcmFsPWZ1bmN0aW9uKGUscil7cmV0dXJuIHVbZV09cix0aGlzfSxkLnJlbW92ZVVuYXJ5T3A9ZnVuY3Rpb24oZSl7cmV0dXJuIGRlbGV0ZSB0W2VdLGUubGVuZ3RoPT09aSYmKGk9byh0KSksdGhpc30sZC5yZW1vdmVBbGxVbmFyeU9wcz1mdW5jdGlvbigpe3JldHVybiB0PXt9LGk9MCx0aGlzfSxkLnJlbW92ZUJpbmFyeU9wPWZ1bmN0aW9uKGUpe3JldHVybiBkZWxldGUgbltlXSxlLmxlbmd0aD09PWEmJihhPW8obikpLHRoaXN9LGQucmVtb3ZlQWxsQmluYXJ5T3BzPWZ1bmN0aW9uKCl7cmV0dXJuIG49e30sYT0wLHRoaXN9LGQucmVtb3ZlTGl0ZXJhbD1mdW5jdGlvbihlKXtyZXR1cm4gZGVsZXRlIHVbZV0sdGhpc30sZC5yZW1vdmVBbGxMaXRlcmFscz1mdW5jdGlvbigpe3JldHVybiB1PXt9LHRoaXN9LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBleHBvcnRzKXt2YXIgaD1lLmpzZXA7ZS5qc2VwPWQsZC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuanNlcD09PWQmJihlLmpzZXA9aCksZH19ZWxzZVwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP2V4cG9ydHM9bW9kdWxlLmV4cG9ydHM9ZDpleHBvcnRzLnBhcnNlPWR9KHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1welpYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtOXZkQ0lzSW5Sb2NtOTNSWEp5YjNJaUxDSnRaWE56WVdkbElpd2lhVzVrWlhnaUxDSmxjbkp2Y2lJc0lrVnljbTl5SWl3aVpHVnpZM0pwY0hScGIyNGlMQ0oxYm1GeWVWOXZjSE1pTENJdElpd2lJU0lzSW40aUxDSXJJaXdpWW1sdVlYSjVYMjl3Y3lJc0lueDhJaXdpSmlZaUxDSjhJaXdpWGlJc0lpWWlMQ0k5UFNJc0lpRTlJaXdpUFQwOUlpd2lJVDA5SWl3aVBDSXNJajRpTENJOFBTSXNJajQ5SWl3aVBEd2lMQ0krUGlJc0lqNCtQaUlzSWlvaUxDSXZJaXdpSlNJc0ltZGxkRTFoZUV0bGVVeGxiaUlzSW05aWFpSXNJbXhsYmlJc0ltMWhlRjlzWlc0aUxDSnJaWGtpTENKc1pXNW5kR2dpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW0xaGVGOTFibTl3WDJ4bGJpSXNJbTFoZUY5aWFXNXZjRjlzWlc0aUxDSnNhWFJsY21Gc2N5SXNJblJ5ZFdVaUxDSm1ZV3h6WlNJc0ltNTFiR3dpTENKaWFXNWhjbmxRY21WalpXUmxibU5sSWl3aWIzQmZkbUZzSWl3aVkzSmxZWFJsUW1sdVlYSjVSWGh3Y21WemMybHZiaUlzSW05d1pYSmhkRzl5SWl3aWJHVm1kQ0lzSW5KcFoyaDBJaXdpZEhsd1pTSXNJbWx6UkdWamFXMWhiRVJwWjJsMElpd2lZMmdpTENKcGMwbGtaVzUwYVdacFpYSlRkR0Z5ZENJc0lsTjBjbWx1WnlJc0ltWnliMjFEYUdGeVEyOWtaU0lzSW1selNXUmxiblJwWm1sbGNsQmhjblFpTENKcWMyVndJaXdpWlhod2NpSXNJbU5vWDJraUxDSnViMlJsSWl3aVkyaGhja0YwUm5WdVl5SXNJbU5vWVhKQmRDSXNJbU5vWVhKRGIyUmxRWFJHZFc1aklpd2lZMmhoY2tOdlpHVkJkQ0lzSW1WNGNISkpJaXdpYVNJc0ltTmhiR3dpTENKbGVIQnlTVU52WkdVaUxDSm5iMkppYkdWVGNHRmpaWE1pTENKbmIySmliR1ZGZUhCeVpYTnphVzl1SWl3aVkyOXVjMlZ4ZFdWdWRDSXNJbUZzZEdWeWJtRjBaU0lzSW5SbGMzUWlMQ0puYjJKaWJHVkNhVzVoY25sRmVIQnlaWE56YVc5dUlpd2laMjlpWW14bFFtbHVZWEo1VDNBaUxDSjBiMTlqYUdWamF5SXNJbk4xWW5OMGNpSXNJblJqWDJ4bGJpSXNJbUpwYjNBaUxDSndjbVZqSWl3aWMzUmhZMnNpTENKaWFXOXdYMmx1Wm04aUxDSm5iMkppYkdWVWIydGxiaUlzSW5aaGJIVmxJaXdpY0c5d0lpd2ljSFZ6YUNJc0ltZHZZbUpzWlU1MWJXVnlhV05NYVhSbGNtRnNJaXdpWjI5aVlteGxVM1J5YVc1blRHbDBaWEpoYkNJc0ltZHZZbUpzWlVGeWNtRjVJaXdpWVhKbmRXMWxiblFpTENKd2NtVm1hWGdpTENKbmIySmliR1ZXWVhKcFlXSnNaU0lzSW1Ob1EyOWtaU0lzSW01MWJXSmxjaUlzSW5CaGNuTmxSbXh2WVhRaUxDSnlZWGNpTENKemRISWlMQ0p4ZFc5MFpTSXNJbU5zYjNObFpDSXNJbWR2WW1Kc1pVbGtaVzUwYVdacFpYSWlMQ0pwWkdWdWRHbG1hV1Z5SWl3aWMzUmhjblFpTENKemJHbGpaU0lzSW01aGJXVWlMQ0puYjJKaWJHVkJjbWQxYldWdWRITWlMQ0owWlhKdGFXNWhkR2x2YmlJc0ltRnlaM01pTENKbmIySmliR1ZIY205MWNDSXNJbU52YlhCMWRHVmtJaXdpYjJKcVpXTjBJaXdpY0hKdmNHVnlkSGtpTENKaGNtZDFiV1Z1ZEhNaUxDSmpZV3hzWldVaUxDSmxiR1Z0Wlc1MGN5SXNJbTV2WkdWeklpd2lZbTlrZVNJc0luWmxjbk5wYjI0aUxDSjBiMU4wY21sdVp5SXNJbUZrWkZWdVlYSjVUM0FpTENKdmNGOXVZVzFsSWl3aVRXRjBhQ0lzSW0xaGVDSXNJblJvYVhNaUxDSmhaR1JDYVc1aGNubFBjQ0lzSW5CeVpXTmxaR1Z1WTJVaUxDSmhaR1JNYVhSbGNtRnNJaXdpYkdsMFpYSmhiRjl1WVcxbElpd2liR2wwWlhKaGJGOTJZV3gxWlNJc0luSmxiVzkyWlZWdVlYSjVUM0FpTENKeVpXMXZkbVZCYkd4VmJtRnllVTl3Y3lJc0luSmxiVzkyWlVKcGJtRnllVTl3SWl3aWNtVnRiM1psUVd4c1FtbHVZWEo1VDNCeklpd2ljbVZ0YjNabFRHbDBaWEpoYkNJc0luSmxiVzkyWlVGc2JFeHBkR1Z5WVd4eklpd2laWGh3YjNKMGN5SXNJbTlzWkY5cWMyVndJaXdpYm05RGIyNW1iR2xqZENJc0ltMXZaSFZzWlNJc0luQmhjbk5sSWwwc0ltMWhjSEJwYm1keklqb2lRMEZMUXl4VFFVRlZRU3hIUVVOV0xHRkJUVUVzU1VGM1FrTkRMRVZCUVdFc1UwRkJVME1zUlVGQlUwTXNSMEZET1VJc1NVRkJTVU1zUlVGQlVTeEpRVUZKUXl4TlFVRk5TQ3hGUVVGVkxHbENRVUZ0UWtNc1IwRkhia1FzVFVGR1FVTXNSVUZCVFVRc1RVRkJVVUVzUlVGRFpFTXNSVUZCVFVVc1dVRkJZMG9zUlVGRFpFVXNSMEZWVUVjc1IwRkJZVU1zUzBGSVZDeEZRVWRwUWtNc1MwRklha0lzUlVGSGVVSkRMRXRCU0hwQ0xFVkJSMmxEUXl4TFFVaHFReXhIUVU5S1F5eEhRVU5EUXl4TFFVRk5MRVZCUVVkRExFdEJRVTBzUlVGQlIwTXNTVUZCU3l4RlFVRkpReXhKUVVGTExFVkJRVWxETEVsQlFVc3NSVUZEZWtORExFdEJRVTBzUlVGQlIwTXNTMEZCVFN4RlFVRkhReXhOUVVGUExFVkJRVWRETEUxQlFVOHNSVUZEYmtORExFbEJRVXNzUlVGQlNVTXNTVUZCU3l4RlFVRkpReXhMUVVGTkxFVkJRVWxETEV0QlFVMHNSVUZEYkVORExFdEJRVXNzUlVGQlNVTXNTMEZCVFN4RlFVRkhReXhOUVVGUExFVkJRM3BDYWtJc1NVRkJTeXhGUVVGSFNDeEpRVUZMTEVWQlEySnhRaXhKUVVGTExFZEJRVWxETEVsQlFVc3NSMEZCU1VNc1NVRkJTeXhKUVVkNFFrTXNSVUZCWlN4VFFVRlRReXhIUVVOMlFpeEpRVUZwUWtNc1JVRkJZa01zUlVGQlZTeEZRVU5rTEVsQlFVa3NTVUZCU1VNc1MwRkJUMGdzUjBGRFZrTXNSVUZCVFVVc1JVRkJTVU1zVVVGQlZVWXNSMEZCVjBZc1JVRkJTVXNzWlVGQlpVWXNTMEZEY2tSRUxFVkJRVlZFTEVkQlIxb3NUMEZCVDBNc1IwRkZVa2tzUlVGQlpWQXNSVUZCWVhwQ0xFZEJRelZDYVVNc1JVRkJaMEpTTEVWQlFXRndRaXhIUVVrM1FqWkNMRWRCUTBORExFMUJRVkVzUlVGRFVrTXNUMEZCVXl4RlFVTlVReXhMUVVGUkxFMUJTMVJETEVWQlFXMUNMRk5CUVZORExFZEJRek5DTEU5QlFVOXNReXhGUVVGWGEwTXNTVUZCVnl4SFFVazVRa01zUlVGQmVVSXNVMEZCVlVNc1JVRkJWVU1zUlVGQlRVTXNSMEZGYkVRc1QwRkRRME1zUzBGR2QwSXNUMEZCWWtnc1IwRkJhME1zVDBGQllrRXNSVUYyUlhCQ0xHOUNRVVJFTEcxQ1FUSkZXRUVzVTBGQlZVRXNSVUZEVmtNc1MwRkJUVUVzUlVGRFRrTXNUVUZCVDBFc1NVRkpWRVVzUlVGQmFVSXNVMEZCVTBNc1IwRkRla0lzVDBGQlVVRXNSMEZCVFN4SlFVRk5RU3hIUVVGTkxFbEJSVE5DUXl4RlFVRnZRaXhUUVVGVFJDeEhRVU0xUWl4UFFVRmxMRXRCUVZCQkxFZEJRWE5DTEV0QlFWQkJMRWRCUTNCQ1FTeEhRVUZOTEVsQlFVMUJMRWRCUVUwc1NVRkRiRUpCTEVkQlFVMHNTVUZCVFVFc1IwRkJUU3hMUVVOSVFTeEhRVUZOTEUxQlFWRjZReXhGUVVGWE1rTXNUMEZCVDBNc1lVRkJZVWdzUzBGRmFFVkpMRVZCUVcxQ0xGTkJRVk5LTEVkQlF6TkNMRTlCUVdVc1MwRkJVRUVzUjBGQmMwSXNTMEZCVUVFc1IwRkRjRUpCTEVkQlFVMHNTVUZCVFVFc1IwRkJUU3hKUVVOc1FrRXNSMEZCVFN4SlFVRk5RU3hIUVVGTkxFdEJRMnhDUVN4SFFVRk5MRWxCUVUxQkxFZEJRVTBzU1VGRFNFRXNSMEZCVFN4TlFVRlJla01zUlVGQlZ6SkRMRTlCUVU5RExHRkJRV0ZJTEV0QlRXaEZTeXhGUVVGUExGTkJRVk5ETEVkQmNWcG1MRWxCYkZwQkxFbEJaMXBoUXl4RlFVRk5ReXhGUVdoYVpqRkVMRVZCUVZFc1JVRkRXREpFTEVWQlFXRklMRVZCUVV0SkxFOUJRMnhDUXl4RlFVRnBRa3dzUlVGQlMwMHNWMEZEZEVKRExFVkJRVkVzVTBGQlUwTXNSMEZCU3l4UFFVRlBUQ3hGUVVGWFRTeExRVUZMVkN4RlFVRk5VU3hKUVVOdVJFVXNSVUZCV1N4VFFVRlRSaXhIUVVGTExFOUJRVTlJTEVWQlFXVkpMRXRCUVV0VUxFVkJRVTFSTEVsQlF6TkVPVUlzUlVGQlUzTkNMRVZCUVV0MFFpeFBRVWRrYVVNc1JVRkJaU3hYUVVka0xFbEJSa0VzU1VGQlNXcENMRVZCUVV0blFpeEZRVUZWYkVVc1IwRkZUaXhMUVVGUWEwUXNSMEZCYjBJc1NVRkJVRUVzUjBGQmJVSXNTMEZCVUVFc1IwRkJiMElzUzBGQlVFRXNSMEZETTBOQkxFVkJRVXRuUWl4SlFVRlpiRVVzU1VGTGJrSnZSU3hGUVVGdFFpeFhRVU5zUWl4SlFVTkRReXhGUVVGWlF5eEZRVVJVUXl4RlFVRlBReXhKUVVkWUxFOUJSRUZNTEVsQkwwZFhMRXRCWjBoU1JDeEZRVUZWYkVVc1IwRjNRa3gxUlN4SFFYUkNVSFpGTEV0QlEwRnhSU3hGUVVGaFJDeE5RVVZhZEVVc1JVRkJWeXh6UWtGQmRVSkZMRWRCUlc1RGJVVXNTVUZ5U0ZVc1MwRnpTRkJFTEVWQlFWVnNSU3hKUVVOYVFTeExRVU5CYzBVc1JVRkJXVVlzVFVGRldIUkZMRVZCUVZjc2MwSkJRWFZDUlN4SlFVZHNRMmRFTEV0Qk1VbFpMSGRDUVRKSlduVkNMRXRCUVUxQkxFVkJRMDVHTEZkQlFWbEJMRVZCUTFwRExGVkJRVmRCTEZOQlIxcDRSU3hGUVVGWExHRkJRV05GTEV0QlZ6VkNlVVVzUlVGQmFVSXNWMEZEYUVKT0xFbEJSVUVzU1VGRVFTeEpRVUZWVHl4RlFVRlhiRUlzUlVGQlMyMUNMRTlCUVU4elJTeEZRVUZQY1VNc1IwRkJaMEoxUXl4RlFVRlRSaXhGUVVGVGVFTXNUMEZEY0VVd1F5eEZRVUZUTEVkQlFVY3NRMEZEYWtJc1IwRkJSMjVGTEVWQlFWY3dRaXhsUVVGbGRVTXNSMEZGTlVJc1QwRkVRVEZGTEVkQlFWTTBSU3hGUVVOR1JpeEZRVVZTUVN4RlFVRlhRU3hGUVVGVFF5eFBRVUZQTEVsQlFVdERMRWRCUldwRExFOUJRVThzUjBGTFVrb3NSVUZCZVVJc1YwRkRlRUlzU1VGQlZXUXNSVUZCVFcxQ0xFVkJRVTFETEVWQlFVMURMRVZCUVU5RExFVkJRVmRzUXl4RlFVRk5ReXhGUVVGUGFVSXNSVUZSTTBRc1IwRktRV3hDTEVWQlFVOXRReXhOUVVOUVNpeEZRVUZQU2l4TFFVbE9MRTlCUVU4elFpeEZRV05TTEVsQlZFRnJReXhIUVVGalJTeE5RVUZQVEN4RlFVRk5ReXhMUVVGTmNFTXNSVUZCYVVKdFF5eExRVVZzUkRsQ0xFVkJRVkZyUXl4TlFVVlFia1lzUlVGQlZ5dzJRa0ZCSzBJclJTeEZRVUZOTjBVc1IwRkZha1FyUlN4SFFVRlRha01zUlVGQlRXdERMRVZCUVZkcVF5eEpRVWR1UWpoQ0xFVkJRVTlLTEUxQlIwUXNTMEZHV2tzc1JVRkJUM0JETEVWQlFXbENiVU1zUzBGRVVTeERRVk5vUXl4SlFVaEJSeXhIUVVGalJTeE5RVUZQVEN4RlFVRk5ReXhMUVVGTlFTeEhRVWQ2UWtNc1JVRkJUVGRETEU5QlFWTXNSMEZCVHpSRExFZEJRVkZETEVWQlFVMUJMRVZCUVUwM1F5eFBRVUZUTEVkQlFVYzBReXhOUVVNM1JDOUNMRVZCUVZGblF5eEZRVUZOU1N4TlFVTmtUaXhGUVVGUFJTeEZRVUZOU1N4TlFVRk5SQ3hOUVVOdVFuQkRMRVZCUVU5cFF5eEZRVUZOU1N4TlFVTmlla0lzUlVGQlQyUXNSVUZCZFVKcFF5eEZRVUZOTDBJc1JVRkJUVU1zUjBGRE1VTm5ReXhGUVVGTlN5eExRVUZMTVVJc1NVRkhXa0VzUlVGQlQzVkNMRTFCUlU1dVJpeEZRVUZYTERaQ1FVRXJRaXRGTEVWQlFVMDNSU3hIUVVWcVJDdEZMRVZCUVUxTExFdEJRVXRLTEVWQlFWZDBRaXhIUVV0MlFpeEpRVVJCUVN4RlFVRlBjVUlzUlVGRVVHWXNSVUZCU1dVc1JVRkJUVGRETEU5QlFWTXNSMEZGWWpoQ0xFVkJRVWtzUjBGRFZFNHNSVUZCVDJRc1JVRkJkVUp0UXl4RlFVRk5aaXhGUVVGSkxFZEJRVWRyUWl4TlFVRlBTQ3hGUVVGTlppeEZRVUZKTEVkQlFVbE9MRWRCUTJoRlRTeEhRVUZMTEVWQlJVNHNUMEZCVDA0c1IwRkxVblZDTEVWQlFXTXNWMEZEWWl4SlFVRkpMMElzUlVGQlNYZENMRVZCUVZWRkxFVkJTMnhDTEVkQlNFRlVMRWxCUTBGcVFpeEZRVUZMWjBJc1JVRkJWV3hGTEVkQlJWcHBSQ3hGUVVGbFF5eEpRWGhQVUN4TFFYZFBZMEVzUlVGRmVFSXNUMEZCVDIxRExFbEJRMFFzUjBGNlQwa3NTMEY1VDBSdVF5eEhRWGhQUXl4TFFYZFBjVUpCTEVWQlJTOUNMRTlCUVU5dlF5eEpRVU5FTEVkQmVFOUpMRXRCZDA5QmNFTXNSVUZEVml4UFFVRlBjVU1zU1VGSlVDeEpRVVJCV0N4SFFVUkJSaXhGUVVGWGJFSXNSVUZCUzIxQ0xFOUJRVTh6UlN4RlFVRlBiME1zU1VGRFdrWXNUMEZEV2pCRExFVkJRVk1zUjBGQlJ5eERRVU5xUWl4SFFVRkhlRVVzUlVGQlZTdENMR1ZCUVdWMVF5eEhRVVV6UWl4UFFVUkJNVVVzUjBGQlV6UkZMRWRCUlZJMVFpeExRVGRRU3l4clFrRTRVRXhJTEZOQlFWVTJRaXhGUVVOV1l5eFRRVUZWVUN4SlFVTldVU3hSUVVGUkxFZEJSMVptTEVWQlFWZEJMRVZCUVZORExFOUJRVThzU1VGQlMwTXNSMEZIYWtNc1UwRkJTWHBDTEVWQlFXdENSQ3hKUVRWUVdpeExRVFJRYlVKQkxFbEJSWEpDZDBNc1MwRlJWa3dzUlVGQmRVSXNWMEZGZEVJc1NVRkVRU3hKUVVGcFFtNURMRVZCUVVsNVF5eEZRVUZxUWtNc1JVRkJVeXhIUVVOUU0wTXNSVUZCWldsQ0xFVkJRVlZzUlN4TFFVTTVRalJHTEVkQlFWVTNRaXhGUVVGTkwwUXNTMEZIYWtJc1IwRm9VbGNzUzBGblVsSnJSU3hGUVVGVmJFVXNSMEZIV2l4SlFVWkJORVlzUjBGQlZUZENMRVZCUVUwdlJDeExRVVZXYVVRc1JVRkJaV2xDTEVWQlFWVnNSU3hMUVVNNVFqUkdMRWRCUVZVM1FpeEZRVUZOTDBRc1MwRkxiRUlzUjBGQlZTeFBRVVJXYTBRc1JVRkJTMkVzUlVGQlRTOUVMRXRCUTJFc1RVRkJVR3RFTEVWQlFWa3NRMEZOTlVJc1NVRk1RVEJETEVkQlFWVTNRaXhGUVVGTkwwUXNTMEZGVGl4UFFVUldhMFFzUlVGQlMyRXNSVUZCVFM5RUxFdEJRMkVzVFVGQlVHdEVMRWxCUTJoQ01FTXNSMEZCVlRkQ0xFVkJRVTB2UkN4TlFVVllhVVFzUlVGQlpXbENMRVZCUVZWc1JTeExRVU01UWpSR0xFZEJRVlUzUWl4RlFVRk5MMFFzUzBGRlltbEVMRVZCUVdWcFFpeEZRVUZWYkVVc1JVRkJUU3hMUVVOc1EwWXNSVUZCVnl4elFrRkJkMEk0Uml4RlFVRlROMElzUlVGQlRTOUVMRWRCUVZNc1NVRkJTMEVzUjBGamJFVXNUMEZVUVRKR0xFVkJRVk42UWl4RlFVRlZiRVVzUjBGRmFFSnRSQ3hGUVVGclFuZERMRWRCUTNCQ04wWXNSVUZCVnl3NFEwRkRVamhHTEVWQlFWTTNRaXhGUVVGTkwwUXNSMEZCVXl4SlFVRkxRU3hIUVRWVGRFSXNTMEUyVTBReVJpeEhRVU5VTjBZc1JVRkJWeXh2UWtGQmNVSkZMRWxCU1doRFowUXNTMEV6VkUwc1ZVRTBWRTVyUXl4TlFVRlBWeXhYUVVGWFJDeEhRVU5zUWtVc1NVRkJTMFlzU1VGTlVFNHNSVUZCYzBJc1YwRkhja0lzU1VGR1FTeEpRVUZ6UkhCRExFVkJRV3hFTmtNc1JVRkJUU3hIUVVGSlF5eEZRVUZSYWtNc1JVRkJUUzlFTEV0QlFWVnBSeXhIUVVGVExFVkJSWHBEYWtjc1JVRkJVV3RETEVkQlFWRXNRMEZGY2tJc1NVRkVRV2RDTEVWQlFVdGhMRVZCUVUwdlJDeFJRVU5FWjBjc1JVRkJUeXhEUVVOb1FrTXNSMEZCVXl4RlFVTlVMRTFCUTAwc1IwRkJWU3hQUVVGUUwwTXNSVUZIVkN4UFFVUkJRU3hGUVVGTFlTeEZRVUZOTDBRc1RVRkZWaXhKUVVGTExFbEJRVXNyUml4SFFVRlBMRXRCUVUwc1RVRkRka0lzU1VGQlN5eEpRVUZMUVN4SFFVRlBMRXRCUVUwc1RVRkRka0lzU1VGQlN5eEpRVUZMUVN4SFFVRlBMRXRCUVUwc1RVRkRka0lzU1VGQlN5eEpRVUZMUVN4SFFVRlBMRXRCUVUwc1RVRkRka0lzU1VGQlN5eEpRVUZMUVN4SFFVRlBMRXRCUVUwc1RVRkRka0lzU1VGQlN5eEpRVUZMUVN4SFFVRlBMRXRCUVZFc1RVRkRla0lzVVVGQlZVRXNSMEZCVHpkRExFOUJSMnhDTmtNc1IwRkJUemRETEVWQlVWUXNUMEZLU1N0RExFZEJRMGh1Unl4RlFVRlhMSGxDUVVGNVFtbEhMRVZCUVVrc1NVRkJTeTlHTEVsQlNUZERaMFFzUzBGcVYwMHNWVUZyVjA1clF5eE5RVUZQWVN4RlFVTlFSQ3hKUVVGTFJTeEZRVUZSUkN4RlFVRk5ReXhKUVZGeVFrVXNSVUZCYlVJc1YwRkRiRUlzU1VGQk1FTkRMRVZCUVhSRGFrUXNSVUZCUzJkQ0xFVkJRVlZzUlN4SFFVRlJiMGNzUlVGQlVYQkhMRVZCVVc1RExFbEJUa2R0UkN4RlFVRnJRa1FzUjBGRGNFSnNSQ3hKUVVWQlJpeEZRVUZYTEdOQlFXZENhVVVzUlVGQlRTOUVMRWRCUVZGQkxFZEJSM0JEUVN4RlFVRlJhME1zU1VGRFltZENMRVZCUVV0blFpeEZRVUZWYkVVc1IwRkRXbk5FTEVWQlFXbENTaXhMUVVOdVFteEVMRWxCVDBZc1QwRkdRVzFITEVWQlFXRXpReXhGUVVGTE5rTXNUVUZCVFVRc1JVRkJUM0JITEVkQlJUVkNjME1zUlVGQlUwZ3NaVUZCWldkRkxFbEJSWHBDYmtRc1MwRm9XVXNzVlVGcFdVeHJReXhOUVVGUE5VTXNSVUZCVXpaRUxFZEJRMmhDVEN4SlFVRkxTeXhIUVRsVVF5eFRRV2RWUlVFc1IwRkRRVzVFTEV0QmNGbEdMRzFDUVhWWlRrRXNTMEV4V1ZFc1lVRXlXVkp6UkN4TFFVRk5TQ3hKUVZWVVNTeEZRVUZyUWl4VFFVRlRReXhIUVVVeFFpeEpRVVJCTEVsQlFVa3ZReXhGUVVGcFFrTXNSVUZCV0N0RExFdEJRV2xDVWl4SFFVRlRMRVZCUXpsQ2FrY3NSVUZCVVd0RExFZEJRVkVzUTBGSGNrSXNSMEZHUVdsRExFdEJRMEZXTEVWQlFVOVRMRVZCUVZWc1JTeE5RVU5NZDBjc1JVRkJZU3hEUVVONFFsQXNSMEZCVXl4RlFVTlVha2NzU1VGRFFTeE5RV3BhVXl4TFFXdGFRM2xFTEVWQlExWjZSQ3hOUVVWQk1FUXNSVUZCVDFVc1RVRnNZVVVzWVVGdFlVZFdMRVZCUVV0V0xFMUJRMmhDYkVRc1JVRkJWeXhwUWtGQmEwSkZMRWRCUlRsQ2VVY3NSVUZCUzNKQ0xFdEJRVXN4UWl4SlFVMWFMRTlCU0V0MVF5eEhRVU5LYmtjc1JVRkJWeXhaUVVGamMwUXNUMEZCVDBNc1lVRkJZVzFFTEVkQlFXTjRSeXhIUVVWeVJIbEhMRWRCVDFKbUxFVkJRV2xDTEZkQlEyaENMRWxCUVVscVF5eEZRVUZOUXl4RlFWVldMRWxCVGtOQkxFVkJlR0ZWTEUxQmNXRllSQ3hGUVVGUFV5eEZRVUZWYkVVc1NVRkhWREJITEVsQlJVRlNMRWxCUlZJdlFpeEpRVU5CVml4RlFVRlBVeXhGUVVGVmJFVXNSMEZxWWs0c1MwRnJZa3g1UkN4SFFUVmhTeXhMUVRSaGJVSkJMRWRCT1dGdVFpeExRVGhoTWtOQkxFZEJRM0pFZWtRc1NVRnVZbFVzUzBGdllsQjVSQ3hIUVVOR1ZTeEpRVU5CVkN4SFFVTkRWaXhMUVdwalR5eHRRa0ZyWTFBeVJDeFZRVUZWTEVWQlExWkRMRTlCUVZGc1JDeEZRVU5TYlVRc1UwRkJWVmdzVFVGd1lrWXNTMEZ6WWtGNlF5eEhRVU5VUXl4SFFVTkRWaXhMUVhoalR5eHRRa0Y1WTFBeVJDeFZRVUZWTEVWQlExWkRMRTlCUVZGc1JDeEZRVU5TYlVRc1UwRkJWWHBETEV0QlJWaEVMRWxCTldKVExFMUJObUpVVml4RlFVRlBVeXhGUVVGVmJFVXNTMEZGYUVKR0xFVkJRVmNzWVVGQlkwVXNSMEZGTVVKQkxFdEJjR05UTEV0QmNXTkJlVVFzU1VGRlZFTXNSMEZEUTFZc1MwRnVaRXNzYVVKQmIyUk1PRVFzVlVGQllWQXNSVUY0WTB3c1NVRjVZMUpSTEU5QlFWRnlSQ3hKUVVkV1V5eEpRVU5CVml4RlFVRlBVeXhGUVVGVmJFVXNSMEZGYkVJc1QwRkJUekJFTEVkQlVWSm5SQ3hGUVVGakxGZEJRMkl4Unl4SlFVTkJMRWxCUVVrd1JDeEZRVUZQVlN4SlFVVllMRWRCUkVGRUxFbEJNV1JYTEV0Qk1tUlNSQ3hGUVVGVmJFVXNSMEZGV2l4UFFVUkJRU3hKUVVOUE1FUXNSVUZGVURWRUxFVkJRVmNzWVVGQlkwVXNTVUZQTTBKMVJpeEZRVUZqTEZkQlJXSXNUMEZFUVhaR0xFdEJSVU5uUkN4TFFXaG1VU3hyUWtGcFpsSm5SU3hUUVVGVlZDeEZRWGhsUVN4TlFUUmxXbFVzUzBGRlMycElMRVZCUVZGclF5eEhRVFZsUkN4TlFUWmxXblZDTEVWQlFVOVRMRVZCUVZWc1JTeExRWEptVEN4TFFYbG1aWGxFTEVWQlF6RkNla1FzUzBGSFNUQkVMRVZCUVU5VkxFdEJRMVkyUXl4RlFVRk5OMElzUzBGQlN6RkNMRWRCUjBZeFJDeEZRVUZSYTBNc1IwRkRha0p3UXl4RlFVRlhMR1ZCUVdsQ2FVVXNSVUZCVFM5RUxFZEJRVk1zU1VGQlMwRXNSMEZOYmtRc1QwRkJiMElzU1VGQmFrSnBTQ3hGUVVGTkwwVXNUMEZEUkN0RkxFVkJRVTBzU1VGSFdtcEZMRXRCZW1oQ1Z5eFhRVEJvUWxoclJTeExRVUZOUkN4SlFTdEhWaXhIUVhwSFFURkVMRVZCUVVzMFJDeFJRVUZWTEZGQlEyWTFSQ3hGUVVGTE5rUXNVMEZCVnl4WFFVRmhMRTFCUVU4c2QwTkJRVEJETjBRc1JVRkJTelJFTEZOQlQyNUdOVVFzUlVGQlN6aEVMRmRCUVdFc1UwRkJVME1zUjBGRlJpeFBRVVI0UW14R0xFVkJRV1Z0Uml4TFFVRkxReXhKUVVGSlJpeEZRVUZSY0VZc1QwRkJVVVVzUjBGRGVFTm9ReXhGUVVGVmEwZ3NTVUYyWjBKT0xFVkJkV2RDTWtKSExFMUJVMmhEYkVVc1JVRkJTMjFGTEZsQlFXTXNVMEZCVTBvc1JVRkJVMHNzUjBGSGNFTXNUMEZHUVhSR0xFVkJRV2RDYTBZc1MwRkJTME1zU1VGQlNVWXNSVUZCVVhCR0xFOUJRVkZITEVkQlEzcEROVUlzUlVGQlZ6WkhMRWRCUVZkTExFVkJRMlpHTEUxQlUxSnNSU3hGUVVGTGNVVXNWMEZCWVN4VFFVRlRReXhGUVVGalF5eEhRVVY0UXl4UFFVUkJlRVlzUlVGQlUzVkdMRWRCUVdkQ1F5eEZRVU5zUWt3c1RVRlJVbXhGTEVWQlFVdDNSU3hqUVVGblFpeFRRVUZUVkN4SFFVczNRaXhqUVVwUGJFZ3NSVUZCVld0SUxFZEJRMlJCTEVWQlFWRndSaXhUUVVGWFJTeEpRVU55UWtFc1JVRkJaVkFzUlVGQllYcENMRWxCUlhSQ2NVZ3NUVUZQVW14RkxFVkJRVXQ1UlN4clFrRkJiMElzVjBGSmVFSXNUMEZJUVRWSUxFdEJRMEZuUXl4RlFVRmxMRVZCUlZKeFJpeE5RVkZTYkVVc1JVRkJTekJGTEdWQlFXbENMRk5CUVZOWUxFZEJTemxDTEdOQlNrODNSeXhGUVVGWE5rY3NSMEZEWmtFc1JVRkJVWEJHTEZOQlFWZEhMRWxCUTNKQ1FTeEZRVUZuUWxJc1JVRkJZWEJDTEVsQlJYWkNaMGdzVFVGUFVteEZMRVZCUVVzeVJTeHRRa0ZCY1VJc1YwRkpla0lzVDBGSVFYcElMRXRCUTBFMFFpeEZRVUZuUWl4RlFVVlViMFlzVFVGUlVteEZMRVZCUVVzMFJTeGpRVUZuUWl4VFFVRlRUaXhIUVVVM1FpeGpRVVJQZGtZc1JVRkJVM1ZHTEVkQlExUktMRTFCVDFKc1JTeEZRVUZMTmtVc2EwSkJRVzlDTEZkQlIzaENMRTlCUmtFNVJpeExRVVZQYlVZc1RVRkpaU3h2UWtGQldsa3NVVUZCZVVJc1EwRkRia01zU1VGQlNVTXNSVUZCVjNwSkxFVkJRVXN3UkN4TFFVVndRakZFTEVWQlFVc3dSQ3hMUVVGUFFTeEZRVVZhUVN4RlFVRkxaMFlzVjBGQllTeFhRVWxxUWl4UFFVaEhNVWtzUlVGQlN6QkVMRTlCUVZOQkxFbEJRMmhDTVVRc1JVRkJTekJFTEV0QlFVOHJSU3hIUVVWT0wwVXNUMEZKWXl4dlFrRkJXR2xHTEZGQlFUQkNRU3hQUVVGUFNDeFJRVU16UTBFc1VVRkJWVWNzVDBGQlQwZ3NVVUZCVlRsRkxFVkJSVE5DT0VVc1VVRkJVVWtzVFVGQlVXeEdMRVZCYUhGQ2JrSXNRMEZ0Y1VKRmEwVWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmJtOWtaVjl0YjJSMWJHVnpMMnB6WlhBdlluVnBiR1F2YW5ObGNDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuLHMpe3M9c3x8e307dmFyIG89dXRpbHMucGFyc2VDU1MobiksYT1bXSxpPVwic3R5bGVcIjtpZihzLnN0eWxlQXR0cmlidXRlTmFtZSYmKGk9cy5zdHlsZUF0dHJpYnV0ZU5hbWUpLG8uZm9yRWFjaChmdW5jdGlvbihuKXtmb3IodmFyIG8sbD1uWzBdLHU9blsxXSxwPW5ldyB1dGlscy5TZWxlY3RvcihsKSxjPXAucGFyc2VkKCksZj1mdW5jdGlvbihlKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuO3ZhciB0PWVbZS5sZW5ndGgtMV0ucHNldWRvcztpZighdClyZXR1cm47Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYocih0W25dKSlyZXR1cm4gdFtuXS5uYW1lfShjKSxkPTA7ZDxjLmxlbmd0aDsrK2Qpe3ZhciB2PWNbZF07aWYodi5wc2V1ZG9zKWZvcih2YXIgbT0wO208di5wc2V1ZG9zLmxlbmd0aDsrK20pe3ZhciB5PXYucHNldWRvc1ttXTtpZihlLmlnbm9yZWRQc2V1ZG9zLmluZGV4T2YoeS5uYW1lKT49MClyZXR1cm59fWlmKGYpe3ZhciBoPWNbYy5sZW5ndGgtMV0sZz1oLnBzZXVkb3M7aC5wc2V1ZG9zPWZ1bmN0aW9uKGUpe3JldHVybiBlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hcihlKX0pfShoLnBzZXVkb3MpLGw9Yy50b1N0cmluZygpLGgucHNldWRvcz1nfXRyeXtvPXQobCl9Y2F0Y2goZSl7cmV0dXJufW8uZWFjaChmdW5jdGlvbigpe3ZhciByPXRoaXM7aWYoIShyLm5hbWUmJmUubm9uVmlzdWFsRWxlbWVudHMuaW5kZXhPZihyLm5hbWUudG9VcHBlckNhc2UoKSk+PTApKXtpZihmKXt2YXIgbj1cInBzZXVkb1wiK2Ysbz1yW25dO298fCgobz1yW25dPXQoXCI8c3BhbiAvPlwiKS5nZXQoMCkpLnBzZXVkb0VsZW1lbnRUeXBlPWYsby5wc2V1ZG9FbGVtZW50UGFyZW50PXIscltuXT1vKSxyPW99aWYoIXIuc3R5bGVQcm9wcyl7aWYoci5zdHlsZVByb3BzPXt9LHQocikuYXR0cihpKSl7dmFyIGw9XCIqIHsgXCIrdChyKS5hdHRyKGkpK1wiIH0gXCI7Yyh1dGlscy5wYXJzZUNTUyhsKVswXVsxXSxuZXcgdXRpbHMuU2VsZWN0b3IoXCI8c3R5bGU+XCIsITApKX1hLnB1c2gocil9Yyh1LHApfWZ1bmN0aW9uIGModCxuKXtmb3IodmFyIG89MCxhPXQubGVuZ3RoO288YTtvKyspaWYoXCJwcm9wZXJ0eVwiPT10W29dLnR5cGUpe3ZhciBpPXRbb10ubmFtZSxsPXRbb10udmFsdWUsdT1udWxsIT09dFtvXS52YWx1ZS5tYXRjaCgvIWltcG9ydGFudCQvKTt1JiYhcy5wcmVzZXJ2ZUltcG9ydGFudCYmKGw9bC5yZXBsYWNlKC9cXHMqIWltcG9ydGFudCQvLFwiXCIpKTt2YXIgcD1bdFtvXS5wb3NpdGlvbi5zdGFydC5saW5lLHRbb10ucG9zaXRpb24uc3RhcnQuY29sXSxjPW5ldyB1dGlscy5Qcm9wZXJ0eShpLGwsbix1PzI6MCxwKSxmPXIuc3R5bGVQcm9wc1tpXTtlLmV4Y2x1ZGVkUHJvcGVydGllcy5pbmRleE9mKGkpPDAmJihmJiZmLmNvbXBhcmUoYyk9PT1jfHwhZikmJihmJiZmLnNlbGVjdG9yIT09bj9kZWxldGUgci5zdHlsZVByb3BzW2ldOmYmJihjLm5leHRQcm9wPWYpLHIuc3R5bGVQcm9wc1tpXT1jKX19fSl9KSxhLmZvckVhY2goZnVuY3Rpb24oZSl7T2JqZWN0LmtleXMoZS5zdHlsZVByb3BzKS5sZW5ndGg7dmFyIHI9W107T2JqZWN0LmtleXMoZS5zdHlsZVByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Zvcih2YXIgbj1lLnN0eWxlUHJvcHNbdF07dm9pZCAwIT09bjspci5wdXNoKG4pLG49bi5uZXh0UHJvcH0pLHIuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbXBhcmVGdW5jKHQpfSk7dmFyIG49ci5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJjb250ZW50XCIhPT1lLnByb3B9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJvcCtcIjogXCIrZS52YWx1ZS5yZXBsYWNlKC9bXCJdL2csXCInXCIpK1wiO1wifSkuam9pbihcIiBcIik7biYmdChlKS5hdHRyKGksbil9KSxzLmlubGluZVBzZXVkb0VsZW1lbnRzJiZhLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoZS5wc2V1ZG9FbGVtZW50VHlwZSYmZS5zdHlsZVByb3BzLmNvbnRlbnQpe3ZhciByPWZ1bmN0aW9uKGUpe2lmKFwibm9uZVwiPT09ZXx8XCJub3JtYWxcIj09PWUpcmV0dXJuXCJcIjt2YXIgdD1lLm1hdGNoKC9eXFxzKnVybFxccypcXChcXHMqKC4qPylcXHMqXFwpXFxzKiQvaSk7aWYodCl7dmFyIHI9dFsxXS5yZXBsYWNlKC9eWydcIl18WydcIl0kL2csXCJcIik7cmV0dXJue2ltZzpyfX1yZXR1cm4gZT0oZT1lLnNsaWNlKDEsZS5sZW5ndGgtMSkpLnJlcGxhY2UoL1xcXFwvZyxcIlwiKX0oZS5zdHlsZVByb3BzLmNvbnRlbnQudmFsdWUpO3IuaW1nPyhlLm5hbWU9XCJpbWdcIix0KGUpLmF0dHIoXCJzcmNcIixyLmltZykpOnQoZSkudGV4dChyKTt2YXIgbj1lLnBzZXVkb0VsZW1lbnRQYXJlbnQ7XCJiZWZvcmVcIj09PWUucHNldWRvRWxlbWVudFR5cGU/dChuKS5wcmVwZW5kKGUpOnQobikuYXBwZW5kKGUpfX0pLHMuYXBwbHlXaWR0aEF0dHJpYnV0ZXMmJmEuZm9yRWFjaChmdW5jdGlvbihlKXtwKGUsXCJ3aWR0aFwiKX0pLHMuYXBwbHlIZWlnaHRBdHRyaWJ1dGVzJiZhLmZvckVhY2goZnVuY3Rpb24oZSl7cChlLFwiaGVpZ2h0XCIpfSkscy5hcHBseUF0dHJpYnV0ZXNUYWJsZUVsZW1lbnRzJiZhLmZvckVhY2goZnVuY3Rpb24ocil7aWYoIXIubmFtZSlyZXR1cm47dmFyIG49ci5uYW1lLnRvVXBwZXJDYXNlKCkscz1PYmplY3Qua2V5cyhlLnN0eWxlVG9BdHRyaWJ1dGUpO2lmKGUudGFibGVFbGVtZW50cy5pbmRleE9mKG4pPi0xKWZvcih2YXIgbyBpbiByLnN0eWxlUHJvcHMpaWYocy5pbmRleE9mKHIuc3R5bGVQcm9wc1tvXS5wcm9wKT4tMSl7dmFyIGE9ZS5zdHlsZVRvQXR0cmlidXRlW3Iuc3R5bGVQcm9wc1tvXS5wcm9wXSxpPXIuc3R5bGVQcm9wc1tvXS52YWx1ZTtcImJhY2tncm91bmRcIj09PWEmJihpPWMoaSkpLHQocikuYXR0cihhLGkpfX0pLHMuaW5zZXJ0UHJlc2VydmVkRXh0cmFDc3MmJnMuZXh0cmFDc3Mpe3ZhciBsPXV0aWxzLmdldFByZXNlcnZlZFRleHQocy5leHRyYUNzcyx7bWVkaWFRdWVyaWVzOnMucHJlc2VydmVNZWRpYVF1ZXJpZXMsZm9udEZhY2VzOnMucHJlc2VydmVGb250RmFjZXN9KTtpZihsKXt2YXIgdT1udWxsOyEwIT09cy5pbnNlcnRQcmVzZXJ2ZWRFeHRyYUNzcz91PXQocy5pbnNlcnRQcmVzZXJ2ZWRFeHRyYUNzcyk6KCh1PXQoXCJoZWFkXCIpKS5sZW5ndGh8fCh1PXQoXCJib2R5XCIpKSx1Lmxlbmd0aHx8KHU9dC5yb290KCkpKSx1LmZpcnN0KCkuYXBwZW5kKFwiPHN0eWxlPlwiK2wrXCI8L3N0eWxlPlwiKX19ZnVuY3Rpb24gcChyLG4pe2lmKHIubmFtZSl7dmFyIHM9ci5uYW1lLnRvVXBwZXJDYXNlKCk7aWYoZVtuK1wiRWxlbWVudHNcIl0uaW5kZXhPZihzKT4tMSlmb3IodmFyIG8gaW4gci5zdHlsZVByb3BzKWlmKHIuc3R5bGVQcm9wc1tvXS5wcm9wPT09bil7aWYoci5zdHlsZVByb3BzW29dLnZhbHVlLm1hdGNoKC9weC8pKXt2YXIgYT1yLnN0eWxlUHJvcHNbb10udmFsdWUucmVwbGFjZShcInB4XCIsXCJcIik7cmV0dXJuIHZvaWQgdChyKS5hdHRyKG4sYSl9aWYoZS50YWJsZUVsZW1lbnRzLmluZGV4T2Yocyk+LTEmJnIuc3R5bGVQcm9wc1tvXS52YWx1ZS5tYXRjaCgvXFwlLykpcmV0dXJuIHZvaWQgdChyKS5hdHRyKG4sci5zdHlsZVByb3BzW29dLnZhbHVlKX19fWZ1bmN0aW9uIGMoZSl7cmV0dXJuIDAhPT1lLmluZGV4T2YoXCJ1cmwoXCIpP2U6ZS5yZXBsYWNlKC9edXJsXFwoKFtcIiddKT8oW15cIiddKylcXDFcXCkkLyxcIiQyXCIpfX1mdW5jdGlvbiByKGUpe3JldHVyblwiYmVmb3JlXCI9PT1lLm5hbWV8fFwiYWZ0ZXJcIj09PWUubmFtZX1yZXR1cm4gZS5pZ25vcmVkUHNldWRvcz1bXCJob3ZlclwiLFwiYWN0aXZlXCIsXCJmb2N1c1wiLFwidmlzaXRlZFwiLFwibGlua1wiXSxlLndpZHRoRWxlbWVudHM9W1wiVEFCTEVcIixcIlREXCIsXCJJTUdcIl0sZS5oZWlnaHRFbGVtZW50cz1bXCJUQUJMRVwiLFwiVERcIixcIklNR1wiXSxlLnRhYmxlRWxlbWVudHM9W1wiVEFCTEVcIixcIlREXCIsXCJUSFwiLFwiVFJcIixcIlREXCIsXCJDQVBUSU9OXCIsXCJDT0xHUk9VUFwiLFwiQ09MXCIsXCJUSEVBRFwiLFwiVEJPRFlcIixcIlRGT09UXCJdLGUubm9uVmlzdWFsRWxlbWVudHM9W1wiSEVBRFwiLFwiVElUTEVcIixcIkJBU0VcIixcIkxJTktcIixcIlNUWUxFXCIsXCJNRVRBXCIsXCJTQ1JJUFRcIixcIk5PU0NSSVBUXCJdLGUuc3R5bGVUb0F0dHJpYnV0ZT17XCJiYWNrZ3JvdW5kLWNvbG9yXCI6XCJiZ2NvbG9yXCIsXCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJiYWNrZ3JvdW5kXCIsXCJ0ZXh0LWFsaWduXCI6XCJhbGlnblwiLFwidmVydGljYWwtYWxpZ25cIjpcInZhbGlnblwifSxlLmV4Y2x1ZGVkUHJvcGVydGllcz1bXSxlLmp1aWNlRG9jdW1lbnQ9ZnVuY3Rpb24oZSxyKXtyPXV0aWxzLmdldERlZmF1bHRPcHRpb25zKHIpO3ZhciBuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixzLG89W107cmV0dXJuIGUoXCJzdHlsZVwiKS5lYWNoKGZ1bmN0aW9uKCl7aWYoMT09PShyPShzPXRoaXMpLmNoaWxkTm9kZXMpLmxlbmd0aCl7aWYobj1yWzBdLmRhdGEsdC5hcHBseVN0eWxlVGFncyYmdm9pZCAwPT09ZShzKS5hdHRyKFwiZGF0YS1lbWJlZFwiKSYmby5wdXNoKG4pLHQucmVtb3ZlU3R5bGVUYWdzJiZ2b2lkIDA9PT1lKHMpLmF0dHIoXCJkYXRhLWVtYmVkXCIpKXt2YXIgYT11dGlscy5nZXRQcmVzZXJ2ZWRUZXh0KHMuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWUse21lZGlhUXVlcmllczp0LnByZXNlcnZlTWVkaWFRdWVyaWVzLGZvbnRGYWNlczp0LnByZXNlcnZlRm9udEZhY2VzfSk7YT9zLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlPWE6ZShzKS5yZW1vdmUoKX1lKHMpLnJlbW92ZUF0dHIoXCJkYXRhLWVtYmVkXCIpfX0pLG99KGUsdCkuam9pbihcIlxcblwiKX0oZSxyKTtyZXR1cm4gbis9XCJcXG5cIityLmV4dHJhQ3NzLHQoZSxuLHIpLGV9LGUuaW5saW5lRG9jdW1lbnQ9dCxlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHViR2x1WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUoxZEdsc2N5SXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYW5WcFkyVkRiR2xsYm5RaUxDSnBibXhwYm1WRWIyTjFiV1Z1ZENJc0lpUWlMQ0pqYzNNaUxDSnZjSFJwYjI1eklpd2ljblZzWlhNaUxDSndZWEp6WlVOVFV5SXNJbVZrYVhSbFpFVnNaVzFsYm5Seklpd2ljM1I1YkdWQmRIUnlhV0oxZEdWT1lXMWxJaXdpWm05eVJXRmphQ0lzSW5KMWJHVWlMQ0psYkhNaUxDSnpaV3dpTENKemRIbHNaU0lzSW5ObGJHVmpkRzl5SWl3aVUyVnNaV04wYjNJaUxDSndZWEp6WldSVFpXeGxZM1J2Y2lJc0luQmhjbk5sWkNJc0luQnpaWFZrYjBWc1pXMWxiblJVZVhCbElpd2liR1Z1WjNSb0lpd2ljSE5sZFdSdmN5SXNJbWtpTENKcGMxQnpaWFZrYjBWc1pXMWxiblJPWVcxbElpd2libUZ0WlNJc0ltZGxkRkJ6WlhWa2IwVnNaVzFsYm5SVWVYQmxJaXdpYzNWaVUyVnNJaXdpYWlJc0luTjFZbE5sYkZCelpYVmtieUlzSW1sbmJtOXlaV1JRYzJWMVpHOXpJaXdpYVc1a1pYaFBaaUlzSW14aGMzUWlMQ0ptYVd4MFpYSWlMQ0p3YzJWMVpHOGlMQ0ptYVd4MFpYSkZiR1Z0Wlc1MFVITmxkV1J2Y3lJc0luUnZVM1J5YVc1bklpd2laWEp5SWl3aVpXRmphQ0lzSW1Wc0lpd2lkR2hwY3lJc0ltNXZibFpwYzNWaGJFVnNaVzFsYm5Seklpd2lkRzlWY0hCbGNrTmhjMlVpTENKd2MyVjFaRzlGYkZCeWIzQk9ZVzFsSWl3aWNITmxkV1J2Uld3aUxDSm5aWFFpTENKd2MyVjFaRzlGYkdWdFpXNTBVR0Z5Wlc1MElpd2ljM1I1YkdWUWNtOXdjeUlzSW1GMGRISWlMQ0pqYzNOVVpYaDBJaXdpWVdSa1VISnZjSE1pTENKd2RYTm9JaXdpYkNJc0luUjVjR1VpTENKMllXeDFaU0lzSW1sdGNHOXlkR0Z1ZENJc0ltMWhkR05vSWl3aWNISmxjMlZ5ZG1WSmJYQnZjblJoYm5RaUxDSnlaWEJzWVdObElpd2lZV1JrYVhScGIyNWhiRkJ5YVc5eWFYUjVJaXdpY0c5emFYUnBiMjRpTENKemRHRnlkQ0lzSW14cGJtVWlMQ0pqYjJ3aUxDSndjbTl3SWl3aVVISnZjR1Z5ZEhraUxDSmxlR2x6ZEdsdVp5SXNJbVY0WTJ4MVpHVmtVSEp2Y0dWeWRHbGxjeUlzSW1OdmJYQmhjbVVpTENKdVpYaDBVSEp2Y0NJc0lrOWlhbVZqZENJc0ltdGxlWE1pTENKd2NtOXdjeUlzSW10bGVTSXNJbTV3SWl3aWMyOXlkQ0lzSW1FaUxDSmlJaXdpWTI5dGNHRnlaVVoxYm1NaUxDSnpkSEpwYm1jaUxDSnRZWEFpTENKcWIybHVJaXdpYVc1c2FXNWxVSE5sZFdSdlJXeGxiV1Z1ZEhNaUxDSmpiMjUwWlc1MElpd2lhVzFoWjJWVmNteE5ZWFJqYUNJc0luVnliQ0lzSW1sdFp5SXNJbk5zYVdObElpd2ljR0Z5YzJWRGIyNTBaVzUwSWl3aWRHVjRkQ0lzSW5CaGNtVnVkQ0lzSW5CeVpYQmxibVFpTENKaGNIQmxibVFpTENKaGNIQnNlVmRwWkhSb1FYUjBjbWxpZFhSbGN5SXNJbk5sZEVScGJXVnVjMmx2YmtGMGRISnpJaXdpWVhCd2JIbElaV2xuYUhSQmRIUnlhV0oxZEdWeklpd2lZWEJ3YkhsQmRIUnlhV0oxZEdWelZHRmliR1ZGYkdWdFpXNTBjeUlzSW1Wc1RtRnRaU0lzSW5OMGVXeGxWRzlCZEhSeWFXSjFkR1VpTENKMFlXSnNaVVZzWlcxbGJuUnpJaXdpWlhoMGNtRmpkRUpoWTJ0bmNtOTFibVJWY213aUxDSnBibk5sY25SUWNtVnpaWEoyWldSRmVIUnlZVU56Y3lJc0ltVjRkSEpoUTNOeklpd2ljSEpsYzJWeWRtVmtWR1Y0ZENJc0ltZGxkRkJ5WlhObGNuWmxaRlJsZUhRaUxDSnRaV1JwWVZGMVpYSnBaWE1pTENKd2NtVnpaWEoyWlUxbFpHbGhVWFZsY21sbGN5SXNJbVp2Ym5SR1lXTmxjeUlzSW5CeVpYTmxjblpsUm05dWRFWmhZMlZ6SWl3aUpHRndjR1Z1WkZSdklpd2ljbTl2ZENJc0ltWnBjbk4wSWl3aVpHbHRaVzV6YVc5dUlpd2ljSGhUYVhwbElpd2lkMmxrZEdoRmJHVnRaVzUwY3lJc0ltaGxhV2RvZEVWc1pXMWxiblJ6SWl3aVltRmphMmR5YjNWdVpDMWpiMnh2Y2lJc0ltSmhZMnRuY205MWJtUXRhVzFoWjJVaUxDSjBaWGgwTFdGc2FXZHVJaXdpZG1WeWRHbGpZV3d0WVd4cFoyNGlMQ0pxZFdsalpVUnZZM1Z0Wlc1MElpd2laMlYwUkdWbVlYVnNkRTl3ZEdsdmJuTWlMQ0p6ZEhsc1pVUmhkR0ZNYVhOMElpd2ljM1I1YkdWRVlYUmhJaXdpYzNSNWJHVkZiR1Z0Wlc1MElpd2ljbVZ6ZFd4MGN5SXNJbU5vYVd4a1RtOWtaWE1pTENKa1lYUmhJaXdpWVhCd2JIbFRkSGxzWlZSaFozTWlMQ0oxYm1SbFptbHVaV1FpTENKeVpXMXZkbVZUZEhsc1pWUmhaM01pTENKdWIyUmxWbUZzZFdVaUxDSnlaVzF2ZG1VaUxDSnlaVzF2ZG1WQmRIUnlJaXdpWjJWMFUzUjViR1Z6UkdGMFlTSXNJbVY0ZEhKaFkzUkRjM05HY205dFJHOWpkVzFsYm5RaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNUVUZCVVVNc1VVRkJVU3hYUVVWd1FrTXNUMEZCVDBNc1VVRkJWU3hUUVVGNVFrTXNSMEZyUWpGRExGTkJRVk5ETEVWQlFXVkRMRVZCUVVkRExFVkJRVXRETEVkQlJUbENRU3hGUVVGVlFTeE5RVU5XTEVsQlFVbERMRVZCUVZGVUxFMUJRVTFWTEZOQlFWTklMRWRCUTNaQ1NTeExRVU5CUXl4RlFVRnhRaXhSUVRaQ2VrSXNSMEV6UWtsS0xFVkJRVkZKTEhGQ1FVTldRU3hGUVVGeFFrb3NSVUZCVVVrc2IwSkJSeTlDU0N4RlFVRk5TU3hSUVRCRFRpeFRRVUZ2UWtNc1IwRlJiRUlzU1VGUVFTeEpRVEpDU1VNc1JVRXpRa0ZETEVWQlFVMUdMRVZCUVVzc1IwRkRXRWNzUlVGQlVVZ3NSVUZCU3l4SFFVTmlTU3hGUVVGWExFbEJRVWxzUWl4TlFVRk5iVUlzVTBGQlUwZ3NSMEZET1VKSkxFVkJRV2xDUml4RlFVRlRSeXhUUVVNeFFrTXNSVUYzVGxJc1UwRkJPRUpLTEVkQlF6VkNMRWRCUVhkQ0xFbEJRWEJDUVN4RlFVRlRTeXhQUVVOWUxFOUJSMFlzU1VGQlNVTXNSVUZCVlU0c1JVRkJVMEVzUlVGQlUwc3NUMEZCVXl4SFFVRkhReXhSUVVNMVF5eEpRVUZMUVN4RlFVTklMRTlCUjBZc1NVRkJTeXhKUVVGSlF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsRUxFVkJRVkZFTEU5QlFWRkZMRWxCUTJ4RExFZEJRVWxETEVWQlFXOUNSaXhGUVVGUlF5eEpRVU01UWl4UFFVRlBSQ3hGUVVGUlF5eEhRVUZIUlN4TFFYQlBTVU1zUTBGQmNVSlNMRWRCUjNCRFN5eEZRVUZKTEVWQlFVZEJMRVZCUVVsTUxFVkJRV1ZITEZOQlFWVkZMRVZCUVVjc1EwRkRPVU1zU1VGQlNVa3NSVUZCVTFRc1JVRkJaVXNzUjBGRE5VSXNSMEZCU1Vrc1JVRkJUMHdzVVVGRFZDeEpRVUZMTEVsQlFVbE5MRVZCUVVrc1JVRkJSMEVzUlVGQlNVUXNSVUZCVDB3c1VVRkJVVVFzVTBGQlZVOHNSVUZCUnl4RFFVTTVReXhKUVVGSlF5eEZRVUZsUml4RlFVRlBUQ3hSUVVGUlRTeEhRVU5zUXl4SFFVRkpNVUlzUlVGQldUUkNMR1ZCUVdWRExGRkJRVkZHTEVWQlFXRktMRTlCUVZNc1JVRkRNMFFzVVVGTlVpeEhRVUZKVEN4RlFVRnRRaXhEUVVOeVFpeEpRVUZKV1N4RlFVRlBaQ3hGUVVGbFFTeEZRVUZsUnl4UFFVRlRMRWRCUXpsRFF5eEZRVUZWVlN4RlFVRkxWaXhSUVVOdVFsVXNSVUZCUzFZc1VVRXlUbGdzVTBGQk9FSkJMRWRCUXpWQ0xFOUJRVTlCTEVWQlFWRlhMRTlCUVU4c1UwRkJVME1zUjBGRE4wSXNUMEZCVVZZc1JVRkJiMEpWTEV0Qk4wNVlReXhEUVVGeFFrZ3NSVUZCUzFZc1UwRkRla05TTEVWQlFVMUpMRVZCUVdWclFpeFhRVU55UWtvc1JVRkJTMVlzVVVGQlZVRXNSVUZKYWtJc1NVRkRSVlFzUlVGQlRWUXNSVUZCUlZVc1IwRkRVaXhOUVVGUGRVSXNSMEZGVUN4UFFVZEdlRUlzUlVGQlNYbENMRXRCUVVzc1YwRkRVQ3hKUVVGSlF5eEZRVUZMUXl4TFFVVlVMRXRCUVVsRUxFVkJRVWRrTEUxQlFWRjJRaXhGUVVGWmRVTXNhMEpCUVd0Q1ZpeFJRVUZSVVN4RlFVRkhaQ3hMUVVGTGFVSXNaMEpCUVd0Q0xFZEJRUzlGTEVOQlNVRXNSMEZCU1hSQ0xFVkJRVzFDTEVOQlEzSkNMRWxCUVVsMVFpeEZRVUZ0UWl4VFFVRlhka0lzUlVGRE9VSjNRaXhGUVVGWFRDeEZRVUZIU1N4SFFVTmlReXhMUVVOSVFTeEZRVUZYVEN4RlFVRkhTU3hIUVVGdlFuWkRMRVZCUVVVc1dVRkJXWGxETEVsQlFVa3NTVUZETTBONlFpeHJRa0ZCYjBKQkxFVkJRemRDZDBJc1JVRkJVMFVzYjBKQlFYTkNVQ3hGUVVNdlFrRXNSVUZCUjBrc1IwRkJiMEpETEVkQlJYcENUQ3hGUVVGTFN5eEZRVWRRTEVsQlFVdE1MRVZCUVVkUkxGZEJRVmtzUTBGSmJFSXNSMEZJUVZJc1JVRkJSMUVzWTBGSFF6TkRMRVZCUVVWdFF5eEhRVUZKVXl4TFFVRkxkRU1zUjBGQmNVSXNRMEZEYkVNc1NVRkJTWFZETEVWQlFWVXNUMEZCVXpkRExFVkJRVVZ0UXl4SFFVRkpVeXhMUVVGTGRFTXNSMEZCYzBJc1RVRkRlRVIzUXl4RlFVRlRjRVFzVFVGQlRWVXNVMEZCVTNsRExFZEJRVk1zUjBGQlJ5eEhRVUZKTEVsQlFVbHVSQ3hOUVVGTmJVSXNVMEZCVXl4WFFVRlhMRWxCU1hoRlVpeEZRVUZsTUVNc1MwRkJTMW9zUjBGdFEzUkNWeXhGUVVGVGJrTXNSVUZCVDBNc1IwRXZRbWhDTEZOQlFWTnJReXhGUVVGVGJrTXNSVUZCVDBNc1IwRkRka0lzU1VGQlN5eEpRVUZKVHl4RlFVRkpMRVZCUVVjMlFpeEZRVUZKY2tNc1JVRkJUVTBzVDBGQlVVVXNSVUZCU1RaQ0xFVkJRVWMzUWl4SlFVTjJReXhIUVVGeFFpeFpRVUZxUWxJc1JVRkJUVkVzUjBGQlJ6aENMRXRCUVc5Q0xFTkJReTlDTEVsQlFVazFRaXhGUVVGUFZpeEZRVUZOVVN4SFFVRkhSU3hMUVVOb1FqWkNMRVZCUVZGMlF5eEZRVUZOVVN4SFFVRkhLMElzVFVGRGFrSkRMRVZCUVc5RUxFOUJRWGhEZUVNc1JVRkJUVkVzUjBGQlJ5dENMRTFCUVUxRkxFMUJRVTBzWlVGRGFrTkVMRWxCUVdOcVJDeEZRVUZSYlVRc2IwSkJRVzFDU0N4RlFVRlJRU3hGUVVGTlNTeFJRVUZSTEdsQ1FVRnJRaXhMUVVkeVJpeEpRVUZKUXl4SFFVRnpRalZETEVWQlFVMVJMRWRCUVVkeFF5eFRRVUZUUXl4TlFVRk5ReXhMUVVGTkwwTXNSVUZCVFZFc1IwRkJSM0ZETEZOQlFWTkRMRTFCUVUxRkxFdEJRelZGUXl4RlFVRlBMRWxCUVVsc1JTeE5RVUZOYlVVc1UwRkJVM2hETEVWQlFVMDJRaXhGUVVGUGRFTXNSVUZCVlhWRExFVkJRVmtzUlVGQlNTeEZRVUZIU1N4SFFVTndSVThzUlVGQlZ6TkNMRVZCUVVkUkxGZEJRVmQwUWl4SFFVZDZRblpDTEVWQlFWbHBSU3h0UWtGQmJVSndReXhSUVVGUlRpeEhRVUZSTEVsQlF6ZERlVU1zUjBGQldVRXNSVUZCVTBVc1VVRkJVVW9zUzBGQlZVRXNTVUZCVTBVc1MwRkZPVU5CTEVkQlFWbEJMRVZCUVZOc1JDeFhRVUZoUVN4VFFVTTNRblZDTEVWQlFVZFJMRmRCUVZkMFFpeEhRVU5hZVVNc1NVRkZWRVlzUlVGQlMwc3NVMEZCVjBnc1IwRkhiRUl6UWl4RlFVRkhVU3hYUVVGWGRFSXNSMEZCVVhWRExGTkJkRWx3UTNaRUxFVkJRV1ZGTEZGQmFVcG1MRk5CUVhWQ05FSXNSMEZEWWl0Q0xFOUJRVTlETEV0QlFVdG9ReXhGUVVGSFVTeFpRVUZaTVVJc1QwRkJia01zU1VGRFNXMUVMRXRCU1VwR0xFOUJRVTlETEV0QlFVdG9ReXhGUVVGSFVTeFpRVUZaY0VNc1VVRkJVU3hUUVVGVE9FUXNSMEZGTVVNc1NVRkVRU3hKUVVGSlF5eEZRVUZMYmtNc1JVRkJSMUVzVjBGQlZ6QkNMRkZCUTBZc1NVRkJVRU1zUjBGRFdrWXNSVUZCVFhKQ0xFdEJRVXQxUWl4SFFVTllRU3hGUVVGTFFTeEZRVUZIVEN4WFFVdGFSeXhGUVVGTlJ5eExRVUZMTEZOQlFWTkRMRVZCUVVkRExFZEJRM0pDTEU5QlFVOUVMRVZCUVVWRkxGbEJRVmxFTEV0QlJYWkNMRWxCUVVsRkxFVkJRVk5RTEVWQlExWjJReXhQUVVGUExGTkJRVk1yUWl4SFFVZG1MRTFCUVhGQ0xGbEJRV1JCTEVWQlFVdEJMRTlCUldKblFpeEpRVUZKTEZOQlFWTm9RaXhIUVVOYUxFOUJRVTlCTEVWQlFVdEJMRXRCUVU4c1MwRkJUMEVzUlVGQlMxWXNUVUZCVFVrc1VVRkJVU3hQUVVGUkxFdEJRVkVzVFVGRk9VUjFRaXhMUVVGTExFdEJRMHBHTEVkQlEwWXpSU3hGUVVGRmJVTXNSMEZCU1ZNc1MwRkJTM1JETEVWQlFXOUNjVVVzUzBFMVN5OUNla1VzUlVGQlVUUkZMSE5DUVVOV2VrVXNSVUZCWlVVc1VVRXJTMnBDTEZOQlFUaENORUlzUjBGRE5VSXNSMEZCU1VFc1JVRkJSMjVDTEcxQ1FVRnhRbTFDTEVWQlFVZFJMRmRCUVZkdlF5eFJRVUZUTEVOQlEycEVMRWxCUVVsb1JTeEZRVGhFVml4VFFVRnpRbWRGTEVkQlEzQkNMRWRCUVdkQ0xGTkJRVnBCTEVkQlFXdERMRmRCUVZwQkxFVkJRM2hDTEUxQlFVOHNSMEZIVkN4SlFVRkpReXhGUVVGblFrUXNSVUZCVVROQ0xFMUJRVTBzYTBOQlEyeERMRWRCUVVrMFFpeEZRVUZsTEVOQlEycENMRWxCUVVsRExFVkJRVTFFTEVWQlFXTXNSMEZCUnpGQ0xGRkJRVkVzWlVGQlowSXNTVUZEYmtRc1QwRkJVelJDTEVsQlFVdEVMRWRCVDJoQ0xFOUJSRUZHTEVkQlJrRkJMRVZCUVZWQkxFVkJRVkZKTEUxQlFVMHNSVUZCUjBvc1JVRkJVVGxFTEU5QlFWTXNTVUZGTVVKeFF5eFJRVUZSTEUxQlFVOHNTVUUxUldoQ09FSXNRMEZCWVdwRUxFVkJRVWRSTEZkQlFWZHZReXhSUVVGUk4wSXNUMEZETlVOdVF5eEZRVUZQYlVVc1MwRkRWQzlETEVWQlFVZGtMRXRCUVU4c1RVRkRWbkpDTEVWQlFVVnRReXhIUVVGSlV5eExRVUZMTEUxQlFVODNRaXhGUVVGUGJVVXNUVUZGZWtKc1JpeEZRVUZGYlVNc1IwRkJTV3RFTEV0QlFVdDBSU3hIUVVWaUxFbEJRVWwxUlN4RlFVRlRia1FzUlVGQlIwOHNiMEpCUTJFc1YwRkJla0pRTEVWQlFVZHVRaXhyUWtGRFRHaENMRVZCUVVWelJpeEhRVUZSUXl4UlFVRlJjRVFzUjBGRmJFSnVReXhGUVVGRmMwWXNSMEZCVVVVc1QwRkJUM0pFTEUxQmVreHVRbXBETEVWQlFWRjFSaXh6UWtGRFZuQkdMRVZCUVdWRkxGRkJRVkVzVTBGQlV6UkNMRWRCUXpsQ2RVUXNSVUZCYTBKMlJDeEZRVUZKTEZkQlNYUkNha01zUlVGQlVYbEdMSFZDUVVOV2RFWXNSVUZCWlVVc1VVRkJVU3hUUVVGVE5FSXNSMEZET1VKMVJDeEZRVUZyUW5aRUxFVkJRVWtzV1VGSmRFSnFReXhGUVVGUk1FWXNPRUpCUTFaMlJpeEZRVUZsUlN4UlFUSk5ha0lzVTBGQmMwTTBRaXhIUVVOd1F5eEpRVUZMUVN4RlFVRkhaQ3hMUVVGUkxFOUJRMmhDTEVsQlFVbDNSU3hGUVVGVE1VUXNSVUZCUjJRc1MwRkJTMmxDTEdOQlEycENTeXhGUVVGaGRVSXNUMEZCVDBNc1MwRkJTM0pGTEVWQlFWbG5SeXhyUWtGRmVrTXNSMEZCU1doSExFVkJRVmxwUnl4alFVRmpjRVVzVVVGQlVXdEZMRWxCUVZjc1JVRkRMME1zU1VGQlN5eEpRVUZKTVVVc1MwRkJTMmRDTEVWQlFVZFJMRmRCUTJZc1IwRkJTVUVzUlVGQlYyaENMRkZCUVZGUkxFVkJRVWRSTEZkQlFWZDRRaXhIUVVGSGVVTXNUMEZCVXl4RlFVRkhMRU5CUTJ4RUxFbEJRVWxCTEVWQlFVODVSQ3hGUVVGWlowY3NhVUpCUVdsQ00wUXNSVUZCUjFFc1YwRkJWM2hDTEVkQlFVZDVReXhOUVVOeVJGWXNSVUZCVVdZc1JVRkJSMUVzVjBGQlYzaENMRWRCUVVjclFpeE5RVU5vUWl4bFFVRlVWU3hKUVVOR1ZpeEZRVUZST0VNc1JVRkJjVUk1UXl4SlFVVXZRbXhFTEVWQlFVVnRReXhIUVVGSlV5eExRVUZMWjBJc1JVRkJUVllzVFVGeVRuSkNhRVFzUlVGQlVTdEdMSGxDUVVFeVFpOUdMRVZCUVZGblJ5eFRRVUZWTEVOQlEzWkVMRWxCUVVsRExFVkJRV2RDZWtjc1RVRkJUVEJITEdsQ1FVRnBRbXhITEVWQlFWRm5SeXhWUVVOcVJFY3NZVUZCWTI1SExFVkJRVkZ2Unl4eFFrRkRkRUpETEZWQlFWZHlSeXhGUVVGUmMwY3NiMEpCUlhKQ0xFZEJRVWxNTEVWQlFXVXNRMEZEYWtJc1NVRkJTVTBzUlVGQldTeE5RVU4zUWl4SlFVRndRM1pITEVWQlFWRXJSaXgzUWtGRFZsRXNSVUZCV1hwSExFVkJRVVZGTEVWQlFWRXJSaXd5UWtGRmRFSlJMRVZCUVZsNlJ5eEZRVUZGTEZOQlEwTnBRaXhUUVVGVmQwWXNSVUZCV1hwSExFVkJRVVVzVTBGRGJFTjVSeXhGUVVGVmVFWXNVMEZCVlhkR0xFVkJRVmw2Unl4RlFVRkZNRWNzVTBGSGVrTkVMRVZCUVZWRkxGRkJRVkZ1UWl4UFFVRlBMRlZCUVZsWExFVkJRV2RDTEdGQkswcDZSQ3hUUVVGVFZDeEZRVUZyUW5aRUxFVkJRVWw1UlN4SFFVTTNRaXhIUVVGTGVrVXNSVUZCUjJRc1MwRkJVaXhEUVVOQkxFbEJRVWwzUlN4RlFVRlRNVVFzUlVGQlIyUXNTMEZCUzJsQ0xHTkJRM0pDTEVkQlFVbDRReXhGUVVGWk9FY3NSVUZCV1N4WlFVRlpha1lzVVVGQlVXdEZMRWxCUVZjc1JVRkRla1FzU1VGQlN5eEpRVUZKTVVVc1MwRkJTMmRDTEVWQlFVZFJMRmRCUTJZc1IwRkJTVklzUlVGQlIxRXNWMEZCVjNoQ0xFZEJRVWQ1UXl4UFFVRlRaMFFzUlVGQlZ5eERRVU4yUXl4SFFVRkpla1VzUlVGQlIxRXNWMEZCVjNoQ0xFZEJRVWNyUWl4TlFVRk5SU3hOUVVGTkxFMUJRVThzUTBGRGRFTXNTVUZCU1hsRUxFVkJRVk14UlN4RlFVRkhVU3hYUVVGWGVFSXNSMEZCUnl0Q0xFMUJRVTFKTEZGQlFWRXNTMEZCVFN4SlFVVnNSQ3haUVVSQmRFUXNSVUZCUlcxRExFZEJRVWxUTEV0QlFVdG5SU3hGUVVGWFF5eEhRVWQ0UWl4SFFVRkpMMGNzUlVGQldXbEhMR05CUVdOd1JTeFJRVUZSYTBVc1NVRkJWeXhIUVVGTE1VUXNSVUZCUjFFc1YwRkJWM2hDTEVkQlFVY3JRaXhOUVVGTlJTeE5RVUZOTEUxQlJXcEdMRmxCUkVGd1JDeEZRVUZGYlVNc1IwRkJTVk1zUzBGQlMyZEZMRVZCUVZkNlJTeEZRVUZIVVN4WFFVRlhlRUlzUjBGQlJ5dENMRk5CVVdwRUxGTkJRVk00UXl4RlFVRnhRamxETEVkQlF6VkNMRTlCUVdsRExFbEJRVEZDUVN4RlFVRk5ka0lzVVVGQlVTeFJRVU5xUW5WQ0xFVkJRMEZCTEVWQlFVMUpMRkZCUVZFc05rSkJRVGhDTEU5Qk5FUndSQ3hUUVVGVGJFTXNSVUZCYjBKVkxFZEJRek5DTEUxQlFYVkNMRmRCUVdoQ1FTeEZRVUZQVkN4TlFVRnhReXhWUVVGb1FsTXNSVUZCVDFRc1MwRnhSRFZETEU5QmVsZEJka0lzUlVGQldUUkNMR2RDUVVGclFpeFJRVUZUTEZOQlFWVXNVVUZCVXl4VlFVRlhMRkZCUTNKRk5VSXNSVUZCV1dkSUxHVkJRV2xDTEZGQlFWTXNTMEZCVFN4UFFVTTFRMmhJTEVWQlFWbHBTQ3huUWtGQmEwSXNVVUZCVXl4TFFVRk5MRTlCUXpkRGFrZ3NSVUZCV1dsSExHVkJRV2xDTEZGQlFWTXNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hWUVVGWExGZEJRVmtzVFVGQlR5eFJRVUZUTEZGQlFWTXNVMEZET1VkcVJ5eEZRVUZaZFVNc2JVSkJRWE5DTEU5QlFWRXNVVUZCVXl4UFFVRlJMRTlCUVZFc1VVRkJVeXhQUVVGUkxGTkJRVlVzV1VGRE9VWjJReXhGUVVGWlowY3NhMEpCUTFaclFpeHRRa0ZCYjBJc1ZVRkRjRUpETEcxQ1FVRnZRaXhoUVVOd1FrTXNZVUZCWXl4UlFVTmtReXhwUWtGQmEwSXNWVUZGY0VKeVNDeEZRVUZaYVVVc2MwSkJSVnBxUlN4RlFVRlpjMGdzWTBGblZGb3NVMEZCZFVKd1NDeEZRVUZIUlN4SFFVTjRRa0VzUlVGQlZWSXNUVUZCVFRKSUxHdENRVUZyUW01SUxFZEJRMnhETEVsQlFVbEVMRVZCYjBOT0xGTkJRV2REUkN4RlFVRkhSU3hIUVVkcVF5eFBRV3BEUml4VFFVRjFRa1lzUlVGQlIwVXNSMEZEZUVJc1NVRkZTVzlJTEVWQlFXVkRMRVZCUVZkRExFVkJSakZDUXl4TFFUQkNTaXhQUVhwQ2FVSjZTQ3hGUVVGRkxGTkJSVkpyUXl4TFFVRkxMRmRCUjJRc1IwRkJOa0lzUzBGRU4wSnZSaXhIUVVSQlJTeEZRVUZsY0VZc1RVRkRZM05HTEZsQlExaDZSeXhQUVVGc1FpeERRVTlCTEVkQlNrRnpSeXhGUVVGWlJDeEZRVUZqTEVkQlFVZExMRXRCUTNwQ2VrZ3NSVUZCVVRCSUxIRkNRVUY1UkVNc1NVRkJka00zU0N4RlFVRkZkMGdzUjBGQll6VkZMRXRCUVVzc1pVRkRha1EyUlN4RlFVRlJNVVVzUzBGQlMzZEZMRWRCUlZoeVNDeEZRVUZSTkVnc2MwSkJRVEJFUkN4SlFVRjJRemRJTEVWQlFVVjNTQ3hIUVVGak5VVXNTMEZCU3l4alFVRTJRaXhEUVVNdlJTeEpRVUZKZFVRc1JVRkJaMEo2Unl4TlFVRk5NRWNzYVVKQlFXbENiMElzUlVGQllVVXNWMEZCVnl4SFFVRkhTeXhYUVVOd1JURkNMR0ZCUVdOdVJ5eEZRVUZSYjBjc2NVSkJRM1JDUXl4VlFVRlhja2NzUlVGQlVYTkhMRzlDUVVWcVFrd3NSVUZEUm5GQ0xFVkJRV0ZGTEZkQlFWY3NSMEZCUjBzc1ZVRkJXVFZDTEVWQlJYWkRia2NzUlVGQlJYZElMRWRCUVdOUkxGTkJSM0JDYUVrc1JVRkJSWGRJTEVkQlFXTlRMRmRCUVZjc2FVSkJSWFJDVWl4RlFVbFBVeXhEUVVGamJFa3NSVUZCUjBVc1IwRkRZakpGTEV0QlFVc3NUVUYwUTJKelJDeERRVUYxUW01SkxFVkJRVWRGTEVkQlIzQkRMRTlCUmtGRUxFZEJRVThzUzBGQlQwTXNSVUZCVVdkSExGTkJRM1JDYmtjc1JVRkJaVU1zUlVGQlIwTXNSVUZCUzBNc1IwRkRhRUpHTEVkQmNGUlVSaXhGUVVGWlF5eGxRVUZwUWtFc1JVRXlWblJDUkNJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl1YjJSbFgyMXZaSFZzWlhNdmFuVnBZMlV2YkdsaUwybHViR2x1WlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjttb2R1bGUuZXhwb3J0cz1leHBvcnRzPVByb3BlcnR5O3ZhciB1dGlscz1yZXF1aXJlKFwiLi91dGlsc1wiKTtmdW5jdGlvbiBQcm9wZXJ0eSh0LHIsaSxwLG8pe3RoaXMucHJvcD10LHRoaXMudmFsdWU9cix0aGlzLnNlbGVjdG9yPWksdGhpcy5wcmlvcml0eT1wfHwwLHRoaXMuYWRkaXRpb25hbFByaW9yaXR5PW98fFtdfVByb3BlcnR5LnByb3RvdHlwZS5jb21wYXJlRnVuYz1mdW5jdGlvbih0KXt2YXIgcj1bXTtyLnB1c2guYXBwbHkocix0aGlzLnNlbGVjdG9yLnNwZWNpZmljaXR5KCkpLHIucHVzaC5hcHBseShyLHRoaXMuYWRkaXRpb25hbFByaW9yaXR5KSxyWzBdKz10aGlzLnByaW9yaXR5O3ZhciBpPVtdO3JldHVybiBpLnB1c2guYXBwbHkoaSx0LnNlbGVjdG9yLnNwZWNpZmljaXR5KCkpLGkucHVzaC5hcHBseShpLHQuYWRkaXRpb25hbFByaW9yaXR5KSxpWzBdKz10LnByaW9yaXR5LHV0aWxzLmNvbXBhcmVGdW5jKHIsaSl9LFByb3BlcnR5LnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKHQpe3JldHVybiAxPT09dGhpcy5jb21wYXJlRnVuYyh0KT90aGlzOnR9LFByb3BlcnR5LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3ArXCI6IFwiK3RoaXMudmFsdWUucmVwbGFjZSgvWydcIl0rL2csXCJcIikrXCI7XCJ9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CeWIzQmxjblI1TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pRY205d1pYSjBlU0lzSW5WMGFXeHpJaXdpY21WeGRXbHlaU0lzSW5CeWIzQWlMQ0oyWVd4MVpTSXNJbk5sYkdWamRHOXlJaXdpY0hKcGIzSnBkSGtpTENKaFpHUnBkR2x2Ym1Gc1VISnBiM0pwZEhraUxDSjBhR2x6SWl3aWNISnZkRzkwZVhCbElpd2lZMjl0Y0dGeVpVWjFibU1pTENKd2NtOXdaWEowZVNJc0ltRWlMQ0p3ZFhOb0lpd2lZWEJ3YkhraUxDSnpjR1ZqYVdacFkybDBlU0lzSW1JaUxDSmpiMjF3WVhKbElpd2lkRzlUZEhKcGJtY2lMQ0p5WlhCc1lXTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFBRVUZQUXl4UlFVRlZRU3hSUVVGVlF5eFRRVTB6UWl4SlFVRkpReXhOUVVGUlF5eFJRVUZSTEZkQllYQkNMRk5CUVZOR0xGTkJRVk5ITEVWQlFVMURMRVZCUVU5RExFVkJRVlZETEVWQlFWVkRMRWRCUTJwRVF5eExRVUZMVEN4TFFVRlBRU3hGUVVOYVN5eExRVUZMU2l4TlFVRlJRU3hGUVVOaVNTeExRVUZMU0N4VFFVRlhRU3hGUVVOb1FrY3NTMEZCUzBZc1UwRkJWMEVzUjBGQldTeEZRVU0xUWtVc1MwRkJTMFFzYlVKQlFYRkNRU3hOUVZNMVFsQXNVMEZCVTFNc1ZVRkJWVU1zV1VGQll5eFRRVUZUUXl4SFFVTjRReXhKUVVGSlF5eExRVU5LUVN4RlFVRkZReXhMUVVGTFF5eE5RVUZOUml4RlFVRkhTaXhMUVVGTFNDeFRRVUZUVlN4bFFVTTVRa2dzUlVGQlJVTXNTMEZCUzBNc1RVRkJUVVlzUlVGQlIwb3NTMEZCUzBRc2IwSkJRM0pDU3l4RlFVRkZMRWxCUVUxS0xFdEJRVXRHTEZOQlEySXNTVUZCU1ZVc1MwRkpTaXhQUVVoQlFTeEZRVUZGU0N4TFFVRkxReXhOUVVGTlJTeEZRVUZIVEN4RlFVRlRUaXhUUVVGVFZTeGxRVU5zUTBNc1JVRkJSVWdzUzBGQlMwTXNUVUZCVFVVc1JVRkJSMHdzUlVGQlUwb3NiMEpCUTNwQ1V5eEZRVUZGTEVsQlFVMU1MRVZCUVZOTUxGTkJRMVpNTEUxQlFVMVRMRmxCUVZsRkxFVkJRVWRKTEVsQlJ6bENhRUlzVTBGQlUxTXNWVUZCVlZFc1VVRkJWU3hUUVVGVFRpeEhRVVZ3UXl4UFFVRmxMRWxCUkVaSUxFdEJRVXRGTEZsQlFWbERMRWRCUlhKQ1NDeExRVVZHUnl4SFFWVlVXQ3hUUVVGVFV5eFZRVUZWVXl4VFFVRlhMRmRCUXpWQ0xFOUJRVTlXTEV0QlFVdE1MRXRCUVU4c1MwRkJUMHNzUzBGQlMwb3NUVUZCVFdVc1VVRkJVU3hUUVVGVkxFbEJRVTBpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZibTlrWlY5dGIyUjFiR1Z6TDJwMWFXTmxMMnhwWWk5d2NtOXdaWEowZVM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgcGFyc2VyPXJlcXVpcmUoXCJzbGljay9wYXJzZXJcIik7ZnVuY3Rpb24gU2VsZWN0b3IodCxlKXt0aGlzLnRleHQ9dCx0aGlzLnNwZWM9dm9pZCAwLHRoaXMuc3R5bGVBdHRyaWJ1dGU9ZXx8ITF9ZnVuY3Rpb24gcGFyc2UodCl7dHJ5e3JldHVybiBwYXJzZXIodClbMF19Y2F0Y2godCl7cmV0dXJuW119fW1vZHVsZS5leHBvcnRzPWV4cG9ydHM9U2VsZWN0b3IsU2VsZWN0b3IucHJvdG90eXBlLnBhcnNlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRva2Vuc3x8KHRoaXMudG9rZW5zPXBhcnNlKHRoaXMudGV4dCkpLHRoaXMudG9rZW5zfSxTZWxlY3Rvci5wcm90b3R5cGUuc3BlY2lmaWNpdHk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN0eWxlQXR0cmlidXRlO3JldHVybiB0aGlzLnNwZWN8fCh0aGlzLnNwZWM9ZnVuY3Rpb24gZShyLHMpe3ZhciBpPXN8fHBhcnNlKHIpO3ZhciBhPVt0PzE6MCwwLDAsMF07dmFyIG49W107Zm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspe3ZhciBjPWlbb10saD1jLnBzZXVkb3M7aWYoYy5pZCYmYVsxXSsrLGMuYXR0cmlidXRlcyYmKGFbMl0rPWMuYXR0cmlidXRlcy5sZW5ndGgpLGMuY2xhc3NMaXN0JiYoYVsyXSs9Yy5jbGFzc0xpc3QubGVuZ3RoKSxjLnRhZyYmXCIqXCIhPT1jLnRhZyYmYVszXSsrLGgpe2FbM10rPWgubGVuZ3RoO2Zvcih2YXIgcD0wO3A8aC5sZW5ndGg7cCsrKVwibm90XCI9PT1oW3BdLm5hbWUmJihuLnB1c2goaFtwXS52YWx1ZSksYVszXS0tKX19Zm9yKHZhciB1PW4ubGVuZ3RoO3UtLTspZm9yKHZhciBsPWUoblt1XSksdj00O3YtLTspYVt2XSs9bFt2XTtyZXR1cm4gYX0odGhpcy50ZXh0LHRoaXMucGFyc2VkKCkpKSx0aGlzLnNwZWN9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5ObGJHVmpkRzl5TG1weklsMHNJbTVoYldWeklqcGJJbkJoY25ObGNpSXNJbkpsY1hWcGNtVWlMQ0pUWld4bFkzUnZjaUlzSW5SbGVIUWlMQ0p6ZEhsc1pVRjBkSEpwWW5WMFpTSXNJblJvYVhNaUxDSnpjR1ZqSWl3aWRXNWtaV1pwYm1Wa0lpd2ljR0Z5YzJVaUxDSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5CeWIzUnZkSGx3WlNJc0luQmhjbk5sWkNJc0luUnZhMlZ1Y3lJc0luTndaV05wWm1samFYUjVJaXdpWlhod2NtVnpjMmx2Ym5NaUxDSnViM1J6SWl3aWFTSXNJbXhsYm1kMGFDSXNJbVY0Y0hKbGMzTnBiMjRpTENKd2MyVjFaRzl6SWl3aWFXUWlMQ0poZEhSeWFXSjFkR1Z6SWl3aVkyeGhjM05NYVhOMElpd2lkR0ZuSWl3aWNDSXNJbTVoYldVaUxDSndkWE5vSWl3aWRtRnNkV1VpTENKcGFTSXNJbTV2ZENJc0ltcHFJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1owSkJXWEpDTEZOQlFWTkRMRk5CUVZORExFVkJRVTFETEVkQlEzUkNReXhMUVVGTFJpeExRVUZQUVN4RlFVTmFSU3hMUVVGTFF5eFZRVUZQUXl4RlFVTmFSaXhMUVVGTFJDeGxRVUZwUWtFc1NVRkJhMElzUlVGNVJURkRMRk5CUVZOSkxFMUJRVTFNTEVkQlEySXNTVUZEUlN4UFFVRlBTQ3hQUVVGUFJ5eEhRVUZOTEVkQlEzQkNMRTFCUVU5TkxFZEJRMUFzVlVFeFJrcERMRTlCUVU5RExGRkJRVlZCTEZGQlFWVlVMRk5CYzBJelFrRXNVMEZCVTFVc1ZVRkJWVU1zVDBGQlV5eFhRVVV4UWl4UFFVUkxVaXhMUVVGTFV5eFRRVUZWVkN4TFFVRkxVeXhQUVVGVFRpeE5RVUZOU0N4TFFVRkxSaXhQUVVOMFEwVXNTMEZCUzFNc1VVRlRaRm9zVTBGQlUxVXNWVUZCVlVjc1dVRkJZeXhYUVVNdlFpeEpRVUZKV0N4RlFVRnBRa01zUzBGQlMwUXNaVUZGTVVJc1QwRkVTME1zUzBGQlMwTXNUMEZCVVVRc1MwRkJTME1zUzBGSGRrSXNVMEZCVTFNc1JVRkJXVm9zUlVGQlRWVXNSMEZEZWtJc1NVRkJTVWNzUlVGQlkwZ3NSMEZCVlV3c1RVRkJUVXdzUjBGRGJFTXNTVUZCU1Vjc1IwRkJVVVlzUlVGQmFVSXNSVUZCU1N4RlFVRkhMRVZCUVVjc1JVRkJSeXhIUVVNeFF5eEpRVUZKWVN4TFFVVktMRWxCUVVzc1NVRkJTVU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpSaXhGUVVGWlJ5eFBRVUZSUkN4SlFVRkxMRU5CUXpORExFbEJRVWxGTEVWQlFXRktMRVZCUVZsRkxFZEJRM3BDUnl4RlFVRlZSQ3hGUVVGWFF5eFJRV0Y2UWl4SFFWWkpSQ3hGUVVGWFJTeEpRVUZOYUVJc1JVRkJTeXhMUVVkMFFtTXNSVUZCVjBjc1lVRkJZMnBDTEVWQlFVc3NTVUZCVFdNc1JVRkJWMGNzVjBGQlYwb3NVVUZETVVSRExFVkJRVmRKTEZsQlFXRnNRaXhGUVVGTExFbEJRVTFqTEVWQlFWZEpMRlZCUVZWTUxGRkJSM2hFUXl4RlFVRlhTeXhMUVVFd1FpeE5RVUZ1UWt3c1JVRkJWMHNzUzBGQlpXNUNMRVZCUVVzc1MwRkhha1JsTEVWQlFWTXNRMEZEV0dZc1JVRkJTeXhKUVVGTlpTeEZRVUZSUml4UFFVVnVRaXhKUVVGTExFbEJRVWxQTEVWQlFVa3NSVUZCUjBFc1JVRkJTVXdzUlVGQlVVWXNUMEZCVVU4c1NVRkRWaXhSUVVGd1Frd3NSVUZCVVVzc1IwRkJSME1zVDBGRFlsWXNSVUZCUzFjc1MwRkJTMUFzUlVGQlVVc3NSMEZCUjBjc1QwRkRja0oyUWl4RlFVRkxMRTlCVFdJc1NVRkJTeXhKUVVGSmQwSXNSVUZCUzJJc1JVRkJTMFVzVDBGQlVWY3NTMEZGZWtJc1NVRkVRU3hKUVVGSlF5eEZRVUZOYUVJc1JVRkJXVVVzUlVGQlMyRXNTVUZEYkVKRkxFVkJRVXNzUlVGQlIwRXNTMEZCVXpGQ0xFVkJRVXN3UWl4SlFVRlBSQ3hGUVVGSlF5eEhRVWMxUXl4UFFVRlBNVUlzUlVGNFEzRkNVeXhEUVVGWlZpeExRVUZMUml4TFFVRk5SU3hMUVVGTFVTeFhRVU51UkZJc1MwRkJTME1pTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZibTlrWlY5dGIyUjFiR1Z6TDJwMWFXTmxMMnhwWWk5elpXeGxZM1J2Y2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgbWVuc2NoPXJlcXVpcmUoXCJtZW5zY2hcIiksb3duPXt9Lmhhc093blByb3BlcnR5LFNlbGVjdG9yPXJlcXVpcmUoXCIuL3NlbGVjdG9yXCIpLFByb3BlcnR5PXJlcXVpcmUoXCIuL3Byb3BlcnR5XCIpO2V4cG9ydHMuU2VsZWN0b3I9U2VsZWN0b3IsZXhwb3J0cy5Qcm9wZXJ0eT1Qcm9wZXJ0eSxleHBvcnRzLmV4dHJhY3Q9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAscj1bXSxzPVwiXCIsbj0wLG89ZS5sZW5ndGg7bjxvO24rKyl7dmFyIGk9ZS5jaGFyQXQobik7dD8oXCJdXCIhPT1pJiZcIilcIiE9PWl8fHQtLSxzKz1pKTpcIixcIj09PWk/KHIucHVzaChzKSxzPVwiXCIpOihcIltcIiE9PWkmJlwiKFwiIT09aXx8dCsrLChzLmxlbmd0aHx8XCIsXCIhPT1pJiZcIlxcblwiIT09aSYmXCIgXCIhPT1pKSYmKHMrPWkpKX1yZXR1cm4gcy5sZW5ndGgmJnIucHVzaChzKSxyfSxleHBvcnRzLnBhcnNlQ1NTPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1tZW5zY2gucGFyc2UoZSx7cG9zaXRpb246ITAsY29tbWVudHM6ITB9KSxyPXZvaWQgMCE9PXQuc3R5bGVzaGVldCYmdC5zdHlsZXNoZWV0LnJ1bGVzP3Quc3R5bGVzaGVldC5ydWxlczpbXSxzPVtdLG49MCxvPXIubGVuZ3RoO248bztuKyspaWYoXCJydWxlXCI9PXJbbl0udHlwZSlmb3IodmFyIGk9cltuXSxwPWkuc2VsZWN0b3JzLGw9MCxhPXAubGVuZ3RoO2w8YTtsKyspcy5wdXNoKFtwW2xdLGkuZGVjbGFyYXRpb25zXSk7cmV0dXJuIHN9LGV4cG9ydHMuZ2V0UHJlc2VydmVkVGV4dD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1tZW5zY2gucGFyc2UoZSx7cG9zaXRpb246ITAsY29tbWVudHM6ITB9KSxzPXZvaWQgMCE9PXIuc3R5bGVzaGVldCYmci5zdHlsZXNoZWV0LnJ1bGVzP3Iuc3R5bGVzaGVldC5ydWxlczpbXSxuPVtdLG89cy5sZW5ndGgtMTtvPj0wO28tLSkodC5mb250RmFjZXMmJlwiZm9udC1mYWNlXCI9PT1zW29dLnR5cGV8fHQubWVkaWFRdWVyaWVzJiZcIm1lZGlhXCI9PT1zW29dLnR5cGUpJiZuLnVuc2hpZnQobWVuc2NoLnN0cmluZ2lmeSh7c3R5bGVzaGVldDp7cnVsZXM6W3Nbb11dfX0se2NvbW1lbnRzOiExLGluZGVudGF0aW9uOlwiICBcIn0pKSxzW29dLnBvc2l0aW9uLnN0YXJ0O3JldHVybiAwIT09bi5sZW5ndGgmJlwiXFxuXCIrbi5qb2luKFwiXFxuXCIpK1wiXFxuXCJ9LGV4cG9ydHMubm9ybWFsaXplTGluZUVuZGluZ3M9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxuL2csXCJcXHJcXG5cIil9LGV4cG9ydHMuY29tcGFyZUZ1bmM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9TWF0aC5taW4oZS5sZW5ndGgsdC5sZW5ndGgpLHM9MDtzPHI7cysrKWlmKGVbc10hPT10W3NdKXJldHVybiBlW3NdPnRbc10/MTotMTtyZXR1cm4gZS5sZW5ndGgtdC5sZW5ndGh9LGV4cG9ydHMuY29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiAxPT1leHBvcnRzLmNvbXBhcmVGdW5jKGUsdCk/ZTp0fSxleHBvcnRzLmV4dGVuZD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KW93bi5jYWxsKHQscikmJihlW3JdPXRbcl0pO3JldHVybiBlfSxleHBvcnRzLmdldERlZmF1bHRPcHRpb25zPWZ1bmN0aW9uKGUpe3ZhciB0PWV4cG9ydHMuZXh0ZW5kKHtleHRyYUNzczpcIlwiLGluc2VydFByZXNlcnZlZEV4dHJhQ3NzOiEwLGFwcGx5U3R5bGVUYWdzOiEwLHJlbW92ZVN0eWxlVGFnczohMCxwcmVzZXJ2ZU1lZGlhUXVlcmllczohMCxwcmVzZXJ2ZUZvbnRGYWNlczohMCxhcHBseVdpZHRoQXR0cmlidXRlczohMCxhcHBseUhlaWdodEF0dHJpYnV0ZXM6ITAsYXBwbHlBdHRyaWJ1dGVzVGFibGVFbGVtZW50czohMCx1cmw6XCJcIn0sZSk7cmV0dXJuIHQud2ViUmVzb3VyY2VzPXQud2ViUmVzb3VyY2VzfHx7fSx0fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJJbTFsYm5OamFDSXNJbkpsY1hWcGNtVWlMQ0p2ZDI0aUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0lsTmxiR1ZqZEc5eUlpd2lVSEp2Y0dWeWRIa2lMQ0psZUhCdmNuUnpJaXdpWlhoMGNtRmpkQ0lzSW5ObGJHVmpkRzl5VkdWNGRDSXNJbUYwZEhJaUxDSnpaV3h6SWl3aWMyVnNJaXdpYVNJc0ltd2lMQ0pzWlc1bmRHZ2lMQ0pqSWl3aVkyaGhja0YwSWl3aWNIVnphQ0lzSW5CaGNuTmxRMU5USWl3aVkzTnpJaXdpY0dGeWMyVmtJaXdpY0dGeWMyVWlMQ0p3YjNOcGRHbHZiaUlzSW1OdmJXMWxiblJ6SWl3aWNuVnNaWE1pTENKemRIbHNaWE5vWldWMElpd2ljbVYwSWl3aWRIbHdaU0lzSW5KMWJHVWlMQ0p6Wld4bFkzUnZjbk1pTENKcGFTSXNJbXhzSWl3aVpHVmpiR0Z5WVhScGIyNXpJaXdpWjJWMFVISmxjMlZ5ZG1Wa1ZHVjRkQ0lzSW05d2RHbHZibk1pTENKd2NtVnpaWEoyWldRaUxDSm1iMjUwUm1GalpYTWlMQ0p0WldScFlWRjFaWEpwWlhNaUxDSjFibk5vYVdaMElpd2ljM1J5YVc1bmFXWjVJaXdpYVc1a1pXNTBZWFJwYjI0aUxDSnpkR0Z5ZENJc0ltcHZhVzRpTENKdWIzSnRZV3hwZW1WTWFXNWxSVzVrYVc1bmN5SXNJblJsZUhRaUxDSnlaWEJzWVdObElpd2lZMjl0Y0dGeVpVWjFibU1pTENKaElpd2lZaUlzSW0xcGJpSXNJazFoZEdnaUxDSmpiMjF3WVhKbElpd2laWGgwWlc1a0lpd2liMkpxSWl3aWMzSmpJaXdpYTJWNUlpd2lZMkZzYkNJc0ltZGxkRVJsWm1GMWJIUlBjSFJwYjI1eklpd2ljbVZ6ZFd4MElpd2laWGgwY21GRGMzTWlMQ0pwYm5ObGNuUlFjbVZ6WlhKMlpXUkZlSFJ5WVVOemN5SXNJbUZ3Y0d4NVUzUjViR1ZVWVdkeklpd2ljbVZ0YjNabFUzUjViR1ZVWVdkeklpd2ljSEpsYzJWeWRtVk5aV1JwWVZGMVpYSnBaWE1pTENKd2NtVnpaWEoyWlVadmJuUkdZV05sY3lJc0ltRndjR3g1VjJsa2RHaEJkSFJ5YVdKMWRHVnpJaXdpWVhCd2JIbElaV2xuYUhSQmRIUnlhV0oxZEdWeklpd2lZWEJ3YkhsQmRIUnlhV0oxZEdWelZHRmliR1ZGYkdWdFpXNTBjeUlzSW5WeWJDSXNJbmRsWWxKbGMyOTFjbU5sY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRk5RU3hKUVVGSlFTeFBRVUZUUXl4UlFVRlJMRlZCUTJwQ1F5eFBRVUZUUXl4bFFVTlVReXhUUVVGWFNDeFJRVUZSTEdOQlEyNUNTU3hUUVVGWFNpeFJRVUZSTEdOQlJYWkNTeXhSUVVGUlJpeFRRVUZYUVN4VFFVTnVRa1VzVVVGQlVVUXNVMEZCVjBFc1UwRlZia0pETEZGQlFWRkRMRkZCUVZVc1UwRkJhVUpETEVkQlMycERMRWxCU2tFc1NVRkJTVU1zUlVGQlR5eEZRVU5RUXl4TFFVTkJReXhGUVVGTkxFZEJSVVJETEVWQlFVa3NSVUZCUjBNc1JVRkJTVXdzUlVGQllVMHNUMEZCVVVZc1JVRkJTVU1zUlVGQlIwUXNTVUZCU3l4RFFVTnVSQ3hKUVVGSlJ5eEZRVUZKVUN4RlFVRmhVU3hQUVVGUFNpeEhRVVY0UWtnc1IwRkRSU3hOUVVGUlRTeEhRVUZMTEUxQlFWRkJMRWRCUVV0T0xFbEJRemxDUlN4SFFVRlBTU3hIUVVWSUxFMUJRVkZCTEVkQlExWk1MRVZCUVV0UExFdEJRVXRPTEVkQlExWkJMRVZCUVUwc1MwRkZSaXhOUVVGUlNTeEhRVUZMTEUxQlFWRkJMRWRCUVV0T0xFdEJRekZDUlN4RlFVRkpSeXhSUVVGcFFpeE5RVUZPUXl4SFFVRnRRaXhQUVVGT1FTeEhRVUZ2UWl4TlFVRk9RU3hMUVVGalNpeEhRVUZQU1N4SlFWTjZSU3hQUVVwSlNpeEZRVUZKUnl4UlFVTk9TaXhGUVVGTFR5eExRVUZMVGl4SFFVZE1SQ3hIUVZsVVNpeFJRVUZSV1N4VFFVRlhMRk5CUVZORExFZEJTekZDTEVsQlNrRXNTVUZCU1VNc1JVRkJVM0JDTEU5QlFVOXhRaXhOUVVGTlJpeEhRVUZOUnl4VlFVRlZMRVZCUVUxRExGVkJRVlVzU1VGRGRFUkRMRTlCUVc5RExFbEJRWEpDU2l4RlFVRlBTeXhaUVVFMlFrd3NSVUZCVDBzc1YwRkJWMFFzVFVGQlVVb3NSVUZCVDBzc1YwRkJWMFFzVTBGREwwWkZMRXRCUlV0a0xFVkJRVWtzUlVGQlIwTXNSVUZCU1Zjc1JVRkJUVllzVDBGQlVVWXNSVUZCU1VNc1JVRkJSMFFzU1VGRGRrTXNSMEZCY1VJc1VVRkJha0paTEVWQlFVMWFMRWRCUVVkbExFdEJTVmdzU1VGSVFTeEpRVUZKUXl4RlFVRlBTaXhGUVVGTldpeEhRVU5pYVVJc1JVRkJXVVFzUlVGQlMwTXNWVUZGV2tNc1JVRkJTeXhGUVVGSFF5eEZRVUZMUml4RlFVRlZaaXhQUVVGUlowSXNSVUZCUzBNc1JVRkJTVVFzU1VGREwwTktMRVZCUVVsVUxFMUJRVTFaTEVWQlFWVkRMRWRCUVV0R0xFVkJRVXRKTEdWQlMzQkRMRTlCUVU5T0xFZEJWMVJ3UWl4UlFVRlJNa0lzYVVKQlFXMUNMRk5CUVZOa0xFVkJRVXRsTEVkQlRYWkRMRWxCVEVFc1NVRkJTV1FzUlVGQlUzQkNMRTlCUVU5eFFpeE5RVUZOUml4SFFVRk5SeXhWUVVGVkxFVkJRVTFETEZWQlFWVXNTVUZEZEVSRExFOUJRVzlETEVsQlFYSkNTaXhGUVVGUFN5eFpRVUUyUWt3c1JVRkJUMHNzVjBGQlYwUXNUVUZCVVVvc1JVRkJUMHNzVjBGQlYwUXNVMEZETDBaWExFdEJSMHQyUWl4RlFVRkpXU3hGUVVGTlZpeFBRVUZUTEVWQlFVZEdMRWRCUVVzc1JVRkJSMEVzUzBGRGFFTnpRaXhGUVVGUlJTeFhRVUVyUWl4alFVRnNRbG9zUlVGQlRWb3NSMEZCUjJVc1RVRkRPVUpQTEVWQlFWRkhMR05CUVd0RExGVkJRV3hDWWl4RlFVRk5XaXhIUVVGSFpTeFBRVU53UTFFc1JVRkJWVWNzVVVGRFVuUkRMRTlCUVU5MVF5eFhRVU5JWkN4WlFVRmpSQ3hQUVVGVFFTeEZRVUZOV2l4UFFVTTNRbGNzVlVGQlZTeEZRVUZQYVVJc1dVRkJZU3hSUVVreFFtaENMRVZCUVUxYUxFZEJRVWRWTEZOQlFWTnRRaXhOUVVkb1F5eFBRVUY1UWl4SlFVRnlRazRzUlVGQlZYSkNMRkZCUjFBc1MwRkJUM0ZDTEVWQlFWVlBMRXRCUVVzc1RVRkJVU3hOUVVkMlEzQkRMRkZCUVZGeFF5eHhRa0ZCZFVJc1UwRkJVME1zUjBGRGRFTXNUMEZCVDBFc1JVRkJTME1zVVVGQlVTeFJRVUZUTEUxQlFVMUJMRkZCUVZFc1RVRkJUeXhUUVdGd1JIWkRMRkZCUVZGM1F5eFpRVUZqTEZOQlFWTkRMRVZCUVVkRExFZEJSV2hETEVsQlJFRXNTVUZCU1VNc1JVRkJUVU1zUzBGQlMwUXNTVUZCU1VZc1JVRkJSV3BETEU5QlFWRnJReXhGUVVGRmJFTXNVVUZEZEVKR0xFVkJRVWtzUlVGQlIwRXNSVUZCU1hGRExFVkJRVXR5UXl4SlFVTjJRaXhIUVVGSmJVTXNSVUZCUlc1RExFdEJRVTl2UXl4RlFVRkZjRU1zUjBGRFppeFBRVUZKYlVNc1JVRkJSVzVETEVkQlFVdHZReXhGUVVGRmNFTXNSMEZCWVN4SFFVTnNRaXhGUVVkV0xFOUJRVTl0UXl4RlFVRkZha01zVDBGQlUydERMRVZCUVVWc1F5eFJRVWQwUWxJc1VVRkJVVFpETEZGQlFWVXNVMEZCVTBvc1JVRkJSME1zUjBGRE5VSXNUMEZCYjBNc1IwRkJOMEl4UXl4UlFVRlJkME1zV1VGQldVTXNSVUZCUjBNc1IwRkJWVVFzUlVGQlNVTXNSMEZIT1VNeFF5eFJRVUZST0VNc1QwRkJVeXhUUVVGVFF5eEZRVUZMUXl4SFFVTTNRaXhKUVVGTExFbEJRVWxETEV0QlFVOUVMRVZCUTFad1JDeEpRVUZKYzBRc1MwRkJTMFlzUlVGQlMwTXNTMEZEYUVKR0xFVkJRVWxGTEVkQlFVOUVMRVZCUVVsRExFbEJSMjVDTEU5QlFVOUdMRWRCUjFRdlF5eFJRVUZSYlVRc2EwSkJRVzlDTEZOQlFWTjJRaXhIUVVOdVF5eEpRVUZKZDBJc1JVRkJVM0JFTEZGQlFWRTRReXhSUVVOdVFrOHNVMEZCVlN4SFFVTldReXg1UWtGQmVVSXNSVUZEZWtKRExHZENRVUZuUWl4RlFVTm9Ra01zYVVKQlFXbENMRVZCUTJwQ1F5eHpRa0ZCYzBJc1JVRkRkRUpETEcxQ1FVRnRRaXhGUVVOdVFrTXNjMEpCUVhOQ0xFVkJRM1JDUXl4MVFrRkJkVUlzUlVGRGRrSkRMRGhDUVVFNFFpeEZRVU01UWtNc1NVRkJTeXhKUVVOS2JFTXNSMEZKU0N4UFFVWkJkMElzUlVGQlQxY3NZVUZCWlZnc1JVRkJUMWNzYVVKQlJYUkNXQ0lzSW1acGJHVWlPaUl2ZG1GeUwzZDNkeTl0YjNOaGFXTnZMVzFoYzNSbGNpOXViMlJsWDIxdlpIVnNaWE12YW5WcFkyVXZiR2xpTDNWMGFXeHpMbXB6SW4wPSIsIiFmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtcImtub2Nrb3V0XCIsXCJqcXVlcnlcIixcImpxdWVyeS11aS91aS93aWRnZXRzL3NvcnRhYmxlXCIsXCJqcXVlcnktdWkvdWkvd2lkZ2V0cy9kcmFnZ2FibGVcIixcImpxdWVyeS11aS91aS93aWRnZXRzL2Ryb3BwYWJsZVwiXSxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlKXt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeS51aS5zb3J0YWJsZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwualF1ZXJ5LnVpLnNvcnRhYmxlLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeS51aS5kcmFnZ2FibGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmpRdWVyeS51aS5kcmFnZ2FibGUsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5LnVpLmRyb3BwYWJsZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwualF1ZXJ5LnVpLmRyb3BwYWJsZSxlKG4sdCl9ZWxzZSBlKHdpbmRvdy5rbyx3aW5kb3cualF1ZXJ5KX0oZnVuY3Rpb24oZSxuKXt2YXIgdD1cImtvX3NvcnRJdGVtXCIsbz1lLnV0aWxzLnVud3JhcE9ic2VydmFibGUsaT1lLnV0aWxzLmRvbURhdGEuZ2V0LGE9ZS51dGlscy5kb21EYXRhLnNldCxkPW4udWkmJm4udWkudmVyc2lvbixyPWQmJmQuaW5kZXhPZihcIjEuNi5cIikmJmQuaW5kZXhPZihcIjEuNy5cIikmJihkLmluZGV4T2YoXCIxLjguXCIpfHxcIjEuOC4yNFwiPT09ZCkscz1mdW5jdGlvbihuLG8pe2UudXRpbHMuYXJyYXlGb3JFYWNoKG4sZnVuY3Rpb24oZSl7MT09PWUubm9kZVR5cGUmJihhKGUsdCxvKSxhKGUsXCJrb19wYXJlbnRMaXN0XCIsaShlLnBhcmVudE5vZGUsXCJrb19zb3J0TGlzdFwiKSkpfSl9LGw9ZnVuY3Rpb24obix0KXt2YXIgaSxhPXt9LGQ9byhuKCkpfHx7fTtyZXR1cm4gZC5kYXRhPyhhW3RdPWQuZGF0YSxhLm5hbWU9ZC50ZW1wbGF0ZSk6YVt0XT1uKCksZS51dGlscy5hcnJheUZvckVhY2goW1wiYWZ0ZXJBZGRcIixcImFmdGVyUmVuZGVyXCIsXCJhc1wiLFwiYmVmb3JlUmVtb3ZlXCIsXCJpbmNsdWRlRGVzdHJveWVkXCIsXCJ0ZW1wbGF0ZUVuZ2luZVwiLFwidGVtcGxhdGVPcHRpb25zXCIsXCJub2Rlc1wiXSxmdW5jdGlvbihuKXtkLmhhc093blByb3BlcnR5KG4pP2Fbbl09ZFtuXTplLmJpbmRpbmdIYW5kbGVycy5zb3J0YWJsZS5oYXNPd25Qcm9wZXJ0eShuKSYmKGFbbl09ZS5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGVbbl0pfSksXCJmb3JlYWNoXCI9PT10JiYoYS5hZnRlclJlbmRlcj8oaT1hLmFmdGVyUmVuZGVyLGEuYWZ0ZXJSZW5kZXI9ZnVuY3Rpb24oZSxuKXtzLmNhbGwobixlLG4pLGkuY2FsbChuLGUsbil9KTphLmFmdGVyUmVuZGVyPXMpLGF9LHU9ZnVuY3Rpb24oZSxuKXt2YXIgdD1vKG4pO2lmKHQpZm9yKHZhciBpPTA7aTxlO2krKyl0W2ldJiZvKHRbaV0uX2Rlc3Ryb3kpJiZlKys7cmV0dXJuIGV9O2UuYmluZGluZ0hhbmRsZXJzLnNvcnRhYmxlPXtpbml0OmZ1bmN0aW9uKGQscyxjLHAsZil7dmFyIGIsZyxtPW4oZCksdj1vKHMoKSl8fHt9LHk9bChzLFwiZm9yZWFjaFwiKSxoPXt9OyFmdW5jdGlvbih0LG8pe3ZhciBpLGE7bz8oYT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChvKSkmJihpPW5ldyBlLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50KGEpKS50ZXh0KG4udHJpbShpLnRleHQoKSkpOm4odCkuY29udGVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcyYmMSE9PXRoaXMubm9kZVR5cGUmJnQucmVtb3ZlQ2hpbGQodGhpcyl9KX0oZCx5Lm5hbWUpLG4uZXh0ZW5kKCEwLGgsZS5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGUpLHYub3B0aW9ucyYmaC5vcHRpb25zJiYoZS51dGlscy5leHRlbmQoaC5vcHRpb25zLHYub3B0aW9ucyksZGVsZXRlIHYub3B0aW9ucyksZS51dGlscy5leHRlbmQoaCx2KSxoLmNvbm5lY3RDbGFzcyYmKGUuaXNPYnNlcnZhYmxlKGguYWxsb3dEcm9wKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgaC5hbGxvd0Ryb3ApP2UuY29tcHV0ZWQoe3JlYWQ6ZnVuY3Rpb24oKXt2YXIgbj1vKGguYWxsb3dEcm9wKSx0PVwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bi5jYWxsKHRoaXMseS5mb3JlYWNoKTpuO2UudXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKGQsaC5jb25uZWN0Q2xhc3MsdCl9LGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDpkfSx0aGlzKTplLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhkLGguY29ubmVjdENsYXNzLGguYWxsb3dEcm9wKSxlLmJpbmRpbmdIYW5kbGVycy50ZW1wbGF0ZS5pbml0KGQsZnVuY3Rpb24oKXtyZXR1cm4geX0sYyxwLGYpLGI9aC5vcHRpb25zLnN0YXJ0LGc9aC5vcHRpb25zLnVwZGF0ZSxoLm9wdGlvbnMuaGVscGVyfHwoaC5vcHRpb25zLmhlbHBlcj1mdW5jdGlvbihlLHQpe3JldHVybiB0LmlzKFwidHJcIikmJnQuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCl7bih0aGlzKS53aWR0aChuKHRoaXMpLndpZHRoKCkpfSksdH0pO3ZhciB3PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgcyxsPWgub3B0aW9ucy5yZWNlaXZlO20uc29ydGFibGUoZS51dGlscy5leHRlbmQoaC5vcHRpb25zLHtzdGFydDpmdW5jdGlvbihuLHQpe3ZhciBvPXQuaXRlbVswXTthKG8sXCJrb19zb3VyY2VJbmRleFwiLGUudXRpbHMuYXJyYXlJbmRleE9mKHQuaXRlbS5wYXJlbnQoKS5jaGlsZHJlbigpLG8pKSx0Lml0ZW0uZmluZChcImlucHV0OmZvY3VzXCIpLmNoYW5nZSgpLGImJmIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxyZWNlaXZlOmZ1bmN0aW9uKGUsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbC5jYWxsKHRoaXMsZSxuKSwocz1pKG4uaXRlbVswXSxcImtvX2RyYWdJdGVtXCIpKSYmKHMuY2xvbmUmJihzPXMuY2xvbmUoKSksaC5kcmFnZ2VkJiYocz1oLmRyYWdnZWQuY2FsbCh0aGlzLHMsZSxuKXx8cykpfSx1cGRhdGU6ZnVuY3Rpb24oZCxsKXt2YXIgYyxwLGYsYixtLHY9bC5pdGVtWzBdLHc9bC5pdGVtLnBhcmVudCgpWzBdLEQ9aSh2LHQpfHxzO2lmKER8fG4odikucmVtb3ZlKCkscz1udWxsLEQmJnRoaXM9PT13fHwhciYmbi5jb250YWlucyh0aGlzLHcpKXtpZihjPWkodixcImtvX3BhcmVudExpc3RcIiksZj1pKHYsXCJrb19zb3VyY2VJbmRleFwiKSxwPWkodi5wYXJlbnROb2RlLFwia29fc29ydExpc3RcIiksYj1lLnV0aWxzLmFycmF5SW5kZXhPZihsLml0ZW0ucGFyZW50KCkuY2hpbGRyZW4oKSx2KSx5LmluY2x1ZGVEZXN0cm95ZWR8fChmPXUoZixjKSxiPXUoYixwKSksKGguYmVmb3JlTW92ZXx8aC5hZnRlck1vdmUpJiYobT17aXRlbTpELHNvdXJjZVBhcmVudDpjLHNvdXJjZVBhcmVudE5vZGU6YyYmbC5zZW5kZXJ8fHYucGFyZW50Tm9kZSxzb3VyY2VJbmRleDpmLHRhcmdldFBhcmVudDpwLHRhcmdldEluZGV4OmIsY2FuY2VsRHJvcDohMX0saC5iZWZvcmVNb3ZlJiZoLmJlZm9yZU1vdmUuY2FsbCh0aGlzLG0sZCxsKSksYz9uKGM9PT1wP3RoaXM6bC5zZW5kZXJ8fHRoaXMpLnNvcnRhYmxlKFwiY2FuY2VsXCIpOm4odikucmVtb3ZlKCksbSYmbS5jYW5jZWxEcm9wKXJldHVybjtpZihoLmhhc093blByb3BlcnR5KFwic3RyYXRlZ3lNb3ZlXCIpJiYhMSE9PWguc3RyYXRlZ3lNb3ZlKXtpZihiPj0wKWlmKGMpaWYoYyE9PXApYy5zcGxpY2UoZiwxKSxwLnNwbGljZShiLDAsRCksYSh2LHQsbnVsbCksbC5pdGVtLnJlbW92ZSgpO2Vsc2V7dmFyIGs9byhjKTtjLnZhbHVlV2lsbE11dGF0ZSYmYy52YWx1ZVdpbGxNdXRhdGUoKSxrLnNwbGljZShmLDEpLGsuc3BsaWNlKGIsMCxEKSxjLnZhbHVlSGFzTXV0YXRlZCYmYy52YWx1ZUhhc011dGF0ZWQoKX1lbHNlIHAuc3BsaWNlKGIsMCxEKSxhKHYsdCxudWxsKSxsLml0ZW0ucmVtb3ZlKCl9ZWxzZSBiPj0wJiYoYyYmKGMuc3BsaWNlKGYsMSksZS5wcm9jZXNzQWxsRGVmZXJyZWRCaW5kaW5nVXBkYXRlcyYmZS5wcm9jZXNzQWxsRGVmZXJyZWRCaW5kaW5nVXBkYXRlcygpLGUub3B0aW9ucyYmZS5vcHRpb25zLmRlZmVyVXBkYXRlcyYmZS50YXNrcy5ydW5FYXJseSgpKSxwLnNwbGljZShiLDAsRCkpLGEodix0LG51bGwpO2UucHJvY2Vzc0FsbERlZmVycmVkQmluZGluZ1VwZGF0ZXMmJmUucHJvY2Vzc0FsbERlZmVycmVkQmluZGluZ1VwZGF0ZXMoKSxoLmFmdGVyTW92ZSYmaC5hZnRlck1vdmUuY2FsbCh0aGlzLG0sZCxsKX1nJiZnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sY29ubmVjdFdpdGg6ISFoLmNvbm5lY3RDbGFzcyYmXCIuXCIraC5jb25uZWN0Q2xhc3N9KSksdm9pZCAwIT09aC5pc0VuYWJsZWQmJmUuY29tcHV0ZWQoe3JlYWQ6ZnVuY3Rpb24oKXttLnNvcnRhYmxlKG8oaC5pc0VuYWJsZWQpP1wiZW5hYmxlXCI6XCJkaXNhYmxlXCIpfSxkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6ZH0pfSwwKTtyZXR1cm4gZS51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGQsZnVuY3Rpb24oKXsobS5kYXRhKFwidWktc29ydGFibGVcIil8fG0uZGF0YShcInNvcnRhYmxlXCIpKSYmbS5zb3J0YWJsZShcImRlc3Ryb3lcIiksZS51dGlscy50b2dnbGVEb21Ob2RlQ3NzQ2xhc3MoZCxoLmNvbm5lY3RDbGFzcywhMSksY2xlYXJUaW1lb3V0KHcpfSkse2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiEwfX0sdXBkYXRlOmZ1bmN0aW9uKG4sdCxvLGksZCl7dmFyIHI9bCh0LFwiZm9yZWFjaFwiKTthKG4sXCJrb19zb3J0TGlzdFwiLHIuZm9yZWFjaCksZS5iaW5kaW5nSGFuZGxlcnMudGVtcGxhdGUudXBkYXRlKG4sZnVuY3Rpb24oKXtyZXR1cm4gcn0sbyxpLGQpfSxjb25uZWN0Q2xhc3M6XCJrb19jb250YWluZXJcIixhbGxvd0Ryb3A6ITAsYWZ0ZXJNb3ZlOm51bGwsYmVmb3JlTW92ZTpudWxsLG9wdGlvbnM6e319LGUuYmluZGluZ0hhbmRsZXJzLmRyYWdnYWJsZT17aW5pdDpmdW5jdGlvbih0LGksZCxyLHMpe3ZhciB1PW8oaSgpKXx8e30sYz11Lm9wdGlvbnN8fHt9LHA9ZS51dGlscy5leHRlbmQoe30sZS5iaW5kaW5nSGFuZGxlcnMuZHJhZ2dhYmxlLm9wdGlvbnMpLGY9bChpLFwiZGF0YVwiKSxiPXUuY29ubmVjdENsYXNzfHxlLmJpbmRpbmdIYW5kbGVycy5kcmFnZ2FibGUuY29ubmVjdENsYXNzLGc9dm9pZCAwIT09dS5pc0VuYWJsZWQ/dS5pc0VuYWJsZWQ6ZS5iaW5kaW5nSGFuZGxlcnMuZHJhZ2dhYmxlLmlzRW5hYmxlZDtyZXR1cm4gdT1cImRhdGFcImluIHU/dS5kYXRhOnUsYSh0LFwia29fZHJhZ0l0ZW1cIix1KSxlLnV0aWxzLmV4dGVuZChwLGMpLHAuY29ubmVjdFRvU29ydGFibGU9ISFiJiZcIi5cIitiLG4odCkuZHJhZ2dhYmxlKHApLHZvaWQgMCE9PWcmJmUuY29tcHV0ZWQoe3JlYWQ6ZnVuY3Rpb24oKXtuKHQpLmRyYWdnYWJsZShvKGcpP1wiZW5hYmxlXCI6XCJkaXNhYmxlXCIpfSxkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6dH0pLGUudXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayh0LGZ1bmN0aW9uKCl7bih0KS5kcmFnZ2FibGUoXCJkZXN0cm95XCIpfSksZS5iaW5kaW5nSGFuZGxlcnMudGVtcGxhdGUuaW5pdCh0LGZ1bmN0aW9uKCl7cmV0dXJuIGZ9LGQscixzKX0sdXBkYXRlOmZ1bmN0aW9uKG4sdCxvLGksYSl7dmFyIGQ9bCh0LFwiZGF0YVwiKTtyZXR1cm4gZS5iaW5kaW5nSGFuZGxlcnMudGVtcGxhdGUudXBkYXRlKG4sZnVuY3Rpb24oKXtyZXR1cm4gZH0sbyxpLGEpfSxjb25uZWN0Q2xhc3M6ZS5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGUuY29ubmVjdENsYXNzLG9wdGlvbnM6e2hlbHBlcjpcImNsb25lXCJ9fSxlLmJpbmRpbmdIYW5kbGVycy5kcm9wcGFibGU9e2luaXQ6ZnVuY3Rpb24oYSxkLHIscyxsKXt2YXIgdT1vKGQoKSl8fHt9LGM9dS5vcHRpb25zfHx7fSxwPWUudXRpbHMuZXh0ZW5kKHt9LGUuYmluZGluZ0hhbmRsZXJzLmRyb3BwYWJsZS5vcHRpb25zKSxmPXZvaWQgMCE9PXUuaXNFbmFibGVkP3UuaXNFbmFibGVkOmUuYmluZGluZ0hhbmRsZXJzLmRyb3BwYWJsZS5pc0VuYWJsZWQ7ZS51dGlscy5leHRlbmQocCxjKSx1PVwiZGF0YVwiaW4gdT91LmRhdGE6ZCgpLHAuZHJvcD1mdW5jdGlvbihlLG4pe3ZhciBvPWkobi5kcmFnZ2FibGVbMF0sXCJrb19kcmFnSXRlbVwiKXx8aShuLmRyYWdnYWJsZVswXSx0KTt1KG8pfSxuKGEpLmRyb3BwYWJsZShwKSx2b2lkIDAhPT1mJiZlLmNvbXB1dGVkKHtyZWFkOmZ1bmN0aW9uKCl7bihhKS5kcm9wcGFibGUobyhmKT9cImVuYWJsZVwiOlwiZGlzYWJsZVwiKX0sZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmF9KSxlLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soYSxmdW5jdGlvbigpe24oYSkuZHJvcHBhYmxlKFwiZGVzdHJveVwiKX0pfSxvcHRpb25zOnthY2NlcHQ6XCIqXCJ9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW10dWIyTnJiM1YwTFhOdmNuUmhZbXhsTG1weklsMHNJbTVoYldWeklqcGJJbVpoWTNSdmNua2lMQ0prWldacGJtVWlMQ0poYldRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbTF2WkhWc1pTSXNJbXR2SWl3aWQybHVaRzkzSWl3aVoyeHZZbUZzSWl3aWFsRjFaWEo1SWl3aUpDSXNJa2xVUlUxTFJWa2lMQ0oxYm5keVlYQWlMQ0oxZEdsc2N5SXNJblZ1ZDNKaGNFOWljMlZ5ZG1GaWJHVWlMQ0prWVhSaFIyVjBJaXdpWkc5dFJHRjBZU0lzSW1kbGRDSXNJbVJoZEdGVFpYUWlMQ0p6WlhRaUxDSjJaWEp6YVc5dUlpd2lkV2tpTENKb1lYTk9aWE4wWldSVGIzSjBZV0pzWlVacGVDSXNJbWx1WkdWNFQyWWlMQ0poWkdSTlpYUmhSR0YwWVVGbWRHVnlVbVZ1WkdWeUlpd2laV3hsYldWdWRITWlMQ0prWVhSaElpd2lZWEp5WVhsR2IzSkZZV05vSWl3aVpXeGxiV1Z1ZENJc0ltNXZaR1ZVZVhCbElpd2ljR0Z5Wlc1MFRtOWtaU0lzSW5CeVpYQmhjbVZVWlcxd2JHRjBaVTl3ZEdsdmJuTWlMQ0oyWVd4MVpVRmpZMlZ6YzI5eUlpd2laR0YwWVU1aGJXVWlMQ0poWTNSMVlXeEJablJsY2xKbGJtUmxjaUlzSW5KbGMzVnNkQ0lzSW05d2RHbHZibk1pTENKdVlXMWxJaXdpZEdWdGNHeGhkR1VpTENKdmNIUnBiMjRpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW1KcGJtUnBibWRJWVc1a2JHVnljeUlzSW5OdmNuUmhZbXhsSWl3aVlXWjBaWEpTWlc1a1pYSWlMQ0pqWVd4c0lpd2lkWEJrWVhSbFNXNWtaWGhHY205dFJHVnpkSEp2ZVdWa1NYUmxiWE1pTENKcGJtUmxlQ0lzSW1sMFpXMXpJaXdpZFc1M2NtRndjR1ZrSWl3aWFTSXNJbDlrWlhOMGNtOTVJaXdpYVc1cGRDSXNJbUZzYkVKcGJtUnBibWR6UVdOalpYTnpiM0lpTENKamIyNTBaWGgwSWl3aWMzUmhjblJCWTNSMVlXd2lMQ0oxY0dSaGRHVkJZM1IxWVd3aUxDSWtaV3hsYldWdWRDSXNJblpoYkhWbElpd2lkR1Z0Y0d4aGRHVlBjSFJwYjI1eklpd2lkR1Z0Y0d4aGRHVlRiM1Z5WTJVaUxDSjBaVzF3YkdGMFpVVnNaVzFsYm5RaUxDSmtiMk4xYldWdWRDSXNJbWRsZEVWc1pXMWxiblJDZVVsa0lpd2lkR1Z0Y0d4aGRHVlRiM1Z5WTJWeklpd2laRzl0Uld4bGJXVnVkQ0lzSW5SbGVIUWlMQ0owY21sdElpd2lZMjl1ZEdWdWRITWlMQ0psWVdOb0lpd2lkR2hwY3lJc0luSmxiVzkyWlVOb2FXeGtJaXdpYzNSeWFYQlVaVzF3YkdGMFpWZG9hWFJsYzNCaFkyVWlMQ0psZUhSbGJtUWlMQ0pqYjI1dVpXTjBRMnhoYzNNaUxDSnBjMDlpYzJWeWRtRmliR1VpTENKaGJHeHZkMFJ5YjNBaUxDSmpiMjF3ZFhSbFpDSXNJbkpsWVdRaUxDSnphRzkxYkdSQlpHUWlMQ0ptYjNKbFlXTm9JaXdpZEc5bloyeGxSRzl0VG05a1pVTnpjME5zWVhOeklpd2laR2x6Y0c5elpWZG9aVzVPYjJSbFNYTlNaVzF2ZG1Wa0lpd2ljM1JoY25RaUxDSjFjR1JoZEdVaUxDSm9aV3h3WlhJaUxDSmxJaXdpYVhNaUxDSmphR2xzWkhKbGJpSXNJbmRwWkhSb0lpd2lZM0psWVhSbFZHbHRaVzkxZENJc0luTmxkRlJwYldWdmRYUWlMQ0prY21GblNYUmxiU0lzSW05eWFXZHBibUZzVW1WalpXbDJaU0lzSW5KbFkyVnBkbVVpTENKbGRtVnVkQ0lzSW1Wc0lpd2lhWFJsYlNJc0ltRnljbUY1U1c1a1pYaFBaaUlzSW5CaGNtVnVkQ0lzSW1acGJtUWlMQ0pqYUdGdVoyVWlMQ0poY0hCc2VTSXNJbUZ5WjNWdFpXNTBjeUlzSW1Oc2IyNWxJaXdpWkhKaFoyZGxaQ0lzSW5OdmRYSmpaVkJoY21WdWRDSXNJblJoY21kbGRGQmhjbVZ1ZENJc0luTnZkWEpqWlVsdVpHVjRJaXdpZEdGeVoyVjBTVzVrWlhnaUxDSmhjbWNpTENKd1lYSmxiblJGYkNJc0luSmxiVzkyWlNJc0ltTnZiblJoYVc1eklpd2lhVzVqYkhWa1pVUmxjM1J5YjNsbFpDSXNJbUpsWm05eVpVMXZkbVVpTENKaFpuUmxjazF2ZG1VaUxDSnpiM1Z5WTJWUVlYSmxiblJPYjJSbElpd2ljMlZ1WkdWeUlpd2lZMkZ1WTJWc1JISnZjQ0lzSW5OMGNtRjBaV2Q1VFc5MlpTSXNJbk53YkdsalpTSXNJblZ1WkdWeWJIbHBibWRNYVhOMElpd2lkbUZzZFdWWGFXeHNUWFYwWVhSbElpd2lkbUZzZFdWSVlYTk5kWFJoZEdWa0lpd2ljSEp2WTJWemMwRnNiRVJsWm1WeWNtVmtRbWx1WkdsdVoxVndaR0YwWlhNaUxDSmtaV1psY2xWd1pHRjBaWE1pTENKMFlYTnJjeUlzSW5KMWJrVmhjbXg1SWl3aVkyOXVibVZqZEZkcGRHZ2lMQ0oxYm1SbFptbHVaV1FpTENKcGMwVnVZV0pzWldRaUxDSmtiMjFPYjJSbFJHbHpjRzl6WVd3aUxDSmhaR1JFYVhOd2IzTmxRMkZzYkdKaFkyc2lMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSmpiMjUwY205c2MwUmxjMk5sYm1SaGJuUkNhVzVrYVc1bmN5SXNJbVJ5WVdkbllXSnNaU0lzSW1SeVlXZG5ZV0pzWlU5d2RHbHZibk1pTENKamIyNXVaV04wVkc5VGIzSjBZV0pzWlNJc0ltUnliM0J3WVdKc1pTSXNJbVJ5YjNCd1lXSnNaVTl3ZEdsdmJuTWlMQ0prY205d0lpd2laSEp2Y0hCbFpFbDBaVzBpTENKaFkyTmxjSFFpWFN3aWJXRndjR2x1WjNNaU9pSkRRVU5ETEZOQlFWVkJMRWRCUTFBc1IwRkJjMElzYlVKQlFWaERMRkZCUVhsQ1FTeFBRVUZQUXl4SlFVVjJRMFFzVVVGQlVTeFhRVUZaTEZOQlFWVXNaME5CUVdsRExHbERRVUZyUXl4clEwRkJiVU5FTEZGQlEycEpMRWRCUVhWQ0xHMUNRVUZhUnl4VFFVRTJReXhwUWtGQldrTXNVMEZCTUVNc2FVSkJRVmhETEU5QlFYRkNMRU5CUlc1SExFbEJRVWxETEVWQlFYZENMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWeXhIUVVGelFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFWY3NSMEZCU1N4TFFVTndSME1zUlVGQk5FSXNiMEpCUVZoR0xFOUJRWGxDUVN4UFFVRmxMRTlCUVhOQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpTeFBRVUZKTEV0QlEycEhMRzlDUVVGWVJDeFBRVUY1UWtFc1QwRkJaU3hQUVVGTkxFZEJRVmtzVTBGQmMwSXNiMEpCUVZoRExGRkJRWGxDUVN4UFFVRmxMRTlCUVUwc1IwRkJXU3hUUVVOd1NDeHZRa0ZCV0VRc1QwRkJlVUpCTEU5QlFXVXNUMEZCVFN4SFFVRmhMRlZCUVhOQ0xHOUNRVUZZUXl4UlFVRjVRa0VzVDBGQlpTeFBRVUZOTEVkQlFXRXNWVUZEZEVnc2IwSkJRVmhFTEU5QlFYbENRU3hQUVVGbExFOUJRVTBzUjBGQllTeFZRVUZ6UWl4dlFrRkJXRU1zVVVGQmVVSkJMRTlCUVdVc1QwRkJUU3hIUVVGaExGVkJRM3BKVWl4RlFVRlJUU3hGUVVGSlJ5eFJRVWRhVkN4RlFVRlJUeXhQUVVGUFJDeEhRVUZKUXl4UFFVRlBSU3hSUVdScVF5eERRV2RDUlN4VFFVRlRTQ3hGUVVGSlNTeEhRVU5hTEVsQlFVbERMRVZCUVZVc1kwRkxWa01zUlVGQlUwNHNSVUZCUjA4c1RVRkJUVU1zYVVKQlEyeENReXhGUVVGVlZDeEZRVUZIVHl4TlFVRk5SeXhSUVVGUlF5eEpRVU16UWtNc1JVRkJWVm9zUlVGQlIwOHNUVUZCVFVjc1VVRkJVVWNzU1VGRE0wSkRMRVZCUVZWV0xFVkJRVVZYTEVsQlFVMVlMRVZCUVVWWExFZEJRVWRFTEZGQlJYWkNSU3hGUVVGMVFrWXNSMEZCVjBFc1JVRkJVVWNzVVVGQlVTeFRRVUZYU0N4RlFVRlJSeXhSUVVGUkxGVkJRVmxJTEVWQlFWRkhMRkZCUVZFc1UwRkJkVUlzVjBGQldrZ3NSMEZIY0VoSkxFVkJRWGxDTEZOQlFWTkRMRVZCUVZWRExFZEJRelZEY0VJc1JVRkJSMDhzVFVGQlRXTXNZVUZCWVVZc1JVRkJWU3hUUVVGVFJ5eEhRVU5hTEVsQlFYSkNRU3hGUVVGUlF5eFhRVU5TV0N4RlFVRlJWU3hGUVVGVGFrSXNSVUZCVTJVc1IwRkRNVUpTTEVWQlFWRlZMRVZCWkVvc1owSkJZM2RDWWl4RlFVRlJZU3hGUVVGUlJTeFhRV1l4UXl4dlFrRnhRbFpETEVWQlFYbENMRk5CUVZORExFVkJRV1ZETEVkQlEycEVMRWxCUlVsRExFVkJSa0ZETEV0QlEwRkRMRVZCUVZWNFFpeEZRVUZQYjBJc1UwRnJRM0pDTEU5Qk9VSkpTU3hGUVVGUlZpeE5RVU5TVXl4RlFVRlBSaXhIUVVGWlJ5eEZRVUZSVml4TFFVTXpRbE1zUlVGQlQwVXNTMEZCVDBRc1JVRkJVVVVzVlVGRmRFSklMRVZCUVU5R0xFZEJRVmxFTEVsQlIzWkNNVUlzUlVGQlIwOHNUVUZCVFdNc1kwRkJZeXhYUVVGWkxHTkJRV1VzUzBGQlRTeGxRVUZuUWl4dFFrRkJiMElzYVVKQlFXdENMR3RDUVVGdFFpeFRRVUZWTEZOQlFWVlpMRWRCUXpkSlNDeEZRVUZSU1N4bFFVRmxSQ3hIUVVOMlFrb3NSVUZCVDBrc1IwRkJWVWdzUlVGQlVVY3NSMEZEYkVKcVF5eEZRVUZIYlVNc1owSkJRV2RDUXl4VFFVRlRSaXhsUVVGbFJDeExRVU5zUkVvc1JVRkJUMGtzUjBGQlZXcERMRVZCUVVkdFF5eG5Ra0ZCWjBKRExGTkJRVk5JTEUxQlMzQkRMRmxCUVdKT0xFbEJRMGxGTEVWQlFVOVJMR0ZCUlZCVUxFVkJRVzlDUXl4RlFVRlBVU3haUVVNelFsSXNSVUZCVDFFc1dVRkJZeXhUUVVGVFppeEZRVUZUUml4SFFVTnVRMFlzUlVGQmRVSnZRaXhMUVVGTGJFSXNSVUZCVFVVc1JVRkJVMFlzUjBGRE0wTlJMRVZCUVd0Q1ZTeExRVUZMYkVJc1JVRkJUVVVzUlVGQlUwWXNTMEZITVVOVExFVkJRVTlSTEZsQlFXTnVRaXhIUVV0MFFsY3NSMEZIVUZVc1JVRkJaME1zVTBGQlUwTXNSVUZCVDBNc1IwRkRhRVFzU1VGQlNVTXNSVUZCV1hCRExFVkJRVTl0UXl4SFFVVjJRaXhIUVVGSlF5eEZRVU5CTEVsQlFVc3NTVUZCU1VNc1JVRkJTU3hGUVVGSFFTeEZRVUZKU0N4RlFVRlBSeXhKUVVWdVFrUXNSVUZCVlVNc1NVRkJUWEpETEVWQlFVOXZReXhGUVVGVlF5eEhRVUZIUXl4WFFVTndRMG9zU1VGTFdpeFBRVUZQUVN4SFFUSkNXSGhETEVWQlFVZHRReXhuUWtGQlowSkRMRlZCUTJaVExFdEJRVTBzVTBGQlUzWkNMRVZCUVZOSkxFVkJRV1Z2UWl4RlFVRnhRakZDTEVWQlFVMHlRaXhIUVVNNVJDeEpRVWxKUXl4RlFVRmhReXhGUVVwaVF5eEZRVUZYT1VNc1JVRkJSV3RDTEVkQlEySTJRaXhGUVVGUk4wTXNSVUZCVDI5Q0xGTkJRMll3UWl4RlFVRnJRak5DTEVWQlFYVkNReXhGUVVGbExGZEJRM2hFVlN4TlFUVkNhMElzVTBGQlUyUXNSVUZCVTFNc1IwRkROVU1zU1VGQlNYTkNMRVZCUTBGRExFVkJSMEYyUWl4SFFVTkJkVUlzUlVGQmEwSkRMRk5CUVZORExHVkJRV1Y2UWl4TlFVVjBRM05DTEVWQlFXbENMRWxCUVVseVJDeEZRVUZIZVVRc1owSkJRV2RDUXl4WFFVRlhTaXhKUVVOd1Ewc3NTMEZCUzNaRUxFVkJRVVYzUkN4TFFVRkxVQ3hGUVVGbFRTeFRRVXM1UTNaRUxFVkJRVVZyUWl4SFFVRlRkVU1zVjBGQlYwTXNTMEZCU3l4WFFVTnVRa01zVFVGQk1FSXNTVUZCYkVKQkxFdEJRVXQ0UXl4VlFVTmlSQ3hGUVVGUk1FTXNXVUZCV1VRc1VVRmxOVUpGTEVOQlFYZENNME1zUlVGQlV6aENMRVZCUVdkQ2NrSXNUVUZIYWtRelFpeEZRVUZGT0VRc1VVRkJUeXhGUVVGTk9VSXNSVUZCVlhCRExFVkJRVWR0UXl4blFrRkJaMEpETEZWQlEzaERaU3hGUVVGTmNrSXNVMEZCVjAwc1JVRkJVMDRzVlVGRE1VSTVRaXhGUVVGSFR5eE5RVUZOTWtRc1QwRkJUemxDTEVWQlFWTk9MRkZCUVZOeFFpeEZRVUZOY2tJc1owSkJRMnBEY1VJc1JVRkJUWEpDTEZOQlJXcENPVUlzUlVGQlIwOHNUVUZCVFRKRUxFOUJRVTg1UWl4RlFVRlZaU3hIUVVkMFFtWXNSVUZCVXl0Q0xHVkJRV2xDYmtVc1JVRkJSMjlGTEdGQlFXRm9ReXhGUVVGVGFVTXNXVUZCTWtNc2JVSkJRWFJDYWtNc1JVRkJVMmxETEZkQlEycEdja1VzUlVGQlIzTkZMRlZCUTBORExFdEJRVTBzVjBGRFJpeEpRVUZKY0VJc1JVRkJVVGRETEVWQlFVODRRaXhGUVVGVGFVTXNWMEZEZUVKSExFVkJRVFJDTEcxQ1FVRlVja0lzUlVGQmMwSkJMRVZCUVUxaUxFdEJRVXQ1UWl4TFFVRk5XQ3hGUVVGblFuRkNMRk5CUVZkMFFpeEZRVU42Um01RUxFVkJRVWRQTEUxQlFVMXRSU3h6UWtGQmMwSndSQ3hGUVVGVFl5eEZRVUZUSzBJc1lVRkJZMHNzU1VGRmJrVkhMSGxDUVVFd1FuSkVMRWRCUXpOQ2VVTXNUVUZGU0M5RUxFVkJRVWRQTEUxQlFVMXRSU3h6UWtGQmMwSndSQ3hGUVVGVFl5eEZRVUZUSzBJc1lVRkJZeTlDTEVWQlFWTnBReXhYUVVrMVJYSkZMRVZCUVVkdFF5eG5Ra0ZCWjBKSUxGTkJRVk5oTEV0QlFVdDJRaXhGUVVGVExGZEJRV0VzVDBGQlR6aENMRWRCUVc5Q1RpeEZRVUZ4UWpGQ0xFVkJRVTB5UWl4SFFVYzNSME1zUlVGQlkxb3NSVUZCVTA0c1VVRkJVVGhETEUxQlF5OUNNMElzUlVGQlpXSXNSVUZCVTA0c1VVRkJVU3RETEU5QlJ6RkNla01zUlVGQlUwNHNVVUZCVVdkRUxGTkJRMjVDTVVNc1JVRkJVMDRzVVVGQlVXZEVMRTlCUVZNc1UwRkJVME1zUlVGQlIyaEZMRWRCVFd4RExFOUJURWxCTEVWQlFVZHBSU3hIUVVGSExFOUJRMDVxUlN4RlFVRkhhMFVzVjBGQlYyNUNMRXRCUVVzc1YwRkRaakZFTEVWQlFVVXlSQ3hOUVVGTmJVSXNUVUZCVFRsRkxFVkJRVVV5UkN4TlFVRk5iVUlzVjBGSGRrSnVSU3hKUVV0bUxFbEJRVWx2UlN4RlFVRm5Ra01zVjBGQlZ5eFhRVU16UWl4SlFVRkpReXhGUVVOQlF5eEZRVUZyUW14RUxFVkJRVk5PTEZGQlFWRjVSQ3hSUVVWMlEzSkRMRVZCUVZOa0xGTkJRVk53UXl4RlFVRkhUeXhOUVVGTk1rUXNUMEZCVHpsQ0xFVkJRVk5PTEZOQlEzWkRPRU1zVFVGQlR5eFRRVUZUV1N4RlFVRlBla1VzUjBGRmJrSXNTVUZCU1RCRkxFVkJRVXN4UlN4RlFVRkhNa1VzUzBGQlN5eEhRVU5xUWpsRkxFVkJRVkUyUlN4RlFXaExZaXhwUWtGblN6SkNla1lzUlVGQlIwOHNUVUZCVFc5R0xHRkJRV0UxUlN4RlFVRkhNa1VzUzBGQlMwVXNVMEZCVTFnc1YwRkJXVkVzU1VGSGVrVXhSU3hGUVVGSE1rVXNTMEZCUzBjc1MwRkJTeXhsUVVGbFF5eFRRVU40UWpsRExFZEJRMEZCTEVWQlFWa3JReXhOUVVGTmFFTXNTMEZCVFdsRExGbEJSMmhEVkN4UlFVRlRMRk5CUVZORExFVkJRVTk2UlN4SFFVVlZMRzFDUVVGd1FuVkZMRWRCUTFCQkxFVkJRV2RDYUVRc1MwRkJTM2xDTEV0QlFVMTVRaXhGUVVGUGVrVXNTVUZIZEVOelJTeEZRVUZYTlVVc1JVRkJVVTBzUlVGQlJ6SkZMRXRCUVVzc1IwRXpTMnBETEd0Q1FUaExZMHdzUlVGQlUxa3NVVUZEVkZvc1JVRkJWMEVzUlVGQlUxa3NVMEZKY0VJM1JDeEZRVUZUT0VRc1ZVRkRWR0lzUlVGQlYycEVMRVZCUVZNNFJDeFJRVUZSTlVRc1MwRkJTM2xDTEV0QlFVMXpRaXhGUVVGVlJ5eEZRVUZQZWtVc1NVRkJUM05GTEV0QlNUTkZVaXhQUVVGUkxGTkJRVk5YTEVWQlFVOTZSU3hIUVVOd1FpeEpRVUZKYjBZc1JVRkJZME1zUlVGQlkwTXNSVUZCWVVNc1JVRkJZVU1zUlVGRGRFUmtMRVZCUVVzeFJTeEZRVUZITWtVc1MwRkJTeXhIUVVOaVl5eEZRVUZYZWtZc1JVRkJSekpGTEV0QlFVdEZMRk5CUVZNc1IwRkROVUpHTEVWQlFVOXFSaXhGUVVGUlowWXNSVUZCU1hCR0xFbEJRVmxuUml4RlFWRnVReXhIUVU1TFN5eEhRVU5FZEVZc1JVRkJSWEZHTEVkQlFVbG5RaXhUUVVWV2NFSXNSVUZCVnl4TFFVZFFTeXhIUVVGVE0wSXNUMEZCVTNsRExFbEJRV1Y0Uml4SFFVRjNRbG9zUlVGQlJYTkhMRk5CUVZNelF5eExRVUZOZVVNc1IwRkJXU3hEUVhsRGRFWXNSMEYyUTBGTUxFVkJRV1V4Uml4RlFVRlJaMFlzUlVGMlRTOUNMR2xDUVhkTlVWa3NSVUZCWXpWR0xFVkJRVkZuUml4RlFURk5MMElzYTBKQk1rMVRWeXhGUVVGbE0wWXNSVUZCVVdkR0xFVkJRVWRxUlN4WFFURk5jRU1zWlVFeVRWVTRSU3hGUVVGamRFY3NSVUZCUjA4c1RVRkJUVzlHTEdGQlFXRTFSU3hGUVVGSE1rVXNTMEZCUzBVc1UwRkJVMWdzVjBGQldWRXNSMEZITlVSeVF5eEZRVUZuUW5WRUxHMUNRVU5xUWs0c1JVRkJZemxFTEVWQlFUaENPRVFzUlVGQllVWXNSMEZEZWtSSExFVkJRV012UkN4RlFVRTRRaXRFTEVWQlFXRkdMRXRCU1hwRWFFVXNSVUZCVTNkRkxGbEJRV040UlN4RlFVRlRlVVVzWVVGRGFFTk9MRWRCUTBsaUxFdEJRVTFCTEVWQlEwNVRMR0ZCUVdOQkxFVkJRMlJYTEdsQ1FVRnJRbGdzUjBGQlowSndSaXhGUVVGSFowY3NVVUZCVlhSQ0xFVkJRVWRxUlN4WFFVTnNSRFpGTEZsQlFXRkJMRVZCUTJKRUxHRkJRV05CTEVWQlEyUkZMRmxCUVdGQkxFVkJRMkpWTEZsQlFWa3NSMEZKV2pWRkxFVkJRVk4zUlN4WlFVTlVlRVVzUlVGQlUzZEZMRmRCUVZkMFJTeExRVUZMZVVJc1MwRkJUWGRETEVWQlFVdG1MRVZCUVU5NlJTeEpRVXN2UTI5R0xFVkJRMEV2Uml4RlFVRkZLMFlzU1VGQmFVSkRMRVZCUVdWeVF5eExRVUZQYUVRc1JVRkJSMmRITEZGQlFWVm9SQ3hOUVVGTk0wSXNVMEZCVXl4VlFVbHlSV2hETEVWQlFVVnhSaXhIUVVGSlowSXNVMEZKVGtZc1IwRkJUMEVzUlVGQlNWTXNWMEZEV0N4UFFVbEtMRWRCUVVzMVJTeEZRVUZUUml4bFFVRmxMR3RDUVVFMlF5eEpRVUV4UWtVc1JVRkJVelpGTEdOQmQwSnlSQ3hIUVVGSldDeEhRVUZsTEVWQlEyWXNSMEZCU1Vnc1JVRkRRU3hIUVVGSlFTeEpRVUZwUWtNc1JVRkhha0pFTEVWQlFXRmxMRTlCUVU5aUxFVkJRV0VzUjBGRGFrTkVMRVZCUVdGakxFOUJRVTlhTEVWQlFXRXNSVUZCUjFvc1IwRkhjRU01UlN4RlFVRlJOa1VzUlVGQlNYQkdMRVZCUVZNc1RVRkRja0pWTEVWQlFVY3lSU3hMUVVGTFpTeGhRVVZRTEVOQlJVUXNTVUZCU1ZVc1JVRkJhVUkzUnl4RlFVRlBOa1lzUjBGSGVFSkJMRVZCUVdGcFFpeHBRa0ZEWW1wQ0xFVkJRV0ZwUWl4clFrRkpha0pFTEVWQlFXVkVMRTlCUVU5aUxFVkJRV0VzUjBGRmJrTmpMRVZCUVdWRUxFOUJRVTlhTEVWQlFXRXNSVUZCUjFvc1IwRkhiRU5UTEVWQlFXRnJRaXhwUWtGRFlteENMRVZCUVdGclFpeDFRa0ZOY2tKcVFpeEZRVUZoWXl4UFFVRlBXaXhGUVVGaExFVkJRVWRhTEVkQlIzQkRPVVVzUlVGQlVUWkZMRVZCUVVsd1JpeEZRVUZUTEUxQlEzSkNWU3hGUVVGSE1rVXNTMEZCUzJVc1kwRTFSRnBJTEVkQlFXVXNTVUZEV0Vnc1NVRkRRVUVzUlVGQllXVXNUMEZCVDJJc1JVRkJZU3hIUVVjM1FuSkhMRVZCUVVkelNDeHJRMEZEU0hSSUxFVkJRVWR6U0N4dFEwRkpTSFJJTEVWQlFVYzRRaXhUUVVGWE9VSXNSVUZCUnpoQ0xGRkJRVkY1Uml4alFVTjZRblpJTEVWQlFVZDNTQ3hOUVVGTlF5eFpRVWxxUW5KQ0xFVkJRV0ZqTEU5QlFVOWFMRVZCUVdFc1JVRkJSMW9zU1VGSmVFTTVSU3hGUVVGUk5rVXNSVUZCU1hCR0xFVkJRVk1zVFVFclEzSkNUQ3hGUVVGSGMwZ3NhME5CUTBoMFNDeEZRVUZIYzBnc2JVTkJTVWhzUml4RlFVRlRlVVVzVjBGRFZIcEZMRVZCUVZONVJTeFZRVUZWZGtVc1MwRkJTM2xDTEV0QlFVMTNReXhGUVVGTFppeEZRVUZQZWtVc1IwRkpPVU5yUXl4SFFVTkJRU3hGUVVGaE9FTXNUVUZCVFdoRExFdEJRVTFwUXl4WlFVZHFRekJDTEdOQlFXRjBSaXhGUVVGVEswSXNZMEZCWlN4SlFVRk5MMElzUlVGQlV5dENMSEZDUVVrM1FuZEVMRWxCUVhaQ2RrWXNSVUZCVTNkR0xGZEJRMVExU0N4RlFVRkhjMFVzVlVGRFEwTXNTMEZCVFN4WFFVTkdja0lzUlVGQlUyUXNVMEZCVXpsQ0xFVkJRVTg0UWl4RlFVRlRkMFlzVjBGQllTeFRRVUZYTEZsQlJUbEVha1FzZVVKQlFUQkNja1FzUzBGSGJrTXNSMEZsU0N4UFFWcEJkRUlzUlVGQlIwOHNUVUZCVFhOSUxHZENRVUZuUWtNc2JVSkJRVzFDZUVjc1JVRkJVeXhaUVVVM1F6UkNMRVZCUVZNNVFpeExRVUZMTEdkQ1FVRnJRamhDTEVWQlFWTTVRaXhMUVVGTExHTkJRemxET0VJc1JVRkJVMlFzVTBGQlV5eFhRVWQwUW5CRExFVkJRVWRQTEUxQlFVMXRSU3h6UWtGQmMwSndSQ3hGUVVGVFl5eEZRVUZUSzBJc1kwRkJZeXhIUVVjdlJEUkVMR0ZCUVdFMVF5eE5RVWRTTmtNc05FSkJRVGhDTEVsQlJUTkRia1FzVDBGQlVTeFRRVUZUZGtRc1JVRkJVMGtzUlVGQlpXOUNMRVZCUVhGQ01VSXNSVUZCVFRKQ0xFZEJRMmhGTEVsQlFVbExMRVZCUVd0Q00wSXNSVUZCZFVKRExFVkJRV1VzVjBGSE5VUmtMRVZCUVZGVkxFVkJkbGRHTEdOQmRWZHZRamhDTEVWQlFXZENjVUlzVTBGSE1VTjZSU3hGUVVGSGJVTXNaMEpCUVdkQ1NDeFRRVUZUTmtNc1QwRkJUM1pFTEVWQlFWTXNWMEZCWVN4UFFVRlBPRUlzUjBGQmIwSk9MRVZCUVhGQ01VSXNSVUZCVFRKQ0xFbEJSVzVJYjBJc1lVRkJZeXhsUVVOa1JTeFhRVUZYTEVWQlExaDNReXhWUVVGWExFdEJRMWhFTEZkQlFWa3NTMEZEV2psRkxGbEJTVW81UWl4RlFVRkhiVU1zWjBKQlFXZENPRVlzVjBGRFpuQkdMRXRCUVUwc1UwRkJVM1pDTEVWQlFWTkpMRVZCUVdWdlFpeEZRVUZ4UWpGQ0xFVkJRVTB5UWl4SFFVTTVSQ3hKUVVGSlNTeEZRVUZSTjBNc1JVRkJUMjlDTEZOQlEyWkpMRVZCUVZWeFFpeEZRVUZOY2tJc1dVRkRhRUp2Unl4RlFVRnRRbXhKTEVWQlFVZFBMRTFCUVUweVJDeFZRVUZYYkVVc1JVRkJSMjFETEdkQ1FVRm5RamhHTEZWQlFWVnVSeXhUUVVOd1JYTkNMRVZCUVd0Q00wSXNSVUZCZFVKRExFVkJRV1VzVVVGRGVFUjVReXhGUVVGbGFFSXNSVUZCVFdkQ0xHTkJRV2RDYmtVc1JVRkJSMjFETEdkQ1FVRm5RamhHTEZWQlFWVTVSQ3hoUVVOc1JYbEVMRTlCUVdkRFJDeEpRVUZ3UW5oRkxFVkJRVTE1UlN4VlFVRXdRbnBGTEVWQlFVMTVSU3hWUVVGWk5VZ3NSVUZCUjIxRExHZENRVUZuUWpoR0xGVkJRVlZNTEZWQkswSXZSaXhQUVRkQ1FYcEZMRVZCUVZFc1UwRkJWVUVzUlVGQlVVRXNSVUZCVFM5Q0xFdEJRVThyUWl4RlFVZDJRM1pETEVWQlFWRlZMRVZCT1ZoR0xHTkJPRmh2UWpaQ0xFZEJSekZDYmtRc1JVRkJSMDhzVFVGQlRUSkVMRTlCUVU5blJTeEZRVUZyUW5CSExFZEJSMnhEYjBjc1JVRkJhVUpETEc5Q1FVRnZRbWhGTEVkQlFXVXNTVUZCVFVFc1JVRkhNVVF2UkN4RlFVRkZhMElzUjBGQlV6SkhMRlZCUVZWRExGRkJSMGhRTEVsQlFXUkRMRWRCUTBFMVNDeEZRVUZIYzBVc1ZVRkRRME1zUzBGQlRTeFhRVU5HYmtVc1JVRkJSV3RDTEVkQlFWTXlSeXhWUVVGVk0wZ3NSVUZCVDNOSUxFZEJRV0VzVTBGQlZ5eFpRVVY0UkdwRUxIbENRVUV3UW5KRUxFbEJTMnhEZEVJc1JVRkJSMDhzVFVGQlRYTklMR2RDUVVGblFrTXNiVUpCUVcxQ2VFY3NSVUZCVXl4WFFVTnFSR3hDTEVWQlFVVnJRaXhIUVVGVE1rY3NWVUZCVlN4aFFVZHNRbXBKTEVWQlFVZHRReXhuUWtGQlowSklMRk5CUVZOaExFdEJRVXQyUWl4RlFVRlRMRmRCUVdFc1QwRkJUemhDTEVkQlFXOUNUaXhGUVVGeFFqRkNMRVZCUVUweVFpeEpRVVY0U0RoQ0xFOUJRVkVzVTBGQlUzWkVMRVZCUVZOSkxFVkJRV1Z2UWl4RlFVRnhRakZDTEVWQlFVMHlRaXhIUVVOb1JTeEpRVUZKU3l4RlFVRnJRak5DTEVWQlFYVkNReXhGUVVGbExGRkJSVFZFTEU5QlFVOHhRaXhGUVVGSGJVTXNaMEpCUVdkQ1NDeFRRVUZUTmtNc1QwRkJUM1pFTEVWQlFWTXNWMEZCWVN4UFFVRlBPRUlzUjBGQmIwSk9MRVZCUVhGQ01VSXNSVUZCVFRKQ0xFbEJSVEZJYjBJc1lVRkJZMjVGTEVWQlFVZHRReXhuUWtGQlowSkRMRk5CUVZNclFpeGhRVU14UTNKRExGTkJRMGxuUkN4UFFVRlJMRlZCVFdoQ09VVXNSVUZCUjIxRExHZENRVUZuUW1sSExGZEJRMloyUml4TFFVRk5MRk5CUVZOMlFpeEZRVUZUU1N4RlFVRmxiMElzUlVGQmNVSXhRaXhGUVVGTk1rSXNSMEZET1VRc1NVRkJTVWtzUlVGQlVUZERMRVZCUVU5dlFpeFRRVU5tU1N4RlFVRlZjVUlzUlVGQlRYSkNMRmxCUTJoQ2RVY3NSVUZCYlVKeVNTeEZRVUZIVHl4TlFVRk5Na1FzVlVGQlYyeEZMRVZCUVVkdFF5eG5Ra0ZCWjBKcFJ5eFZRVUZWZEVjc1UwRkRjRVU0Uml4UFFVRm5RMFFzU1VGQmNFSjRSU3hGUVVGTmVVVXNWVUZCTUVKNlJTeEZRVUZOZVVVc1ZVRkJXVFZJTEVWQlFVZHRReXhuUWtGQlowSnBSeXhWUVVGVlVpeFZRVWN2UmpWSUxFVkJRVWRQTEUxQlFVMHlSQ3hQUVVGUGJVVXNSVUZCYTBKMlJ5eEhRVWRzUTNGQ0xFVkJRVkVzVTBGQlZVRXNSVUZCVVVFc1JVRkJUUzlDTEV0QlFVOU5MRWxCUjNaRE1rY3NSVUZCYVVKRExFdEJRVThzVTBGQlV6bERMRVZCUVU5NlJTeEhRVU53UXl4SlFVRkpkMGdzUlVGQll6bElMRVZCUVZGTkxFVkJRVWRyU0N4VlFVRlZMRWRCZEdKeVF5eG5Ra0Z6WW5GRWVFZ3NSVUZCVVUwc1JVRkJSMnRJTEZWQlFWVXNSMEZCU1RWSUxFZEJRMmhHT0VNc1JVRkJUVzlHTEVsQlNWWnVTU3hGUVVGRmEwSXNSMEZCVXpoSExGVkJRVlZETEZGQlIwaFdMRWxCUVdSRExFZEJRMEUxU0N4RlFVRkhjMFVzVlVGRFEwTXNTMEZCVFN4WFFVTkdia1VzUlVGQlJXdENMRWRCUVZNNFJ5eFZRVUZWT1Vnc1JVRkJUM05JTEVkQlFXRXNVMEZCVlN4WlFVVjJSR3BFTEhsQ1FVRXdRbkpFTEVsQlMyeERkRUlzUlVGQlIwOHNUVUZCVFhOSUxHZENRVUZuUWtNc2JVSkJRVzFDZUVjc1JVRkJVeXhYUVVOcVJHeENMRVZCUVVWclFpeEhRVUZUT0Vjc1ZVRkJWU3hqUVVjM1FuUkhMRk5CUTBrd1J5eFBRVUZSSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMMjV2WkdWZmJXOWtkV3hsY3k5cmJtOWphMjkxZEMxemIzSjBZV0pzWlM5aWRXbHNaQzlyYm05amEyOTFkQzF6YjNKMFlXSnNaUzVxY3lKOSIsIiFmdW5jdGlvbihlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9lKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGwpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wia25vY2tvdXRcIl0sZSk6ZSh3aW5kb3cua28pfShmdW5jdGlvbihlKXtlLnN1YnNjcmliYWJsZS5mbi53YXRjaD1mdW5jdGlvbih0LGEsbixvKXt2YXIgcj10eXBlb2YgdDtyZXR1cm5cImJvb2xlYW5cIj09PXJ8fFwidW5kZWZpbmVkXCI9PT1yP2Uud2F0Y2godGhpcyx7ZW5hYmxlZDohMSE9PXR9KTpcImZ1bmN0aW9uXCIhPT1yfHxlLmlzU3Vic2NyaWJhYmxlKHQpP2Uud2F0Y2godCxhLG4sb3x8dGhpcyk6ZS53YXRjaCh0aGlzLGF8fHt9LHQsb3x8dGhpcyksdGhpc30sZS53YXRjaD1mdW5jdGlvbih0LGEsbixvKXtmdW5jdGlvbiByKGwsYyxmLHUscyxiKXtpZihsJiYwIT09YS5kZXB0aCYmKC0xPT09YS5kZXB0aHx8Zi5sZW5ndGg8KGEuZGVwdGh8fDEpKSl7aWYoYS53YXRjaGVkT25seSYmIWwud2F0Y2hhYmxlJiZsIT10KXJldHVybjtpZighMSE9PWEuZW5hYmxlZCYmITAhPT1hLmVuYWJsZWR8fChsLndhdGNoYWJsZT1hLmVuYWJsZWQpLCExPT09bC53YXRjaGFibGUpcmV0dXJuOyEwPT09YS5zZWFsJiYobC53YXRjaGFibGU9ITEpO3ZhciBkPXR5cGVvZiBsO2lmKFwib2JqZWN0XCI9PT1kfHxcImZ1bmN0aW9uXCI9PT1kKXtpZihsLl93YXRjaGVyPT09bylyZXR1cm47aWYoYS5oaWRlJiZlLnV0aWxzLmFycmF5SW5kZXhPZihhLmhpZGUsbCk+LTEpcmV0dXJuO3ZhciBoPVtdLmNvbmNhdChmLGMmJmMhPT10P2M6W10pO2lmKFwiZnVuY3Rpb25cIiE9PWQpe2lmKFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobCkpZS51dGlscy5vYmplY3RGb3JFYWNoKGwsZnVuY3Rpb24odCxuKXtpZihuPWEuZ2V0dGVyP2EuZ2V0dGVyLmNhbGwobyxoLGwsdCk6bil7aWYoYS53cmFwKXt2YXIgaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobik7XCJbb2JqZWN0IEZ1bmN0aW9uXVwiIT09aSYmXCJbb2JqZWN0IE9iamVjdF1cIiE9PWkmJihhLmJlZm9yZVdyYXAmJiExPT09YS5iZWZvcmVXcmFwLmNhbGwobyxoLGwsbil8fChuPWxbdF09XCJbb2JqZWN0IEFycmF5XVwiPT09aT9lLm9ic2VydmFibGVBcnJheShuKTplLm9ic2VydmFibGUobikpKX1hLnVubG9vcCYmKG4uX3dhdGNoZXI9dT92b2lkIDA6byk7dmFyIGM9cihuLHM/bnVsbDpsLGgsdSxudWxsLHQpO2EudGFnRmllbGRzJiZ2b2lkIDA9PT1uLl9maWVsZE5hbWUmJihjfHxcInBhcmVudHNPbmx5XCIhPT1hLnRhZ0ZpZWxkcyYmXCJmdW5jdGlvblwiPT10eXBlb2Ygbnx8XCJvYmplY3RcIj09dHlwZW9mIG4pJiYobi5fZmllbGROYW1lPXQpfX0pO2Vsc2UgaWYoITAhPT1hLmhpZGVBcnJheXMpZm9yKHZhciBwPTA7cDxsLmxlbmd0aDtwKyspcihsW3BdLHM/bnVsbDpsLGgsdSk7cmV0dXJuITB9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbC5ub3RpZnlTdWJzY3JpYmVycyYmbil7aWYoITA9PT1hLmVuYWJsZWQmJiExPT09bC53YXRjaGFibGUpcmV0dXJuO2lmKHV8fCFhLmJlZm9yZVdhdGNofHwhMSE9PWEuYmVmb3JlV2F0Y2guY2FsbChvLGgsbCxiKSl7dmFyIHk9XCJmdW5jdGlvblwiPT10eXBlb2YgbC5wb3A7aWYodT9pKGwpOmZ1bmN0aW9uKHQsaSxsLGMpe2k/dC5zdWJzY3JpYmUoZnVuY3Rpb24oaSl7dmFyIGY7ITE9PT1hLnNwbGl0QXJyYXlDaGFuZ2VzJiZ2b2lkIDAhPT0oZj1uLmNhbGwobyxsLHQsaSkpJiZvKGYpLGUudXRpbHMuYXJyYXlGb3JFYWNoKGksZnVuY3Rpb24oZSl7aWYoITEhPT1hLnNwbGl0QXJyYXlDaGFuZ2VzKXt2YXIgaT1uLmNhbGwobyxsLHQsZSk7dm9pZCAwIT09aSYmbyhpKX1lLm1vdmVkfHwoITE9PT1hLmFzeW5jP3IoZS52YWx1ZSxjP251bGw6dCxsLFwiZGVsZXRlZFwiPT09ZS5zdGF0dXMpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyKGUudmFsdWUsYz9udWxsOnQsbCxcImRlbGV0ZWRcIj09PWUuc3RhdHVzKX0pKX0pfSx2b2lkIDAsXCJhcnJheUNoYW5nZVwiKS5fd2F0Y2hlcj1vOih0LnN1YnNjcmliZShmdW5jdGlvbigpe2lmKCExIT09dC53YXRjaGFibGUpe3ZhciBlPW4uY2FsbChvLGwsdCk7dm9pZCAwIT09ZSYmbyhlKSxhLm11dGFibGUmJlwib2JqZWN0XCI9PXR5cGVvZiB0KCkmJighMT09PWEuYXN5bmM/cih0KCksYz9udWxsOnQsbCwhMSwhMCk6c2V0VGltZW91dChmdW5jdGlvbigpe3IodCgpLGM/bnVsbDp0LGwsITEsITApfSkpfX0sbnVsbCxcImNoYW5nZVwiKS5fd2F0Y2hlcj1vLChhLm9sZFZhbHVlcz4wfHxhLm11dGFibGUpJiYodC5zdWJzY3JpYmUoZnVuY3Rpb24oZSl7aWYoYS5vbGRWYWx1ZXM+MCl7dmFyIG49dC5vbGRWYWx1ZXM/dC5vbGRWYWx1ZXM6dC5vbGRWYWx1ZXM9W107Zm9yKG4udW5zaGlmdChlKTtuLmxlbmd0aD5hLm9sZFZhbHVlczspbi5wb3AoKX1hLm11dGFibGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZyKGUsYz9udWxsOnQsbCwhMCwhMCl9LG51bGwsXCJiZWZvcmVDaGFuZ2VcIikuX3dhdGNoZXI9bykpfShsLHksaCxzKSx5KXJldHVybiByKGwoKSxzP251bGw6bCxoLHUsITApLCEwO2lmKCEwIT09YS5oaWRlV3JhcHBlZFZhbHVlcylyZXR1cm4gcihsKCkscz9udWxsOmwsaCx1LCEwKX19fX19ZnVuY3Rpb24gaShlKXt2YXIgdD1lW2xdO2lmKCF0KXRocm93XCJTdWJzY3JpcHRpb25zIGZpZWxkICguXCIrbCtcIikgbm90IGRlZmluZWQgZm9yIG9ic2VydmFibGUgY2hpbGQgXCIrKGUuX2ZpZWxkTmFtZXx8XCJcIik7aWYodC5jaGFuZ2UpZm9yKG49dC5jaGFuZ2UubGVuZ3RoLTE7bj49MDtuLS0pdC5jaGFuZ2Vbbl0uX3dhdGNoZXI9PT1vJiZ0LmNoYW5nZVtuXS5kaXNwb3NlKCk7aWYodC5iZWZvcmVDaGFuZ2UmJihhLm11dGFibGV8fGEub2xkVmFsdWVzPjApKWZvcihuPXQuYmVmb3JlQ2hhbmdlLmxlbmd0aC0xO24+PTA7bi0tKXQuYmVmb3JlQ2hhbmdlW25dLl93YXRjaGVyPT09byYmdC5iZWZvcmVDaGFuZ2Vbbl0uZGlzcG9zZSgpO2lmKHQuYXJyYXlDaGFuZ2UpZm9yKHZhciBuPXQuYXJyYXlDaGFuZ2UubGVuZ3RoLTE7bj49MDtuLS0pdC5hcnJheUNoYW5nZVtuXS5fd2F0Y2hlcj09PW8mJnQuYXJyYXlDaGFuZ2Vbbl0uZGlzcG9zZSgpfXZhciBsO3N3aXRjaChcImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiYobz1vfHxuLG49YSxhPXt9KSxvPW98fHRoaXMsXCJmdW5jdGlvblwiPT10eXBlb2YgZS5zdWJzY3JpcHRpb258fGUudmVyc2lvbil7Y2FzZSEwOmw9XCJfc3Vic2NyaXB0aW9uc1wiO2JyZWFrO2Nhc2VcIjMuMC4wXCI6bD1cIkZcIjticmVhaztjYXNlXCIzLjEuMFwiOmw9XCJIXCI7YnJlYWs7Y2FzZVwiMy4yLjBcIjpsPVwiTVwiO2JyZWFrO2Nhc2VcIjMuMy4wXCI6bD1cIkdcIjticmVhaztjYXNlXCIzLjQuMFwiOmNhc2VcIjMuNC4xXCI6bD1cIktcIjticmVhaztjYXNlXCIzLjQuMlwiOmw9XCJGXCI7YnJlYWs7Y2FzZVwiMy41LjAtYmV0YVwiOmw9XCJTXCI7YnJlYWs7ZGVmYXVsdDp0aHJvd1wiVW5zdXBwb3J0ZWQgS25vY2tvdXQgdmVyc2lvbi4gT25seSB2My4wLjAgdG8gdjMuNS4wLWJldGEgYXJlIHN1cHBvcnRlZCB3aGVuIG1pbmlmaWVkLiBDdXJyZW50IHZlcnNpb24gaXMgXCIrZS52ZXJzaW9ufXJldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fGUuaXNTdWJzY3JpYmFibGUodCk/KHIodCxudWxsLFtdKSx7ZGlzcG9zZTpmdW5jdGlvbigpe3IodCxudWxsLFtdLCEwKX19KTplLmNvbXB1dGVkKHQsbixhKX19KSx3aW5kb3cuZm9vPVwiMS40LjBcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltdHZMWEpsWVdOMGIzSXViV2x1TG1weklsMHNJbTVoYldWeklqcGJJbVVpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0ltMXZaSFZzWlNJc0luZHBibVJ2ZHlJc0ltZHNiMkpoYkNJc0ltUmxabWx1WlNJc0ltRnRaQ0lzSW10dklpd2ljM1ZpYzJOeWFXSmhZbXhsSWl3aVptNGlMQ0ozWVhSamFDSXNJblFpTENKaElpd2liaUlzSW5JaUxDSnZJaXdpZEdocGN5SXNJbVZ1WVdKc1pXUWlMQ0pwYzFOMVluTmpjbWxpWVdKc1pTSXNJbU1pTENKMUlpd2laaUlzSW5NaUxDSmlJaXdpYUNJc0ltUmxjSFJvSWl3aWJHVnVaM1JvSWl3aWQyRjBZMmhsWkU5dWJIa2lMQ0ozWVhSamFHRmliR1VpTENKelpXRnNJaXdpWkNJc0lsOTNZWFJqYUdWeUlpd2lhR2xrWlNJc0luVjBhV3h6SWl3aVlYSnlZWGxKYm1SbGVFOW1JaXdpY0NJc0ltTnZibU5oZENJc0lrOWlhbVZqZENJc0luQnliM1J2ZEhsd1pTSXNJblJ2VTNSeWFXNW5JaXdpWTJGc2JDSXNJbTlpYW1WamRFWnZja1ZoWTJnaUxDSm5aWFIwWlhJaUxDSjNjbUZ3SWl3aWFTSXNJbUpsWm05eVpWZHlZWEFpTENKdlluTmxjblpoWW14bFFYSnlZWGtpTENKdlluTmxjblpoWW14bElpd2lkVzVzYjI5d0lpd2liQ0lzSW5SaFowWnBaV3hrY3lJc0lsOW1hV1ZzWkU1aGJXVWlMQ0pvYVdSbFFYSnlZWGx6SWl3aWVTSXNJbTV2ZEdsbWVWTjFZbk5qY21saVpYSnpJaXdpWW1WbWIzSmxWMkYwWTJnaUxDSjJJaXdpY0c5d0lpd2ljM1ZpYzJOeWFXSmxJaXdpYzNCc2FYUkJjbkpoZVVOb1lXNW5aWE1pTENKaGNuSmhlVVp2Y2tWaFkyZ2lMQ0p0YjNabFpDSXNJbUZ6ZVc1aklpd2lkbUZzZFdVaUxDSnpkR0YwZFhNaUxDSnpaWFJVYVcxbGIzVjBJaXdpYlhWMFlXSnNaU0lzSW05c1pGWmhiSFZsY3lJc0luVnVjMmhwWm5RaUxDSm9hV1JsVjNKaGNIQmxaRlpoYkhWbGN5SXNJbU5vWVc1blpTSXNJbVJwYzNCdmMyVWlMQ0ppWldadmNtVkRhR0Z1WjJVaUxDSmhjbkpoZVVOb1lXNW5aU0lzSW5OMVluTmpjbWx3ZEdsdmJpSXNJblpsY25OcGIyNGlMQ0pqYjIxd2RYUmxaQ0lzSW1admJ5SmRMQ0p0WVhCd2FXNW5jeUk2SWtOQlIwTXNVMEZCVTBFc1IwRkJSeXh0UWtGQmJVSkRMRk5CUVZNc2FVSkJRV2xDUXl4VFFVRlRMR2xDUVVGcFFrTXNUMEZCVDBnc1JVRkJjVUlzYjBKQlFWaEpMRTlCUVhsQ1FTeFBRVUZYTEVkQlFYTkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWeXhIUVVGSkxFMUJRVThzYlVKQlFXMUNReXhSUVVGUlFTeFBRVUZQUXl4SlFVRkpSQ3hSUVVGUkxGbEJRVmxPTEVkQlFVZEJMRVZCUVVWSkxFOUJRVTlKTEVsQlFYaFJMRU5CUVRaUkxGTkJRVk5TTEVkQlFVZEJMRVZCUVVWVExHRkJRV0ZETEVkQlFVZERMRTFCUVUwc1UwRkJVME1zUlVGQlJVTXNSVUZCUlVNc1JVRkJSVU1zUjBGQlJ5eEpRVUZKUXl4VFFVRlRTaXhGUVVGRkxFMUJRVTBzV1VGQldVa3NSMEZCUnl4alFVRmpRU3hGUVVGRmFFSXNSVUZCUlZjc1RVRkJUVTBzVFVGQlRVTXNVMEZCVVN4SlFVRkxUaXhKUVVGSkxHRkJRV0ZKTEVkQlFVZG9RaXhGUVVGRmJVSXNaVUZCWlZBc1IwRkJSMW9zUlVGQlJWY3NUVUZCVFVNc1JVRkJSVU1zUlVGQlJVTXNSVUZCUlVNc1IwRkJSMFVzVFVGQlRXcENMRVZCUVVWWExFMUJRVTFOTEV0QlFVdEtMRTFCUVUxRUxFVkJRVVZITEVkQlFVZEZMRTFCUVUxQkxFMUJRVTFxUWl4RlFVRkZWeXhOUVVGTkxGTkJRVk5ETEVWQlFVVkRMRVZCUVVWRExFVkJRVVZETEVkQlFVY3NVMEZCVTBNc1JVRkJSVWtzUlVGQlJVTXNSVUZCUlVNc1JVRkJSVU1zUlVGQlJVTXNSVUZCUlVNc1IwRkJSeXhIUVVGSFRDeEhRVUZITEVsQlFVbFFMRVZCUVVWaExGTkJRVk1zU1VGQlNXSXNSVUZCUldFc1QwRkJUMG9zUlVGQlJVc3NVVUZCVVdRc1JVRkJSV0VzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUjJJc1JVRkJSV1VzWTBGQlkxSXNSVUZCUlZNc1YwRkJWMVFzUjBGQlIxSXNSVUZCUlN4UFFVRlBMRWxCUVVjc1NVRkJTME1zUlVGQlJVc3NWVUZCVXl4SlFVRkxUQ3hGUVVGRlN5eFZRVUZWUlN4RlFVRkZVeXhWUVVGVmFFSXNSVUZCUlVzc1ZVRkJVeXhKUVVGTFJTeEZRVUZGVXl4VlFVRlZMRkZCUVU4c1NVRkJTMmhDTEVWQlFVVnBRaXhQUVVGUFZpeEZRVUZGVXl4WFFVRlZMRWRCUVVrc1NVRkJTVVVzVTBGQlUxZ3NSVUZCUlN4SFFVRkhMRmRCUVZkWExFZEJRVWNzWVVGQllVRXNSVUZCUlN4RFFVRkRMRWRCUVVkWUxFVkJRVVZaTEZkQlFWZHFRaXhGUVVGRkxFOUJRVThzUjBGQlIwWXNSVUZCUlc5Q0xFMUJRVTFxUXl4RlFVRkZhME1zVFVGQlRVTXNZVUZCWVhSQ0xFVkJRVVZ2UWl4TFFVRkxZaXhKUVVGSkxFVkJRVVVzVDBGQlR5eEpRVUZKWjBJc1MwRkJTME1zVDBGQlQyWXNSVUZCUlVRc1IwRkJSMEVzU1VGQlNWUXNSVUZCUlZNc1RVRkJUU3hIUVVGSExHRkJRV0ZWTEVWQlFVVXNRMEZCUXl4SFFVRkhMRzlDUVVGdlFrOHNUMEZCVDBNc1ZVRkJWVU1zVTBGQlUwTXNTMEZCUzNKQ0xFZEJRVWR3UWl4RlFVRkZhME1zVFVGQlRWRXNZMEZCWTNSQ0xFVkJRVVVzVTBGQlUxSXNSVUZCUlVVc1IwRkJSeXhIUVVGSFFTeEZRVUZGUkN4RlFVRkZPRUlzVDBGQlR6bENMRVZCUVVVNFFpeFBRVUZQUml4TFFVRkxNVUlzUlVGQlJYRkNMRVZCUVVWb1FpeEZRVUZGVWl4SFFVRkhSU3hGUVVGRkxFTkJRVU1zUjBGQlIwUXNSVUZCUlN0Q0xFdEJRVXNzUTBGQlF5eEpRVUZKUXl4RlFVRkZVQ3hQUVVGUFF5eFZRVUZWUXl4VFFVRlRReXhMUVVGTE0wSXNSMEZCUnl4elFrRkJjMElyUWl4SFFVRkhMRzlDUVVGdlFrRXNTVUZCU1doRExFVkJRVVZwUXl4aFFVRlpMRWxCUVV0cVF5eEZRVUZGYVVNc1YwRkJWMHdzUzBGQlN6RkNMRVZCUVVWeFFpeEZRVUZGYUVJc1JVRkJSVTRzUzBGQlMwRXNSVUZCUlUwc1JVRkJSVklzUjBGQlJ5eHRRa0ZCYlVKcFF5eEZRVUZGTjBNc1JVRkJSU3RETEdkQ1FVRm5RbXBETEVkQlFVZGtMRVZCUVVWblJDeFhRVUZYYkVNc1MwRkJTMFFzUlVGQlJXOURMRk5CUVZOdVF5eEZRVUZGYTBJc1UwRkJVMVFzVDBGQlJTeEZRVUZQVWl4SFFVRkhMRWxCUVVsdFF5eEZRVUZGYkVNc1JVRkJSVVlzUlVGQlJWVXNSVUZCUlN4TFFVRkxTaXhGUVVGRlowSXNSVUZCUldJc1JVRkJSU3hMUVVGTFdDeEhRVUZIUXl4RlFVRkZjME1zWjBKQlFWY3NTVUZCVTNKRExFVkJRVVZ6UXl4aFFVRmhSaXhIUVVGSExHZENRVUZuUW5KRExFVkJRVVZ6UXl4WFFVRlhMRzFDUVVGdFFuSkRMRWRCUVVjc2FVSkJRV2xDUVN4TFFVRkxRU3hGUVVGRmMwTXNWMEZCVjNoRExGZEJRVmNzU1VGQlJ5eEpRVUZMUXl4RlFVRkZkME1zVjBGQlZ5eEpRVUZKTEVsQlFVbERMRVZCUVVVc1JVRkJSVUVzUlVGQlJXeERMRVZCUVVWUExFOUJRVTh5UWl4SlFVRkpkRU1zUlVGQlJVa3NSVUZCUld0RExFZEJRVWM1UWl4RlFVRkZMRXRCUVV0S0xFVkJRVVZuUWl4RlFVRkZZaXhIUVVGSExFOUJRVTBzUlVGQlJ5eEhRVUZITEcxQ1FVRnRRa2dzUlVGQlJXMURMRzFDUVVGdFFucERMRVZCUVVVc1EwRkJReXhKUVVGSExFbEJRVXRFTEVWQlFVVkxMRlZCUVZNc1NVRkJTMFVzUlVGQlJWTXNWVUZCVlN4UFFVRlBMRWRCUVVkT0xFbEJRVWxXTEVWQlFVVXlReXhqUVVGaExFbEJRVXN6UXl4RlFVRkZNa01zV1VGQldXWXNTMEZCU3pGQ0xFVkJRVVZ4UWl4RlFVRkZhRUlzUlVGQlJVc3NSMEZCUnl4RFFVRkRMRWxCUVVsblF5eEZRVUZGTEcxQ1FVRnRRbkpETEVWQlFVVnpReXhKUVVGSkxFZEJRVWR1UXl4RlFVRkZjMElzUlVGQlJYcENMRWRCUVRCclFpeFRRVUZYVWl4RlFVRkZhVU1zUlVGQlJVc3NSVUZCUlRsQ0xFZEJRVWQ1UWl4RlFVRkZha01zUlVGQlJTdERMRlZCUVZVc1UwRkJVMlFzUjBGQlJ5eEpRVUZKZUVJc1IwRkJSU3hKUVVGTFVpeEZRVUZGSzBNc2QwSkJRVzFDTEV0QlFWVjJReXhGUVVGRlVDeEZRVUZGTWtJc1MwRkJTekZDTEVWQlFVVnRReXhGUVVGRmRFTXNSVUZCUldsRExFdEJRVXM1UWl4RlFVRkZUU3hIUVVGSGNrSXNSVUZCUld0RExFMUJRVTB5UWl4aFFVRmhhRUlzUlVGQlJTeFRRVUZUTjBNc1IwRkJSeXhKUVVGSExFbEJRVXRoTEVWQlFVVXJReXhyUWtGQmEwSXNRMEZCUXl4SlFVRkpaaXhGUVVGRkwwSXNSVUZCUlRKQ0xFdEJRVXN4UWl4RlFVRkZiVU1zUlVGQlJYUkRMRVZCUVVWYUxGRkJRVWNzU1VGQlV6WkRMRWRCUVVjNVFpeEZRVUZGT0VJc1IwRkJSemRETEVWQlFVVTRSQ3hUUVVGUkxFbEJRVXRxUkN4RlFVRkZhMFFzVFVGQlRTOURMRVZCUVVWb1FpeEZRVUZGWjBVc1RVRkJUVFZETEVWQlFVVXNTMEZCUzFJc1JVRkJSWE5ETEVWQlFVVXNXVUZCV1d4RUxFVkJRVVZwUlN4UlFVRlJReXhYUVVGWExGZEJRVmRzUkN4RlFVRkZhRUlzUlVGQlJXZEZMRTFCUVUwMVF5eEZRVUZGTEV0QlFVdFNMRVZCUVVWelF5eEZRVUZGTEZsQlFWbHNSQ3hGUVVGRmFVVXNiVUpCUVdNc1JVRkJUeXhsUVVGbGFrTXNVMEZCVTJwQ0xFZEJRVWRJTEVWQlFVVXJReXhWUVVGVkxGZEJRVmNzU1VGQlJ5eEpRVUZMTDBNc1JVRkJSV2xDTEZWQlFWVXNRMEZCUXl4SlFVRkpOMElzUlVGQlJXTXNSVUZCUlRKQ0xFdEJRVXN4UWl4RlFVRkZiVU1zUlVGQlJYUkRMRkZCUVVjc1NVRkJVMW9zUjBGQlIyVXNSVUZCUldZc1IwRkJSMkVzUlVGQlJYTkVMRk5CUVZNc2FVSkJRV2xDZGtRc1QwRkJUU3hKUVVGTFF5eEZRVUZGYTBRc1RVRkJUUzlETEVWQlFVVktMRWxCUVVsUkxFVkJRVVVzUzBGQlMxSXNSVUZCUlhORExFZEJRVVVzUjBGQlJ5eEhRVUZKWjBJc1YwRkJWeXhYUVVGWGJFUXNSVUZCUlVvc1NVRkJTVkVzUlVGQlJTeExRVUZMVWl4RlFVRkZjME1zUjBGQlJTeEhRVUZITEZGQlFWTXNTMEZCU3l4VlFVRlZiRUlzVTBGQlUycENMRWRCUVVkR0xFVkJRVVYxUkN4VlFVRlZMRWRCUVVkMlJDeEZRVUZGYzBRc1YwRkJWM1pFTEVWQlFVVXJReXhWUVVGVkxGTkJRVk16UkN4SFFVRkhMRWRCUVVkaExFVkJRVVYxUkN4VlFVRlZMRVZCUVVVc1EwRkJReXhKUVVGSmRFUXNSVUZCUlVZc1JVRkJSWGRFTEZWQlFWVjRSQ3hGUVVGRmQwUXNWVUZCVlhoRUxFVkJRVVYzUkN4aFFVRmhMRWxCUVVsMFJDeEZRVUZGZFVRc1VVRkJVWEpGTEVkQlFVZGpMRVZCUVVWaExFOUJRVTlrTEVWQlFVVjFSQ3hYUVVGWGRFUXNSVUZCUlRSRExFMUJRVTAzUXl4RlFVRkZjMFFzVTBGQlV5eHBRa0ZCYVVKdVJTeEhRVUZIWjBJc1JVRkJSV2hDTEVWQlFVVnZRaXhGUVVGRkxFdEJRVXRTTEVWQlFVVnpReXhIUVVGRkxFZEJRVWNzU1VGQlN5eExRVUZMTEdkQ1FVRm5RbXhDTEZOQlFWTnFRaXhKUVVGME5rTnRReXhEUVVGRk9VSXNSVUZCUlhGRExFVkJRVVZ5UWl4RlFVRkZXaXhIUVVGSGFVTXNSVUZCUlN4UFFVRlBla01zUlVGQlJVa3NTVUZCU1Vrc1JVRkJSU3hMUVVGTFNpeEZRVUZGWjBJc1JVRkJSV0lzUjBGQlJTeEpRVUZKTEVWQlFVY3NTVUZCUnl4SlFVRkxWaXhGUVVGRmVVUXNhMEpCUVd0Q0xFOUJRVTkwUkN4RlFVRkZTU3hKUVVGSlNTeEZRVUZGTEV0QlFVdEtMRVZCUVVWblFpeEZRVUZGWWl4SFFVRkZMRTlCUVZFc1UwRkJVM05DTEVWQlFVVTNReXhIUVVGSExFbEJRVWxaTEVWQlFVVmFMRVZCUVVWdlFpeEhRVUZITEVsQlFVbFNMRVZCUVVVc1MwRkJTeXg1UWtGQmVVSlJMRVZCUVVVc2RVTkJRWFZEY0VJc1JVRkJSVzlFTEZsQlFWa3NTVUZCU1N4SFFVRkhlRU1zUlVGQlJUSkVMRTlCUVU4c1NVRkJTWHBFTEVWQlFVVkdMRVZCUVVVeVJDeFBRVUZQTlVNc1QwRkJUeXhGUVVGRllpeEhRVUZITEVWQlFVVkJMRWxCUVVsR0xFVkJRVVV5UkN4UFFVRlBla1FzUjBGQlIydENMRmRCUVZkcVFpeEhRVUZIU0N4RlFVRkZNa1FzVDBGQlQzcEVMRWRCUVVjd1JDeFZRVUZWTEVkQlFVYzFSQ3hGUVVGRk5rUXNaVUZCWlRWRUxFVkJRVVZ6UkN4VFFVRlRkRVFzUlVGQlJYVkVMRlZCUVZVc1IwRkJSeXhKUVVGSmRFUXNSVUZCUlVZc1JVRkJSVFpFTEdGQlFXRTVReXhQUVVGUExFVkJRVVZpTEVkQlFVY3NSVUZCUlVFc1NVRkJTVVlzUlVGQlJUWkVMR0ZCUVdFelJDeEhRVUZIYTBJc1YwRkJWMnBDTEVkQlFVZElMRVZCUVVVMlJDeGhRVUZoTTBRc1IwRkJSekJFTEZWQlFWVXNSMEZCUnpWRUxFVkJRVVU0UkN4WlFVRlpMRWxCUVVrc1NVRkJTVFZFTEVWQlFVVkdMRVZCUVVVNFJDeFpRVUZaTDBNc1QwRkJUeXhGUVVGRllpeEhRVUZITEVWQlFVVkJMRWxCUVVsR0xFVkJRVVU0UkN4WlFVRlpOVVFzUjBGQlIydENMRmRCUVZkcVFpeEhRVUZIU0N4RlFVRkZPRVFzV1VGQldUVkVMRWRCUVVjd1JDeFZRVUVyTlVJc1NVRkJTWEJFTEVWQlFVVXNUMEZCZUVRc2JVSkJRVzFDVUN4SlFVRkpSU3hGUVVGRlFTeEhRVUZIUkN4RlFVRkZRU3hGUVVGRlJDeEZRVUZGUVN4TlFVRk5SU3hGUVVGRlFTeEhRVUZIUlN4TFFVRnJRaXh0UWtGQmJVSnFRaXhGUVVGRk1rVXNZMEZCWXpORkxFVkJRVVUwUlN4VFFVRlRMRXRCUVVrc1JVRkJSM2hFTEVWQlFVVXNhVUpCUVdsQ0xFMUJRVTBzU1VGQlNTeFJRVUZSUVN4RlFVRkZMRWxCUVVrc1RVRkJUU3hKUVVGSkxGRkJRVkZCTEVWQlFVVXNTVUZCU1N4TlFVRk5MRWxCUVVrc1VVRkJVVUVzUlVGQlJTeEpRVUZKTEUxQlFVMHNTVUZCU1N4UlFVRlJRU3hGUVVGRkxFbEJRVWtzVFVGQlRTeEpRVUZKTEZGQlFWRXNTVUZCU1N4UlFVRlJRU3hGUVVGRkxFbEJRVWtzVFVGQlRTeEpRVUZKTEZGQlFWRkJMRVZCUVVVc1NVRkJTU3hOUVVGTkxFbEJRVWtzWVVGQllVRXNSVUZCUlN4SlFVRkpMRTFCUVUwc1VVRkJVU3hMUVVGTExEUkhRVUUwUjNCQ0xFVkJRVVUwUlN4UlFVRlJMRTFCUVUwc2JVSkJRVzFDYUVVc1IwRkJSMW9zUlVGQlJXMUNMR1ZCUVdWUUxFbEJRVWxKTEVWQlFVVktMRVZCUVVVc1ZVRkJWVFJFTEZGQlFWRXNWMEZCVjNoRUxFVkJRVVZLTEVWQlFVVXNVMEZCVVN4TlFVRlBXaXhGUVVGRk5rVXNVMEZCVTJwRkxFVkJRVVZGTEVWQlFVVkVMRTFCUVUxVUxFOUJRVTh3UlN4SlFVRk5JaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwyNXZaR1ZmYlc5a2RXeGxjeTlyYnkxeVpXRmpkRzl5TDJScGMzUXZhMjh0Y21WaFkzUnZjaTV0YVc0dWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9e2xleDpyZXF1aXJlKFwiLi9saWIvbGV4ZXJcIikscGFyc2U6cmVxdWlyZShcIi4vbGliL3BhcnNlclwiKSxzdHJpbmdpZnk6cmVxdWlyZShcIi4vbGliL3N0cmluZ2lmeVwiKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKc1pYZ2lMQ0p5WlhGMWFYSmxJaXdpY0dGeWMyVWlMQ0p6ZEhKcGJtZHBabmtpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UFFVRlBReXhUUVVOSVF5eEpRVUZQUXl4UlFVRlJMR1ZCUTJaRExFMUJRVTlFTEZGQlFWRXNaMEpCUTJaRkxGVkJRVmRHTEZGQlFWRWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmJtOWtaVjl0YjJSMWJHVnpMMjFsYm5OamFDOXBibVJsZUM1cWN5SjkiLCJmdW5jdGlvbiBkZWJ1ZyhlKXtyZXR1cm4gX2RlYnVnLmJpbmQobnVsbCxlKX1mdW5jdGlvbiBfZGVidWcoZSl7dmFyIG49W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7bi51bnNoaWZ0KFwiW1wiK2UrXCJdXCIpLHByb2Nlc3Muc3RkZXJyLndyaXRlKG4uam9pbihcIiBcIikrXCJcXG5cIil9ZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1kZWJ1ZztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxZblZuTG1weklsMHNJbTVoYldWeklqcGJJbVJsWW5Wbklpd2liR0ZpWld3aUxDSmZaR1ZpZFdjaUxDSmlhVzVrSWl3aVlYSm5jeUlzSW5Oc2FXTmxJaXdpWTJGc2JDSXNJbUZ5WjNWdFpXNTBjeUlzSW5WdWMyaHBablFpTENKd2NtOWpaWE56SWl3aWMzUmtaWEp5SWl3aWQzSnBkR1VpTENKcWIybHVJaXdpWlhod2IzSjBjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJSVUVzVTBGQlUwRXNUVUZCVFVNc1IwRkRZaXhQUVVGUFF5eFBRVUZQUXl4TFFVRkxMRXRCUVUxR0xFZEJSek5DTEZOQlFWTkRMRTlCUVU5RUxFZEJRMlFzU1VGQlNVY3NTMEZCVlVNc1RVRkJUVU1zUzBGQlMwTXNWVUZCVnl4SFFVTndRMGdzUlVGQlMwa3NVVUZCVVN4SlFVRk5VQ3hGUVVGUkxFdEJRek5DVVN4UlFVRlJReXhQUVVGUFF5eE5RVUZOVUN4RlFVRkxVU3hMUVVGTExFdEJRVThzVFVGVWVFTkRMRkZCUVZWRExFOUJRVTlFTEZGQlFWVmlJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwyNXZaR1ZmYlc5a2RXeGxjeTl0Wlc1elkyZ3ZiR2xpTDJSbFluVm5MbXB6SW4wPSIsInZhciBERUJVRz0hMSxUSU1FUj0hMSxkZWJ1Zz1yZXF1aXJlKFwiLi9kZWJ1Z1wiKShcImxleFwiKTtmdW5jdGlvbiBsZXgoZSl7dmFyIGEscixzPVwiXCIsdD0wLGM9LTEsbj0wLGw9MSxvPVwiYmVmb3JlLXNlbGVjdG9yXCIsdT1bb10saT17fSxiPVtdLGY9W1wibWVkaWFcIixcImtleWZyYW1lc1wiLHtuYW1lOlwiLXdlYmtpdC1rZXlmcmFtZXNcIix0eXBlOlwia2V5ZnJhbWVzXCIscHJlZml4OlwiLXdlYmtpdC1cIn0se25hbWU6XCItbW96LWtleWZyYW1lc1wiLHR5cGU6XCJrZXlmcmFtZXNcIixwcmVmaXg6XCItbW96LVwifSx7bmFtZTpcIi1tcy1rZXlmcmFtZXNcIix0eXBlOlwia2V5ZnJhbWVzXCIscHJlZml4OlwiLW1zLVwifSx7bmFtZTpcIi1vLWtleWZyYW1lc1wiLHR5cGU6XCJrZXlmcmFtZXNcIixwcmVmaXg6XCItby1cIn0sXCJmb250LWZhY2VcIix7bmFtZTpcImltcG9ydFwiLHN0YXRlOlwiYmVmb3JlLWF0LXZhbHVlXCJ9LHtuYW1lOlwiY2hhcnNldFwiLHN0YXRlOlwiYmVmb3JlLWF0LXZhbHVlXCJ9LFwic3VwcG9ydHNcIixcInZpZXdwb3J0XCIse25hbWU6XCJuYW1lc3BhY2VcIixzdGF0ZTpcImJlZm9yZS1hdC12YWx1ZVwifSxcImRvY3VtZW50XCIse25hbWU6XCItbW96LWRvY3VtZW50XCIsdHlwZTpcImRvY3VtZW50XCIscHJlZml4OlwiLW1vei1cIn0sXCJwYWdlXCJdO2Z1bmN0aW9uIG0oZSl7cmV0dXJuIGU/dVt1Lmxlbmd0aC0xLWVdOm99ZnVuY3Rpb24gZyhhKXt2YXIgcj1jKzE7cmV0dXJuIGE9PT1lLnNsaWNlKHIscithLmxlbmd0aCl9ZnVuY3Rpb24gdihhKXt2YXIgcj1lLnNsaWNlKGMpLmluZGV4T2YoYSk7cmV0dXJuIHI+MCYmcn1mdW5jdGlvbiBrKGUpe3JldHVybiBlPT09cCgxKX1mdW5jdGlvbiBwKGEpe3JldHVybiBlW2MrKGF8fDEpXX1mdW5jdGlvbiBkKCl7dmFyIGU9dS5wb3AoKTtyZXR1cm4gbz11W3UubGVuZ3RoLTFdLGV9ZnVuY3Rpb24gaChlKXtyZXR1cm4gbz1lLHUucHVzaChvKSx1Lmxlbmd0aH1mdW5jdGlvbiB3KGUpe3ZhciBhPW87cmV0dXJuIHVbdS5sZW5ndGgtMV09bz1lLGF9ZnVuY3Rpb24geShhKXtpZigxPT0oYXx8MSkpXCJcXG5cIj09ZVtjXT8obCsrLHQ9MSk6dCsrLGMrKztlbHNle3ZhciByPWUuc2xpY2UoYyxjK2EpLnNwbGl0KFwiXFxuXCIpO3IubGVuZ3RoPjEmJihsKz1yLmxlbmd0aC0xLHQ9MSksdCs9cltyLmxlbmd0aC0xXS5sZW5ndGgsYys9YX19ZnVuY3Rpb24geCgpe2kuZW5kPXtsaW5lOmwsY29sOnR9LERFQlVHJiZkZWJ1ZyhcImFkZFRva2VuOlwiLEpTT04uc3RyaW5naWZ5KGksbnVsbCwyKSksYi5wdXNoKGkpLHM9XCJcIixpPXt9fWZ1bmN0aW9uIEUoZSl7aT17dHlwZTplLHN0YXJ0OntsaW5lOmwsY29sOnR9fX1mb3IoVElNRVImJihhPURhdGUubm93KCkpO3koKSxyPWVbY107KXN3aXRjaChERUJVRyYmZGVidWcocixtKCkpLHIpe2Nhc2VcIiBcIjpzd2l0Y2gobSgpKXtjYXNlXCJzZWxlY3RvclwiOmNhc2VcInZhbHVlXCI6Y2FzZVwidmFsdWUtcGFyZW5cIjpjYXNlXCJhdC1ncm91cFwiOmNhc2VcImF0LXZhbHVlXCI6Y2FzZVwiY29tbWVudFwiOmNhc2VcImRvdWJsZS1zdHJpbmdcIjpjYXNlXCJzaW5nbGUtc3RyaW5nXCI6cys9cn1icmVhaztjYXNlXCJcXG5cIjpjYXNlXCJcXHRcIjpjYXNlXCJcXHJcIjpjYXNlXCJcXGZcIjpzd2l0Y2gobSgpKXtjYXNlXCJ2YWx1ZVwiOmNhc2VcInZhbHVlLXBhcmVuXCI6Y2FzZVwiYXQtZ3JvdXBcIjpjYXNlXCJjb21tZW50XCI6Y2FzZVwic2luZ2xlLXN0cmluZ1wiOmNhc2VcImRvdWJsZS1zdHJpbmdcIjpjYXNlXCJzZWxlY3RvclwiOnMrPXI7YnJlYWs7Y2FzZVwiYXQtdmFsdWVcIjpcIlxcblwiPT09ciYmKGkudmFsdWU9cy50cmltKCkseCgpLGQoKSl9YnJlYWs7Y2FzZVwiOlwiOnN3aXRjaChtKCkpe2Nhc2VcIm5hbWVcIjppLm5hbWU9cy50cmltKCkscz1cIlwiLHcoXCJiZWZvcmUtdmFsdWVcIik7YnJlYWs7Y2FzZVwiYmVmb3JlLXNlbGVjdG9yXCI6cys9cixFKFwic2VsZWN0b3JcIiksaChcInNlbGVjdG9yXCIpO2JyZWFrO2Nhc2VcImJlZm9yZS12YWx1ZVwiOncoXCJ2YWx1ZVwiKSxzKz1yO2JyZWFrO2RlZmF1bHQ6cys9cn1icmVhaztjYXNlXCI7XCI6c3dpdGNoKG0oKSl7Y2FzZVwibmFtZVwiOmNhc2VcImJlZm9yZS12YWx1ZVwiOmNhc2VcInZhbHVlXCI6cy50cmltKCkubGVuZ3RoPjAmJihpLnZhbHVlPXMudHJpbSgpLHgoKSksdyhcImJlZm9yZS1uYW1lXCIpO2JyZWFrO2Nhc2VcInZhbHVlLXBhcmVuXCI6cys9cjticmVhaztjYXNlXCJhdC12YWx1ZVwiOmkudmFsdWU9cy50cmltKCkseCgpLGQoKTticmVhaztjYXNlXCJiZWZvcmUtbmFtZVwiOmJyZWFrO2RlZmF1bHQ6cys9cn1icmVhaztjYXNlXCJ7XCI6c3dpdGNoKG0oKSl7Y2FzZVwic2VsZWN0b3JcIjppZihcIlxcXFxcIj09PXAoLTEpKXtzKz1yO2JyZWFrfWkudGV4dD1zLnRyaW0oKSx4KCksdyhcImJlZm9yZS1uYW1lXCIpLG4rPTE7YnJlYWs7Y2FzZVwiYXQtZ3JvdXBcIjpzd2l0Y2goaS5uYW1lPXMudHJpbSgpLGkudHlwZSl7Y2FzZVwiZm9udC1mYWNlXCI6Y2FzZVwidmlld3BvcnRcIjpjYXNlXCJwYWdlXCI6aChcImJlZm9yZS1uYW1lXCIpO2JyZWFrO2RlZmF1bHQ6aChcImJlZm9yZS1zZWxlY3RvclwiKX14KCksbis9MTticmVhaztjYXNlXCJuYW1lXCI6Y2FzZVwiYXQtcnVsZVwiOmkubmFtZT1zLnRyaW0oKSx4KCksaChcImJlZm9yZS1uYW1lXCIpLG4rPTE7YnJlYWs7Y2FzZVwiY29tbWVudFwiOmNhc2VcImRvdWJsZS1zdHJpbmdcIjpjYXNlXCJzaW5nbGUtc3RyaW5nXCI6cys9cjticmVhaztjYXNlXCJiZWZvcmUtdmFsdWVcIjp3KFwidmFsdWVcIikscys9cn1icmVhaztjYXNlXCJ9XCI6c3dpdGNoKG0oKSl7Y2FzZVwiYmVmb3JlLW5hbWVcIjpjYXNlXCJuYW1lXCI6Y2FzZVwiYmVmb3JlLXZhbHVlXCI6Y2FzZVwidmFsdWVcIjpzJiYoaS52YWx1ZT1zLnRyaW0oKSksaS5uYW1lJiZpLnZhbHVlJiZ4KCksRShcImVuZFwiKSx4KCksZCgpLFwiYXQtZ3JvdXBcIj09PW0oKSYmKEUoXCJhdC1ncm91cC1lbmRcIikseCgpLGQoKSksbj4wJiYobi09MSk7YnJlYWs7Y2FzZVwiYXQtZ3JvdXBcIjpjYXNlXCJiZWZvcmUtc2VsZWN0b3JcIjpjYXNlXCJzZWxlY3RvclwiOmlmKFwiXFxcXFwiPT09cCgtMSkpe3MrPXI7YnJlYWt9bj4wJiZcImF0LWdyb3VwXCI9PT1tKDEpJiYoRShcImF0LWdyb3VwLWVuZFwiKSx4KCkpLG4+MSYmZCgpLG4+MCYmKG4tPTEpO2JyZWFrO2Nhc2VcImRvdWJsZS1zdHJpbmdcIjpjYXNlXCJzaW5nbGUtc3RyaW5nXCI6Y2FzZVwiY29tbWVudFwiOnMrPXJ9YnJlYWs7Y2FzZSdcIic6Y2FzZVwiJ1wiOnN3aXRjaChtKCkpe2Nhc2VcImRvdWJsZS1zdHJpbmdcIjonXCInPT09ciYmXCJcXFxcXCIhPT1wKC0xKSYmZCgpO2JyZWFrO2Nhc2VcInNpbmdsZS1zdHJpbmdcIjpcIidcIj09PXImJlwiXFxcXFwiIT09cCgtMSkmJmQoKTticmVhaztjYXNlXCJiZWZvcmUtYXQtdmFsdWVcIjp3KFwiYXQtdmFsdWVcIiksaCgnXCInPT09cj9cImRvdWJsZS1zdHJpbmdcIjpcInNpbmdsZS1zdHJpbmdcIik7YnJlYWs7Y2FzZVwiYmVmb3JlLXZhbHVlXCI6dyhcInZhbHVlXCIpLGgoJ1wiJz09PXI/XCJkb3VibGUtc3RyaW5nXCI6XCJzaW5nbGUtc3RyaW5nXCIpO2JyZWFrO2Nhc2VcImNvbW1lbnRcIjpicmVhaztkZWZhdWx0OlwiXFxcXFwiIT09cCgtMSkmJmgoJ1wiJz09PXI/XCJkb3VibGUtc3RyaW5nXCI6XCJzaW5nbGUtc3RyaW5nXCIpfXMrPXI7YnJlYWs7Y2FzZVwiL1wiOnN3aXRjaChtKCkpe2Nhc2VcImNvbW1lbnRcIjpjYXNlXCJkb3VibGUtc3RyaW5nXCI6Y2FzZVwic2luZ2xlLXN0cmluZ1wiOnMrPXI7YnJlYWs7Y2FzZVwiYmVmb3JlLXZhbHVlXCI6Y2FzZVwic2VsZWN0b3JcIjpjYXNlXCJuYW1lXCI6Y2FzZVwidmFsdWVcIjppZihrKFwiKlwiKSl7dmFyIEQ9dihcIiovXCIpO0QmJnkoRCsxKX1lbHNlXCJiZWZvcmUtdmFsdWVcIj09bSgpJiZ3KFwidmFsdWVcIikscys9cjticmVhaztkZWZhdWx0OmsoXCIqXCIpPyhFKFwiY29tbWVudFwiKSxoKFwiY29tbWVudFwiKSx5KCkpOnMrPXJ9YnJlYWs7Y2FzZVwiKlwiOnN3aXRjaChtKCkpe2Nhc2VcImNvbW1lbnRcIjprKFwiL1wiKT8oaS50ZXh0PXMseSgpLHgoKSxkKCkpOnMrPXI7YnJlYWs7Y2FzZVwiYmVmb3JlLXNlbGVjdG9yXCI6cys9cixFKFwic2VsZWN0b3JcIiksaChcInNlbGVjdG9yXCIpO2JyZWFrO2Nhc2VcImJlZm9yZS12YWx1ZVwiOncoXCJ2YWx1ZVwiKSxzKz1yO2JyZWFrO2RlZmF1bHQ6cys9cn1icmVhaztjYXNlXCJAXCI6c3dpdGNoKG0oKSl7Y2FzZVwiY29tbWVudFwiOmNhc2VcImRvdWJsZS1zdHJpbmdcIjpjYXNlXCJzaW5nbGUtc3RyaW5nXCI6cys9cjticmVhaztjYXNlXCJiZWZvcmUtdmFsdWVcIjp3KFwidmFsdWVcIikscys9cjticmVhaztkZWZhdWx0OmZvcih2YXIgeixULEI9ITEsRz0wLEk9Zi5sZW5ndGg7IUImJkc8STsrK0cpZyh6PShUPWZbR10pLm5hbWV8fFQpJiYoQj0hMCxFKHopLGgoVC5zdGF0ZXx8XCJhdC1ncm91cFwiKSx5KHoubGVuZ3RoKSxULnByZWZpeCYmKGkucHJlZml4PVQucHJlZml4KSxULnR5cGUmJihpLnR5cGU9VC50eXBlKSk7Qnx8KHMrPXIpfWJyZWFrO2Nhc2VcIihcIjpzd2l0Y2gobSgpKXtjYXNlXCJ2YWx1ZVwiOmgoXCJ2YWx1ZS1wYXJlblwiKTticmVhaztjYXNlXCJiZWZvcmUtdmFsdWVcIjp3KFwidmFsdWVcIil9cys9cjticmVhaztjYXNlXCIpXCI6c3dpdGNoKG0oKSl7Y2FzZVwidmFsdWUtcGFyZW5cIjpkKCk7YnJlYWs7Y2FzZVwiYmVmb3JlLXZhbHVlXCI6dyhcInZhbHVlXCIpfXMrPXI7YnJlYWs7ZGVmYXVsdDpzd2l0Y2gobSgpKXtjYXNlXCJiZWZvcmUtc2VsZWN0b3JcIjpFKFwic2VsZWN0b3JcIiksaChcInNlbGVjdG9yXCIpO2JyZWFrO2Nhc2VcImJlZm9yZS1uYW1lXCI6RShcInByb3BlcnR5XCIpLHcoXCJuYW1lXCIpO2JyZWFrO2Nhc2VcImJlZm9yZS12YWx1ZVwiOncoXCJ2YWx1ZVwiKTticmVhaztjYXNlXCJiZWZvcmUtYXQtdmFsdWVcIjp3KFwiYXQtdmFsdWVcIil9cys9cn1yZXR1cm4gVElNRVImJmRlYnVnKFwicmFuIGluXCIsRGF0ZS5ub3coKS1hK1wibXNcIiksYn1leHBvcnRzPW1vZHVsZS5leHBvcnRzPWxleDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklteGxlR1Z5TG1weklsMHNJbTVoYldWeklqcGJJa1JGUWxWSElpd2lWRWxOUlZJaUxDSmtaV0oxWnlJc0luSmxjWFZwY21VaUxDSnNaWGdpTENKamMzTWlMQ0p6ZEdGeWRDSXNJbU5vSWl3aVluVm1abVZ5SWl3aVkyOXNkVzF1SWl3aVkzVnljMjl5SWl3aVpHVndkR2dpTENKc2FXNWxJaXdpYzNSaGRHVWlMQ0p6ZEdGamF5SXNJblJ2YTJWdUlpd2lkRzlyWlc1eklpd2lZWFJTZFd4bGN5SXNJbTVoYldVaUxDSjBlWEJsSWl3aWNISmxabWw0SWl3aVoyVjBVM1JoZEdVaUxDSnBibVJsZUNJc0lteGxibWQwYUNJc0ltbHpUbVY0ZEZOMGNtbHVaeUlzSW5OMGNpSXNJbk5zYVdObElpd2labWx1WkNJc0luQnZjeUlzSW1sdVpHVjRUMllpTENKcGMwNWxlSFJEYUdGeUlpd2ljR1ZsYXlJc0ltOW1abk5sZENJc0luQnZjRk4wWVhSbElpd2ljbVZ0YjNabFpDSXNJbkJ2Y0NJc0luQjFjMmhUZEdGMFpTSXNJbTVsZDFOMFlYUmxJaXdpY0hWemFDSXNJbkpsY0d4aFkyVlRkR0YwWlNJc0luQnlaWFpwYjNWelUzUmhkR1VpTENKemEybHdJaXdpYmlJc0luTnJhWEJUZEhJaUxDSnpjR3hwZENJc0ltRmtaRlJ2YTJWdUlpd2laVzVrSWl3aVkyOXNJaXdpU2xOUFRpSXNJbk4wY21sdVoybG1lU0lzSW1sdWFYUnBZV3hwZW1WVWIydGxiaUlzSWtSaGRHVWlMQ0p1YjNjaUxDSjJZV3gxWlNJc0luUnlhVzBpTENKMFpYaDBJaXdpY25Wc1pTSXNJblJ2YTJWdWFYcGxaQ0lzSW1vaUxDSnNaVzRpTENKbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hQUVVGUkxFVkJRMUpETEU5QlFWRXNSVUZGVWtNc1RVRkJVVU1zVVVGQlVTeFZRVUZTUVN4RFFVRnRRaXhQUVZVdlFpeFRRVUZUUXl4SlFVRkpReXhIUVVOWUxFbEJRVWxETEVWQlIwRkRMRVZCUkVGRExFVkJRVk1zUjBGRlZFTXNSVUZCVXl4RlFVTlVReXhIUVVGVkxFVkJRMVpETEVWQlFWRXNSVUZEVWtNc1JVRkJUeXhGUVVOUVF5eEZRVUZSTEd0Q1FVTlNReXhIUVVGVFJDeEhRVU5VUlN4TFFVTkJReXhMUVVkQlF5eEhRVU5HTEZGQlEwRXNZVUZEUlVNc1MwRkJUU3h2UWtGQmNVSkRMRXRCUVUwc1dVRkJZVU1zVDBGQlVTeGhRVU4wUkVZc1MwRkJUU3hwUWtGQmEwSkRMRXRCUVUwc1dVRkJZVU1zVDBGQlVTeFZRVU51UkVZc1MwRkJUU3huUWtGQmFVSkRMRXRCUVUwc1dVRkJZVU1zVDBGQlVTeFRRVU5zUkVZc1MwRkJUU3hsUVVGblFrTXNTMEZCVFN4WlFVRmhReXhQUVVGUkxFOUJRMjVFTEdGQlEwVkdMRXRCUVUwc1UwRkJWVXdzVFVGQlR5eHZRa0ZEZGtKTExFdEJRVTBzVlVGQlYwd3NUVUZCVHl4dFFrRkRNVUlzVjBGRFFTeFpRVU5GU3l4TFFVRk5MRmxCUVdGTUxFMUJRVThzYlVKQlF6VkNMRmxCUTBWTExFdEJRVTBzWjBKQlFXbENReXhMUVVGTkxGZEJRVmxETEU5QlFWRXNVMEZEYmtRc1VVRnpRa1lzVTBGQlUwTXNSVUZCVTBNc1IwRkRhRUlzVDBGQlQwRXNSVUZCVVZJc1JVRkJUVUVzUlVGQlRWTXNUMEZCVXl4RlFVRkpSQ3hIUVVGVFZDeEZRVlZ1UkN4VFFVRlRWeXhGUVVGaFF5eEhRVU53UWl4SlFVRkpia0lzUlVGQlVVa3NSVUZCVXl4RlFVTnlRaXhQUVVGUlpTeEpRVUZSY0VJc1JVRkJTWEZDTEUxQlFVMXdRaXhGUVVGUFFTeEZRVUZSYlVJc1JVRkJTVVlzVVVGVkwwTXNVMEZCVTBrc1JVRkJTMFlzUjBGRFdpeEpRVUZKUnl4RlFVRk5ka0lzUlVGQlNYRkNMRTFCUVUxb1FpeEhRVUZSYlVJc1VVRkJVVW9zUjBGRmNFTXNUMEZCVDBjc1JVRkJUU3hIUVVGSlFTeEZRVk51UWl4VFFVRlRSU3hGUVVGWGRrSXNSMEZEYkVJc1QwRkJUMEVzU1VGQlQzZENMRVZCUVVzc1IwRlZja0lzVTBGQlUwRXNSVUZCUzBNc1IwRkRXaXhQUVVGUE0wSXNSVUZCU1Vzc1IwRkJWWE5DTEVkQlFWVXNTVUZSYWtNc1UwRkJVME1zU1VGRFVDeEpRVUZKUXl4RlFVRlZjRUlzUlVGQlRYRkNMRTFCUjNCQ0xFOUJSa0YwUWl4RlFVRlJReXhGUVVGTlFTeEZRVUZOVXl4UFFVRlRMRWRCUlhSQ1Z5eEZRVk5VTEZOQlFWTkZMRVZCUVZWRExFZEJTV3BDTEU5QlNFRjRRaXhGUVVGUmQwSXNSVUZEVW5aQ0xFVkJRVTEzUWl4TFFVRkxla0lzUjBGRlNrTXNSVUZCVFZNc1QwRlRaaXhUUVVGVFowSXNSVUZCWVVZc1IwRkRjRUlzU1VGQlNVY3NSVUZCWjBJelFpeEZRVWR3UWl4UFFVWkJReXhGUVVGTlFTeEZRVUZOVXl4UFFVRlRMRWRCUVV0V0xFVkJRVkYzUWl4RlFVVXpRa2NzUlVGVFZDeFRRVUZUUXl4RlFVRkxReXhIUVVOYUxFZEJRV2RDTEVsQlFWaEJMRWRCUVVzc1IwRkRWeXhOUVVGbWNrTXNSVUZCU1Vzc1NVRkRUa1VzU1VGRFFVZ3NSVUZCVXl4SFFVVlVRU3hKUVVWR1F5eFJRVU5MTEVOQlEwd3NTVUZCU1dsRExFVkJRVlYwUXl4RlFVRkpjVUlzVFVGQlRXaENMRVZCUVZGQkxFVkJRVk5uUXl4SFFVRkhSU3hOUVVGTkxFMUJRemxEUkN4RlFVRlJjRUlzVDBGQlV5eEpRVU51UWxnc1IwRkJVU3RDTEVWQlFWRndRaXhQUVVGVExFVkJRM3BDWkN4RlFVRlRMRWRCUlZoQkxFZEJRVlZyUXl4RlFVRlJRU3hGUVVGUmNFSXNUMEZCVXl4SFFVRkhRU3hQUVVOMFEySXNSMEZCYTBKblF5eEhRVTkwUWl4VFFVRlRSeXhKUVVOUU9VSXNSVUZCVFN0Q0xFdEJRMHBzUXl4TFFVRk5RU3hGUVVOT2JVTXNTVUZCUzNSRExFZEJSMUJVTEU5QlFWTkZMRTFCUVUwc1dVRkJZVGhETEV0QlFVdERMRlZCUVZWc1F5eEZRVUZQTEV0QlFVMHNTVUZGZUVSRExFVkJRVTl6UWl4TFFVRkxka0lzUjBGRldsQXNSVUZCVXl4SFFVTlVUeXhMUVZGR0xGTkJRVk50UXl4RlFVRm5RaTlDTEVkQlEzWkNTaXhIUVVORlNTeExRVUZOUVN4RlFVTk9ZaXhQUVVORlRTeExRVUZOUVN4RlFVTk9iVU1zU1VGQlRYUkRMRWxCYjBKYUxFbEJSa0ZTTEZGQlFWVkxMRVZCUVZFMlF5eExRVUZMUXl4UFFURkxja0pZTEVsQk5FdExiRU1zUlVFelMwVkdMRVZCUVVsTExFbEJaMHhZTEU5QlNrRldMRTlCUVZORkxFMUJRVTFMTEVWQlFVbGpMRXRCU1Zoa0xFZEJSVklzU1VGQlN5eEpRVU5JTEU5QlFWRmpMRXRCUTFJc1NVRkJTeXhYUVVOTUxFbEJRVXNzVVVGRFRDeEpRVUZMTEdOQlEwd3NTVUZCU3l4WFFVTk1MRWxCUVVzc1YwRkRUQ3hKUVVGTExGVkJRMHdzU1VGQlN5eG5Ra0ZEVEN4SlFVRkxMR2RDUVVOSVlpeEhRVUZWUkN4RlFVZGFMRTFCUjBZc1NVRkJTeXhMUVVOTUxFbEJRVXNzUzBGRFRDeEpRVUZMTEV0QlEwd3NTVUZCU3l4TFFVTklMRTlCUVZGakxFdEJRMUlzU1VGQlN5eFJRVU5NTEVsQlFVc3NZMEZEVEN4SlFVRkxMRmRCUTB3c1NVRkJTeXhWUVVOTUxFbEJRVXNzWjBKQlEwd3NTVUZCU3l4blFrRkRUQ3hKUVVGTExGZEJRMGhpTEVkQlFWVkVMRVZCUTFZc1RVRkZSaXhKUVVGTExGZEJSVU1zVDBGQlUwRXNTVUZEV0ZFc1JVRkJUWE5ETEUxQlFWRTNReXhGUVVGUE9FTXNUMEZEY2tKVUxFbEJRMEZhTEV0QlUwb3NUVUZGUml4SlFVRkxMRWxCUTBnc1QwRkJVVm9zUzBGRFVpeEpRVUZMTEU5QlEwaE9MRVZCUVUxSExFdEJRVTlXTEVWQlFVODRReXhQUVVOd1FqbERMRVZCUVZNc1IwRkZWQ3RDTEVWQlFXRXNaMEpCUTJJc1RVRkZSaXhKUVVGTExHdENRVU5JTDBJc1IwRkJWVVFzUlVGRlZqSkRMRVZCUVdkQ0xGbEJRMmhDWkN4RlFVRlZMRmxCUTFZc1RVRkZSaXhKUVVGTExHVkJRMGhITEVWQlFXRXNVMEZEWWk5Q0xFZEJRVlZFTEVWQlExWXNUVUZGUml4UlFVTkZReXhIUVVGVlJDeEZRVWRhTEUxQlJVWXNTVUZCU3l4SlFVTklMRTlCUVZGakxFdEJRMUlzU1VGQlN5eFBRVU5NTEVsQlFVc3NaVUZEVEN4SlFVRkxMRkZCUjBOaUxFVkJRVTg0UXl4UFFVRlBMMElzVDBGQlV5eEpRVU42UWxJc1JVRkJUWE5ETEUxQlFWRTNReXhGUVVGUE9FTXNUMEZEY2tKVUxFdEJSVVpPTEVWQlFXRXNaVUZEWWl4TlFVVkdMRWxCUVVzc1kwRkZTQzlDTEVkQlFWVkVMRVZCUTFZc1RVRkZSaXhKUVVGTExGZEJSVWhSTEVWQlFVMXpReXhOUVVGUk4wTXNSVUZCVHpoRExFOUJRM0pDVkN4SlFVTkJXaXhKUVVOQkxFMUJSVVlzU1VGQlN5eGpRVVZJTEUxQlJVWXNVVUZEUlhwQ0xFZEJRVlZFTEVWQlIxb3NUVUZGUml4SlFVRkxMRWxCUTBnc1QwRkJVV01zUzBGRFVpeEpRVUZMTEZkQlJVZ3NSMEZCYVVJc1QwRkJZbFVzUjBGQlRTeEhRVUZoTEVOQlEyNUNka0lzUjBGQlZVUXNSVUZEVml4TlFVbEtVU3hGUVVGTmQwTXNTMEZCVHk5RExFVkJRVTg0UXl4UFFVTndRbFFzU1VGRFFVNHNSVUZCWVN4bFFVTmlOVUlzUjBGQlowSXNSVUZEYUVJc1RVRkZSaXhKUVVGTExGZEJTMGdzVDBGSVFVa3NSVUZCVFVjc1MwRkJUMVlzUlVGQlR6aERMRTlCUjFwMlF5eEZRVUZOU1N4TlFVTmtMRWxCUVVzc1dVRkRUQ3hKUVVGTExGZEJRMHdzU1VGQlN5eFBRVU5JYVVJc1JVRkJWU3hsUVVOV0xFMUJSVVlzVVVGRFJVRXNSVUZCVlN4dFFrRkhXbE1zU1VGRFFXeERMRWRCUVdkQ0xFVkJRMmhDTEUxQlJVWXNTVUZCU3l4UFFVTk1MRWxCUVVzc1ZVRkZTRWtzUlVGQlRVY3NTMEZCVDFZc1JVRkJUemhETEU5QlEzQkNWQ3hKUVVOQlZDeEZRVUZWTEdWQlExWjZRaXhIUVVGblFpeEZRVU5vUWl4TlFVVkdMRWxCUVVzc1ZVRkRUQ3hKUVVGTExHZENRVU5NTEVsQlFVc3NaMEpCUlVoSUxFZEJRVlZFTEVWQlExWXNUVUZEUml4SlFVRkxMR1ZCUTBoblF5eEZRVUZoTEZOQlEySXZRaXhIUVVGVlJDeEZRVWxhTEUxQlJVWXNTVUZCU3l4SlFVTklMRTlCUVZGakxFdEJRMUlzU1VGQlN5eGpRVU5NTEVsQlFVc3NUMEZEVEN4SlFVRkxMR1ZCUTB3c1NVRkJTeXhSUVVWRFlpeEpRVU5HVHl4RlFVRk5jME1zVFVGQlVUZERMRVZCUVU4NFF5eFJRVWx1UW5aRExFVkJRVTFITEUxQlFWRklMRVZCUVUxelF5eFBRVU4wUWxJc1NVRkpSa3NzUlVGQlowSXNUMEZEYUVKTUxFbEJRMEZhTEVsQlNVa3NZVUZCWlZvc1RVRkRha0kyUWl4RlFVRm5RaXhuUWtGRGFFSk1MRWxCUTBGYUxFdEJSMFYwUWl4RlFVRlJMRWxCUTFaQkxFZEJRV2RDTEVkQlIyeENMRTFCUlVZc1NVRkJTeXhYUVVOTUxFbEJRVXNzYTBKQlEwd3NTVUZCU3l4WFFVVklMRWRCUVdsQ0xFOUJRV0p2UWl4SFFVRk5MRWRCUVdFc1EwRkRia0oyUWl4SFFVRlZSQ3hGUVVOV0xFMUJSMEZKTEVWQlFWRXNSMEZGVGl4aFFVRmxWU3hGUVVGVExFdEJRekZDTmtJc1JVRkJaMElzWjBKQlEyaENUQ3hMUVVsQmJFTXNSVUZCVVN4SFFVTldjMElzU1VGSFJYUkNMRVZCUVZFc1NVRkRWa0VzUjBGQlowSXNSMEZGYkVJc1RVRkZSaXhKUVVGTExHZENRVU5NTEVsQlFVc3NaMEpCUTB3c1NVRkJTeXhWUVVWSVNDeEhRVUZWUkN4RlFVbGFMRTFCUjBZc1NVRkJTeXhKUVVOTUxFbEJRVXNzU1VGRFNDeFBRVUZSWXl4TFFVTlNMRWxCUVVzc1owSkJRME1zVFVGQlVXUXNSMEZCVFN4UFFVRlRkMElzUjBGQlRTeEpRVU12UWtVc1NVRkZSaXhOUVVWR0xFbEJRVXNzWjBKQlEwTXNUVUZCVVRGQ0xFZEJRVTBzVDBGQlUzZENMRWRCUVUwc1NVRkRMMEpGTEVsQlJVWXNUVUZGUml4SlFVRkxMR3RDUVVOSVRTeEZRVUZoTEZsQlEySklMRVZCUVZVc1RVRkJVVGRDTEVWQlFVc3NaMEpCUVd0Q0xHbENRVU42UXl4TlFVVkdMRWxCUVVzc1pVRkRTR2RETEVWQlFXRXNVMEZEWWtnc1JVRkJWU3hOUVVGUk4wSXNSVUZCU3l4blFrRkJhMElzYVVKQlEzcERMRTFCUlVZc1NVRkJTeXhWUVVWSUxFMUJSVVlzVVVGRFRTeFBRVUZUZDBJc1IwRkJUU3hKUVVOcVFrc3NSVUZCVlN4TlFVRlJOMElzUlVGQlN5eG5Ra0ZCYTBJc2FVSkJTVGREUXl4SFFVRlZSQ3hGUVVOV0xFMUJSMFlzU1VGQlN5eEpRVU5JTEU5QlFWRmpMRXRCUTFJc1NVRkJTeXhWUVVOTUxFbEJRVXNzWjBKQlEwd3NTVUZCU3l4blFrRkZTR0lzUjBGQlZVUXNSVUZEVml4TlFVVkdMRWxCUVVzc1pVRkRUQ3hKUVVGTExGZEJRMHdzU1VGQlN5eFBRVU5NTEVsQlFVc3NVVUZEU0N4SFFVRkpkVUlzUlVGQlZ5eExRVUZOTEVOQlIyNUNMRWxCUVVsR0xFVkJRVTFFTEVWQlFVc3NUVUZGV0VNc1IwRkRSbUVzUlVGQlMySXNSVUZCVFN4UFFVZExMR2RDUVVGa1VDeExRVUU0UW10Q0xFVkJRV0VzVTBGREwwTXZRaXhIUVVGVlJDeEZRVVZhTEUxQlJVWXNVVUZEVFhWQ0xFVkJRVmNzVFVGRlltOUNMRVZCUVdkQ0xGZEJRMmhDWkN4RlFVRlZMRmRCUTFaTExFdEJSMEZxUXl4SFFVRlZSQ3hGUVVsa0xFMUJSMFlzU1VGQlN5eEpRVU5JTEU5QlFWRmpMRXRCUTFJc1NVRkJTeXhWUVVORFV5eEZRVUZYTEUxQlJXSm1MRVZCUVUxM1F5eExRVUZQTDBNc1JVRkRZbWxETEVsQlEwRkpMRWxCUTBGYUxFdEJSMEY2UWl4SFFVRlZSQ3hGUVVWYUxFMUJSVVlzU1VGQlN5eHJRa0ZEU0VNc1IwRkJWVVFzUlVGRFZqSkRMRVZCUVdkQ0xGbEJRMmhDWkN4RlFVRlZMRmxCUTFZc1RVRkZSaXhKUVVGTExHVkJRMGhITEVWQlFXRXNVMEZEWWk5Q0xFZEJRVlZFTEVWQlExWXNUVUZGUml4UlFVTkZReXhIUVVGVlJDeEZRVVZhTEUxQlIwWXNTVUZCU3l4SlFVTklMRTlCUVZGakxFdEJRMUlzU1VGQlN5eFZRVU5NTEVsQlFVc3NaMEpCUTB3c1NVRkJTeXhuUWtGRFNHSXNSMEZCVlVRc1JVRkRWaXhOUVVOR0xFbEJRVXNzWlVGRFNHZERMRVZCUVdFc1UwRkRZaTlDTEVkQlFWVkVMRVZCUTFZc1RVRkZSaXhSUVUxRkxFbEJTa0VzU1VGRFNWY3NSVUZEUVhORExFVkJSa0ZETEVkQlFWa3NSVUZKVUVNc1JVRkJTU3hGUVVGSFF5eEZRVUZOTVVNc1JVRkJVVTBzVVVGQlUydERMRWRCUVdGRExFVkJRVWxETEVsQlFVOUVMRVZCU1hoRWJFTXNSVUZHVEU0c1IwRkVRWE5ETEVWQlFVOTJReXhGUVVGUmVVTXNTVUZEU0hoRExFMUJRVkZ6UXl4TFFVbHdRa01zUjBGQldTeEZRVVZhVUN4RlFVRm5RbWhETEVkQlEyaENhMElzUlVGQlZXOUNMRVZCUVVzelF5eFBRVUZUTEZsQlEzaENORUlzUlVGQlMzWkNMRVZCUVV0TExGRkJSVTVwUXl4RlFVRkxjRU1zVTBGRFVFd3NSVUZCVFVzc1QwRkJVMjlETEVWQlFVdHdReXhSUVVkc1FtOURMRVZCUVV0eVF5eFBRVU5RU2l4RlFVRk5TU3hMUVVGUGNVTXNSVUZCUzNKRExFOUJTV3BDYzBNc1NVRkZTR3BFTEVkQlFWVkVMRWRCU1dRc1RVRkpSaXhKUVVGTExFbEJRMGdzVDBGQlVXTXNTMEZEVWl4SlFVRkxMRkZCUTBobExFVkJRVlVzWlVGRFZpeE5RVU5HTEVsQlFVc3NaVUZEU0Vjc1JVRkJZU3hUUVVsbUwwSXNSMEZCVlVRc1JVRkRWaXhOUVVWR0xFbEJRVXNzU1VGRFNDeFBRVUZSWXl4TFFVTlNMRWxCUVVzc1kwRkRTRmtzU1VGRFFTeE5RVU5HTEVsQlFVc3NaVUZEU0Uwc1JVRkJZU3hUUVVsbUwwSXNSMEZCVlVRc1JVRkRWaXhOUVVWR0xGRkJRMFVzVDBGQlVXTXNTMEZEVWl4SlFVRkxMR3RDUVVOSU5rSXNSVUZCWjBJc1dVRkRhRUprTEVWQlFWVXNXVUZEVml4TlFVVkdMRWxCUVVzc1kwRkRTR01zUlVGQlowSXNXVUZEYUVKWUxFVkJRV0VzVVVGRFlpeE5RVVZHTEVsQlFVc3NaVUZEU0VFc1JVRkJZU3hUUVVOaUxFMUJSVVlzU1VGQlN5eHJRa0ZEU0VFc1JVRkJZU3haUVVsbUwwSXNSMEZCVlVRc1JVRlBaQ3hQUVVaQlRpeFBRVUZUUXl4TlFVRk5MRk5CUVZkcFJDeExRVUZMUXl4TlFVRlJPVU1zUlVGQlV5eE5RVVY2UTFVc1JVRTNjVUpVTkVNc1VVRkJWVU1zVDBGQlQwUXNVVUZCVlhoRUlpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDI1dlpHVmZiVzlrZFd4bGN5OXRaVzV6WTJndmJHbGlMMnhsZUdWeUxtcHpJbjA9IiwidmFyIF9jb21tZW50cyxfZGVwdGgsX3Bvc2l0aW9uLF90b2tlbnMsREVCVUc9ITEsVElNRVI9ITEsZGVidWc9cmVxdWlyZShcIi4vZGVidWdcIikoXCJwYXJzZVwiKSxsZXg9cmVxdWlyZShcIi4vbGV4ZXJcIik7ZnVuY3Rpb24gcGFyc2UoZSxyKXt2YXIgdCxzO3J8fChyPXt9KSxfY29tbWVudHM9ISFyLmNvbW1lbnRzLF9wb3NpdGlvbj0hIXIucG9zaXRpb24sX2RlcHRoPTAsX3Rva2Vucz1BcnJheS5pc0FycmF5KGUpP2Uuc2xpY2UoKTpsZXgoZSk7dmFyIG4sYT1bXTtmb3IoVElNRVImJih0PURhdGUubm93KCkpO249bmV4dCgpOykocz1wYXJzZVRva2VuKG4pKSYmYS5wdXNoKHMpO3JldHVybiBUSU1FUiYmZGVidWcoXCJyYW4gaW5cIixEYXRlLm5vdygpLXQrXCJtc1wiKSx7dHlwZTpcInN0eWxlc2hlZXRcIixzdHlsZXNoZWV0OntydWxlczphfX19ZnVuY3Rpb24gYXN0Tm9kZShlLHIpe3ZhciB0O3J8fChyPXt9KTtmb3IodmFyIHM9W1widHlwZVwiLFwibmFtZVwiLFwidmFsdWVcIl0sbj17fSxhPTA7YTxzLmxlbmd0aDsrK2EpZVt0PXNbYV1dJiYoblt0XT1yW3RdfHxlW3RdKTtmb3Iocz1PYmplY3Qua2V5cyhyKSxhPTA7YTxzLmxlbmd0aDsrK2Epblt0PXNbYV1dfHwoblt0XT1yW3RdKTtyZXR1cm4gX3Bvc2l0aW9uJiYobi5wb3NpdGlvbj17c3RhcnQ6ZS5zdGFydCxlbmQ6ZS5lbmR9KSxERUJVRyYmZGVidWcoXCJhc3ROb2RlOlwiLEpTT04uc3RyaW5naWZ5KG4sbnVsbCwyKSksbn1mdW5jdGlvbiBuZXh0KCl7dmFyIGU9X3Rva2Vucy5zaGlmdCgpO3JldHVybiBERUJVRyYmZGVidWcoXCJuZXh0OlwiLEpTT04uc3RyaW5naWZ5KGUsbnVsbCwyKSksZX1mdW5jdGlvbiBwYXJzZUF0R3JvdXAoZSl7X2RlcHRoKz0xO3ZhciByPXt9O3N3aXRjaChlLnR5cGUpe2Nhc2VcImZvbnQtZmFjZVwiOmNhc2VcInZpZXdwb3J0XCI6ci5kZWNsYXJhdGlvbnM9cGFyc2VEZWNsYXJhdGlvbnMoKTticmVhaztjYXNlXCJwYWdlXCI6ci5wcmVmaXg9ZS5wcmVmaXgsci5kZWNsYXJhdGlvbnM9cGFyc2VEZWNsYXJhdGlvbnMoKTticmVhaztkZWZhdWx0OnIucHJlZml4PWUucHJlZml4LHIucnVsZXM9cGFyc2VSdWxlcygpfXJldHVybiBhc3ROb2RlKGUscil9ZnVuY3Rpb24gcGFyc2VBdEltcG9ydChlKXtyZXR1cm4gYXN0Tm9kZShlKX1mdW5jdGlvbiBwYXJzZUNoYXJzZXQoZSl7cmV0dXJuIGFzdE5vZGUoZSl9ZnVuY3Rpb24gcGFyc2VDb21tZW50KGUpe3JldHVybiBhc3ROb2RlKGUse3RleHQ6ZS50ZXh0fSl9ZnVuY3Rpb24gcGFyc2VOYW1lc3BhY2UoZSl7cmV0dXJuIGFzdE5vZGUoZSl9ZnVuY3Rpb24gcGFyc2VQcm9wZXJ0eShlKXtyZXR1cm4gYXN0Tm9kZShlKX1mdW5jdGlvbiBwYXJzZVNlbGVjdG9yKGUpe3JldHVybiBhc3ROb2RlKGUse3R5cGU6XCJydWxlXCIsc2VsZWN0b3JzOmUudGV4dC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0pLGRlY2xhcmF0aW9uczpwYXJzZURlY2xhcmF0aW9ucyhlKX0pfWZ1bmN0aW9uIHBhcnNlVG9rZW4oZSl7c3dpdGNoKGUudHlwZSl7Y2FzZVwicHJvcGVydHlcIjpyZXR1cm4gcGFyc2VQcm9wZXJ0eShlKTtjYXNlXCJzZWxlY3RvclwiOnJldHVybiBwYXJzZVNlbGVjdG9yKGUpO2Nhc2VcImF0LWdyb3VwLWVuZFwiOnJldHVybiB2b2lkKF9kZXB0aC09MSk7Y2FzZVwibWVkaWFcIjpjYXNlXCJrZXlmcmFtZXNcIjpyZXR1cm4gcGFyc2VBdEdyb3VwKGUpO2Nhc2VcImNvbW1lbnRcIjppZihfY29tbWVudHMpcmV0dXJuIHBhcnNlQ29tbWVudChlKTticmVhaztjYXNlXCJjaGFyc2V0XCI6cmV0dXJuIHBhcnNlQ2hhcnNldChlKTtjYXNlXCJpbXBvcnRcIjpyZXR1cm4gcGFyc2VBdEltcG9ydChlKTtjYXNlXCJuYW1lc3BhY2VcIjpyZXR1cm4gcGFyc2VOYW1lc3BhY2UoZSk7Y2FzZVwiZm9udC1mYWNlXCI6Y2FzZVwic3VwcG9ydHNcIjpjYXNlXCJ2aWV3cG9ydFwiOmNhc2VcImRvY3VtZW50XCI6Y2FzZVwicGFnZVwiOnJldHVybiBwYXJzZUF0R3JvdXAoZSl9REVCVUcmJmRlYnVnKFwicGFyc2VUb2tlbjogdW5leHBlY3RlZCB0b2tlbjpcIixKU09OLnN0cmluZ2lmeShlKSl9ZnVuY3Rpb24gcGFyc2VUb2tlbnNXaGlsZShlKXtmb3IodmFyIHIsdCxzPVtdOyh0PW5leHQoKSkmJmUmJmUodCk7KShyPXBhcnNlVG9rZW4odCkpJiZzLnB1c2gocik7cmV0dXJuIHQmJlwiZW5kXCIhPT10LnR5cGUmJl90b2tlbnMudW5zaGlmdCh0KSxzfWZ1bmN0aW9uIHBhcnNlRGVjbGFyYXRpb25zKCl7cmV0dXJuIHBhcnNlVG9rZW5zV2hpbGUoZnVuY3Rpb24oZSl7cmV0dXJuXCJwcm9wZXJ0eVwiPT09ZS50eXBlfHxcImNvbW1lbnRcIj09PWUudHlwZX0pfWZ1bmN0aW9uIHBhcnNlUnVsZXMoKXtyZXR1cm4gcGFyc2VUb2tlbnNXaGlsZShmdW5jdGlvbigpe3JldHVybiBfZGVwdGh9KX1leHBvcnRzPW1vZHVsZS5leHBvcnRzPXBhcnNlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CaGNuTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SmZZMjl0YldWdWRITWlMQ0pmWkdWd2RHZ2lMQ0pmY0c5emFYUnBiMjRpTENKZmRHOXJaVzV6SWl3aVJFVkNWVWNpTENKVVNVMUZVaUlzSW1SbFluVm5JaXdpY21WeGRXbHlaU0lzSW14bGVDSXNJbkJoY25ObElpd2lZM056SWl3aWIzQjBhVzl1Y3lJc0luTjBZWEowSWl3aWNuVnNaU0lzSW1OdmJXMWxiblJ6SWl3aWNHOXphWFJwYjI0aUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSnpiR2xqWlNJc0luUnZhMlZ1SWl3aWNuVnNaWE1pTENKRVlYUmxJaXdpYm05M0lpd2libVY0ZENJc0luQmhjbk5sVkc5clpXNGlMQ0p3ZFhOb0lpd2lkSGx3WlNJc0luTjBlV3hsYzJobFpYUWlMQ0poYzNST2IyUmxJaXdpYjNabGNuSnBaR1VpTENKclpYa2lMQ0pyWlhseklpd2libTlrWlNJc0lta2lMQ0pzWlc1bmRHZ2lMQ0pQWW1wbFkzUWlMQ0psYm1RaUxDSktVMDlPSWl3aWMzUnlhVzVuYVdaNUlpd2ljMmhwWm5RaUxDSndZWEp6WlVGMFIzSnZkWEFpTENKdmRtVnljbWxrWlhNaUxDSmtaV05zWVhKaGRHbHZibk1pTENKd1lYSnpaVVJsWTJ4aGNtRjBhVzl1Y3lJc0luQnlaV1pwZUNJc0luQmhjbk5sVW5Wc1pYTWlMQ0p3WVhKelpVRjBTVzF3YjNKMElpd2ljR0Z5YzJWRGFHRnljMlYwSWl3aWNHRnljMlZEYjIxdFpXNTBJaXdpZEdWNGRDSXNJbkJoY25ObFRtRnRaWE53WVdObElpd2ljR0Z5YzJWUWNtOXdaWEowZVNJc0luQmhjbk5sVTJWc1pXTjBiM0lpTENKelpXeGxZM1J2Y25NaUxDSnpjR3hwZENJc0ltMWhjQ0lzSW5OMGNpSXNJblJ5YVcwaUxDSndZWEp6WlZSdmEyVnVjMWRvYVd4bElpd2lZMjl1WkdsMGFXOXVSbTRpTENKdWIyUmxjeUlzSW5WdWMyaHBablFpTENKbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFWRkpRU3hWUVVOQlF5eFBRVU5CUXl4VlFVTkJReXhSUVZoQlF5eFBRVUZSTEVWQlExSkRMRTlCUVZFc1JVRkZVa01zVFVGQlVVTXNVVUZCVVN4VlFVRlNRU3hEUVVGdFFpeFRRVU16UWtNc1NVRkJUVVFzVVVGQlVTeFhRV2xDYkVJc1UwRkJVMFVzVFVGQlRVTXNSVUZCUzBNc1IwRkRiRUlzU1VGQlNVTXNSVUZYUVVNc1JVRlVTa1lzU1VGQldVRXNUVUZEV2xnc1dVRkJZMWNzUlVGQlVVY3NVMEZEZEVKYUxGbEJRV05UTEVWQlFWRkpMRk5CUlhSQ1pDeFBRVUZUTEVWQlIxUkZMRkZCUVZWaExFMUJRVTFETEZGQlFWRlFMRWRCUVU5QkxFVkJRVWxSTEZGQlFWVldMRWxCUVVsRkxFZEJSMnBFTEVsQlEwbFRMRVZCUkVGRExFdEJTMG9zU1VGR1FXWXNVVUZCVlU4c1JVRkJVVk1zUzBGQlMwTXNUMEZGWmtnc1JVRkJVVWtzVTBGRFpGWXNSVUZCVDFjc1YwRkJWMHdzUzBGRFZrTXNSVUZCVFVzc1MwRkJTMW9zUjBGTGNrSXNUMEZHUVZJc1QwRkJVME1zVFVGQlRTeFRRVUZYWlN4TFFVRkxReXhOUVVGUlZpeEZRVUZUTEU5QlJ6bERZeXhMUVVGTkxHRkJRMDVETEZsQlEwVlFMRTFCUVU5QkxFbEJaV0lzVTBGQlUxRXNVVUZCVVZRc1JVRkJUMVVzUjBGSGRFSXNTVUZCU1VNc1JVRkdTa1FzU1VGQllVRXNUVUZQWWl4SlFVcEJMRWxCUVVsRkxFZEJRVkVzVDBGQlVTeFBRVUZSTEZOQlEzaENReXhMUVVkTFF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsR0xFVkJRVXRITEZOQlFWVkVMRVZCUnpkQ1pDeEZRVVpLVnl4RlFVRk5ReXhGUVVGTFJTeE5RVWRVUkN4RlFVRkxSaXhIUVVGUFJDeEZRVUZUUXl4SlFVRlJXQ3hGUVVGTlZ5eEpRVTEyUXl4SlFVWkJReXhGUVVGUFNTeFBRVUZQU2l4TFFVRkxSaXhIUVVWa1NTeEZRVUZKTEVWQlFVZEJMRVZCUVVsR0xFVkJRVXRITEZOQlFWVkVMRVZCUjNoQ1JDeEZRVVpNUml4RlFVRk5ReXhGUVVGTFJTeE5RVWRVUkN4RlFVRkxSaXhIUVVGUFJDeEZRVUZUUXl4SlFXRjZRaXhQUVZSSk5VSXNXVUZEUmpoQ0xFVkJRVXRxUWl4VlFVTklTQ3hOUVVGUFR5eEZRVUZOVUN4TlFVTmlkMElzU1VGQlMycENMRVZCUVUxcFFpeE5RVWxtYUVNc1QwRkJVMFVzVFVGQlRTeFhRVUZaSzBJc1MwRkJTME1zVlVGQlZVNHNSVUZCVFN4TFFVRk5MRWxCUlM5RFFTeEZRVkZVTEZOQlFWTlVMRTlCUTFBc1NVRkJTVW9zUlVGQlVXaENMRkZCUVZGdlF5eFJRVVZ3UWl4UFFVUkJia01zVDBGQlUwVXNUVUZCVFN4UlFVRlRLMElzUzBGQlMwTXNWVUZCVlc1Q0xFVkJRVThzUzBGQlRTeEpRVU0zUTBFc1JVRlhWQ3hUUVVGVGNVSXNZVUZCWVhKQ0xFZEJRM0JDYkVJc1VVRkJhMElzUlVGSmJFSXNTVUZCU1hkRExFdEJSVW9zVDBGQlVYUkNMRVZCUVUxUExFMUJRMlFzU1VGQlN5eFpRVU5NTEVsQlFVc3NWMEZEU0dVc1JVRkJWVU1zWVVGQlpVTXNiMEpCUTNwQ0xFMUJSVVlzU1VGQlN5eFBRVU5JUml4RlFVRlZSeXhQUVVGVGVrSXNSVUZCVFhsQ0xFOUJRM3BDU0N4RlFVRlZReXhoUVVGbFF5eHZRa0ZEZWtJc1RVRkZSaXhSUVVORlJpeEZRVUZWUnl4UFFVRlRla0lzUlVGQlRYbENMRTlCUTNwQ1NDeEZRVUZWY2tJc1RVRkJVWGxDTEdGQlIzQkNMRTlCUVU5cVFpeFJRVUZSVkN4RlFVRlBjMElzUjBGVGVFSXNVMEZCVTBzc1kwRkJZek5DTEVkQlEzSkNMRTlCUVU5VExGRkJRVkZVTEVkQlUycENMRk5CUVZNMFFpeGhRVUZoTlVJc1IwRkRjRUlzVDBGQlQxTXNVVUZCVVZRc1IwRlRha0lzVTBGQlV6WkNMR0ZCUVdFM1FpeEhRVU53UWl4UFFVRlBVeXhSUVVGUlZDeEhRVUZST0VJc1MwRkJUVGxDTEVWQlFVMDRRaXhQUVVkeVF5eFRRVUZUUXl4bFFVRmxMMElzUjBGRGRFSXNUMEZCVDFNc1VVRkJVVlFzUjBGUmFrSXNVMEZCVTJkRExHTkJRV05vUXl4SFFVTnlRaXhQUVVGUFV5eFJRVUZSVkN4SFFWTnFRaXhUUVVGVGFVTXNZMEZCWTJwRExFZEJTM0pDTEU5QlFVOVRMRkZCUVZGVUxFZEJRMkpQTEV0QlFVMHNUMEZEVGpKQ0xGVkJRVmRzUXl4RlFVRk5PRUlzUzBGQlMwc3NUVUZCVFN4TFFVRkxReXhKUVU1dVF5eFRRVUZqUXl4SFFVTmFMRTlCUVU5QkxFVkJRVWxETEZOQlRWaG1MR0ZCUVdORExHdENRVUZyUW5oQ0xFdEJVM0JETEZOQlFWTkxMRmRCUVZkTUxFZEJRMnhDTEU5QlFWRkJMRVZCUVUxUExFMUJSV1FzU1VGQlN5eFhRVUZaTEU5QlFVOTVRaXhqUVVGamFFTXNSMEZGZEVNc1NVRkJTeXhYUVVGWkxFOUJRVTlwUXl4alFVRmpha01zUjBGRmRFTXNTVUZCU3l4bFFVRnhReXhaUVVGeVFteENMRkZCUVd0Q0xFZEJSWFpETEVsQlFVc3NVVUZEVEN4SlFVRkxMRmxCUVdFc1QwRkJUM1ZETEdGQlFXRnlRaXhIUVVWMFF5eEpRVUZMTEZWQlFWY3NSMEZCU1c1Q0xGVkJRV0VzVDBGQlQyZEVMR0ZCUVdFM1FpeEhRVUZWTEUxQlJTOUVMRWxCUVVzc1ZVRkJWeXhQUVVGUE5FSXNZVUZCWVRWQ0xFZEJRM0JETEVsQlFVc3NVMEZCVlN4UFFVRlBNa0lzWTBGQll6TkNMRWRCUlhCRExFbEJRVXNzV1VGQllTeFBRVUZQSzBJc1pVRkJaUzlDTEVkQlJYaERMRWxCUVVzc1dVRkRUQ3hKUVVGTExGZEJRMHdzU1VGQlN5eFhRVU5NTEVsQlFVc3NWMEZEVEN4SlFVRkxMRTlCUVdFc1QwRkJUM0ZDTEdGQlFXRnlRaXhIUVVkMFEyWXNUMEZCVTBVc1RVRkJUU3huUTBGQmFVTXJRaXhMUVVGTFF5eFZRVUZWYmtJc1NVRmxha1VzVTBGQlUzVkRMR2xDUVVGcFFrTXNSMEZMZUVJc1NVRktRU3hKUVVGSk0wSXNSVUZGUVdJc1JVRkVRWGxETEUxQlIwbDZReXhGUVVGUlNTeFRRVUZaYjBNc1IwRkJaVUVzUlVGQldYaERMRXRCUTNKRVlTeEZRVUZQVWl4WFFVRlhUQ3hMUVVOV2VVTXNSVUZCVFc1RExFdEJRVXRQTEVkQlVYSkNMRTlCU2tsaUxFZEJRWGRDTEZGQlFXWkJMRVZCUVUxUExFMUJRMnBDZGtJc1VVRkJVVEJFTEZGQlFWRXhReXhIUVVkWWVVTXNSVUZSVkN4VFFVRlRha0lzYjBKQlExQXNUMEZCVDJVc2FVSkJRV2xDTEZOQlFWVjJReXhIUVVOb1F5eE5RVUYxUWl4aFFVRm1RU3hGUVVGTlR5eE5RVUZ6UXl4WlFVRm1VQ3hGUVVGTlR5eFBRVk12UXl4VFFVRlRiVUlzWVVGRFVDeFBRVUZQWVN4cFFrRkJhVUlzVjBGQll5eFBRVUZQZWtRc1UwRXpVaTlETmtRc1VVRkJWVU1zVDBGQlQwUXNVVUZCVlhKRUlpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDI1dlpHVmZiVzlrZFd4bGN5OXRaVzV6WTJndmJHbGlMM0JoY25ObGNpNXFjeUo5IiwidmFyIF9jb21tZW50cyxfY29tcHJlc3MsX2luZGVudGF0aW9uLF9uLF9zLERFQlVHPSExLFRJTUVSPSExLGRlYnVnPXJlcXVpcmUoXCIuL2RlYnVnXCIpKFwic3RyaW5naWZ5XCIpO2Z1bmN0aW9uIHN0cmluZ2lmeShlLG4pe3ZhciB0O258fChuPXt9KSxfaW5kZW50YXRpb249bi5pbmRlbnRhdGlvbnx8XCJcIixfY29tcHJlc3M9ISFuLmNvbXByZXNzLF9jb21tZW50cz0hIW4uY29tbWVudHMsX2NvbXByZXNzP19uPV9zPVwiXCI6KF9uPVwiXFxuXCIsX3M9XCIgXCIpLFRJTUVSJiYodD1EYXRlLm5vdygpKTt2YXIgcj1yZWR1Y2UoZS5zdHlsZXNoZWV0LnJ1bGVzLHN0cmluZ2lmeU5vZGUpLmpvaW4oXCJcXG5cIikudHJpbSgpO3JldHVybiBUSU1FUiYmZGVidWcoXCJyYW4gaW5cIixEYXRlLm5vdygpLXQrXCJtc1wiKSxyfWZ1bmN0aW9uIGluZGVudChlKXtpZih0aGlzLmxldmVsfHwodGhpcy5sZXZlbD0xKSwhZSlyZXR1cm4gX2NvbXByZXNzP1wiXCI6QXJyYXkodGhpcy5sZXZlbCkuam9pbihfaW5kZW50YXRpb258fFwiXCIpO3RoaXMubGV2ZWwrPWV9ZnVuY3Rpb24gc3RyaW5naWZ5QXRSdWxlKGUpe3JldHVyblwiQFwiK2UudHlwZStcIiBcIitlLnZhbHVlK1wiO1wiK19ufWZ1bmN0aW9uIHN0cmluZ2lmeUF0R3JvdXAoZSl7dmFyIG49XCJcIix0PWUucHJlZml4fHxcIlwiO2UubmFtZSYmKG49XCIgXCIrZS5uYW1lKTt2YXIgcj1cInBhZ2VcIiE9PWUudHlwZTtyZXR1cm5cIkBcIit0K2UudHlwZStuK19zK3N0cmluZ2lmeUJsb2NrKGUscikrX259ZnVuY3Rpb24gc3RyaW5naWZ5Q29tbWVudChlKXtyZXR1cm4gX2NvbW1lbnRzP1wiLypcIisoZS50ZXh0fHxcIlwiKStcIiovXCIrX246XCJcIn1mdW5jdGlvbiBzdHJpbmdpZnlSdWxlKGUpe3ZhciBuO3JldHVybiBlLnNlbGVjdG9ycz9uPWUuc2VsZWN0b3JzLmpvaW4oXCIsXCIrX24pOihuPVwiQFwiK2UudHlwZSxuKz1lLm5hbWU/XCIgXCIrZS5uYW1lOlwiXCIpLGluZGVudCgpK24rX3Mrc3RyaW5naWZ5QmxvY2soZSkrX259ZnVuY3Rpb24gcmVkdWNlKGUsbil7cmV0dXJuIGUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJjb21tZW50XCI9PT10LnR5cGU/c3RyaW5naWZ5Q29tbWVudCh0KTpuKHQpO3JldHVybiByJiZlLnB1c2gociksZX0sW10pfWZ1bmN0aW9uIHN0cmluZ2lmeUJsb2NrKGUsbil7dmFyIHQ9ZS5kZWNsYXJhdGlvbnMscj1zdHJpbmdpZnlEZWNsYXJhdGlvbjtyZXR1cm4gZS5ydWxlcyYmKHQ9ZS5ydWxlcyxyPXN0cmluZ2lmeVJ1bGUpLCh0PXN0cmluZ2lmeUNoaWxkcmVuKHQscikpJiYodD1fbit0KyhuP1wiXCI6X24pKSxcIntcIit0K2luZGVudCgpK1wifVwifWZ1bmN0aW9uIHN0cmluZ2lmeUNoaWxkcmVuKGUsbil7aWYoIWUpcmV0dXJuXCJcIjtpbmRlbnQoMSk7dmFyIHQ9cmVkdWNlKGUsbik7cmV0dXJuIGluZGVudCgtMSksdC5sZW5ndGg/dC5qb2luKF9uKTpcIlwifWZ1bmN0aW9uIHN0cmluZ2lmeURlY2xhcmF0aW9uKGUpe2lmKFwicHJvcGVydHlcIj09PWUudHlwZSlyZXR1cm4gc3RyaW5naWZ5UHJvcGVydHkoZSk7REVCVUcmJmRlYnVnKFwic3RyaW5naWZ5RGVjbGFyYXRpb246IHVuZXhwZWN0ZWQgbm9kZTpcIixKU09OLnN0cmluZ2lmeShlKSl9ZnVuY3Rpb24gc3RyaW5naWZ5Tm9kZShlKXtzd2l0Y2goZS50eXBlKXtjYXNlXCJydWxlXCI6cmV0dXJuIHN0cmluZ2lmeVJ1bGUoZSk7Y2FzZVwibWVkaWFcIjpjYXNlXCJrZXlmcmFtZXNcIjpyZXR1cm4gc3RyaW5naWZ5QXRHcm91cChlKTtjYXNlXCJjb21tZW50XCI6cmV0dXJuIHN0cmluZ2lmeUNvbW1lbnQoZSk7Y2FzZVwiaW1wb3J0XCI6Y2FzZVwiY2hhcnNldFwiOmNhc2VcIm5hbWVzcGFjZVwiOnJldHVybiBzdHJpbmdpZnlBdFJ1bGUoZSk7Y2FzZVwiZm9udC1mYWNlXCI6Y2FzZVwic3VwcG9ydHNcIjpjYXNlXCJ2aWV3cG9ydFwiOmNhc2VcImRvY3VtZW50XCI6Y2FzZVwicGFnZVwiOnJldHVybiBzdHJpbmdpZnlBdEdyb3VwKGUpfURFQlVHJiZkZWJ1ZyhcInN0cmluZ2lmeU5vZGU6IHVuZXhwZWN0ZWQgbm9kZTogXCIrSlNPTi5zdHJpbmdpZnkoZSkpfWZ1bmN0aW9uIHN0cmluZ2lmeVByb3BlcnR5KGUpe3ZhciBuPWUubmFtZT9lLm5hbWUrXCI6XCIrX3M6XCJcIjtyZXR1cm4gaW5kZW50KCkrbitlLnZhbHVlK1wiO1wifWV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9c3RyaW5naWZ5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OMGNtbHVaMmxtZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmWTI5dGJXVnVkSE1pTENKZlkyOXRjSEpsYzNNaUxDSmZhVzVrWlc1MFlYUnBiMjRpTENKZmJpSXNJbDl6SWl3aVJFVkNWVWNpTENKVVNVMUZVaUlzSW1SbFluVm5JaXdpY21WeGRXbHlaU0lzSW5OMGNtbHVaMmxtZVNJc0ltRnpkQ0lzSW05d2RHbHZibk1pTENKemRHRnlkQ0lzSW1sdVpHVnVkR0YwYVc5dUlpd2lZMjl0Y0hKbGMzTWlMQ0pqYjIxdFpXNTBjeUlzSWtSaGRHVWlMQ0p1YjNjaUxDSmpjM01pTENKeVpXUjFZMlVpTENKemRIbHNaWE5vWldWMElpd2ljblZzWlhNaUxDSnpkSEpwYm1kcFpubE9iMlJsSWl3aWFtOXBiaUlzSW5SeWFXMGlMQ0pwYm1SbGJuUWlMQ0pzWlhabGJDSXNJblJvYVhNaUxDSkJjbkpoZVNJc0luTjBjbWx1WjJsbWVVRjBVblZzWlNJc0ltNXZaR1VpTENKMGVYQmxJaXdpZG1Gc2RXVWlMQ0p6ZEhKcGJtZHBabmxCZEVkeWIzVndJaXdpYkdGaVpXd2lMQ0p3Y21WbWFYZ2lMQ0p1WVcxbElpd2lZMmh2YlhBaUxDSnpkSEpwYm1kcFpubENiRzlqYXlJc0luTjBjbWx1WjJsbWVVTnZiVzFsYm5RaUxDSjBaWGgwSWl3aWMzUnlhVzVuYVdaNVVuVnNaU0lzSW5ObGJHVmpkRzl5Y3lJc0ltbDBaVzF6SWl3aVptNGlMQ0p5WlhOMWJIUnpJaXdpYVhSbGJTSXNJbkpsYzNWc2RDSXNJbkIxYzJnaUxDSmphR2xzWkhKbGJpSXNJbVJsWTJ4aGNtRjBhVzl1Y3lJc0luTjBjbWx1WjJsbWVVUmxZMnhoY21GMGFXOXVJaXdpYzNSeWFXNW5hV1o1UTJocGJHUnlaVzRpTENKc1pXNW5kR2dpTENKemRISnBibWRwWm5sUWNtOXdaWEowZVNJc0lrcFRUMDRpTENKbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVdEpRU3hWUVVOQlF5eFZRVU5CUXl4aFFVTkJReXhIUVVOQlF5eEhRVlJCUXl4UFFVRlJMRVZCUTFKRExFOUJRVkVzUlVGRlVrTXNUVUZCVVVNc1VVRkJVU3hWUVVGU1FTeERRVUZ0UWl4aFFXOUNMMElzVTBGQlUwTXNWVUZCVlVNc1JVRkJTME1zUjBGRGRFSXNTVUZCU1VNc1JVRkZTa1FzU1VGQldVRXNUVUZEV2xRc1lVRkJaVk1zUlVGQlVVVXNZVUZCWlN4SFFVTjBRMW9zV1VGQlkxVXNSVUZCVVVjc1UwRkRkRUprTEZsQlFXTlhMRVZCUVZGSkxGTkJSV3hDWkN4VlFVTkdSU3hIUVVGTFF5eEhRVUZMTEVsQlJWWkVMRWRCUVVzc1MwRkRURU1zUjBGQlN5eExRVWRRUlN4UlFVRlZUU3hGUVVGUlNTeExRVUZMUXl4UFFVVjJRaXhKUVVGSlF5eEZRVUZOUXl4UFFVRlBWQ3hGUVVGSlZTeFhRVUZYUXl4TlFVRlBReXhsUVVGbFF5eExRVUZMTEUxQlFVMURMRTlCU1dwRkxFOUJSa0ZzUWl4UFFVRlRReXhOUVVGTkxGTkJRVmRUTEV0QlFVdERMRTFCUVZGTUxFVkJRVk1zVFVGRmVrTk5MRVZCV1ZRc1UwRkJVMDhzVDBGQlQwTXNSMEZIWkN4SFFVWkJReXhMUVVGTFJDeFJRVUZWUXl4TFFVRkxSQ3hOUVVGUkxFbEJSWGhDUVN4RlFVdEtMRTlCUVVsNlFpeFZRVUZ2UWl4SFFVVnFRakpDTEUxQlFVMUVMRXRCUVV0RUxFOUJRVTlJTEV0QlFVdHlRaXhqUVVGblFpeEpRVTQxUTNsQ0xFdEJRVXRFTEU5QlFWTkJMRVZCYjBKc1FpeFRRVUZUUnl4blFrRkJaMEpETEVkQlEzWkNMRTFCUVU4c1NVRkJUVUVzUlVGQlMwTXNTMEZCVHl4SlFVRk5SQ3hGUVVGTFJTeE5RVUZSTEVsQlFVMDNRaXhIUVZsd1JDeFRRVUZUT0VJc2FVSkJRV2xDU0N4SFFVTjRRaXhKUVVGSlNTeEZRVUZSTEVkQlExSkRMRVZCUVZOTUxFVkJRVXRMTEZGQlFWVXNSMEZGZUVKTUxFVkJRVXROTEU5QlExQkdMRVZCUVZFc1NVRkJUVW9zUlVGQlMwMHNUVUZKY2tJc1NVRkJTVU1zUlVGQmMwSXNVMEZCWkZBc1JVRkJTME1zUzBGRmFrSXNUVUZCVHl4SlFVRk5TU3hGUVVGVFRDeEZRVUZMUXl4TFFVRlBSeXhGUVVGUk9VSXNSMEZCUzJ0RExHVkJRV1ZTTEVWQlFVMVBMRWRCUVZOc1F5eEhRVk12UlN4VFFVRlRiME1zYVVKQlFXbENWQ3hIUVVONFFpeFBRVUZMT1VJc1ZVRkZSU3hOUVVGUk9FSXNSVUZCUzFVc1RVRkJVU3hKUVVGTkxFdEJRVTl5UXl4SFFVWm9RaXhIUVZjelFpeFRRVUZUYzBNc1kwRkJZMWdzUjBGRGNrSXNTVUZCU1Vrc1JVRlRTaXhQUVZCSlNpeEZRVUZMV1N4VlFVTlFVaXhGUVVGUlNpeEZRVUZMV1N4VlFVRlZia0lzUzBGQlN5eEpRVUZOY0VJc1MwRkZiRU1yUWl4RlFVRlJMRWxCUVUxS0xFVkJRVXRETEV0QlEyNUNSeXhIUVVGVFNpeEZRVUZMVFN4TFFVRlBMRWxCUVUxT0xFVkJRVXROTEV0QlFVOHNTVUZIYkVOWUxGTkJRVmRUTEVWQlFWRTVRaXhIUVVGTGEwTXNaVUZCWlZJc1IwRkJVVE5DTEVkQmFVSjRSQ3hUUVVGVFowSXNUMEZCVDNkQ0xFVkJRVTlETEVkQlEzSkNMRTlCUVU5RUxFVkJRVTE0UWl4UFFVRlBMRk5CUVZVd1FpeEZRVUZUUXl4SFFVTnlReXhKUVVGSlF5eEZRVUYzUWl4WlFVRmtSQ3hGUVVGTFppeExRVUZ6UWxFc2FVSkJRV2xDVHl4SFFVRlJSaXhGUVVGSFJTeEhRVVZ5UlN4UFFVUkJReXhIUVVGVlJpeEZRVUZSUnl4TFFVRkxSQ3hIUVVOb1FrWXNUMEZaV0N4VFFVRlRVQ3hsUVVGbFVpeEZRVUZOVHl4SFFVTTFRaXhKUVVGSldTeEZRVUZYYmtJc1JVRkJTMjlDTEdGQlEyaENUaXhGUVVGTFR5eHhRa0ZWVkN4UFFWSkpja0lzUlVGQlMxUXNVVUZEVURSQ0xFVkJRVmR1UWl4RlFVRkxWQ3hOUVVOb1FuVkNMRVZCUVV0SUxHZENRVWRRVVN4RlFVRlhSeXhyUWtGQmEwSklMRVZCUVZWTUxFMUJRekZDU3l4RlFVRlhPVU1zUjBGQlN6aERMRWRCUVZsYUxFVkJRVkVzUjBGQlMyeERMRXRCUlM5RExFbEJRVTA0UXl4RlFVRlhlRUlzVTBGQlZ5eEpRVmR5UXl4VFFVRlRNa0lzYTBKQlFXdENTQ3hGUVVGVlRDeEhRVU51UXl4SlFVRkxTeXhGUVVGWkxFMUJRVThzUjBGRmVFSjRRaXhQUVVGUExFZEJRMUFzU1VGQlNXOUNMRVZCUVZVeFFpeFBRVUZQT0VJc1JVRkJWVXdzUjBGSEwwSXNUMEZHUVc1Q0xGRkJRVkVzUjBGRlNHOUNMRVZCUVZGUkxFOUJSVTVTTEVWQlFWRjBRaXhMUVVGTGNFSXNTVUZHVlN4SFFWZG9ReXhUUVVGVFowUXNjVUpCUVhGQ2NrSXNSMEZETlVJc1IwRkJhMElzWVVGQlpFRXNSVUZCUzBNc1MwRkRVQ3hQUVVGUGRVSXNhMEpCUVd0Q2VFSXNSMEZITTBKNlFpeFBRVUZUUlN4TlFVRk5MSGxEUVVFd1EyZEVMRXRCUVVzNVF5eFZRVUZWY1VJc1NVRlRNVVVzVTBGQlUxSXNZMEZCWTFFc1IwRkRja0lzVDBGQlVVRXNSVUZCUzBNc1RVRkZZaXhKUVVGTExFOUJRVkVzVDBGQlQxVXNZMEZCWTFnc1IwRkZiRU1zU1VGQlN5eFJRVU5NTEVsQlFVc3NXVUZCWVN4UFFVRlBSeXhwUWtGQmFVSklMRWRCUlRGRExFbEJRVXNzVlVGQlZ5eFBRVUZQVXl4cFFrRkJhVUpVTEVkQlJYaERMRWxCUVVzc1UwRkRUQ3hKUVVGTExGVkJRMHdzU1VGQlN5eFpRVUZoTEU5QlFVOUVMR2RDUVVGblFrTXNSMEZGZWtNc1NVRkJTeXhaUVVOTUxFbEJRVXNzVjBGRFRDeEpRVUZMTEZkQlEwd3NTVUZCU3l4WFFVTk1MRWxCUVVzc1QwRkJZU3hQUVVGUFJ5eHBRa0ZCYVVKSUxFZEJSekZEZWtJc1QwRkJVMFVzVFVGQlRTeHRRMEZCY1VOblJDeExRVUZMT1VNc1ZVRkJWWEZDTEVsQlUzSkZMRk5CUVZOM1FpeHJRa0ZCYTBKNFFpeEhRVU42UWl4SlFVRkpUU3hGUVVGUFRpeEZRVUZMVFN4TFFVRlBUaXhGUVVGTFRTeExRVUZQTEVsQlFVMW9ReXhIUVVGTExFZEJSVGxETEU5QlFVOXhRaXhUUVVGWFZ5eEZRVUZQVGl4RlFVRkxSU3hOUVVGUkxFbEJjbEI0UTNkQ0xGRkJRVlZETEU5QlFVOUVMRkZCUVZVdlF5SXNJbVpwYkdVaU9pSXZkbUZ5TDNkM2R5OXRiM05oYVdOdkxXMWhjM1JsY2k5dWIyUmxYMjF2WkhWc1pYTXZiV1Z1YzJOb0wyeHBZaTl6ZEhKcGJtZHBabmt1YW5NaWZRPT0iLCJ2YXIgY2FjaGVkU2V0VGltZW91dCxjYWNoZWRDbGVhclRpbWVvdXQscHJvY2Vzcz1tb2R1bGUuZXhwb3J0cz17fTtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dClyZXR1cm4gY2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQoZSl7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxlKX19fSFmdW5jdGlvbigpe3RyeXtjYWNoZWRTZXRUaW1lb3V0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpkZWZhdWx0U2V0VGltb3V0fWNhdGNoKGUpe2NhY2hlZFNldFRpbWVvdXQ9ZGVmYXVsdFNldFRpbW91dH10cnl7Y2FjaGVkQ2xlYXJUaW1lb3V0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6ZGVmYXVsdENsZWFyVGltZW91dH1jYXRjaChlKXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19KCk7dmFyIGN1cnJlbnRRdWV1ZSxxdWV1ZT1bXSxkcmFpbmluZz0hMSxxdWV1ZUluZGV4PS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2RyYWluaW5nJiZjdXJyZW50UXVldWUmJihkcmFpbmluZz0hMSxjdXJyZW50UXVldWUubGVuZ3RoP3F1ZXVlPWN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOnF1ZXVlSW5kZXg9LTEscXVldWUubGVuZ3RoJiZkcmFpblF1ZXVlKCkpfWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZighZHJhaW5pbmcpe3ZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtkcmFpbmluZz0hMDtmb3IodmFyIHQ9cXVldWUubGVuZ3RoO3Q7KXtmb3IoY3VycmVudFF1ZXVlPXF1ZXVlLHF1ZXVlPVtdOysrcXVldWVJbmRleDx0OyljdXJyZW50UXVldWUmJmN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtxdWV1ZUluZGV4PS0xLHQ9cXVldWUubGVuZ3RofWN1cnJlbnRRdWV1ZT1udWxsLGRyYWluaW5nPSExLHJ1bkNsZWFyVGltZW91dChlKX19ZnVuY3Rpb24gSXRlbShlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIG5vb3AoKXt9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO3F1ZXVlLnB1c2gobmV3IEl0ZW0oZSx0KSksMSE9PXF1ZXVlLmxlbmd0aHx8ZHJhaW5pbmd8fHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSl9LEl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LHByb2Nlc3MudGl0bGU9XCJicm93c2VyXCIscHJvY2Vzcy5icm93c2VyPSEwLHByb2Nlc3MuZW52PXt9LHByb2Nlc3MuYXJndj1bXSxwcm9jZXNzLnZlcnNpb249XCJcIixwcm9jZXNzLnZlcnNpb25zPXt9LHByb2Nlc3Mub249bm9vcCxwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3AscHJvY2Vzcy5vbmNlPW5vb3AscHJvY2Vzcy5vZmY9bm9vcCxwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3AscHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcCxwcm9jZXNzLmVtaXQ9bm9vcCxwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wLHByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wLHByb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfSxwcm9jZXNzLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHByb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LHByb2Nlc3MuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxwcm9jZXNzLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDSXNJbU5oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0lzSW5CeWIyTmxjM01pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpHVm1ZWFZzZEZObGRGUnBiVzkxZENJc0lrVnljbTl5SWl3aVpHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWRDSXNJbkoxYmxScGJXVnZkWFFpTENKbWRXNGlMQ0p6WlhSVWFXMWxiM1YwSWl3aVpTSXNJbU5oYkd3aUxDSjBhR2x6SWl3aWNuVnVRMnhsWVhKVWFXMWxiM1YwSWl3aWJXRnlhMlZ5SWl3aVkyeGxZWEpVYVcxbGIzVjBJaXdpWTNWeWNtVnVkRkYxWlhWbElpd2ljWFZsZFdVaUxDSmtjbUZwYm1sdVp5SXNJbkYxWlhWbFNXNWtaWGdpTENKamJHVmhibFZ3VG1WNGRGUnBZMnNpTENKc1pXNW5kR2dpTENKamIyNWpZWFFpTENKa2NtRnBibEYxWlhWbElpd2lkR2x0Wlc5MWRDSXNJbXhsYmlJc0luSjFiaUlzSWtsMFpXMGlMQ0poY25KaGVTSXNJbTV2YjNBaUxDSnVaWGgwVkdsamF5SXNJbUZ5WjNNaUxDSkJjbkpoZVNJc0ltRnlaM1Z0Wlc1MGN5SXNJbWtpTENKd2RYTm9JaXdpY0hKdmRHOTBlWEJsSWl3aVlYQndiSGtpTENKMGFYUnNaU0lzSW1KeWIzZHpaWElpTENKbGJuWWlMQ0poY21kMklpd2lkbVZ5YzJsdmJpSXNJblpsY25OcGIyNXpJaXdpYjI0aUxDSmhaR1JNYVhOMFpXNWxjaUlzSW05dVkyVWlMQ0p2Wm1ZaUxDSnlaVzF2ZG1WTWFYTjBaVzVsY2lJc0luSmxiVzkyWlVGc2JFeHBjM1JsYm1WeWN5SXNJbVZ0YVhRaUxDSndjbVZ3Wlc1a1RHbHpkR1Z1WlhJaUxDSndjbVZ3Wlc1a1QyNWpaVXhwYzNSbGJtVnlJaXdpYkdsemRHVnVaWEp6SWl3aWJtRnRaU0lzSW1KcGJtUnBibWNpTENKamQyUWlMQ0pqYUdScGNpSXNJbVJwY2lJc0luVnRZWE5ySWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVOUpRU3hwUWtGRFFVTXNiVUpCVWtGRExGRkJRVlZETEU5QlFVOURMRmRCVlhKQ0xGTkJRVk5ETEcxQ1FVTk1MRTFCUVUwc1NVRkJTVU1zVFVGQlRTeHRRMEZGY0VJc1UwRkJVME1zYzBKQlEwd3NUVUZCVFN4SlFVRkpSQ3hOUVVGTkxIRkRRWE5DY0VJc1UwRkJVMFVzVjBGQlYwTXNSMEZEYUVJc1IwRkJTVlFzYlVKQlFYRkNWU3hYUVVWeVFpeFBRVUZQUVN4WFFVRlhSQ3hGUVVGTExFZEJSek5DTEVsQlFVdFVMRzFDUVVGeFFrc3NiVUpCUVhGQ1RDeHRRa0ZCY1VKVkxGZEJSV2hGTEU5QlJFRldMR2xDUVVGdFFsVXNWMEZEV2tFc1YwRkJWMFFzUlVGQlN5eEhRVVV6UWl4SlFVVkpMRTlCUVU5VUxHbENRVUZwUWxNc1JVRkJTeXhIUVVNdlFpeE5RVUZOUlN4SFFVTktMRWxCUlVrc1QwRkJUMWdzYVVKQlFXbENXU3hMUVVGTExFdEJRVTFJTEVWQlFVc3NSMEZETVVNc1RVRkJUVVVzUjBGRlNpeFBRVUZQV0N4cFFrRkJhVUpaTEV0QlFVdERMRXRCUVUxS0xFVkJRVXNzUzBGTmNFUXNVMEZCVTBzc1owSkJRV2RDUXl4SFFVTnlRaXhIUVVGSlpDeHhRa0ZCZFVKbExHRkJSWFpDTEU5QlFVOUJMR0ZCUVdGRUxFZEJSM2hDTEVsQlFVdGtMSEZDUVVGMVFrMHNjMEpCUVhkQ1RpeHhRa0ZCZFVKbExHRkJSWFpGTEU5QlJFRm1MRzFDUVVGeFFtVXNZVUZEWkVFc1lVRkJZVVFzUjBGRmVFSXNTVUZGU1N4UFFVRlBaQ3h0UWtGQmJVSmpMRWRCUXpWQ0xFMUJRVTlLTEVkQlEwd3NTVUZGU1N4UFFVRlBWaXh0UWtGQmJVSlhMRXRCUVVzc1MwRkJUVWNzUjBGRGRrTXNUVUZCVDBvc1IwRkhUQ3hQUVVGUFZpeHRRa0ZCYlVKWExFdEJRVXRETEV0QlFVMUZMRTFCYWtWb1JDeFhRVU5ITEVsQlJWRm1MR2xDUVVSelFpeHRRa0ZCWmxVc1YwRkRXVUVzVjBGRlFVd3NhVUpCUlhwQ0xFMUJRVTlOTEVkQlEweFlMR2xDUVVGdFFrc3NhVUpCUlhaQ0xFbEJSVkZLTEcxQ1FVUjNRaXh0UWtGQmFrSmxMR0ZCUTJOQkxHRkJSVUZVTEc5Q1FVVXpRaXhOUVVGUFNTeEhRVU5NVml4dFFrRkJjVUpOTEhGQ1FXcENOMElzUjBGM1JVRXNTVUZGU1ZVc1lVRkdRVU1zVTBGRFFVTXNWVUZCVnl4RlFVVllReXhaUVVGakxFVkJSV3hDTEZOQlFWTkRMR3RDUVVOQlJpeFZRVUZoUml4bFFVZHNRa1VzVlVGQlZ5eEZRVU5RUml4aFFVRmhTeXhQUVVOaVNpeE5RVUZSUkN4aFFVRmhUU3hQUVVGUFRDeFBRVVUxUWtVc1dVRkJZeXhGUVVWa1JpeE5RVUZOU1N4UlFVTk9SU3hqUVVsU0xGTkJRVk5CTEdGQlEwd3NTVUZCU1V3c1UwRkJTaXhEUVVkQkxFbEJRVWxOTEVWQlFWVnFRaXhYUVVGWFlTeHBRa0ZEZWtKR0xGVkJRVmNzUlVGSFdDeEpRVVJCTEVsQlFVbFBMRVZCUVUxU0xFMUJRVTFKTEU5QlExWkpMRWRCUVVzc1EwRkhVQ3hKUVVaQlZDeGhRVUZsUXl4TlFVTm1RU3hYUVVOVFJTeFhRVUZoVFN4SFFVTmtWQ3hqUVVOQlFTeGhRVUZoUnl4WlFVRlpUeXhOUVVkcVExQXNXVUZCWXl4RlFVTmtUU3hGUVVGTlVpeE5RVUZOU1N4UFFVVm9Ra3dzWVVGQlpTeExRVU5tUlN4VlFVRlhMRVZCUTFoTUxHZENRVUZuUWxjc1NVRnBRbkJDTEZOQlFWTkhMRXRCUVV0dVFpeEZRVUZMYjBJc1IwRkRabWhDTEV0QlFVdEtMRWxCUVUxQkxFVkJRMWhKTEV0QlFVdG5RaXhOUVVGUlFTeEZRVmxxUWl4VFFVRlRReXhSUVRWQ1ZEVkNMRkZCUVZFMlFpeFRRVUZYTEZOQlFWVjBRaXhIUVVONlFpeEpRVUZKZFVJc1JVRkJUeXhKUVVGSlF5eE5RVUZOUXl4VlFVRlZXaXhQUVVGVExFZEJRM2hETEVkQlFVbFpMRlZCUVZWYUxFOUJRVk1zUlVGRGJrSXNTVUZCU3l4SlFVRkpZU3hGUVVGSkxFVkJRVWRCTEVWQlFVbEVMRlZCUVZWYUxFOUJRVkZoTEVsQlEyeERTQ3hGUVVGTFJ5eEZRVUZKTEVkQlFVdEVMRlZCUVZWRExFZEJSMmhEYWtJc1RVRkJUV3RDTEV0QlFVc3NTVUZCU1ZJc1MwRkJTMjVDTEVWQlFVdDFRaXhKUVVOS0xFbEJRV3BDWkN4TlFVRk5TU3hSUVVGcFFrZ3NWVUZEZGtKWUxGZEJRVmRuUWl4aFFWTnVRa2tzUzBGQlMxTXNWVUZCVlZZc1NVRkJUU3hYUVVOcVFtUXNTMEZCUzBvc1NVRkJTVFpDTEUxQlFVMHNTMEZCVFhwQ0xFdEJRVXRuUWl4UlFVVTVRak5DTEZGQlFWRnhReXhOUVVGUkxGVkJRMmhDY2tNc1VVRkJVWE5ETEZOQlFWVXNSVUZEYkVKMFF5eFJRVUZSZFVNc1QwRkRVblpETEZGQlFWRjNReXhSUVVOU2VFTXNVVUZCVVhsRExGRkJRVlVzUjBGRGJFSjZReXhSUVVGUk1FTXNXVUZKVWpGRExGRkJRVkV5UXl4SFFVRkxaaXhMUVVOaU5VSXNVVUZCVVRSRExGbEJRV05vUWl4TFFVTjBRalZDTEZGQlFWRTJReXhMUVVGUGFrSXNTMEZEWmpWQ0xGRkJRVkU0UXl4SlFVRk5iRUlzUzBGRFpEVkNMRkZCUVZFclF5eGxRVUZwUW01Q0xFdEJRM3BDTlVJc1VVRkJVV2RFTEcxQ1FVRnhRbkJDTEV0QlF6ZENOVUlzVVVGQlVXbEVMRXRCUVU5eVFpeExRVU5tTlVJc1VVRkJVV3RFTEdkQ1FVRnJRblJDTEV0QlF6RkNOVUlzVVVGQlVXMUVMRzlDUVVGelFuWkNMRXRCUlRsQ05VSXNVVUZCVVc5RUxGVkJRVmtzVTBGQlZVTXNSMEZCVVN4VlFVVjBRM0pFTEZGQlFWRnpSQ3hSUVVGVkxGTkJRVlZFTEVkQlEzaENMRTFCUVUwc1NVRkJTV3BFTEUxQlFVMHNjVU5CUjNCQ1NpeFJRVUZSZFVRc1NVRkJUU3hYUVVGakxFMUJRVThzUzBGRGJrTjJSQ3hSUVVGUmQwUXNUVUZCVVN4VFFVRlZReXhIUVVOMFFpeE5RVUZOTEVsQlFVbHlSQ3hOUVVGTkxHMURRVVZ3UWtvc1VVRkJVVEJFTEUxQlFWRXNWMEZCWVN4UFFVRlBJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwyNXZaR1ZmYlc5a2RXeGxjeTl3Y205alpYTnpMMkp5YjNkelpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBlc2NhcGVSZT0vKFstLiorP14ke30oKXxbXFxdXFwvXFxcXF0pL2csdW5lc2NhcGVSZT0vXFxcXC9nLGVzY2FwZT1mdW5jdGlvbihlKXtyZXR1cm4oZStcIlwiKS5yZXBsYWNlKGVzY2FwZVJlLFwiXFxcXCQxXCIpfSx1bmVzY2FwZT1mdW5jdGlvbihlKXtyZXR1cm4oZStcIlwiKS5yZXBsYWNlKHVuZXNjYXBlUmUsXCJcIil9LHNsaWNrUmU9UmVnRXhwKFwiXig/OlxcXFxzKigsKVxcXFxzKnxcXFxccyooPGNvbWJpbmF0b3I+KylcXFxccyp8KFxcXFxzKyl8KDx1bmljb2RlPit8XFxcXCopfFxcXFwjKDx1bmljb2RlPispfFxcXFwuKDx1bmljb2RlPispfFxcXFxbXFxcXHMqKDx1bmljb2RlMT4rKSg/OlxcXFxzKihbKl4kIX58XT89KSg/OlxcXFxzKig/OihbXFxcIiddPykoLio/KVxcXFw5KSkpP1xcXFxzKlxcXFxdKD8hXFxcXF0pfCg6KykoPHVuaWNvZGU+KykoPzpcXFxcKCg/Oig/OihbXFxcIiddKShbXlxcXFwxM10qKVxcXFwxMyl8KCg/OlxcXFwoW14pXStcXFxcKXxbXigpXSopKykpXFxcXCkpPylcIi5yZXBsYWNlKC88Y29tYmluYXRvcj4vLFwiW1wiK2VzY2FwZShcIj4rfmAhQCQlXiY9e31cXFxcOzwvXCIpK1wiXVwiKS5yZXBsYWNlKC88dW5pY29kZT4vZyxcIig/OltcXFxcd1xcXFx1MDBhMS1cXFxcdUZGRkYtXXxcXFxcXFxcXFteXFxcXHMwLTlhLWZdKVwiKS5yZXBsYWNlKC88dW5pY29kZTE+L2csXCIoPzpbOlxcXFx3XFxcXHUwMGExLVxcXFx1RkZGRi1dfFxcXFxcXFxcW15cXFxcczAtOWEtZl0pXCIpKSxQYXJ0PWZ1bmN0aW9uKGUpe3RoaXMuY29tYmluYXRvcj1lfHxcIiBcIix0aGlzLnRhZz1cIipcIn07UGFydC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZighdGhpcy5yYXcpe3ZhciBlLHMsdD1cIlwiO2lmKHQrPXRoaXMudGFnfHxcIipcIix0aGlzLmlkJiYodCs9XCIjXCIrdGhpcy5pZCksdGhpcy5jbGFzc2VzJiYodCs9XCIuXCIrdGhpcy5jbGFzc0xpc3Quam9pbihcIi5cIikpLHRoaXMuYXR0cmlidXRlcylmb3IoZT0wO3M9dGhpcy5hdHRyaWJ1dGVzW2UrK107KXQrPVwiW1wiK3MubmFtZSsocy5vcGVyYXRvcj9zLm9wZXJhdG9yKydcIicrcy52YWx1ZSsnXCInOlwiXCIpK1wiXVwiO2lmKHRoaXMucHNldWRvcylmb3IoZT0wO3M9dGhpcy5wc2V1ZG9zW2UrK107KXQrPVwiOlwiK3MubmFtZSxzLnZhbHVlJiYodCs9XCIoXCIrcy52YWx1ZStcIilcIik7dGhpcy5yYXc9dH1yZXR1cm4gdGhpcy5yYXd9O3ZhciBFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dGhpcy5sZW5ndGg9MH07RXhwcmVzc2lvbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZighdGhpcy5yYXcpe2Zvcih2YXIgZSxzPVwiXCIsdD0wO2U9dGhpc1t0KytdOykxIT09dCYmKHMrPVwiIFwiKSxcIiBcIiE9PWUuY29tYmluYXRvciYmKHMrPWUuY29tYmluYXRvcitcIiBcIikscys9ZTt0aGlzLnJhdz1zfXJldHVybiB0aGlzLnJhd307dmFyIHJlcGxhY2VyPWZ1bmN0aW9uKGUscyx0LGEscixpLG4sYyx1LG8scCxsLGgsZixnLGQpe3ZhciB2LHc7aWYoKHN8fCF0aGlzLmxlbmd0aCkmJih2PXRoaXNbdGhpcy5sZW5ndGgrK109bmV3IEV4cHJlc3Npb24scykpcmV0dXJuXCJcIjtpZih2fHwodj10aGlzW3RoaXMubGVuZ3RoLTFdKSwodHx8YXx8IXYubGVuZ3RoKSYmKHc9dlt2Lmxlbmd0aCsrXT1uZXcgUGFydCh0KSksd3x8KHc9dlt2Lmxlbmd0aC0xXSkscil3LnRhZz11bmVzY2FwZShyKTtlbHNlIGlmKGkpdy5pZD11bmVzY2FwZShpKTtlbHNlIGlmKG4pe3ZhciBtPXVuZXNjYXBlKG4pLGI9dy5jbGFzc2VzfHwody5jbGFzc2VzPXt9KTtpZighYlttXSl7YlttXT1lc2NhcGUobik7dmFyIHg9dy5jbGFzc0xpc3R8fCh3LmNsYXNzTGlzdD1bXSk7eC5wdXNoKG0pLHguc29ydCgpfX1lbHNlIGg/KGQ9ZHx8Zywody5wc2V1ZG9zfHwody5wc2V1ZG9zPVtdKSkucHVzaCh7dHlwZToxPT1sLmxlbmd0aD9cImNsYXNzXCI6XCJlbGVtZW50XCIsbmFtZTp1bmVzY2FwZShoKSxlc2NhcGVkTmFtZTplc2NhcGUoaCksdmFsdWU6ZD91bmVzY2FwZShkKTpudWxsLGVzY2FwZWRWYWx1ZTpkP2VzY2FwZShkKTpudWxsfSkpOmMmJihwPXA/ZXNjYXBlKHApOm51bGwsKHcuYXR0cmlidXRlc3x8KHcuYXR0cmlidXRlcz1bXSkpLnB1c2goe29wZXJhdG9yOnUsbmFtZTp1bmVzY2FwZShjKSxlc2NhcGVkTmFtZTplc2NhcGUoYyksdmFsdWU6cD91bmVzY2FwZShwKTpudWxsLGVzY2FwZWRWYWx1ZTpwP2VzY2FwZShwKTpudWxsfSkpO3JldHVyblwiXCJ9LEV4cHJlc3Npb25zPWZ1bmN0aW9uKGUpe3RoaXMubGVuZ3RoPTA7Zm9yKHZhciBzLHQ9dGhpcyxhPWU7ZTspe2lmKChzPWUucmVwbGFjZShzbGlja1JlLGZ1bmN0aW9uKCl7cmV0dXJuIHJlcGxhY2VyLmFwcGx5KHQsYXJndW1lbnRzKX0pKT09PWUpdGhyb3cgbmV3IEVycm9yKGErXCIgaXMgYW4gaW52YWxpZCBleHByZXNzaW9uXCIpO2U9c319O0V4cHJlc3Npb25zLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2lmKCF0aGlzLnJhdyl7Zm9yKHZhciBlLHM9W10sdD0wO2U9dGhpc1t0KytdOylzLnB1c2goZSk7dGhpcy5yYXc9cy5qb2luKFwiLCBcIil9cmV0dXJuIHRoaXMucmF3fTt2YXIgY2FjaGU9e30scGFyc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/bnVsbDooZT0oXCJcIitlKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpLGNhY2hlW2VdfHwoY2FjaGVbZV09bmV3IEV4cHJlc3Npb25zKGUpKSl9O21vZHVsZS5leHBvcnRzPXBhcnNlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CaGNuTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SmxjMk5oY0dWU1pTSXNJblZ1WlhOallYQmxVbVVpTENKbGMyTmhjR1VpTENKemRISnBibWNpTENKeVpYQnNZV05sSWl3aWRXNWxjMk5oY0dVaUxDSnpiR2xqYTFKbElpd2lVbVZuUlhod0lpd2lVR0Z5ZENJc0ltTnZiV0pwYm1GMGIzSWlMQ0owYUdseklpd2lkR0ZuSWl3aWNISnZkRzkwZVhCbElpd2lkRzlUZEhKcGJtY2lMQ0p5WVhjaUxDSnJJaXdpY0dGeWRDSXNJbmh3Y2lJc0ltbGtJaXdpWTJ4aGMzTmxjeUlzSW1Oc1lYTnpUR2x6ZENJc0ltcHZhVzRpTENKaGRIUnlhV0oxZEdWeklpd2libUZ0WlNJc0ltOXdaWEpoZEc5eUlpd2lkbUZzZFdVaUxDSndjMlYxWkc5eklpd2lSWGh3Y21WemMybHZiaUlzSW14bGJtZDBhQ0lzSW1KcGRDSXNJbW9pTENKeVpYQnNZV05sY2lJc0luSmhkMDFoZEdOb0lpd2ljMlZ3WVhKaGRHOXlJaXdpWTI5dFltbHVZWFJ2Y2tOb2FXeGtjbVZ1SWl3aWRHRm5UbUZ0WlNJc0ltTnNZWE56VG1GdFpTSXNJbUYwZEhKcFluVjBaVXRsZVNJc0ltRjBkSEpwWW5WMFpVOXdaWEpoZEc5eUlpd2lZWFIwY21saWRYUmxVWFZ2ZEdVaUxDSmhkSFJ5YVdKMWRHVldZV3gxWlNJc0luQnpaWFZrYjAxaGNtdGxjaUlzSW5CelpYVmtiME5zWVhOeklpd2ljSE5sZFdSdlVYVnZkR1VpTENKd2MyVjFaRzlEYkdGemMxRjFiM1JsWkZaaGJIVmxJaXdpY0hObGRXUnZRMnhoYzNOV1lXeDFaU0lzSW1WNGNISmxjM05wYjI0aUxDSmpkWEp5Wlc1MElpd2lkVzVsYzJOaGNHVmtJaXdpY0hWemFDSXNJbk52Y25RaUxDSjBlWEJsSWl3aVpYTmpZWEJsWkU1aGJXVWlMQ0psYzJOaGNHVmtWbUZzZFdVaUxDSkZlSEJ5WlhOemFXOXVjeUlzSW5KbGNHeGhZMlZrSWl3aWMyVnNaaUlzSW05eWFXZHBibUZzSWl3aVlYQndiSGtpTENKaGNtZDFiV1Z1ZEhNaUxDSkZjbkp2Y2lJc0ltVjRjSEpsYzNOcGIyNXpJaXdpYVNJc0ltTmhZMmhsSWl3aWNHRnljMlVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZIUlN4aFFXdENSaXhKUVVGSlFTeFRRVUZoTERKQ1FVTmlReXhYUVVGaExFMUJSV0pETEU5QlFWTXNVMEZCVTBNc1IwRkhiRUlzVDBGQlVVRXNSVUZCVXl4SlFVRkpReXhSUVVGUlNpeFRRVUZWTEZOQlIzWkRTeXhUUVVGWExGTkJRVk5HTEVkQlEzQkNMRTlCUVZGQkxFVkJRVk1zU1VGQlNVTXNVVUZCVVVnc1YwRkJXU3hMUVVkNlEwc3NVVUZCVlVNc1QwRTJRbVFzTUZGQlEwdElMRkZCUVZFc1pVRkJaMElzU1VGQlRVWXNUMEZCVHl4elFrRkJkMElzUzBGRE4wUkZMRkZCUVZFc1lVRkJZeXc0UTBGRGRFSkJMRkZCUVZFc1kwRkJaU3huUkVGTGVFSkpMRXRCUVU4c1UwRkJZME1zUjBGRGNrSkRMRXRCUVV0RUxGZEJRV0ZCTEVkQlFXTXNTVUZEYUVORExFdEJRVXRETEVsQlFVMHNTMEZIWmtnc1MwRkJTMGtzVlVGQlZVTXNVMEZCVnl4WFFVVjBRaXhKUVVGTFNDeExRVUZMU1N4SlFVRkpMRU5CUlZZc1NVRkJZME1zUlVGQlIwTXNSVUZCWWtNc1JVRkJUU3hIUVV0V0xFZEJTRUZCTEVkQlFVOVFMRXRCUVV0RExFdEJRVThzU1VGRFprUXNTMEZCUzFFc1MwRkJTVVFzUjBGQlR5eEpRVUZOVUN4TFFVRkxVU3hKUVVNelFsSXNTMEZCUzFNc1ZVRkJVMFlzUjBGQlR5eEpRVUZOVUN4TFFVRkxWU3hWUVVGVlF5eExRVUZMTEUxQlF5OURXQ3hMUVVGTFdTeFhRVUZaTEVsQlFVdFFMRVZCUVVrc1JVRkJSME1zUlVGQlQwNHNTMEZCUzFrc1YwRkJWMUFzVFVGRGNFUkZMRWRCUVU4c1NVRkJUVVFzUlVGQlMwOHNUVUZCVVZBc1JVRkJTMUVzVTBGQlYxSXNSVUZCUzFFc1UwRkJWeXhKUVVGTlVpeEZRVUZMVXl4TlFVRlJMRWxCUVUwc1NVRkJUU3hKUVVVM1JpeEhRVUZKWml4TFFVRkxaMElzVVVGQlV5eEpRVUZMV0N4RlFVRkpMRVZCUVVkRExFVkJRVTlPTEV0QlFVdG5RaXhSUVVGUldDeE5RVU01UTBVc1IwRkJUeXhKUVVGTlJDeEZRVUZMVHl4TFFVTmtVQ3hGUVVGTFV5eFJRVUZQVWl4SFFVRlBMRWxCUVUxRUxFVkJRVXRUTEUxQlFWRXNTMEZIT1VObUxFdEJRVXRKTEVsQlFVMUhMRVZCU1dZc1QwRkJUMUFzUzBGQlMwa3NTMEZMYUVJc1NVRkJTV0VzVjBGQllTeFhRVU5pYWtJc1MwRkJTMnRDTEU5QlFWTXNSMEZIYkVKRUxGZEJRVmRtTEZWQlFWVkRMRk5CUVZjc1YwRkZOVUlzU1VGQlMwZ3NTMEZCUzBrc1NVRkJTU3hEUVVsV0xFbEJSa0VzU1VGRlowSmxMRVZCUmxwYUxFVkJRVTBzUjBGRlJHRXNSVUZCU1N4RlFVRlJSQ3hGUVVGTmJrSXNTMEZCUzI5Q0xFMUJRMnhDTEVsQlFVNUJMRWxCUVZOaUxFZEJRVThzUzBGRFJ5eE5RVUZ1UWxrc1JVRkJTWEJDTEdGQlFXOUNVU3hIUVVGUFdTeEZRVUZKY0VJc1YwRkJZU3hMUVVOd1JGRXNSMEZCVDFrc1JVRkhXRzVDTEV0QlFVdEpMRWxCUVUxSExFVkJTV1lzVDBGQlQxQXNTMEZCUzBrc1MwRkhhRUlzU1VGQlNXbENMRk5CUVZjc1UwRkRXRU1zUlVGRlFVTXNSVUZEUVhoQ0xFVkJRMEY1UWl4RlFVVkJReXhGUVVOQmFrSXNSVUZEUVd0Q0xFVkJSVUZETEVWQlEwRkRMRVZCUTBGRExFVkJRMEZETEVWQlJVRkRMRVZCUTBGRExFVkJRMEZETEVWQlEwRkRMRVZCUTBGRExFZEJSMEVzU1VGQlNVTXNSVUZCV1VNc1JVRkZhRUlzU1VGQlNXUXNTVUZCWTNaQ0xFdEJRVXRyUWl4VlFVTnVRbXRDTEVWQlFXRndReXhMUVVGTFFTeExRVUZMYTBJc1ZVRkJXU3hKUVVGSlJDeFhRVU51UTAwc1IwRkJWeXhOUVVGUExFZEJWekZDTEVkQlVrdGhMRWxCUVZsQkxFVkJRV0Z3UXl4TFFVRkxRU3hMUVVGTGEwSXNUMEZCVXl4TFFVVTNRMjVDTEVkQlFXTjVRaXhKUVVGMVFsa3NSVUZCVjJ4Q0xGVkJRMmhFYlVJc1JVRkJWVVFzUlVGQlYwRXNSVUZCVjJ4Q0xGVkJRVmtzU1VGQlNYQkNMRXRCUVV0RExFbEJSM0JFYzBNc1NVRkJVMEVzUlVGQlZVUXNSVUZCVjBFc1JVRkJWMnhDTEU5QlFWTXNTVUZGYmtSUExFVkJSVUZaTEVWQlFWRndReXhKUVVGTlRpeFRRVUZUT0VJc1VVRkZjRUlzUjBGQlNXcENMRVZCUlZBMlFpeEZRVUZSTjBJc1IwRkJTMklzVTBGQlUyRXNVVUZGYmtJc1IwRkJTV3RDTEVWQlFWVXNRMEZGYWtJc1NVRkJTVmtzUlVGQldUTkRMRk5CUVZNclFpeEhRVVZ5UW1wQ0xFVkJRVlUwUWl4RlFVRlJOVUlzVlVGQldUUkNMRVZCUVZFMVFpeFpRVU14UXl4SlFVRkxRU3hGUVVGUk5rSXNSMEZCVnl4RFFVTndRamRDTEVWQlFWRTJRaXhIUVVGaE9VTXNUMEZCVDJ0RExFZEJRelZDTEVsQlFVbG9RaXhGUVVGWk1rSXNSVUZCVVROQ0xGbEJRV015UWl4RlFVRlJNMElzWTBGRE9VTkJMRVZCUVZVMlFpeExRVUZMUkN4SFFVTm1OVUlzUlVGQlZUaENMR0ZCUjFCU0xFZEJSVkJITEVWQlFXMUNRU3hIUVVGdlFrUXNSMEZGY2tOSExFVkJRVkZ5UWl4VlFVRlpjVUlzUlVGQlVYSkNMR0ZCUVdWMVFpeE5RVU42UTBVc1MwRkJjME1zUjBGQmRrSldMRVZCUVdGaUxFOUJRV01zVVVGQlZTeFZRVU53UkV3c1MwRkJaV3hDTEZOQlFWTnhReXhIUVVONFFsVXNXVUZCWld4RUxFOUJRVTkzUXl4SFFVTjBRbXBDTEUxQlFXVnZRaXhGUVVGdFFuaERMRk5CUVZOM1F5eEhRVUZ2UWl4TFFVTXZSRkVzWVVGQlpWSXNSVUZCYlVJelF5eFBRVUZQTWtNc1IwRkJiMElzVVVGSE1VUlNMRWxCUlZCSExFVkJRV2xDUVN4RlFVRnBRblJETEU5QlFVOXpReXhIUVVGclFpeE5RVVY2UkU4c1JVRkJVWHBDTEdGQlFXVjVRaXhGUVVGUmVrSXNaMEpCUVd0Q01rSXNUVUZETDBONlFpeFRRVUZsWXl4RlFVTm1aaXhMUVVGbGJFSXNVMEZCVTJkRExFZEJRM2hDWlN4WlFVRmxiRVFzVDBGQlQyMURMRWRCUTNSQ1dpeE5RVUZsWlN4RlFVRnBRbTVETEZOQlFWTnRReXhIUVVGclFpeExRVU16UkdFc1lVRkJaV0lzUlVGQmFVSjBReXhQUVVGUGMwTXNSMEZCYTBJc1VVRkxha1VzVFVGQlR5eEpRVTFRWXl4WlFVRmpMRk5CUVhGQ1VpeEhRVU51UTNCRExFdEJRVXRyUWl4UFFVRlRMRVZCVFdRc1NVRktRU3hKUVVVeVFqSkNMRVZCUm5aQ1F5eEZRVUZQT1VNc1MwRkZVQ3RETEVWQlFWZFlMRVZCUlZKQkxFZEJRVmNzUTBGSlpDeEpRVWhCVXl4RlFVRlhWQ3hGUVVGWE1VTXNVVUZCVVVVc1VVRkJVeXhYUVVOdVF5eFBRVUZQZVVJc1UwRkJVekpDTEUxQlFVMUdMRVZCUVUxSExHZENRVVZtWWl4RlFVRlpMRTFCUVUwc1NVRkJTV01zVFVGQlRVZ3NSVUZCVnl3MlFrRkRlRVJZTEVWQlFXRlRMRWxCU1hKQ1JDeFpRVUZaTVVNc1ZVRkJWVU1zVTBGQlZ5eFhRVU0zUWl4SlFVRkxTQ3hMUVVGTFNTeEpRVUZKTEVOQlJWWXNTVUZFUVN4SlFVTm5RbWRETEVWQlJGcGxMRXRCUTB0RExFVkJRVWtzUlVGQlpXaENMRVZCUVdGd1F5eExRVUZMYjBRc1RVRkJUMFFzUlVGQldWb3NTMEZCUzBnc1IwRkRkRVZ3UXl4TFFVRkxTU3hKUVVGTkswTXNSVUZCV1hoRExFdEJRVXNzVFVGSGFFTXNUMEZCVDFnc1MwRkJTMGtzUzBGSGFFSXNTVUZCU1dsRUxGTkJSVUZETEUxQlFWRXNVMEZCVTJ4Q0xFZEJRMnBDTEU5QlFXdENMRTFCUVdSQkxFVkJRVEpDTEUxQlF5OUNRU3hIUVVGakxFZEJRVXRCTEVkQlFWa3hReXhSUVVGUkxHRkJRV01zU1VGRE9VTXlSQ3hOUVVGTmFrSXNTMEZCWjBKcFFpeE5RVUZOYWtJc1IwRkJZeXhKUVVGSlVTeFpRVUZaVWl4TlFVZHlSVzFDTEU5QlFVOURMRkZCUVZWR0lpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDI1dlpHVmZiVzlrZFd4bGN5OXpiR2xqYXk5d1lYSnpaWEl1YW5NaWZRPT0iLCIhZnVuY3Rpb24odCl7dmFyIGU9L15cXHMrLyxyPS9cXHMrJC8sbj0wLGE9dC5yb3VuZCxpPXQubWluLHM9dC5tYXgsbz10LnJhbmRvbTtmdW5jdGlvbiBmKG8saCl7aWYobz1vfHxcIlwiLGg9aHx8e30sbyBpbnN0YW5jZW9mIGYpcmV0dXJuIG87aWYoISh0aGlzIGluc3RhbmNlb2YgZikpcmV0dXJuIG5ldyBmKG8saCk7dmFyIHU9ZnVuY3Rpb24obil7dmFyIGE9e3I6MCxnOjAsYjowfSxvPTEsZj1udWxsLGg9bnVsbCx1PW51bGwsbD0hMSxjPSExO1wic3RyaW5nXCI9PXR5cGVvZiBuJiYobj1mdW5jdGlvbih0KXt0PXQucmVwbGFjZShlLFwiXCIpLnJlcGxhY2UocixcIlwiKS50b0xvd2VyQ2FzZSgpO3ZhciBuLGE9ITE7aWYoSFt0XSl0PUhbdF0sYT0hMDtlbHNlIGlmKFwidHJhbnNwYXJlbnRcIj09dClyZXR1cm57cjowLGc6MCxiOjAsYTowLGZvcm1hdDpcIm5hbWVcIn07aWYobj1PLnJnYi5leGVjKHQpKXJldHVybntyOm5bMV0sZzpuWzJdLGI6blszXX07aWYobj1PLnJnYmEuZXhlYyh0KSlyZXR1cm57cjpuWzFdLGc6blsyXSxiOm5bM10sYTpuWzRdfTtpZihuPU8uaHNsLmV4ZWModCkpcmV0dXJue2g6blsxXSxzOm5bMl0sbDpuWzNdfTtpZihuPU8uaHNsYS5leGVjKHQpKXJldHVybntoOm5bMV0sczpuWzJdLGw6blszXSxhOm5bNF19O2lmKG49Ty5oc3YuZXhlYyh0KSlyZXR1cm57aDpuWzFdLHM6blsyXSx2Om5bM119O2lmKG49Ty5oc3ZhLmV4ZWModCkpcmV0dXJue2g6blsxXSxzOm5bMl0sdjpuWzNdLGE6bls0XX07aWYobj1PLmhleDguZXhlYyh0KSlyZXR1cm57cjpNKG5bMV0pLGc6TShuWzJdKSxiOk0oblszXSksYTp6KG5bNF0pLGZvcm1hdDphP1wibmFtZVwiOlwiaGV4OFwifTtpZihuPU8uaGV4Ni5leGVjKHQpKXJldHVybntyOk0oblsxXSksZzpNKG5bMl0pLGI6TShuWzNdKSxmb3JtYXQ6YT9cIm5hbWVcIjpcImhleFwifTtpZihuPU8uaGV4NC5leGVjKHQpKXJldHVybntyOk0oblsxXStcIlwiK25bMV0pLGc6TShuWzJdK1wiXCIrblsyXSksYjpNKG5bM10rXCJcIituWzNdKSxhOnoobls0XStcIlwiK25bNF0pLGZvcm1hdDphP1wibmFtZVwiOlwiaGV4OFwifTtpZihuPU8uaGV4My5leGVjKHQpKXJldHVybntyOk0oblsxXStcIlwiK25bMV0pLGc6TShuWzJdK1wiXCIrblsyXSksYjpNKG5bM10rXCJcIituWzNdKSxmb3JtYXQ6YT9cIm5hbWVcIjpcImhleFwifTtyZXR1cm4hMX0obikpO1wib2JqZWN0XCI9PXR5cGVvZiBuJiYoUChuLnIpJiZQKG4uZykmJlAobi5iKT8oZz1uLnIsYj1uLmcsZD1uLmIsYT17cjoyNTUqQyhnLDI1NSksZzoyNTUqQyhiLDI1NSksYjoyNTUqQyhkLDI1NSl9LGw9ITAsYz1cIiVcIj09PVN0cmluZyhuLnIpLnN1YnN0cigtMSk/XCJwcmdiXCI6XCJyZ2JcIik6UChuLmgpJiZQKG4ucykmJlAobi52KT8oZj1MKG4ucyksaD1MKG4udiksYT1mdW5jdGlvbihlLHIsbil7ZT02KkMoZSwzNjApLHI9QyhyLDEwMCksbj1DKG4sMTAwKTt2YXIgYT10LmZsb29yKGUpLGk9ZS1hLHM9biooMS1yKSxvPW4qKDEtaSpyKSxmPW4qKDEtKDEtaSkqciksaD1hJTY7cmV0dXJue3I6MjU1KltuLG8scyxzLGYsbl1baF0sZzoyNTUqW2YsbixuLG8scyxzXVtoXSxiOjI1NSpbcyxzLGYsbixuLG9dW2hdfX0obi5oLGYsaCksbD0hMCxjPVwiaHN2XCIpOlAobi5oKSYmUChuLnMpJiZQKG4ubCkmJihmPUwobi5zKSx1PUwobi5sKSxhPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbixhLGk7ZnVuY3Rpb24gcyh0LGUscil7cmV0dXJuIHI8MCYmKHIrPTEpLHI+MSYmKHItPTEpLHI8MS82P3QrNiooZS10KSpyOnI8LjU/ZTpyPDIvMz90KyhlLXQpKigyLzMtcikqNjp0fWlmKHQ9Qyh0LDM2MCksZT1DKGUsMTAwKSxyPUMociwxMDApLDA9PT1lKW49YT1pPXI7ZWxzZXt2YXIgbz1yPC41P3IqKDErZSk6citlLXIqZSxmPTIqci1vO249cyhmLG8sdCsxLzMpLGE9cyhmLG8sdCksaT1zKGYsbyx0LTEvMyl9cmV0dXJue3I6MjU1Km4sZzoyNTUqYSxiOjI1NSppfX0obi5oLGYsdSksbD0hMCxjPVwiaHNsXCIpLG4uaGFzT3duUHJvcGVydHkoXCJhXCIpJiYobz1uLmEpKTt2YXIgZyxiLGQ7cmV0dXJuIG89RihvKSx7b2s6bCxmb3JtYXQ6bi5mb3JtYXR8fGMscjppKDI1NSxzKGEuciwwKSksZzppKDI1NSxzKGEuZywwKSksYjppKDI1NSxzKGEuYiwwKSksYTpvfX0obyk7dGhpcy5fb3JpZ2luYWxJbnB1dD1vLHRoaXMuX3I9dS5yLHRoaXMuX2c9dS5nLHRoaXMuX2I9dS5iLHRoaXMuX2E9dS5hLHRoaXMuX3JvdW5kQT1hKDEwMCp0aGlzLl9hKS8xMDAsdGhpcy5fZm9ybWF0PWguZm9ybWF0fHx1LmZvcm1hdCx0aGlzLl9ncmFkaWVudFR5cGU9aC5ncmFkaWVudFR5cGUsdGhpcy5fcjwxJiYodGhpcy5fcj1hKHRoaXMuX3IpKSx0aGlzLl9nPDEmJih0aGlzLl9nPWEodGhpcy5fZykpLHRoaXMuX2I8MSYmKHRoaXMuX2I9YSh0aGlzLl9iKSksdGhpcy5fb2s9dS5vayx0aGlzLl90Y19pZD1uKyt9ZnVuY3Rpb24gaCh0LGUscil7dD1DKHQsMjU1KSxlPUMoZSwyNTUpLHI9QyhyLDI1NSk7dmFyIG4sYSxvPXModCxlLHIpLGY9aSh0LGUsciksaD0obytmKS8yO2lmKG89PWYpbj1hPTA7ZWxzZXt2YXIgdT1vLWY7c3dpdGNoKGE9aD4uNT91LygyLW8tZik6dS8obytmKSxvKXtjYXNlIHQ6bj0oZS1yKS91KyhlPHI/NjowKTticmVhaztjYXNlIGU6bj0oci10KS91KzI7YnJlYWs7Y2FzZSByOm49KHQtZSkvdSs0fW4vPTZ9cmV0dXJue2g6bixzOmEsbDpofX1mdW5jdGlvbiB1KHQsZSxyKXt0PUModCwyNTUpLGU9QyhlLDI1NSkscj1DKHIsMjU1KTt2YXIgbixhLG89cyh0LGUsciksZj1pKHQsZSxyKSxoPW8sdT1vLWY7aWYoYT0wPT09bz8wOnUvbyxvPT1mKW49MDtlbHNle3N3aXRjaChvKXtjYXNlIHQ6bj0oZS1yKS91KyhlPHI/NjowKTticmVhaztjYXNlIGU6bj0oci10KS91KzI7YnJlYWs7Y2FzZSByOm49KHQtZSkvdSs0fW4vPTZ9cmV0dXJue2g6bixzOmEsdjpofX1mdW5jdGlvbiBsKHQsZSxyLG4pe3ZhciBpPVtJKGEodCkudG9TdHJpbmcoMTYpKSxJKGEoZSkudG9TdHJpbmcoMTYpKSxJKGEocikudG9TdHJpbmcoMTYpKV07cmV0dXJuIG4mJmlbMF0uY2hhckF0KDApPT1pWzBdLmNoYXJBdCgxKSYmaVsxXS5jaGFyQXQoMCk9PWlbMV0uY2hhckF0KDEpJiZpWzJdLmNoYXJBdCgwKT09aVsyXS5jaGFyQXQoMSk/aVswXS5jaGFyQXQoMCkraVsxXS5jaGFyQXQoMCkraVsyXS5jaGFyQXQoMCk6aS5qb2luKFwiXCIpfWZ1bmN0aW9uIGModCxlLHIsbil7cmV0dXJuW0koTihuKSksSShhKHQpLnRvU3RyaW5nKDE2KSksSShhKGUpLnRvU3RyaW5nKDE2KSksSShhKHIpLnRvU3RyaW5nKDE2KSldLmpvaW4oXCJcIil9ZnVuY3Rpb24gZyh0LGUpe2U9MD09PWU/MDplfHwxMDt2YXIgcj1mKHQpLnRvSHNsKCk7cmV0dXJuIHIucy09ZS8xMDAsci5zPXEoci5zKSxmKHIpfWZ1bmN0aW9uIGIodCxlKXtlPTA9PT1lPzA6ZXx8MTA7dmFyIHI9Zih0KS50b0hzbCgpO3JldHVybiByLnMrPWUvMTAwLHIucz1xKHIucyksZihyKX1mdW5jdGlvbiBkKHQpe3JldHVybiBmKHQpLmRlc2F0dXJhdGUoMTAwKX1mdW5jdGlvbiBfKHQsZSl7ZT0wPT09ZT8wOmV8fDEwO3ZhciByPWYodCkudG9Ic2woKTtyZXR1cm4gci5sKz1lLzEwMCxyLmw9cShyLmwpLGYocil9ZnVuY3Rpb24gcCh0LGUpe2U9MD09PWU/MDplfHwxMDt2YXIgcj1mKHQpLnRvUmdiKCk7cmV0dXJuIHIucj1zKDAsaSgyNTUsci5yLWEoLWUvMTAwKjI1NSkpKSxyLmc9cygwLGkoMjU1LHIuZy1hKC1lLzEwMCoyNTUpKSksci5iPXMoMCxpKDI1NSxyLmItYSgtZS8xMDAqMjU1KSkpLGYocil9ZnVuY3Rpb24gbSh0LGUpe2U9MD09PWU/MDplfHwxMDt2YXIgcj1mKHQpLnRvSHNsKCk7cmV0dXJuIHIubC09ZS8xMDAsci5sPXEoci5sKSxmKHIpfWZ1bmN0aW9uIHYodCxlKXt2YXIgcj1mKHQpLnRvSHNsKCksbj0oci5oK2UpJTM2MDtyZXR1cm4gci5oPW48MD8zNjArbjpuLGYocil9ZnVuY3Rpb24geSh0KXt2YXIgZT1mKHQpLnRvSHNsKCk7cmV0dXJuIGUuaD0oZS5oKzE4MCklMzYwLGYoZSl9ZnVuY3Rpb24gQSh0KXt2YXIgZT1mKHQpLnRvSHNsKCkscj1lLmg7cmV0dXJuW2YodCksZih7aDoocisxMjApJTM2MCxzOmUucyxsOmUubH0pLGYoe2g6KHIrMjQwKSUzNjAsczplLnMsbDplLmx9KV19ZnVuY3Rpb24geCh0KXt2YXIgZT1mKHQpLnRvSHNsKCkscj1lLmg7cmV0dXJuW2YodCksZih7aDoocis5MCklMzYwLHM6ZS5zLGw6ZS5sfSksZih7aDoocisxODApJTM2MCxzOmUucyxsOmUubH0pLGYoe2g6KHIrMjcwKSUzNjAsczplLnMsbDplLmx9KV19ZnVuY3Rpb24gayh0KXt2YXIgZT1mKHQpLnRvSHNsKCkscj1lLmg7cmV0dXJuW2YodCksZih7aDoocis3MiklMzYwLHM6ZS5zLGw6ZS5sfSksZih7aDoocisyMTYpJTM2MCxzOmUucyxsOmUubH0pXX1mdW5jdGlvbiB3KHQsZSxyKXtlPWV8fDYscj1yfHwzMDt2YXIgbj1mKHQpLnRvSHNsKCksYT0zNjAvcixpPVtmKHQpXTtmb3Iobi5oPShuLmgtKGEqZT4+MSkrNzIwKSUzNjA7LS1lOyluLmg9KG4uaCthKSUzNjAsaS5wdXNoKGYobikpO3JldHVybiBpfWZ1bmN0aW9uIFModCxlKXtlPWV8fDY7Zm9yKHZhciByPWYodCkudG9Ic3YoKSxuPXIuaCxhPXIucyxpPXIudixzPVtdLG89MS9lO2UtLTspcy5wdXNoKGYoe2g6bixzOmEsdjppfSkpLGk9KGkrbyklMTtyZXR1cm4gc31mLnByb3RvdHlwZT17aXNEYXJrOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpPDEyOH0saXNMaWdodDpmdW5jdGlvbigpe3JldHVybiF0aGlzLmlzRGFyaygpfSxpc1ZhbGlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29rfSxnZXRPcmlnaW5hbElucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29yaWdpbmFsSW5wdXR9LGdldEZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb3JtYXR9LGdldEFscGhhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2F9LGdldEJyaWdodG5lc3M6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnRvUmdiKCk7cmV0dXJuKDI5OSp0LnIrNTg3KnQuZysxMTQqdC5iKS8xZTN9LGdldEx1bWluYW5jZTpmdW5jdGlvbigpe3ZhciBlLHIsbixhPXRoaXMudG9SZ2IoKTtyZXR1cm4gZT1hLnIvMjU1LHI9YS5nLzI1NSxuPWEuYi8yNTUsLjIxMjYqKGU8PS4wMzkyOD9lLzEyLjkyOnQucG93KChlKy4wNTUpLzEuMDU1LDIuNCkpKy43MTUyKihyPD0uMDM5Mjg/ci8xMi45Mjp0LnBvdygocisuMDU1KS8xLjA1NSwyLjQpKSsuMDcyMioobjw9LjAzOTI4P24vMTIuOTI6dC5wb3coKG4rLjA1NSkvMS4wNTUsMi40KSl9LHNldEFscGhhOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9hPUYodCksdGhpcy5fcm91bmRBPWEoMTAwKnRoaXMuX2EpLzEwMCx0aGlzfSx0b0hzdjpmdW5jdGlvbigpe3ZhciB0PXUodGhpcy5fcix0aGlzLl9nLHRoaXMuX2IpO3JldHVybntoOjM2MCp0Lmgsczp0LnMsdjp0LnYsYTp0aGlzLl9hfX0sdG9Ic3ZTdHJpbmc6ZnVuY3Rpb24oKXt2YXIgdD11KHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKSxlPWEoMzYwKnQuaCkscj1hKDEwMCp0LnMpLG49YSgxMDAqdC52KTtyZXR1cm4gMT09dGhpcy5fYT9cImhzdihcIitlK1wiLCBcIityK1wiJSwgXCIrbitcIiUpXCI6XCJoc3ZhKFwiK2UrXCIsIFwiK3IrXCIlLCBcIituK1wiJSwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b0hzbDpmdW5jdGlvbigpe3ZhciB0PWgodGhpcy5fcix0aGlzLl9nLHRoaXMuX2IpO3JldHVybntoOjM2MCp0Lmgsczp0LnMsbDp0LmwsYTp0aGlzLl9hfX0sdG9Ic2xTdHJpbmc6ZnVuY3Rpb24oKXt2YXIgdD1oKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iKSxlPWEoMzYwKnQuaCkscj1hKDEwMCp0LnMpLG49YSgxMDAqdC5sKTtyZXR1cm4gMT09dGhpcy5fYT9cImhzbChcIitlK1wiLCBcIityK1wiJSwgXCIrbitcIiUpXCI6XCJoc2xhKFwiK2UrXCIsIFwiK3IrXCIlLCBcIituK1wiJSwgXCIrdGhpcy5fcm91bmRBK1wiKVwifSx0b0hleDpmdW5jdGlvbih0KXtyZXR1cm4gbCh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYix0KX0sdG9IZXhTdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuXCIjXCIrdGhpcy50b0hleCh0KX0sdG9IZXg4OmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LGUscixuLGkpe3ZhciBzPVtJKGEodCkudG9TdHJpbmcoMTYpKSxJKGEoZSkudG9TdHJpbmcoMTYpKSxJKGEocikudG9TdHJpbmcoMTYpKSxJKE4obikpXTtpZihpJiZzWzBdLmNoYXJBdCgwKT09c1swXS5jaGFyQXQoMSkmJnNbMV0uY2hhckF0KDApPT1zWzFdLmNoYXJBdCgxKSYmc1syXS5jaGFyQXQoMCk9PXNbMl0uY2hhckF0KDEpJiZzWzNdLmNoYXJBdCgwKT09c1szXS5jaGFyQXQoMSkpcmV0dXJuIHNbMF0uY2hhckF0KDApK3NbMV0uY2hhckF0KDApK3NbMl0uY2hhckF0KDApK3NbM10uY2hhckF0KDApO3JldHVybiBzLmpvaW4oXCJcIil9KHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iLHRoaXMuX2EsdCl9LHRvSGV4OFN0cmluZzpmdW5jdGlvbih0KXtyZXR1cm5cIiNcIit0aGlzLnRvSGV4OCh0KX0sdG9SZ2I6ZnVuY3Rpb24oKXtyZXR1cm57cjphKHRoaXMuX3IpLGc6YSh0aGlzLl9nKSxiOmEodGhpcy5fYiksYTp0aGlzLl9hfX0sdG9SZ2JTdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMT09dGhpcy5fYT9cInJnYihcIithKHRoaXMuX3IpK1wiLCBcIithKHRoaXMuX2cpK1wiLCBcIithKHRoaXMuX2IpK1wiKVwiOlwicmdiYShcIithKHRoaXMuX3IpK1wiLCBcIithKHRoaXMuX2cpK1wiLCBcIithKHRoaXMuX2IpK1wiLCBcIit0aGlzLl9yb3VuZEErXCIpXCJ9LHRvUGVyY2VudGFnZVJnYjpmdW5jdGlvbigpe3JldHVybntyOmEoMTAwKkModGhpcy5fciwyNTUpKStcIiVcIixnOmEoMTAwKkModGhpcy5fZywyNTUpKStcIiVcIixiOmEoMTAwKkModGhpcy5fYiwyNTUpKStcIiVcIixhOnRoaXMuX2F9fSx0b1BlcmNlbnRhZ2VSZ2JTdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMT09dGhpcy5fYT9cInJnYihcIithKDEwMCpDKHRoaXMuX3IsMjU1KSkrXCIlLCBcIithKDEwMCpDKHRoaXMuX2csMjU1KSkrXCIlLCBcIithKDEwMCpDKHRoaXMuX2IsMjU1KSkrXCIlKVwiOlwicmdiYShcIithKDEwMCpDKHRoaXMuX3IsMjU1KSkrXCIlLCBcIithKDEwMCpDKHRoaXMuX2csMjU1KSkrXCIlLCBcIithKDEwMCpDKHRoaXMuX2IsMjU1KSkrXCIlLCBcIit0aGlzLl9yb3VuZEErXCIpXCJ9LHRvTmFtZTpmdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5fYT9cInRyYW5zcGFyZW50XCI6ISh0aGlzLl9hPDEpJiYoUltsKHRoaXMuX3IsdGhpcy5fZyx0aGlzLl9iLCEwKV18fCExKX0sdG9GaWx0ZXI6ZnVuY3Rpb24odCl7dmFyIGU9XCIjXCIrYyh0aGlzLl9yLHRoaXMuX2csdGhpcy5fYix0aGlzLl9hKSxyPWUsbj10aGlzLl9ncmFkaWVudFR5cGU/XCJHcmFkaWVudFR5cGUgPSAxLCBcIjpcIlwiO2lmKHQpe3ZhciBhPWYodCk7cj1cIiNcIitjKGEuX3IsYS5fZyxhLl9iLGEuX2EpfXJldHVyblwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK24rXCJzdGFydENvbG9yc3RyPVwiK2UrXCIsZW5kQ29sb3JzdHI9XCIrcitcIilcIn0sdG9TdHJpbmc6ZnVuY3Rpb24odCl7dmFyIGU9ISF0O3Q9dHx8dGhpcy5fZm9ybWF0O3ZhciByPSExLG49dGhpcy5fYTwxJiZ0aGlzLl9hPj0wO3JldHVybiBlfHwhbnx8XCJoZXhcIiE9PXQmJlwiaGV4NlwiIT09dCYmXCJoZXgzXCIhPT10JiZcImhleDRcIiE9PXQmJlwiaGV4OFwiIT09dCYmXCJuYW1lXCIhPT10PyhcInJnYlwiPT09dCYmKHI9dGhpcy50b1JnYlN0cmluZygpKSxcInByZ2JcIj09PXQmJihyPXRoaXMudG9QZXJjZW50YWdlUmdiU3RyaW5nKCkpLFwiaGV4XCIhPT10JiZcImhleDZcIiE9PXR8fChyPXRoaXMudG9IZXhTdHJpbmcoKSksXCJoZXgzXCI9PT10JiYocj10aGlzLnRvSGV4U3RyaW5nKCEwKSksXCJoZXg0XCI9PT10JiYocj10aGlzLnRvSGV4OFN0cmluZyghMCkpLFwiaGV4OFwiPT09dCYmKHI9dGhpcy50b0hleDhTdHJpbmcoKSksXCJuYW1lXCI9PT10JiYocj10aGlzLnRvTmFtZSgpKSxcImhzbFwiPT09dCYmKHI9dGhpcy50b0hzbFN0cmluZygpKSxcImhzdlwiPT09dCYmKHI9dGhpcy50b0hzdlN0cmluZygpKSxyfHx0aGlzLnRvSGV4U3RyaW5nKCkpOlwibmFtZVwiPT09dCYmMD09PXRoaXMuX2E/dGhpcy50b05hbWUoKTp0aGlzLnRvUmdiU3RyaW5nKCl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIGYodGhpcy50b1N0cmluZygpKX0sX2FwcGx5TW9kaWZpY2F0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIHI9dC5hcHBseShudWxsLFt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChlKSkpO3JldHVybiB0aGlzLl9yPXIuX3IsdGhpcy5fZz1yLl9nLHRoaXMuX2I9ci5fYix0aGlzLnNldEFscGhhKHIuX2EpLHRoaXN9LGxpZ2h0ZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oXyxhcmd1bWVudHMpfSxicmlnaHRlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihwLGFyZ3VtZW50cyl9LGRhcmtlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihtLGFyZ3VtZW50cyl9LGRlc2F0dXJhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZyxhcmd1bWVudHMpfSxzYXR1cmF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihiLGFyZ3VtZW50cyl9LGdyZXlzY2FsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseU1vZGlmaWNhdGlvbihkLGFyZ3VtZW50cyl9LHNwaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24odixhcmd1bWVudHMpfSxfYXBwbHlDb21iaW5hdGlvbjpmdW5jdGlvbih0LGUpe3JldHVybiB0LmFwcGx5KG51bGwsW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGUpKSl9LGFuYWxvZ291czpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHcsYXJndW1lbnRzKX0sY29tcGxlbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHksYXJndW1lbnRzKX0sbW9ub2Nocm9tYXRpYzpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKFMsYXJndW1lbnRzKX0sc3BsaXRjb21wbGVtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oayxhcmd1bWVudHMpfSx0cmlhZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKEEsYXJndW1lbnRzKX0sdGV0cmFkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24oeCxhcmd1bWVudHMpfX0sZi5mcm9tUmF0aW89ZnVuY3Rpb24odCxlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7dmFyIHI9e307Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKHJbbl09XCJhXCI9PT1uP3Rbbl06TCh0W25dKSk7dD1yfXJldHVybiBmKHQsZSl9LGYuZXF1YWxzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISghdHx8IWUpJiZmKHQpLnRvUmdiU3RyaW5nKCk9PWYoZSkudG9SZ2JTdHJpbmcoKX0sZi5yYW5kb209ZnVuY3Rpb24oKXtyZXR1cm4gZi5mcm9tUmF0aW8oe3I6bygpLGc6bygpLGI6bygpfSl9LGYubWl4PWZ1bmN0aW9uKHQsZSxyKXtyPTA9PT1yPzA6cnx8NTA7dmFyIG49Zih0KS50b1JnYigpLGE9ZihlKS50b1JnYigpLGk9ci8xMDA7cmV0dXJuIGYoe3I6KGEuci1uLnIpKmkrbi5yLGc6KGEuZy1uLmcpKmkrbi5nLGI6KGEuYi1uLmIpKmkrbi5iLGE6KGEuYS1uLmEpKmkrbi5hfSl9LGYucmVhZGFiaWxpdHk9ZnVuY3Rpb24oZSxyKXt2YXIgbj1mKGUpLGE9ZihyKTtyZXR1cm4odC5tYXgobi5nZXRMdW1pbmFuY2UoKSxhLmdldEx1bWluYW5jZSgpKSsuMDUpLyh0Lm1pbihuLmdldEx1bWluYW5jZSgpLGEuZ2V0THVtaW5hbmNlKCkpKy4wNSl9LGYuaXNSZWFkYWJsZT1mdW5jdGlvbih0LGUscil7dmFyIG4sYSxpPWYucmVhZGFiaWxpdHkodCxlKTtzd2l0Y2goYT0hMSwobj1mdW5jdGlvbih0KXt2YXIgZSxyO2U9KCh0PXR8fHtsZXZlbDpcIkFBXCIsc2l6ZTpcInNtYWxsXCJ9KS5sZXZlbHx8XCJBQVwiKS50b1VwcGVyQ2FzZSgpLHI9KHQuc2l6ZXx8XCJzbWFsbFwiKS50b0xvd2VyQ2FzZSgpLFwiQUFcIiE9PWUmJlwiQUFBXCIhPT1lJiYoZT1cIkFBXCIpO1wic21hbGxcIiE9PXImJlwibGFyZ2VcIiE9PXImJihyPVwic21hbGxcIik7cmV0dXJue2xldmVsOmUsc2l6ZTpyfX0ocikpLmxldmVsK24uc2l6ZSl7Y2FzZVwiQUFzbWFsbFwiOmNhc2VcIkFBQWxhcmdlXCI6YT1pPj00LjU7YnJlYWs7Y2FzZVwiQUFsYXJnZVwiOmE9aT49MzticmVhaztjYXNlXCJBQUFzbWFsbFwiOmE9aT49N31yZXR1cm4gYX0sZi5tb3N0UmVhZGFibGU9ZnVuY3Rpb24odCxlLHIpe3ZhciBuLGEsaSxzLG89bnVsbCxoPTA7YT0ocj1yfHx7fSkuaW5jbHVkZUZhbGxiYWNrQ29sb3JzLGk9ci5sZXZlbCxzPXIuc2l6ZTtmb3IodmFyIHU9MDt1PGUubGVuZ3RoO3UrKykobj1mLnJlYWRhYmlsaXR5KHQsZVt1XSkpPmgmJihoPW4sbz1mKGVbdV0pKTtyZXR1cm4gZi5pc1JlYWRhYmxlKHQsbyx7bGV2ZWw6aSxzaXplOnN9KXx8IWE/bzooci5pbmNsdWRlRmFsbGJhY2tDb2xvcnM9ITEsZi5tb3N0UmVhZGFibGUodCxbXCIjZmZmXCIsXCIjMDAwXCJdLHIpKX07dmFyIEg9Zi5uYW1lcz17YWxpY2VibHVlOlwiZjBmOGZmXCIsYW50aXF1ZXdoaXRlOlwiZmFlYmQ3XCIsYXF1YTpcIjBmZlwiLGFxdWFtYXJpbmU6XCI3ZmZmZDRcIixhenVyZTpcImYwZmZmZlwiLGJlaWdlOlwiZjVmNWRjXCIsYmlzcXVlOlwiZmZlNGM0XCIsYmxhY2s6XCIwMDBcIixibGFuY2hlZGFsbW9uZDpcImZmZWJjZFwiLGJsdWU6XCIwMGZcIixibHVldmlvbGV0OlwiOGEyYmUyXCIsYnJvd246XCJhNTJhMmFcIixidXJseXdvb2Q6XCJkZWI4ODdcIixidXJudHNpZW5uYTpcImVhN2U1ZFwiLGNhZGV0Ymx1ZTpcIjVmOWVhMFwiLGNoYXJ0cmV1c2U6XCI3ZmZmMDBcIixjaG9jb2xhdGU6XCJkMjY5MWVcIixjb3JhbDpcImZmN2Y1MFwiLGNvcm5mbG93ZXJibHVlOlwiNjQ5NWVkXCIsY29ybnNpbGs6XCJmZmY4ZGNcIixjcmltc29uOlwiZGMxNDNjXCIsY3lhbjpcIjBmZlwiLGRhcmtibHVlOlwiMDAwMDhiXCIsZGFya2N5YW46XCIwMDhiOGJcIixkYXJrZ29sZGVucm9kOlwiYjg4NjBiXCIsZGFya2dyYXk6XCJhOWE5YTlcIixkYXJrZ3JlZW46XCIwMDY0MDBcIixkYXJrZ3JleTpcImE5YTlhOVwiLGRhcmtraGFraTpcImJkYjc2YlwiLGRhcmttYWdlbnRhOlwiOGIwMDhiXCIsZGFya29saXZlZ3JlZW46XCI1NTZiMmZcIixkYXJrb3JhbmdlOlwiZmY4YzAwXCIsZGFya29yY2hpZDpcIjk5MzJjY1wiLGRhcmtyZWQ6XCI4YjAwMDBcIixkYXJrc2FsbW9uOlwiZTk5NjdhXCIsZGFya3NlYWdyZWVuOlwiOGZiYzhmXCIsZGFya3NsYXRlYmx1ZTpcIjQ4M2Q4YlwiLGRhcmtzbGF0ZWdyYXk6XCIyZjRmNGZcIixkYXJrc2xhdGVncmV5OlwiMmY0ZjRmXCIsZGFya3R1cnF1b2lzZTpcIjAwY2VkMVwiLGRhcmt2aW9sZXQ6XCI5NDAwZDNcIixkZWVwcGluazpcImZmMTQ5M1wiLGRlZXBza3libHVlOlwiMDBiZmZmXCIsZGltZ3JheTpcIjY5Njk2OVwiLGRpbWdyZXk6XCI2OTY5NjlcIixkb2RnZXJibHVlOlwiMWU5MGZmXCIsZmlyZWJyaWNrOlwiYjIyMjIyXCIsZmxvcmFsd2hpdGU6XCJmZmZhZjBcIixmb3Jlc3RncmVlbjpcIjIyOGIyMlwiLGZ1Y2hzaWE6XCJmMGZcIixnYWluc2Jvcm86XCJkY2RjZGNcIixnaG9zdHdoaXRlOlwiZjhmOGZmXCIsZ29sZDpcImZmZDcwMFwiLGdvbGRlbnJvZDpcImRhYTUyMFwiLGdyYXk6XCI4MDgwODBcIixncmVlbjpcIjAwODAwMFwiLGdyZWVueWVsbG93OlwiYWRmZjJmXCIsZ3JleTpcIjgwODA4MFwiLGhvbmV5ZGV3OlwiZjBmZmYwXCIsaG90cGluazpcImZmNjliNFwiLGluZGlhbnJlZDpcImNkNWM1Y1wiLGluZGlnbzpcIjRiMDA4MlwiLGl2b3J5OlwiZmZmZmYwXCIsa2hha2k6XCJmMGU2OGNcIixsYXZlbmRlcjpcImU2ZTZmYVwiLGxhdmVuZGVyYmx1c2g6XCJmZmYwZjVcIixsYXduZ3JlZW46XCI3Y2ZjMDBcIixsZW1vbmNoaWZmb246XCJmZmZhY2RcIixsaWdodGJsdWU6XCJhZGQ4ZTZcIixsaWdodGNvcmFsOlwiZjA4MDgwXCIsbGlnaHRjeWFuOlwiZTBmZmZmXCIsbGlnaHRnb2xkZW5yb2R5ZWxsb3c6XCJmYWZhZDJcIixsaWdodGdyYXk6XCJkM2QzZDNcIixsaWdodGdyZWVuOlwiOTBlZTkwXCIsbGlnaHRncmV5OlwiZDNkM2QzXCIsbGlnaHRwaW5rOlwiZmZiNmMxXCIsbGlnaHRzYWxtb246XCJmZmEwN2FcIixsaWdodHNlYWdyZWVuOlwiMjBiMmFhXCIsbGlnaHRza3libHVlOlwiODdjZWZhXCIsbGlnaHRzbGF0ZWdyYXk6XCI3ODlcIixsaWdodHNsYXRlZ3JleTpcIjc4OVwiLGxpZ2h0c3RlZWxibHVlOlwiYjBjNGRlXCIsbGlnaHR5ZWxsb3c6XCJmZmZmZTBcIixsaW1lOlwiMGYwXCIsbGltZWdyZWVuOlwiMzJjZDMyXCIsbGluZW46XCJmYWYwZTZcIixtYWdlbnRhOlwiZjBmXCIsbWFyb29uOlwiODAwMDAwXCIsbWVkaXVtYXF1YW1hcmluZTpcIjY2Y2RhYVwiLG1lZGl1bWJsdWU6XCIwMDAwY2RcIixtZWRpdW1vcmNoaWQ6XCJiYTU1ZDNcIixtZWRpdW1wdXJwbGU6XCI5MzcwZGJcIixtZWRpdW1zZWFncmVlbjpcIjNjYjM3MVwiLG1lZGl1bXNsYXRlYmx1ZTpcIjdiNjhlZVwiLG1lZGl1bXNwcmluZ2dyZWVuOlwiMDBmYTlhXCIsbWVkaXVtdHVycXVvaXNlOlwiNDhkMWNjXCIsbWVkaXVtdmlvbGV0cmVkOlwiYzcxNTg1XCIsbWlkbmlnaHRibHVlOlwiMTkxOTcwXCIsbWludGNyZWFtOlwiZjVmZmZhXCIsbWlzdHlyb3NlOlwiZmZlNGUxXCIsbW9jY2FzaW46XCJmZmU0YjVcIixuYXZham93aGl0ZTpcImZmZGVhZFwiLG5hdnk6XCIwMDAwODBcIixvbGRsYWNlOlwiZmRmNWU2XCIsb2xpdmU6XCI4MDgwMDBcIixvbGl2ZWRyYWI6XCI2YjhlMjNcIixvcmFuZ2U6XCJmZmE1MDBcIixvcmFuZ2VyZWQ6XCJmZjQ1MDBcIixvcmNoaWQ6XCJkYTcwZDZcIixwYWxlZ29sZGVucm9kOlwiZWVlOGFhXCIscGFsZWdyZWVuOlwiOThmYjk4XCIscGFsZXR1cnF1b2lzZTpcImFmZWVlZVwiLHBhbGV2aW9sZXRyZWQ6XCJkYjcwOTNcIixwYXBheWF3aGlwOlwiZmZlZmQ1XCIscGVhY2hwdWZmOlwiZmZkYWI5XCIscGVydTpcImNkODUzZlwiLHBpbms6XCJmZmMwY2JcIixwbHVtOlwiZGRhMGRkXCIscG93ZGVyYmx1ZTpcImIwZTBlNlwiLHB1cnBsZTpcIjgwMDA4MFwiLHJlYmVjY2FwdXJwbGU6XCI2NjMzOTlcIixyZWQ6XCJmMDBcIixyb3N5YnJvd246XCJiYzhmOGZcIixyb3lhbGJsdWU6XCI0MTY5ZTFcIixzYWRkbGVicm93bjpcIjhiNDUxM1wiLHNhbG1vbjpcImZhODA3MlwiLHNhbmR5YnJvd246XCJmNGE0NjBcIixzZWFncmVlbjpcIjJlOGI1N1wiLHNlYXNoZWxsOlwiZmZmNWVlXCIsc2llbm5hOlwiYTA1MjJkXCIsc2lsdmVyOlwiYzBjMGMwXCIsc2t5Ymx1ZTpcIjg3Y2VlYlwiLHNsYXRlYmx1ZTpcIjZhNWFjZFwiLHNsYXRlZ3JheTpcIjcwODA5MFwiLHNsYXRlZ3JleTpcIjcwODA5MFwiLHNub3c6XCJmZmZhZmFcIixzcHJpbmdncmVlbjpcIjAwZmY3ZlwiLHN0ZWVsYmx1ZTpcIjQ2ODJiNFwiLHRhbjpcImQyYjQ4Y1wiLHRlYWw6XCIwMDgwODBcIix0aGlzdGxlOlwiZDhiZmQ4XCIsdG9tYXRvOlwiZmY2MzQ3XCIsdHVycXVvaXNlOlwiNDBlMGQwXCIsdmlvbGV0OlwiZWU4MmVlXCIsd2hlYXQ6XCJmNWRlYjNcIix3aGl0ZTpcImZmZlwiLHdoaXRlc21va2U6XCJmNWY1ZjVcIix5ZWxsb3c6XCJmZjBcIix5ZWxsb3dncmVlbjpcIjlhY2QzMlwifSxSPWYuaGV4TmFtZXM9ZnVuY3Rpb24odCl7dmFyIGU9e307Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbdFtyXV09cik7cmV0dXJuIGV9KEgpO2Z1bmN0aW9uIEYodCl7cmV0dXJuIHQ9cGFyc2VGbG9hdCh0KSwoaXNOYU4odCl8fHQ8MHx8dD4xKSYmKHQ9MSksdH1mdW5jdGlvbiBDKGUscil7KGZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiYtMSE9dC5pbmRleE9mKFwiLlwiKSYmMT09PXBhcnNlRmxvYXQodCl9KShlKSYmKGU9XCIxMDAlXCIpO3ZhciBuPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiYtMSE9dC5pbmRleE9mKFwiJVwiKX0oZSk7cmV0dXJuIGU9aShyLHMoMCxwYXJzZUZsb2F0KGUpKSksbiYmKGU9cGFyc2VJbnQoZSpyLDEwKS8xMDApLHQuYWJzKGUtcik8MWUtNj8xOmUlci9wYXJzZUZsb2F0KHIpfWZ1bmN0aW9uIHEodCl7cmV0dXJuIGkoMSxzKDAsdCkpfWZ1bmN0aW9uIE0odCl7cmV0dXJuIHBhcnNlSW50KHQsMTYpfWZ1bmN0aW9uIEkodCl7cmV0dXJuIDE9PXQubGVuZ3RoP1wiMFwiK3Q6XCJcIit0fWZ1bmN0aW9uIEwodCl7cmV0dXJuIHQ8PTEmJih0PTEwMCp0K1wiJVwiKSx0fWZ1bmN0aW9uIE4oZSl7cmV0dXJuIHQucm91bmQoMjU1KnBhcnNlRmxvYXQoZSkpLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiB6KHQpe3JldHVybiBNKHQpLzI1NX12YXIgRSxULGosTz0oVD1cIltcXFxcc3xcXFxcKF0rKFwiKyhFPVwiKD86Wy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslPyl8KD86Wy1cXFxcK10/XFxcXGQrJT8pXCIpK1wiKVssfFxcXFxzXSsoXCIrRStcIilbLHxcXFxcc10rKFwiK0UrXCIpXFxcXHMqXFxcXCk/XCIsaj1cIltcXFxcc3xcXFxcKF0rKFwiK0UrXCIpWyx8XFxcXHNdKyhcIitFK1wiKVssfFxcXFxzXSsoXCIrRStcIilbLHxcXFxcc10rKFwiK0UrXCIpXFxcXHMqXFxcXCk/XCIse0NTU19VTklUOm5ldyBSZWdFeHAoRSkscmdiOm5ldyBSZWdFeHAoXCJyZ2JcIitUKSxyZ2JhOm5ldyBSZWdFeHAoXCJyZ2JhXCIraiksaHNsOm5ldyBSZWdFeHAoXCJoc2xcIitUKSxoc2xhOm5ldyBSZWdFeHAoXCJoc2xhXCIraiksaHN2Om5ldyBSZWdFeHAoXCJoc3ZcIitUKSxoc3ZhOm5ldyBSZWdFeHAoXCJoc3ZhXCIraiksaGV4MzovXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8saGV4NjovXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8saGV4NDovXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLGhleDg6L14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkL30pO2Z1bmN0aW9uIFAodCl7cmV0dXJuISFPLkNTU19VTklULmV4ZWModCl9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIGZ9KTp3aW5kb3cudGlueWNvbG9yPWZ9KE1hdGgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5ScGJubGpiMnh2Y2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpOWVhSb0lpd2lkSEpwYlV4bFpuUWlMQ0owY21sdFVtbG5hSFFpTENKMGFXNTVRMjkxYm5SbGNpSXNJbTFoZEdoU2IzVnVaQ0lzSW5KdmRXNWtJaXdpYldGMGFFMXBiaUlzSW0xcGJpSXNJbTFoZEdoTllYZ2lMQ0p0WVhnaUxDSnRZWFJvVW1GdVpHOXRJaXdpY21GdVpHOXRJaXdpZEdsdWVXTnZiRzl5SWl3aVkyOXNiM0lpTENKdmNIUnpJaXdpZEdocGN5SXNJbkpuWWlJc0luSWlMQ0puSWl3aVlpSXNJbUVpTENKeklpd2lkaUlzSW13aUxDSnZheUlzSW1admNtMWhkQ0lzSW5KbGNHeGhZMlVpTENKMGIweHZkMlZ5UTJGelpTSXNJbTFoZEdOb0lpd2libUZ0WldRaUxDSnVZVzFsY3lJc0ltMWhkR05vWlhKeklpd2laWGhsWXlJc0luSm5ZbUVpTENKb2Myd2lMQ0pvSWl3aWFITnNZU0lzSW1oemRpSXNJbWh6ZG1FaUxDSm9aWGc0SWl3aWNHRnljMlZKYm5SR2NtOXRTR1Y0SWl3aVkyOXVkbVZ5ZEVobGVGUnZSR1ZqYVcxaGJDSXNJbWhsZURZaUxDSm9aWGcwSWl3aWFHVjRNeUlzSW5OMGNtbHVaMGx1Y0hWMFZHOVBZbXBsWTNRaUxDSnBjMVpoYkdsa1ExTlRWVzVwZENJc0ltSnZkVzVrTURFaUxDSlRkSEpwYm1jaUxDSnpkV0p6ZEhJaUxDSmpiMjUyWlhKMFZHOVFaWEpqWlc1MFlXZGxJaXdpYVNJc0ltWnNiMjl5SWl3aVppSXNJbkFpTENKeElpd2lkQ0lzSW0xdlpDSXNJbWh6ZGxSdlVtZGlJaXdpYUhWbE1uSm5ZaUlzSW1oemJGUnZVbWRpSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKaWIzVnVaRUZzY0doaElpd2lhVzV3ZFhSVWIxSkhRaUlzSWw5dmNtbG5hVzVoYkVsdWNIVjBJaXdpWDNJaUxDSmZaeUlzSWw5aUlpd2lYMkVpTENKZmNtOTFibVJCSWl3aVgyWnZjbTFoZENJc0lsOW5jbUZrYVdWdWRGUjVjR1VpTENKbmNtRmthV1Z1ZEZSNWNHVWlMQ0pmYjJzaUxDSmZkR05mYVdRaUxDSnlaMkpVYjBoemJDSXNJbVFpTENKeVoySlViMGh6ZGlJc0luSm5ZbFJ2U0dWNElpd2lZV3hzYjNjelEyaGhjaUlzSW1obGVDSXNJbkJoWkRJaUxDSjBiMU4wY21sdVp5SXNJbU5vWVhKQmRDSXNJbXB2YVc0aUxDSnlaMkpoVkc5QmNtZGlTR1Y0SWl3aVkyOXVkbVZ5ZEVSbFkybHRZV3hVYjBobGVDSXNJbVJsYzJGMGRYSmhkR1VpTENKaGJXOTFiblFpTENKMGIwaHpiQ0lzSW1Oc1lXMXdNREVpTENKellYUjFjbUYwWlNJc0ltZHlaWGx6WTJGc1pTSXNJbXhwWjJoMFpXNGlMQ0ppY21sbmFIUmxiaUlzSW5SdlVtZGlJaXdpWkdGeWEyVnVJaXdpYzNCcGJpSXNJbWgxWlNJc0ltTnZiWEJzWlcxbGJuUWlMQ0owY21saFpDSXNJblJsZEhKaFpDSXNJbk53YkdsMFkyOXRjR3hsYldWdWRDSXNJbUZ1WVd4dloyOTFjeUlzSW5KbGMzVnNkSE1pTENKemJHbGpaWE1pTENKd1lYSjBJaXdpY21WMElpd2ljSFZ6YUNJc0ltMXZibTlqYUhKdmJXRjBhV01pTENKMGIwaHpkaUlzSW0xdlpHbG1hV05oZEdsdmJpSXNJbkJ5YjNSdmRIbHdaU0lzSW1selJHRnlheUlzSW1kbGRFSnlhV2RvZEc1bGMzTWlMQ0pwYzB4cFoyaDBJaXdpYVhOV1lXeHBaQ0lzSW1kbGRFOXlhV2RwYm1Gc1NXNXdkWFFpTENKblpYUkdiM0p0WVhRaUxDSm5aWFJCYkhCb1lTSXNJbWRsZEV4MWJXbHVZVzVqWlNJc0lsSnpVa2RDSWl3aVIzTlNSMElpTENKQ2MxSkhRaUlzSW5CdmR5SXNJbk5sZEVGc2NHaGhJaXdpZG1Gc2RXVWlMQ0owYjBoemRsTjBjbWx1WnlJc0luUnZTSE5zVTNSeWFXNW5JaXdpZEc5SVpYZ2lMQ0owYjBobGVGTjBjbWx1WnlJc0luUnZTR1Y0T0NJc0ltRnNiRzkzTkVOb1lYSWlMQ0p5WjJKaFZHOUlaWGdpTENKMGIwaGxlRGhUZEhKcGJtY2lMQ0owYjFKbllsTjBjbWx1WnlJc0luUnZVR1Z5WTJWdWRHRm5aVkpuWWlJc0luUnZVR1Z5WTJWdWRHRm5aVkpuWWxOMGNtbHVaeUlzSW5SdlRtRnRaU0lzSW1obGVFNWhiV1Z6SWl3aWRHOUdhV3gwWlhJaUxDSnpaV052Ym1SRGIyeHZjaUlzSW1obGVEaFRkSEpwYm1jaUxDSnpaV052Ym1SSVpYZzRVM1J5YVc1bklpd2labTl5YldGMFUyVjBJaXdpWm05eWJXRjBkR1ZrVTNSeWFXNW5JaXdpYUdGelFXeHdhR0VpTENKamJHOXVaU0lzSWw5aGNIQnNlVTF2WkdsbWFXTmhkR2x2YmlJc0ltWnVJaXdpWVhKbmN5SXNJbUZ3Y0d4NUlpd2lZMjl1WTJGMElpd2ljMnhwWTJVaUxDSmpZV3hzSWl3aVlYSm5kVzFsYm5Seklpd2lYMkZ3Y0d4NVEyOXRZbWx1WVhScGIyNGlMQ0ptY205dFVtRjBhVzhpTENKdVpYZERiMnh2Y2lJc0ltVnhkV0ZzY3lJc0ltTnZiRzl5TVNJc0ltTnZiRzl5TWlJc0ltMXBlQ0lzSW5KbllqRWlMQ0p5WjJJeUlpd2ljbVZoWkdGaWFXeHBkSGtpTENKak1TSXNJbU15SWl3aWFYTlNaV0ZrWVdKc1pTSXNJbmRqWVdjeUlpd2lkMk5oWnpKUVlYSnRjeUlzSW05MWRDSXNJbkJoY20xeklpd2liR1YyWld3aUxDSnphWHBsSWl3aWRHOVZjSEJsY2tOaGMyVWlMQ0oyWVd4cFpHRjBaVmREUVVjeVVHRnliWE1pTENKdGIzTjBVbVZoWkdGaWJHVWlMQ0ppWVhObFEyOXNiM0lpTENKamIyeHZja3hwYzNRaUxDSnBibU5zZFdSbFJtRnNiR0poWTJ0RGIyeHZjbk1pTENKaVpYTjBRMjlzYjNJaUxDSmlaWE4wVTJOdmNtVWlMQ0pzWlc1bmRHZ2lMQ0poYkdsalpXSnNkV1VpTENKaGJuUnBjWFZsZDJocGRHVWlMQ0poY1hWaElpd2lZWEYxWVcxaGNtbHVaU0lzSW1GNmRYSmxJaXdpWW1WcFoyVWlMQ0ppYVhOeGRXVWlMQ0ppYkdGamF5SXNJbUpzWVc1amFHVmtZV3h0YjI1a0lpd2lZbXgxWlNJc0ltSnNkV1YyYVc5c1pYUWlMQ0ppY205M2JpSXNJbUoxY214NWQyOXZaQ0lzSW1KMWNtNTBjMmxsYm01aElpd2lZMkZrWlhSaWJIVmxJaXdpWTJoaGNuUnlaWFZ6WlNJc0ltTm9iMk52YkdGMFpTSXNJbU52Y21Gc0lpd2lZMjl5Ym1ac2IzZGxjbUpzZFdVaUxDSmpiM0p1YzJsc2F5SXNJbU55YVcxemIyNGlMQ0pqZVdGdUlpd2laR0Z5YTJKc2RXVWlMQ0prWVhKclkzbGhiaUlzSW1SaGNtdG5iMnhrWlc1eWIyUWlMQ0prWVhKclozSmhlU0lzSW1SaGNtdG5jbVZsYmlJc0ltUmhjbXRuY21WNUlpd2laR0Z5YTJ0b1lXdHBJaXdpWkdGeWEyMWhaMlZ1ZEdFaUxDSmtZWEpyYjJ4cGRtVm5jbVZsYmlJc0ltUmhjbXR2Y21GdVoyVWlMQ0prWVhKcmIzSmphR2xrSWl3aVpHRnlhM0psWkNJc0ltUmhjbXR6WVd4dGIyNGlMQ0prWVhKcmMyVmhaM0psWlc0aUxDSmtZWEpyYzJ4aGRHVmliSFZsSWl3aVpHRnlhM05zWVhSbFozSmhlU0lzSW1SaGNtdHpiR0YwWldkeVpYa2lMQ0prWVhKcmRIVnljWFZ2YVhObElpd2laR0Z5YTNacGIyeGxkQ0lzSW1SbFpYQndhVzVySWl3aVpHVmxjSE5yZVdKc2RXVWlMQ0prYVcxbmNtRjVJaXdpWkdsdFozSmxlU0lzSW1SdlpHZGxjbUpzZFdVaUxDSm1hWEpsWW5KcFkyc2lMQ0ptYkc5eVlXeDNhR2wwWlNJc0ltWnZjbVZ6ZEdkeVpXVnVJaXdpWm5WamFITnBZU0lzSW1kaGFXNXpZbTl5YnlJc0ltZG9iM04wZDJocGRHVWlMQ0puYjJ4a0lpd2laMjlzWkdWdWNtOWtJaXdpWjNKaGVTSXNJbWR5WldWdUlpd2laM0psWlc1NVpXeHNiM2NpTENKbmNtVjVJaXdpYUc5dVpYbGtaWGNpTENKb2IzUndhVzVySWl3aWFXNWthV0Z1Y21Wa0lpd2lhVzVrYVdkdklpd2lhWFp2Y25raUxDSnJhR0ZyYVNJc0lteGhkbVZ1WkdWeUlpd2liR0YyWlc1a1pYSmliSFZ6YUNJc0lteGhkMjVuY21WbGJpSXNJbXhsYlc5dVkyaHBabVp2YmlJc0lteHBaMmgwWW14MVpTSXNJbXhwWjJoMFkyOXlZV3dpTENKc2FXZG9kR041WVc0aUxDSnNhV2RvZEdkdmJHUmxibkp2WkhsbGJHeHZkeUlzSW14cFoyaDBaM0poZVNJc0lteHBaMmgwWjNKbFpXNGlMQ0pzYVdkb2RHZHlaWGtpTENKc2FXZG9kSEJwYm1zaUxDSnNhV2RvZEhOaGJHMXZiaUlzSW14cFoyaDBjMlZoWjNKbFpXNGlMQ0pzYVdkb2RITnJlV0pzZFdVaUxDSnNhV2RvZEhOc1lYUmxaM0poZVNJc0lteHBaMmgwYzJ4aGRHVm5jbVY1SWl3aWJHbG5hSFJ6ZEdWbGJHSnNkV1VpTENKc2FXZG9kSGxsYkd4dmR5SXNJbXhwYldVaUxDSnNhVzFsWjNKbFpXNGlMQ0pzYVc1bGJpSXNJbTFoWjJWdWRHRWlMQ0p0WVhKdmIyNGlMQ0p0WldScGRXMWhjWFZoYldGeWFXNWxJaXdpYldWa2FYVnRZbXgxWlNJc0ltMWxaR2wxYlc5eVkyaHBaQ0lzSW0xbFpHbDFiWEIxY25Cc1pTSXNJbTFsWkdsMWJYTmxZV2R5WldWdUlpd2liV1ZrYVhWdGMyeGhkR1ZpYkhWbElpd2liV1ZrYVhWdGMzQnlhVzVuWjNKbFpXNGlMQ0p0WldScGRXMTBkWEp4ZFc5cGMyVWlMQ0p0WldScGRXMTJhVzlzWlhSeVpXUWlMQ0p0YVdSdWFXZG9kR0pzZFdVaUxDSnRhVzUwWTNKbFlXMGlMQ0p0YVhOMGVYSnZjMlVpTENKdGIyTmpZWE5wYmlJc0ltNWhkbUZxYjNkb2FYUmxJaXdpYm1GMmVTSXNJbTlzWkd4aFkyVWlMQ0p2YkdsMlpTSXNJbTlzYVhabFpISmhZaUlzSW05eVlXNW5aU0lzSW05eVlXNW5aWEpsWkNJc0ltOXlZMmhwWkNJc0luQmhiR1ZuYjJ4a1pXNXliMlFpTENKd1lXeGxaM0psWlc0aUxDSndZV3hsZEhWeWNYVnZhWE5sSWl3aWNHRnNaWFpwYjJ4bGRISmxaQ0lzSW5CaGNHRjVZWGRvYVhBaUxDSndaV0ZqYUhCMVptWWlMQ0p3WlhKMUlpd2ljR2x1YXlJc0luQnNkVzBpTENKd2IzZGtaWEppYkhWbElpd2ljSFZ5Y0d4bElpd2ljbVZpWldOallYQjFjbkJzWlNJc0luSmxaQ0lzSW5KdmMzbGljbTkzYmlJc0luSnZlV0ZzWW14MVpTSXNJbk5oWkdSc1pXSnliM2R1SWl3aWMyRnNiVzl1SWl3aWMyRnVaSGxpY205M2JpSXNJbk5sWVdkeVpXVnVJaXdpYzJWaGMyaGxiR3dpTENKemFXVnVibUVpTENKemFXeDJaWElpTENKemEzbGliSFZsSWl3aWMyeGhkR1ZpYkhWbElpd2ljMnhoZEdWbmNtRjVJaXdpYzJ4aGRHVm5jbVY1SWl3aWMyNXZkeUlzSW5Od2NtbHVaMmR5WldWdUlpd2ljM1JsWld4aWJIVmxJaXdpZEdGdUlpd2lkR1ZoYkNJc0luUm9hWE4wYkdVaUxDSjBiMjFoZEc4aUxDSjBkWEp4ZFc5cGMyVWlMQ0oyYVc5c1pYUWlMQ0ozYUdWaGRDSXNJbmRvYVhSbElpd2lkMmhwZEdWemJXOXJaU0lzSW5sbGJHeHZkeUlzSW5sbGJHeHZkMmR5WldWdUlpd2lieUlzSW1ac2FYQndaV1FpTENKbWJHbHdJaXdpY0dGeWMyVkdiRzloZENJc0ltbHpUbUZPSWl3aWJpSXNJbWx1WkdWNFQyWWlMQ0pwYzA5dVpWQnZhVzUwV21WeWJ5SXNJbkJ5YjJObGMzTlFaWEpqWlc1MElpd2lhWE5RWlhKalpXNTBZV2RsSWl3aWNHRnljMlZKYm5RaUxDSmhZbk1pTENKMllXd2lMQ0pqSWl3aVExTlRYMVZPU1ZRaUxDSlFSVkpOU1ZOVFNWWkZYMDFCVkVOSU15SXNJbEJGVWsxSlUxTkpWa1ZmVFVGVVEwZzBJaXdpVW1WblJYaHdJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1SbFptbHVaU0lzSW1GdFpDSXNJbmRwYm1SdmR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtOQlNVRXNVMEZCVlVFc1IwRkZWaXhKUVVGSlF5eEZRVUZYTEU5QlExaERMRVZCUVZrc1QwRkRXa01zUlVGQll5eEZRVU5rUXl4RlFVRlpTaXhGUVVGTFN5eE5RVU5xUWtNc1JVRkJWVTRzUlVGQlMwOHNTVUZEWmtNc1JVRkJWVklzUlVGQlMxTXNTVUZEWmtNc1JVRkJZVllzUlVGQlMxY3NUMEZGZEVJc1UwRkJVME1zUlVGQlYwTXNSVUZCVDBNc1IwRk5ka0lzUjBGS1FVUXNSVUZCVVN4SFFVRnJRaXhIUVVNeFFrTXNSVUZCVDBFc1RVRkhTRVFzWVVGQmFVSkVMRVZCUTJ4Q0xFOUJRVTlETEVWQlIxWXNTMEZCVFVVc1owSkJRV2RDU0N4SFFVTnNRaXhQUVVGUExFbEJRVWxCTEVWQlFWVkRMRVZCUVU5RExFZEJSMmhETEVsQlFVbEZMRVZCYjFKU0xGTkJRVzlDU0N4SFFVVm9RaXhKUVVGSlJ5eEhRVUZSUXl4RlFVRkhMRVZCUVVkRExFVkJRVWNzUlVGQlIwTXNSVUZCUnl4SFFVTjJRa01zUlVGQlNTeEZRVU5LUXl4RlFVRkpMRXRCUTBwRExFVkJRVWtzUzBGRFNrTXNSVUZCU1N4TFFVTktReXhIUVVGTExFVkJRMHhETEVkQlFWTXNSVUZGVHl4cFFrRkJWRm9zU1VGRFVFRXNSVUY1ZDBKU0xGTkJRVFpDUVN4SFFVVjZRa0VzUlVGQlVVRXNSVUZCVFdFc1VVRkJVWHBDTEVWQlFWTXNTVUZCU1hsQ0xGRkJRVkY0UWl4RlFVRlhMRWxCUVVsNVFpeGpRVU14UkN4SlFXRkpReXhGUVdKQlF5eEhRVUZSTEVWQlExb3NSMEZCU1VNc1JVRkJUV3BDTEVkQlEwNUJMRVZCUVZGcFFpeEZRVUZOYWtJc1IwRkRaR2RDTEVkQlFWRXNUMEZGVUN4SFFVRmhMR1ZCUVZSb1FpeEZRVU5NTEU5QlFWTkpMRVZCUVVjc1JVRkJSME1zUlVGQlJ5eEZRVUZIUXl4RlFVRkhMRVZCUVVkRExFVkJRVWNzUlVGQlIwc3NUMEZCVVN4UlFWRTNReXhIUVVGTFJ5eEZRVUZSUnl4RlFVRlRaaXhKUVVGSlowSXNTMEZCUzI1Q0xFZEJRek5DTEU5QlFWTkpMRVZCUVVkWExFVkJRVTBzUjBGQlNWWXNSVUZCUjFVc1JVRkJUU3hIUVVGSlZDeEZRVUZIVXl4RlFVRk5MRWxCUldoRUxFZEJRVXRCTEVWQlFWRkhMRVZCUVZORkxFdEJRVXRFTEV0QlFVdHVRaXhIUVVNMVFpeFBRVUZUU1N4RlFVRkhWeXhGUVVGTkxFZEJRVWxXTEVWQlFVZFZMRVZCUVUwc1IwRkJTVlFzUlVGQlIxTXNSVUZCVFN4SFFVRkpVaXhGUVVGSFVTeEZRVUZOTEVsQlJUZEVMRWRCUVV0QkxFVkJRVkZITEVWQlFWTkhMRWxCUVVsR0xFdEJRVXR1UWl4SFFVTXpRaXhQUVVGVGMwSXNSVUZCUjFBc1JVRkJUU3hIUVVGSlVDeEZRVUZIVHl4RlFVRk5MRWRCUVVsTUxFVkJRVWRMTEVWQlFVMHNTVUZGYUVRc1IwRkJTMEVzUlVGQlVVY3NSVUZCVTBzc1MwRkJTMG9zUzBGQlMyNUNMRWRCUXpWQ0xFOUJRVk56UWl4RlFVRkhVQ3hGUVVGTkxFZEJRVWxRTEVWQlFVZFBMRVZCUVUwc1IwRkJTVXdzUlVGQlIwc3NSVUZCVFN4SFFVRkpVaXhGUVVGSFVTeEZRVUZOTEVsQlJUZEVMRWRCUVV0QkxFVkJRVkZITEVWQlFWTk5MRWxCUVVsTUxFdEJRVXR1UWl4SFFVTXpRaXhQUVVGVGMwSXNSVUZCUjFBc1JVRkJUU3hIUVVGSlVDeEZRVUZIVHl4RlFVRk5MRWRCUVVsT0xFVkJRVWROTEVWQlFVMHNTVUZGYUVRc1IwRkJTMEVzUlVGQlVVY3NSVUZCVTA4c1MwRkJTMDRzUzBGQlMyNUNMRWRCUXpWQ0xFOUJRVk56UWl4RlFVRkhVQ3hGUVVGTkxFZEJRVWxRTEVWQlFVZFBMRVZCUVUwc1IwRkJTVTRzUlVGQlIwMHNSVUZCVFN4SFFVRkpVaXhGUVVGSFVTeEZRVUZOTEVsQlJUZEVMRWRCUVV0QkxFVkJRVkZITEVWQlFWTlJMRXRCUVV0UUxFdEJRVXR1UWl4SFFVTTFRaXhQUVVOSlNTeEZRVUZIZFVJc1JVRkJaMEphTEVWQlFVMHNTVUZEZWtKV0xFVkJRVWR6UWl4RlFVRm5RbG9zUlVGQlRTeEpRVU42UWxRc1JVRkJSM0ZDTEVWQlFXZENXaXhGUVVGTkxFbEJRM3BDVWl4RlFVRkhjVUlzUlVGQmIwSmlMRVZCUVUwc1NVRkROMEpJTEU5QlFWRkpMRVZCUVZFc1QwRkJVeXhSUVVkcVF5eEhRVUZMUkN4RlFVRlJSeXhGUVVGVFZ5eExRVUZMVml4TFFVRkxia0lzUjBGRE5VSXNUMEZEU1Vrc1JVRkJSM1ZDTEVWQlFXZENXaXhGUVVGTkxFbEJRM3BDVml4RlFVRkhjMElzUlVGQlowSmFMRVZCUVUwc1NVRkRla0pVTEVWQlFVZHhRaXhGUVVGblFsb3NSVUZCVFN4SlFVTjZRa2dzVDBGQlVVa3NSVUZCVVN4UFFVRlRMRTlCUjJwRExFZEJRVXRFTEVWQlFWRkhMRVZCUVZOWkxFdEJRVXRZTEV0QlFVdHVRaXhIUVVNMVFpeFBRVU5KU1N4RlFVRkhkVUlzUlVGQlowSmFMRVZCUVUwc1IwRkJTeXhIUVVGTFFTeEZRVUZOTEVsQlEzcERWaXhGUVVGSGMwSXNSVUZCWjBKYUxFVkJRVTBzUjBGQlN5eEhRVUZMUVN4RlFVRk5MRWxCUTNwRFZDeEZRVUZIY1VJc1JVRkJaMEphTEVWQlFVMHNSMEZCU3l4SFFVRkxRU3hGUVVGTkxFbEJRM3BEVWl4RlFVRkhjVUlzUlVGQmIwSmlMRVZCUVUwc1IwRkJTeXhIUVVGTFFTeEZRVUZOTEVsQlF6ZERTQ3hQUVVGUlNTeEZRVUZSTEU5QlFWTXNVVUZIYWtNc1IwRkJTMFFzUlVGQlVVY3NSVUZCVTJFc1MwRkJTMW9zUzBGQlMyNUNMRWRCUXpWQ0xFOUJRMGxKTEVWQlFVZDFRaXhGUVVGblFsb3NSVUZCVFN4SFFVRkxMRWRCUVV0QkxFVkJRVTBzU1VGRGVrTldMRVZCUVVkelFpeEZRVUZuUWxvc1JVRkJUU3hIUVVGTExFZEJRVXRCTEVWQlFVMHNTVUZEZWtOVUxFVkJRVWR4UWl4RlFVRm5RbG9zUlVGQlRTeEhRVUZMTEVkQlFVdEJMRVZCUVUwc1NVRkRla05JTEU5QlFWRkpMRVZCUVZFc1QwRkJVeXhQUVVscVF5eFBRVUZQTEVWQkx6QkNTMmRDTEVOQlFXOUNhRU1zU1VGSFdpeHBRa0ZCVkVFc1NVRkRTR2xETEVWQlFXVnFReXhGUVVGTlNTeEpRVUZOTmtJc1JVRkJaV3BETEVWQlFVMUxMRWxCUVUwMFFpeEZRVUZsYWtNc1JVRkJUVTBzU1VGcFJISkZSaXhGUVdoRVUwb3NSVUZCVFVrc1JVRm5SRnBETEVWQmFFUmxUQ3hGUVVGTlN5eEZRV2RFYkVKRExFVkJhRVJ4UWs0c1JVRkJUVTBzUlVGQmRrTklMRWRCYTBSS1F5eEZRVUZ4UWl4SlFVRnNRamhDTEVWQlFWRTVRaXhGUVVGSExFdEJRMlJETEVWQlFYRkNMRWxCUVd4Q05rSXNSVUZCVVRkQ0xFVkJRVWNzUzBGRFpFTXNSVUZCY1VJc1NVRkJiRUkwUWl4RlFVRlJOVUlzUlVGQlJ5eE5RVzVFVmtzc1IwRkJTeXhGUVVOTVF5eEZRVUYzUXl4TlFVRXZRblZDTEU5QlFVOXVReXhGUVVGTlNTeEhRVUZIWjBNc1VVRkJVU3hIUVVGaExFOUJRVk1zVDBGRmJFUklMRVZCUVdWcVF5eEZRVUZOYzBJc1NVRkJUVmNzUlVGQlpXcERMRVZCUVUxUkxFbEJRVTE1UWl4RlFVRmxha01zUlVGQlRWTXNTVUZEYUVaRUxFVkJRVWsyUWl4RlFVRnZRbkpETEVWQlFVMVJMRWRCUXpsQ1F5eEZRVUZKTkVJc1JVRkJiMEp5UXl4RlFVRk5VeXhIUVVNNVFrNHNSVUZ2U2xnc1UwRkJhMEp0UWl4RlFVRkhaQ3hGUVVGSFF5eEhRVVZ5UW1Fc1JVRkJjMElzUlVGQmJFSlpMRVZCUVZGYUxFVkJRVWNzUzBGRFptUXNSVUZCU1RCQ0xFVkJRVkV4UWl4RlFVRkhMRXRCUTJaRExFVkJRVWw1UWl4RlFVRlJla0lzUlVGQlJ5eExRVVZtTEVsQlFVazJRaXhGUVVGSmJrUXNSVUZCUzI5RUxFMUJRVTFxUWl4SFFVTm1hMElzUlVGQlNXeENMRVZCUVVsblFpeEZRVU5TUnl4RlFVRkphRU1zUjBGQlN5eEZRVUZKUkN4SFFVTmlhME1zUlVGQlNXcERMRWRCUVVzc1JVRkJTU3RDTEVWQlFVbG9ReXhIUVVOcVFtMURMRVZCUVVsc1F5eEhRVUZMTEVkQlFVc3NSVUZCU1N0Q0xFZEJRVXRvUXl4SFFVTjJRbTlETEVWQlFVMU9MRVZCUVVrc1JVRkxaQ3hQUVVGVGJFTXNSVUZCVHl4TFFVcFFTeXhGUVVGSGFVTXNSVUZCUjBRc1JVRkJSMEVzUlVGQlIwVXNSVUZCUjJ4RExFZEJRVWR0UXl4SFFVbE9ka01zUlVGQlR5eExRVWh1UW5ORExFVkJRVWRzUXl4RlFVRkhRU3hGUVVGSGFVTXNSVUZCUjBRc1JVRkJSMEVzUjBGQlIwY3NSMEZIVFhSRExFVkJRVThzUzBGR0wwSnRReXhGUVVGSFFTeEZRVUZIUlN4RlFVRkhiRU1zUlVGQlIwRXNSVUZCUjJsRExFZEJRVWRGTEVsQmJFdGlReXhEUVVGVE4wTXNSVUZCVFhOQ0xFVkJRVWRrTEVWQlFVZERMRWRCUXpOQ1JTeEhRVUZMTEVWQlEweERMRVZCUVZNc1QwRkZTbkZDTEVWQlFXVnFReXhGUVVGTmMwSXNTVUZCVFZjc1JVRkJaV3BETEVWQlFVMVJMRWxCUVUxNVFpeEZRVUZsYWtNc1JVRkJUVlVzUzBGRGFFWkdMRVZCUVVrMlFpeEZRVUZ2UW5KRExFVkJRVTFSTEVkQlF6bENSU3hGUVVGSk1rSXNSVUZCYjBKeVF5eEZRVUZOVlN4SFFVTTVRbEFzUlVFMlJWb3NVMEZCYTBKdFFpeEZRVUZIWkN4RlFVRkhSU3hIUVVOd1FpeEpRVUZKVGl4RlFVRkhReXhGUVVGSFF5eEZRVTFXTEZOQlFWTjNReXhGUVVGUlRDeEZRVUZIUXl4RlFVRkhReXhIUVVkdVFpeFBRVVpIUVN4RlFVRkpMRWxCUVVkQkxFZEJRVXNzUjBGRFdrRXNSVUZCU1N4SlFVRkhRU3hIUVVGTExFZEJRMXBCTEVWQlFVa3NSVUZCUlN4RlFVRlZSaXhGUVVGakxFZEJRVlJETEVWQlFVbEVMRWRCUVZORkxFVkJRMnhEUVN4RlFVRkpMRWRCUVZsRUxFVkJRMmhDUXl4RlFVRkpMRVZCUVVVc1JVRkJWVVlzUjBGQlMwTXNSVUZCU1VRc1NVRkJUU3hGUVVGRkxFVkJRVWxGTEVkQlFVc3NSVUZEZEVOR0xFVkJSMWdzUjBGaVFXNUNMRVZCUVVsWkxFVkJRVkZhTEVWQlFVY3NTMEZEWm1Rc1JVRkJTVEJDTEVWQlFWRXhRaXhGUVVGSExFdEJRMlpGTEVWQlFVbDNRaXhGUVVGUmVFSXNSVUZCUnl4TFFWZE9MRWxCUVU1R0xFVkJRME5LTEVWQlFVbERMRVZCUVVsRExFVkJRVWxKTEUxQlJWZ3NRMEZEUkN4SlFVRkpaME1zUlVGQlNXaERMRVZCUVVrc1IwRkJUVUVzUjBGQlN5eEZRVUZKUml4SFFVRkxSU3hGUVVGSlJpeEZRVUZKUlN4RlFVRkpSaXhGUVVONFEybERMRVZCUVVrc1JVRkJTUzlDTEVWQlFVbG5ReXhGUVVOb1FuUkRMRVZCUVVrd1F5eEZRVUZSVEN4RlFVRkhReXhGUVVGSGNFSXNSVUZCU1N4RlFVRkZMRWRCUTNoQ2FrSXNSVUZCU1hsRExFVkJRVkZNTEVWQlFVZERMRVZCUVVkd1FpeEhRVU5zUW1oQ0xFVkJRVWwzUXl4RlFVRlJUQ3hGUVVGSFF5eEZRVUZIY0VJc1JVRkJTU3hGUVVGRkxFZEJSelZDTEU5QlFWTnNRaXhGUVVGUExFbEJRVXBCTEVWQlFWTkRMRVZCUVU4c1NVRkJTa0VzUlVGQlUwTXNSVUZCVHl4SlFVRktRU3hIUVhoSGRFSjVReXhEUVVGVEwwTXNSVUZCVFhOQ0xFVkJRVWRrTEVWQlFVZEZMRWRCUXpOQ1F5eEhRVUZMTEVWQlEweERMRVZCUVZNc1QwRkhWRm9zUlVGQlRXZEVMR1ZCUVdVc1QwRkRja0o2UXl4RlFVRkpVQ3hGUVVGTlR5eEpRVFJDZEVJc1NVRkJhMEpJTEVWQlFVZERMRVZCUVVkRExFVkJkRUp3UWl4UFFVWkJReXhGUVVGSk1FTXNSVUZCVnpGRExFbEJSMWhKTEVkQlFVbEJMRVZCUTBwRExFOUJRVkZhTEVWQlFVMVpMRkZCUVZWQkxFVkJRM2hDVWl4RlFVRkhXQ3hGUVVGUkxFbEJRVXRGTEVWQlFWRlJMRVZCUVVsRExFVkJRVWNzU1VGREwwSkRMRVZCUVVkYUxFVkJRVkVzU1VGQlMwVXNSVUZCVVZFc1JVRkJTVVVzUlVGQlJ5eEpRVU12UWtNc1JVRkJSMklzUlVGQlVTeEpRVUZMUlN4RlFVRlJVU3hGUVVGSlJ5eEZRVUZITEVsQlF5OUNReXhGUVVGSFFTeEhRWEJWUnpKRExFTkJRVmRzUkN4SFFVTnlRa1VzUzBGQlMybEVMR1ZCUVdsQ2JrUXNSVUZEZEVKRkxFdEJRVXRyUkN4SFFVRkxha1FzUlVGQlNVTXNSVUZEWkVZc1MwRkJTMjFFTEVkQlFVdHNSQ3hGUVVGSlJTeEZRVU5rU0N4TFFVRkxiMFFzUjBGQlMyNUVMRVZCUVVsSExFVkJRMlJLTEV0QlFVdHhSQ3hIUVVGTGNFUXNSVUZCU1Vrc1JVRkRaRXdzUzBGQlMzTkVMRkZCUVZWcVJTeEZRVUZWTEVsQlFVbFhMRXRCUVV0eFJDeEpRVUZOTEVsQlEzaERja1FzUzBGQlMzVkVMRkZCUVZWNFJDeEZRVUZMVnl4UlFVRlZWQ3hGUVVGSlV5eFBRVU5zUTFZc1MwRkJTM2RFTEdOQlFXZENla1FzUlVGQlN6QkVMR0ZCVFhSQ2VrUXNTMEZCUzJ0RUxFZEJRVXNzU1VGQlMyeEVMRXRCUVV0clJDeEhRVUZMTjBRc1JVRkJWVmNzUzBGQlMydEVMRXRCUTNoRGJFUXNTMEZCUzIxRUxFZEJRVXNzU1VGQlMyNUVMRXRCUVV0dFJDeEhRVUZMT1VRc1JVRkJWVmNzUzBGQlMyMUVMRXRCUTNoRGJrUXNTMEZCUzI5RUxFZEJRVXNzU1VGQlMzQkVMRXRCUVV0dlJDeEhRVUZMTDBRc1JVRkJWVmNzUzBGQlMyOUVMRXRCUlRWRGNFUXNTMEZCU3pCRUxFbEJRVTE2UkN4RlFVRkpVU3hIUVVObVZDeExRVUZMTWtRc1QwRkJVM1pGTEVsQk5sVnNRaXhUUVVGVGQwVXNSVUZCVXpGRUxFVkJRVWRETEVWQlFVZERMRWRCUlhCQ1JpeEZRVUZKT0VJc1JVRkJVVGxDTEVWQlFVY3NTMEZEWmtNc1JVRkJTVFpDTEVWQlFWRTNRaXhGUVVGSExFdEJRMlpETEVWQlFVazBRaXhGUVVGUk5VSXNSVUZCUnl4TFFVVm1MRWxCUTBsblFpeEZRVUZIWkN4RlFVUklXaXhGUVVGTlJDeEZRVUZSVXl4RlFVRkhReXhGUVVGSFF5eEhRVUZKV2l4RlFVRk5SQ3hGUVVGUlZ5eEZRVUZIUXl4RlFVRkhReXhIUVVOMFEwa3NSMEZCUzJRc1JVRkJUVVlzUjBGQlR5eEZRVVUxUWl4SFFVRkhSU3hIUVVGUFJpeEZRVU5PTkVJc1JVRkJTV1FzUlVGQlNTeE5RVVZRTEVOQlEwUXNTVUZCU1hWRUxFVkJRVWx1UlN4RlFVRk5SaXhGUVVWa0xFOUJSRUZqTEVWQlFVbEZMRVZCUVVrc1IwRkJUWEZFTEVkQlFVc3NSVUZCU1c1RkxFVkJRVTFHTEVkQlFVOXhSU3hIUVVGTGJrVXNSVUZCVFVZc1IwRkRlRU5GTEVkQlEwZ3NTMEZCUzFFc1JVRkJSMnRDTEVkQlFVdHFRaXhGUVVGSlF5eEhRVUZMZVVRc1IwRkJTekZFTEVWQlFVbERMRVZCUVVrc1JVRkJTU3hIUVVGSkxFMUJRek5ETEV0QlFVdEVMRVZCUVVkcFFpeEhRVUZMYUVJc1JVRkJTVVlzUjBGQlN6SkVMRVZCUVVrc1JVRkJSeXhOUVVNM1FpeExRVUZMZWtRc1JVRkJSMmRDTEVkQlFVdHNRaXhGUVVGSlF5eEhRVUZMTUVRc1JVRkJTU3hGUVVjNVFucERMRWRCUVVzc1JVRkhWQ3hQUVVGVFFTeEZRVUZIUVN4RlFVRkhaQ3hGUVVGSFFTeEZRVUZIUlN4RlFVRkhRU3hIUVhsRE5VSXNVMEZCVTNORUxFVkJRVk0xUkN4RlFVRkhReXhGUVVGSFF5eEhRVVZ3UWtZc1JVRkJTVGhDTEVWQlFWRTVRaXhGUVVGSExFdEJRMlpETEVWQlFVazJRaXhGUVVGUk4wSXNSVUZCUnl4TFFVTm1ReXhGUVVGSk5FSXNSVUZCVVRWQ0xFVkJRVWNzUzBGRlppeEpRVU5KWjBJc1JVRkJSMlFzUlVGRVNGb3NSVUZCVFVRc1JVRkJVVk1zUlVGQlIwTXNSVUZCUjBNc1IwRkJTVm9zUlVGQlRVUXNSVUZCVVZjc1JVRkJSME1zUlVGQlIwTXNSMEZEZEVOSExFVkJRVWxpTEVWQlJWWnRSU3hGUVVGSmJrVXNSVUZCVFVZc1JVRkhaQ3hIUVVaQll5eEZRVUZaTEVsQlFWSmFMRVZCUVZrc1JVRkJTVzFGTEVWQlFVbHVSU3hGUVVWeVFrRXNSMEZCVDBZc1JVRkRUalJDTEVWQlFVa3NUVUZGU0N4RFFVTkVMRTlCUVU4eFFpeEhRVU5JTEV0QlFVdFJMRVZCUVVkclFpeEhRVUZMYWtJc1JVRkJTVU1zUjBGQlMzbEVMRWRCUVVzeFJDeEZRVUZKUXl4RlFVRkpMRVZCUVVrc1IwRkJTU3hOUVVNelF5eExRVUZMUkN4RlFVRkhhVUlzUjBGQlMyaENMRVZCUVVsR0xFZEJRVXN5UkN4RlFVRkpMRVZCUVVjc1RVRkROMElzUzBGQlMzcEVMRVZCUVVkblFpeEhRVUZMYkVJc1JVRkJTVU1zUjBGQlN6QkVMRVZCUVVrc1JVRkZPVUo2UXl4SFFVRkxMRVZCUlZRc1QwRkJVMEVzUlVGQlIwRXNSVUZCUjJRc1JVRkJSMEVzUlVGQlIwTXNSVUZCUjBFc1IwRTRRalZDTEZOQlFWTjNSQ3hGUVVGVE4wUXNSVUZCUjBNc1JVRkJSME1zUlVGQlJ6UkVMRWRCUlhaQ0xFbEJRVWxETEVkQlEwRkRMRVZCUVVzM1JTeEZRVUZWWVN4SFFVRkhhVVVzVTBGQlV5eExRVU16UWtRc1JVRkJTemRGTEVWQlFWVmpMRWRCUVVkblJTeFRRVUZUTEV0QlF6TkNSQ3hGUVVGTE4wVXNSVUZCVldVc1IwRkJSeXRFTEZOQlFWTXNUVUZKTDBJc1QwRkJTVWdzUjBGQlkwTXNSVUZCU1N4SFFVRkhSeXhQUVVGUExFbEJRVTFJTEVWQlFVa3NSMEZCUjBjc1QwRkJUeXhKUVVGTlNDeEZRVUZKTEVkQlFVZEhMRTlCUVU4c1NVRkJUVWdzUlVGQlNTeEhRVUZIUnl4UFFVRlBMRWxCUVUxSUxFVkJRVWtzUjBGQlIwY3NUMEZCVHl4SlFVRk5TQ3hGUVVGSkxFZEJRVWRITEU5QlFVOHNSMEZEZWtoSUxFVkJRVWtzUjBGQlIwY3NUMEZCVHl4SFFVRkxTQ3hGUVVGSkxFZEJRVWRITEU5QlFVOHNSMEZCUzBnc1JVRkJTU3hIUVVGSFJ5eFBRVUZQTEVkQlIzaEVTQ3hGUVVGSlNTeExRVUZMTEVsQk1rSndRaXhUUVVGVFF5eEZRVUZqY0VVc1JVRkJSME1zUlVGQlIwTXNSVUZCUjBNc1IwRlROVUlzVDBGT1NUWkVMRVZCUVV0TExFVkJRVzlDYkVVc1NVRkRla0kyUkN4RlFVRkxOMFVzUlVGQlZXRXNSMEZCUjJsRkxGTkJRVk1zUzBGRE0wSkVMRVZCUVVzM1JTeEZRVUZWWXl4SFFVRkhaMFVzVTBGQlV5eExRVU16UWtRc1JVRkJTemRGTEVWQlFWVmxMRWRCUVVjclJDeFRRVUZUTEUxQlIzQkNSU3hMUVVGTExFbEJkMEp3UWl4VFFVRlRSeXhGUVVGWE1VVXNSVUZCVHpKRkxFZEJRM1pDUVN4RlFVRnhRaXhKUVVGWVFTeEZRVUZuUWl4RlFVRkxRU3hIUVVGVkxFZEJRM3BETEVsQlFVbDBSQ3hGUVVGTmRFSXNSVUZCVlVNc1IwRkJUelJGTEZGQlJ6TkNMRTlCUmtGMlJDeEZRVUZKWWl4SFFVRkxiVVVzUlVGQlV5eEpRVU5zUW5SRUxFVkJRVWxpTEVWQlFVbHhSU3hGUVVGUmVFUXNSVUZCU1dJc1IwRkRZbFFzUlVGQlZYTkNMRWRCUjNKQ0xGTkJRVk41UkN4RlFVRlRPVVVzUlVGQlR6SkZMRWRCUTNKQ1FTeEZRVUZ4UWl4SlFVRllRU3hGUVVGblFpeEZRVUZMUVN4SFFVRlZMRWRCUTNwRExFbEJRVWwwUkN4RlFVRk5kRUlzUlVGQlZVTXNSMEZCVHpSRkxGRkJSek5DTEU5QlJrRjJSQ3hGUVVGSllpeEhRVUZMYlVVc1JVRkJVeXhKUVVOc1FuUkVMRVZCUVVsaUxFVkJRVWx4UlN4RlFVRlJlRVFzUlVGQlNXSXNSMEZEWWxRc1JVRkJWWE5DTEVkQlIzSkNMRk5CUVZNd1JDeEZRVUZWTDBVc1IwRkRaaXhQUVVGUFJDeEZRVUZWUXl4SFFVRlBNRVVzVjBGQlZ5eExRVWQyUXl4VFFVRlRUU3hGUVVGVGFFWXNSVUZCVHpKRkxFZEJRM0pDUVN4RlFVRnhRaXhKUVVGWVFTeEZRVUZuUWl4RlFVRkxRU3hIUVVGVkxFZEJRM3BETEVsQlFVbDBSQ3hGUVVGTmRFSXNSVUZCVlVNc1IwRkJUelJGTEZGQlJ6TkNMRTlCUmtGMlJDeEZRVUZKV0N4SFFVRkxhVVVzUlVGQlV5eEpRVU5zUW5SRUxFVkJRVWxZTEVWQlFVbHRSU3hGUVVGUmVFUXNSVUZCU1Znc1IwRkRZbGdzUlVGQlZYTkNMRWRCUjNKQ0xGTkJRVk0wUkN4RlFVRlRha1lzUlVGQlR6SkZMRWRCUTNKQ1FTeEZRVUZ4UWl4SlFVRllRU3hGUVVGblFpeEZRVUZMUVN4SFFVRlZMRWRCUTNwRExFbEJRVWw0UlN4RlFVRk5TaXhGUVVGVlF5eEhRVUZQYTBZc1VVRkpNMElzVDBGSVFTOUZMRVZCUVVsRExFVkJRVWxVTEVWQlFWRXNSVUZCUjBZc1JVRkJVU3hKUVVGTFZTeEZRVUZKUXl4RlFVRkpZaXhIUVVGdFFtOUdMRVZCUVZNc1NVRkJiRUlzVDBGRGJFUjRSU3hGUVVGSlJTeEZRVUZKVml4RlFVRlJMRVZCUVVkR0xFVkJRVkVzU1VGQlMxVXNSVUZCU1VVc1JVRkJTV1FzUjBGQmJVSnZSaXhGUVVGVExFbEJRV3hDTEU5QlEyeEVlRVVzUlVGQlNVY3NSVUZCU1Znc1JVRkJVU3hGUVVGSFJpeEZRVUZSTEVsQlFVdFZMRVZCUVVsSExFVkJRVWxtTEVkQlFXMUNiMFlzUlVGQlV5eEpRVUZzUWl4UFFVTXpRelZGTEVWQlFWVkpMRWRCUjNKQ0xGTkJRVk5uUml4RlFVRlJia1lzUlVGQlR6SkZMRWRCUTNCQ1FTeEZRVUZ4UWl4SlFVRllRU3hGUVVGblFpeEZRVUZMUVN4SFFVRlZMRWRCUTNwRExFbEJRVWwwUkN4RlFVRk5kRUlzUlVGQlZVTXNSMEZCVHpSRkxGRkJSek5DTEU5QlJrRjJSQ3hGUVVGSldDeEhRVUZMYVVVc1JVRkJVeXhKUVVOc1FuUkVMRVZCUVVsWUxFVkJRVWx0UlN4RlFVRlJlRVFzUlVGQlNWZ3NSMEZEWWxnc1JVRkJWWE5DTEVkQlMzSkNMRk5CUVZNclJDeEZRVUZMY0VZc1JVRkJUekpGTEVkQlEycENMRWxCUVVsMFJDeEZRVUZOZEVJc1JVRkJWVU1zUjBGQlR6UkZMRkZCUTNaQ1V5eEhRVUZQYUVVc1JVRkJTVU1zUlVGQlNYRkVMRWRCUVZVc1NVRkZOMElzVDBGRVFYUkVMRVZCUVVsRExFVkJRVWtyUkN4RlFVRk5MRVZCUVVrc1NVRkJUVUVzUlVGQlRVRXNSVUZEZGtKMFJpeEZRVUZWYzBJc1IwRlJja0lzVTBGQlUybEZMRVZCUVZkMFJpeEhRVU5vUWl4SlFVRkpjVUlzUlVGQlRYUkNMRVZCUVZWRExFZEJRVTgwUlN4UlFVVXpRaXhQUVVSQmRrUXNSVUZCU1VNc1IwRkJTMFFzUlVGQlNVTXNSVUZCU1N4TFFVRlBMRWxCUTJwQ2RrSXNSVUZCVlhOQ0xFZEJSM0pDTEZOQlFWTnJSU3hGUVVGTmRrWXNSMEZEV0N4SlFVRkpjVUlzUlVGQlRYUkNMRVZCUVZWRExFZEJRVTgwUlN4UlFVTjJRblJFTEVWQlFVbEVMRVZCUVVsRExFVkJRMW9zVDBGRFNYWkNMRVZCUVZWRExFZEJRMVpFTEVkQlFWbDFRaXhIUVVGSlFTeEZRVUZKTEV0QlFVOHNTVUZCUzJRc1JVRkJSMkVzUlVGQlNXSXNSVUZCUjBVc1JVRkJSMWNzUlVGQlNWZ3NTVUZEYWtSWUxFZEJRVmwxUWl4SFFVRkpRU3hGUVVGSkxFdEJRVThzU1VGQlMyUXNSVUZCUjJFc1JVRkJTV0lzUlVGQlIwVXNSVUZCUjFjc1JVRkJTVmdzUzBGSmVrUXNVMEZCVXpoRkxFVkJRVTk0Uml4SFFVTmFMRWxCUVVseFFpeEZRVUZOZEVJc1JVRkJWVU1zUjBGQlR6UkZMRkZCUTNaQ2RFUXNSVUZCU1VRc1JVRkJTVU1zUlVGRFdpeFBRVU5KZGtJc1JVRkJWVU1zUjBGRFZrUXNSMEZCV1hWQ0xFZEJRVWxCTEVWQlFVa3NTVUZCVFN4SlFVRkxaQ3hGUVVGSFlTeEZRVUZKWWl4RlFVRkhSU3hGUVVGSFZ5eEZRVUZKV0N4SlFVTm9SRmdzUjBGQldYVkNMRWRCUVVsQkxFVkJRVWtzUzBGQlR5eEpRVUZMWkN4RlFVRkhZU3hGUVVGSllpeEZRVUZIUlN4RlFVRkhWeXhGUVVGSldDeEpRVU5xUkZnc1IwRkJXWFZDTEVkQlFVbEJMRVZCUVVrc1MwRkJUeXhKUVVGTFpDeEZRVUZIWVN4RlFVRkpZaXhGUVVGSFJTeEZRVUZIVnl4RlFVRkpXQ3hMUVVsNlJDeFRRVUZUSzBVc1JVRkJaMEo2Uml4SFFVTnlRaXhKUVVGSmNVSXNSVUZCVFhSQ0xFVkJRVlZETEVkQlFVODBSU3hSUVVOMlFuUkVMRVZCUVVsRUxFVkJRVWxETEVWQlExb3NUMEZEU1haQ0xFVkJRVlZETEVkQlExWkVMRWRCUVZsMVFpeEhRVUZKUVN4RlFVRkpMRWxCUVUwc1NVRkJTMlFzUlVGQlIyRXNSVUZCU1dJc1JVRkJSMFVzUlVGQlIxY3NSVUZCU1Znc1NVRkRhRVJZTEVkQlFWbDFRaXhIUVVGSlFTeEZRVUZKTEV0QlFVOHNTVUZCUzJRc1JVRkJSMkVzUlVGQlNXSXNSVUZCUjBVc1JVRkJSMWNzUlVGQlNWZ3NTMEZKZWtRc1UwRkJVMmRHTEVWQlFWVXhSaXhGUVVGUE1rWXNSVUZCVTBNc1IwRkRMMEpFTEVWQlFWVkJMRWRCUVZjc1JVRkRja0pETEVWQlFWTkJMRWRCUVZVc1IwRkZia0lzU1VGQlNYWkZMRVZCUVUxMFFpeEZRVUZWUXl4SFFVRlBORVVzVVVGRGRrSnBRaXhGUVVGUExFbEJRVTFFTEVWQlEySkZMRWRCUVU4dlJpeEZRVUZWUXl4SlFVVnlRaXhKUVVGTGNVSXNSVUZCU1VNc1IwRkJUVVFzUlVGQlNVTXNSMEZCUzNWRkxFVkJRVTlHTEVkQlFWY3NSMEZCVFN4TFFVRlBMRTFCUVU5QkxFZEJRekZFZEVVc1JVRkJTVU1zUjBGQlMwUXNSVUZCU1VNc1JVRkJTWFZGTEVkQlFWRXNTVUZEZWtKRExFVkJRVWxETEV0QlFVdG9SeXhGUVVGVmMwSXNTVUZGZGtJc1QwRkJUM2xGTEVWQlIxZ3NVMEZCVTBVc1JVRkJZMmhITEVWQlFVOHlSaXhIUVVNeFFrRXNSVUZCVlVFc1IwRkJWeXhGUVUxeVFpeEpRVXhCTEVsQlFVbHVSU3hGUVVGTmVrSXNSVUZCVlVNc1IwRkJUMmxITEZGQlEzWkNNMFVzUlVGQlNVVXNSVUZCU1VZc1JVRkJSMlFzUlVGQlNXZENMRVZCUVVsb1FpeEZRVUZIUXl4RlFVRkpaU3hGUVVGSlppeEZRVU01UW5GR0xFdEJRMEZKTEVWQlFXVXNSVUZCU1ZBc1JVRkZhRUpCTEV0QlEwaEhMRVZCUVVsRExFdEJRVXRvUnl4SFFVRlpkVUlzUlVGQlIwRXNSVUZCUjJRc1JVRkJSMEVzUlVGQlIwTXNSVUZCUjBFc1MwRkRjRU5CTEVkQlFVdEJMRVZCUVVsNVJpeEhRVUZuUWl4RlFVYzNRaXhQUVVGUFNpeEZRWEJ2UWxndlJpeEZRVUZWYjBjc1YwRkRUa01zVDBGQlVTeFhRVU5LTEU5QlFVOXNSeXhMUVVGTGJVY3NaMEpCUVd0Q0xFdEJSV3hEUXl4UlFVRlRMRmRCUTB3c1QwRkJVWEJITEV0QlFVdHJSeXhWUVVWcVFrY3NVVUZCVXl4WFFVTk1MRTlCUVU5eVJ5eExRVUZMTUVRc1MwRkZhRUkwUXl4cFFrRkJhMElzVjBGRGFFSXNUMEZCVDNSSExFdEJRVXRwUkN4blFrRkZaSE5FTEZWQlFWY3NWMEZEVUN4UFFVRlBka2NzUzBGQlMzVkVMRk5CUldoQ2FVUXNVMEZCVlN4WFFVTk9MRTlCUVU5NFJ5eExRVUZMY1VRc1NVRkZhRUk0UXl4alFVRmxMRmRCUlZnc1NVRkJTV3hITEVWQlFVMUVMRXRCUVV0blJpeFJRVU5tTEU5QlFXZENMRWxCUVZJdlJTeEZRVUZKUXl4RlFVRnJRaXhKUVVGU1JDeEZRVUZKUlN4RlFVRnJRaXhKUVVGU1JpeEZRVUZKUnl4SFFVRlhMRXRCUlhaRWNVY3NZVUZCWXl4WFFVVldMRWxCUTBsRExFVkJRVTlETEVWQlFVOURMRVZCUkdRelJ5eEZRVUZOUkN4TFFVRkxaMFlzVVVGVFppeFBRVkJCTUVJc1JVRkJVWHBITEVWQlFVbERMRVZCUVVVc1NVRkRaSGxITEVWQlFWRXhSeXhGUVVGSlJTeEZRVUZGTEVsQlEyUjVSeXhGUVVGUk0wY3NSVUZCU1Vjc1JVRkJSU3hKUVV0T0xFOUJTRXB6Unl4SFFVRlRMRTlCUVdOQkxFVkJRVkVzVFVGQmEwSjZTQ3hGUVVGTE5FZ3NTMEZCVFVnc1JVRkJVU3hOUVVGVExFMUJRVkVzVFVGSGJFVXNUMEZHYmtKRExFZEJRVk1zVDBGQlkwRXNSVUZCVVN4TlFVRnJRakZJTEVWQlFVczBTQ3hMUVVGTlJpeEZRVUZSTEUxQlFWTXNUVUZCVVN4TlFVVnVSQ3hQUVVSc1EwTXNSMEZCVXl4UFFVRmpRU3hGUVVGUkxFMUJRV3RDTTBnc1JVRkJTelJJTEV0QlFVMUVMRVZCUVZFc1RVRkJVeXhOUVVGUkxFOUJSemRHUlN4VFFVRlZMRk5CUVZORExFZEJSMllzVDBGR1FTOUhMRXRCUVV0eFJDeEhRVUZMVGl4RlFVRlhaMFVzUjBGRGNrSXZSeXhMUVVGTGMwUXNVVUZCVldwRkxFVkJRVlVzU1VGQlNWY3NTMEZCUzNGRUxFbEJRVTBzU1VGRGFrTnlSQ3hOUVVWWUswWXNUVUZCVHl4WFFVTklMRWxCUVVsNlJTeEZRVUZOZDBNc1JVRkJVemxFTEV0QlFVdHJSQ3hIUVVGSmJFUXNTMEZCUzIxRUxFZEJRVWx1UkN4TFFVRkxiMFFzU1VGRE1VTXNUMEZCVTJoRExFVkJRVmNzU1VGQlVrVXNSVUZCU1VZc1JVRkJVMlFzUlVGQlIyZENMRVZCUVVsb1FpeEZRVUZIUXl4RlFVRkhaU3hGUVVGSlppeEZRVUZIUml4RlFVRkhUQ3hMUVVGTGNVUXNTMEZGZWtReVJDeFpRVUZoTEZkQlExUXNTVUZCU1RGR0xFVkJRVTEzUXl4RlFVRlRPVVFzUzBGQlMydEVMRWRCUVVsc1JDeExRVUZMYlVRc1IwRkJTVzVFTEV0QlFVdHZSQ3hKUVVOMFEyaERMRVZCUVVrdlFpeEZRVUZyUWl4SlFVRlNhVU1zUlVGQlNVWXNSMEZCVldRc1JVRkJTV3BDTEVWQlFXdENMRWxCUVZKcFF5eEZRVUZKYUVJc1IwRkJWVU1zUlVGQlNXeENMRVZCUVd0Q0xFbEJRVkpwUXl4RlFVRkpaaXhIUVVNNVJTeFBRVUZ0UWl4SFFVRllVQ3hMUVVGTGNVUXNSMEZEV0N4UFFVRlZha01zUlVGQlNTeExRVUZQWkN4RlFVRkpMRTFCUVZGRExFVkJRVWtzUzBGRGNrTXNVVUZCVldFc1JVRkJTU3hMUVVGUFpDeEZRVUZKTEUxQlFWRkRMRVZCUVVrc1RVRkJUMUFzUzBGQlMzTkVMRkZCUVZVc1MwRkZha1Z2UWl4TlFVRlBMRmRCUTBnc1NVRkJTWFpFTEVWQlFVMTVReXhGUVVGVE5VUXNTMEZCUzJ0RUxFZEJRVWxzUkN4TFFVRkxiVVFzUjBGQlNXNUVMRXRCUVV0dlJDeEpRVU14UXl4UFFVRlRhRU1zUlVGQlZ5eEpRVUZTUkN4RlFVRkpReXhGUVVGVFpDeEZRVUZIWVN4RlFVRkpZaXhGUVVGSFJTeEZRVUZIVnl4RlFVRkpXQ3hGUVVGSFNDeEZRVUZIVEN4TFFVRkxjVVFzUzBGRmVrUTBSQ3haUVVGaExGZEJRMVFzU1VGQlNUbEdMRVZCUVUxNVF5eEZRVUZUTlVRc1MwRkJTMnRFTEVkQlFVbHNSQ3hMUVVGTGJVUXNSMEZCU1c1RUxFdEJRVXR2UkN4SlFVTjBRMmhETEVWQlFVa3ZRaXhGUVVGclFpeEpRVUZTT0VJc1JVRkJTVU1zUjBGQlZXUXNSVUZCU1dwQ0xFVkJRV3RDTEVsQlFWSTRRaXhGUVVGSllpeEhRVUZWUlN4RlFVRkpia0lzUlVGQmEwSXNTVUZCVWpoQ0xFVkJRVWxZTEVkQlF6bEZMRTlCUVcxQ0xFZEJRVmhTTEV0QlFVdHhSQ3hIUVVOWUxFOUJRVlZxUXl4RlFVRkpMRXRCUVU5a0xFVkJRVWtzVFVGQlVVVXNSVUZCU1N4TFFVTnlReXhSUVVGVldTeEZRVUZKTEV0QlFVOWtMRVZCUVVrc1RVRkJVVVVzUlVGQlNTeE5RVUZQVWl4TFFVRkxjMFFzVVVGQlZTeExRVVZxUlRSRUxFMUJRVThzVTBGQlUyeEVMRWRCUTFvc1QwRkJUMFFzUlVGQlV5OUVMRXRCUVV0clJDeEhRVUZKYkVRc1MwRkJTMjFFTEVkQlFVbHVSQ3hMUVVGTGIwUXNSMEZCU1Zrc1NVRkZMME50UkN4WlFVRmhMRk5CUVZOdVJDeEhRVU5zUWl4TlFVRlBMRWxCUVUxb1JTeExRVUZMYTBnc1RVRkJUV3hFTEVsQlJUVkNiMFFzVDBGQlVTeFRRVUZUUXl4SFFVTmlMRTlCTmxsU0xGTkJRVzFDYmtnc1JVRkJSME1zUlVGQlIwTXNSVUZCUjBNc1JVRkJSMmRJTEVkQlJUTkNMRWxCUVVsd1JDeEhRVU5CUXl4RlFVRkxOMFVzUlVGQlZXRXNSMEZCUjJsRkxGTkJRVk1zUzBGRE0wSkVMRVZCUVVzM1JTeEZRVUZWWXl4SFFVRkhaMFVzVTBGQlV5eExRVU16UWtRc1JVRkJTemRGTEVWQlFWVmxMRWRCUVVjclJDeFRRVUZUTEV0QlF6TkNSQ3hGUVVGTFN5eEZRVUZ2UW14RkxFdEJTVGRDTEVkQlFVbG5TQ3hIUVVGamNFUXNSVUZCU1N4SFFVRkhSeXhQUVVGUExFbEJRVTFJTEVWQlFVa3NSMEZCUjBjc1QwRkJUeXhKUVVGTlNDeEZRVUZKTEVkQlFVZEhMRTlCUVU4c1NVRkJUVWdzUlVGQlNTeEhRVUZIUnl4UFFVRlBMRWxCUVUxSUxFVkJRVWtzUjBGQlIwY3NUMEZCVHl4SlFVRk5TQ3hGUVVGSkxFZEJRVWRITEU5QlFVOHNTVUZCVFVnc1JVRkJTU3hIUVVGSFJ5eFBRVUZQTEVsQlFVMUlMRVZCUVVrc1IwRkJSMGNzVDBGQlR5eEhRVU40U3l4UFFVRlBTQ3hGUVVGSkxFZEJRVWRITEU5QlFVOHNSMEZCUzBnc1JVRkJTU3hIUVVGSFJ5eFBRVUZQTEVkQlFVdElMRVZCUVVrc1IwRkJSMGNzVDBGQlR5eEhRVUZMU0N4RlFVRkpMRWRCUVVkSExFOUJRVThzUjBGSGJFWXNUMEZCVDBnc1JVRkJTVWtzUzBGQlN5eEpRVE5hVEdsRUxFTkJRVlYwU0N4TFFVRkxhMFFzUjBGQlNXeEVMRXRCUVV0dFJDeEhRVUZKYmtRc1MwRkJTMjlFTEVkQlFVbHdSQ3hMUVVGTGNVUXNSMEZCU1dkRkxFbEJSWHBFUlN4aFFVRmpMRk5CUVZOR0xFZEJRMjVDTEUxQlFVOHNTVUZCVFhKSUxFdEJRVXR2U0N4UFFVRlBReXhKUVVVM1FuSkRMRTFCUVU4c1YwRkRTQ3hQUVVGVE9VVXNSVUZCUjJJc1JVRkJWVmNzUzBGQlMydEVMRWxCUVVzdlF5eEZRVUZIWkN4RlFVRlZWeXhMUVVGTGJVUXNTVUZCU3k5RExFVkJRVWRtTEVWQlFWVlhMRXRCUVV0dlJDeEpRVUZMTDBNc1JVRkJSMHdzUzBGQlMzRkVMRXRCUlRGR2JVVXNXVUZCWVN4WFFVTlVMRTlCUVcxQ0xFZEJRVmg0U0N4TFFVRkxjVVFzUjBGRFdDeFBRVUZWYUVVc1JVRkJWVmNzUzBGQlMydEVMRWxCUVUwc1MwRkJUemRFTEVWQlFWVlhMRXRCUVV0dFJDeEpRVUZOTEV0QlFVODVSQ3hGUVVGVlZ5eExRVUZMYjBRc1NVRkJUU3hKUVVOMlJpeFJRVUZWTDBRc1JVRkJWVmNzUzBGQlMydEVMRWxCUVUwc1MwRkJUemRFTEVWQlFWVlhMRXRCUVV0dFJDeEpRVUZOTEV0QlFVODVSQ3hGUVVGVlZ5eExRVUZMYjBRc1NVRkJUU3hMUVVGUGNFUXNTMEZCUzNORUxGRkJRVlVzUzBGRmJraHRSU3huUWtGQmFVSXNWMEZEWWl4UFFVRlRka2dzUlVGQlIySXNSVUZCYTBNc1NVRkJlRUl5UXl4RlFVRlJhRU1zUzBGQlMydEVMRWRCUVVrc1RVRkJZeXhKUVVGTEwwTXNSVUZCUjJRc1JVRkJhME1zU1VGQmVFSXlReXhGUVVGUmFFTXNTMEZCUzIxRUxFZEJRVWtzVFVGQll5eEpRVUZMTDBNc1JVRkJSMllzUlVGQmEwTXNTVUZCZUVJeVF5eEZRVUZSYUVNc1MwRkJTMjlFTEVkQlFVa3NUVUZCWXl4SlFVRkxMME1zUlVGQlIwd3NTMEZCUzNGRUxFdEJSWGhMY1VVc2MwSkJRWFZDTEZkQlEyNUNMRTlCUVcxQ0xFZEJRVmd4U0N4TFFVRkxjVVFzUjBGRFdDeFBRVUZWYUVVc1JVRkJhME1zU1VGQmVFSXlReXhGUVVGUmFFTXNTMEZCUzJ0RUxFZEJRVWtzVFVGQll5eE5RVUZSTjBRc1JVRkJhME1zU1VGQmVFSXlReXhGUVVGUmFFTXNTMEZCUzIxRUxFZEJRVWtzVFVGQll5eE5RVUZST1VRc1JVRkJhME1zU1VGQmVFSXlReXhGUVVGUmFFTXNTMEZCUzI5RUxFZEJRVWtzVFVGQll5eExRVU55U2l4UlFVRlZMMFFzUlVGQmEwTXNTVUZCZUVJeVF5eEZRVUZSYUVNc1MwRkJTMnRFTEVkQlFVa3NUVUZCWXl4TlFVRlJOMFFzUlVGQmEwTXNTVUZCZUVJeVF5eEZRVUZSYUVNc1MwRkJTMjFFTEVkQlFVa3NUVUZCWXl4TlFVRlJPVVFzUlVGQmEwTXNTVUZCZUVJeVF5eEZRVUZSYUVNc1MwRkJTMjlFTEVkQlFVa3NUVUZCWXl4TlFVRlJjRVFzUzBGQlMzTkVMRkZCUVZVc1MwRkZiRXh4UlN4UFFVRlJMRmRCUTBvc1QwRkJaMElzU1VGQldqTklMRXRCUVV0eFJDeEhRVU5GTEdkQ1FVZFFja1FzUzBGQlMzRkVMRWRCUVVzc1MwRkpVSFZGTEVWQlFWTTNSQ3hGUVVGVEwwUXNTMEZCUzJ0RUxFZEJRVWxzUkN4TFFVRkxiVVFzUjBGQlNXNUVMRXRCUVV0dlJDeEpRVUZKTEUxQlFWVXNTVUZGYkVWNVJTeFRRVUZWTEZOQlFWTkRMRWRCUTJZc1NVRkJTVU1zUlVGQllTeEpRVUZOZWtRc1JVRkJZM1JGTEV0QlFVdHJSQ3hIUVVGSmJFUXNTMEZCUzIxRUxFZEJRVWx1UkN4TFFVRkxiMFFzUjBGQlNYQkVMRXRCUVV0eFJDeEpRVU5xUlRKRkxFVkJRVzFDUkN4RlFVTnVRblJGTEVWQlFXVjZSQ3hMUVVGTGQwUXNZMEZCWjBJc2NVSkJRWFZDTEVkQlJTOUVMRWRCUVVselJTeEZRVUZoTEVOQlEySXNTVUZCU1hoSUxFVkJRVWxVTEVWQlFWVnBTU3hIUVVOc1FrVXNSVUZCYlVJc1NVRkJUVEZFTEVWQlFXTm9SU3hGUVVGRk5FTXNSMEZCU1RWRExFVkJRVVUyUXl4SFFVRkpOME1zUlVGQlJUaERMRWRCUVVrNVF5eEZRVUZGSzBNc1NVRkhMMFFzVFVGQlR5dzRRMEZCT0VOSkxFVkJRV0VzYVVKQlFXbENjMFVzUlVGQlZ5eG5Ra0ZCWjBKRExFVkJRV2xDTEV0QlJXNUpOMFFzVTBGQlZTeFRRVUZUZWtRc1IwRkRaaXhKUVVGSmRVZ3NTVUZCWTNaSUxFVkJRMnhDUVN4RlFVRlRRU3hIUVVGVlZpeExRVUZMZFVRc1VVRkZlRUlzU1VGQlNUSkZMRWRCUVd0Q0xFVkJRMnhDUXl4RlFVRlhia2tzUzBGQlMzRkVMRWRCUVVzc1IwRkJTM0pFTEV0QlFVdHhSQ3hKUVVGTkxFVkJSM3BETEU5QlJuZENORVVzU1VGQllVVXNSMEZCZDBJc1VVRkJXSHBJTEVkQlFTdENMRk5CUVZoQkxFZEJRV2RETEZOQlFWaEJMRWRCUVdkRExGTkJRVmhCTEVkQlFXZERMRk5CUVZoQkxFZEJRV2RETEZOQlFWaEJMRWRCVlROSkxGRkJRVmhCTEVsQlEwRjNTQ3hGUVVGclFteEpMRXRCUVV0M1NDeGxRVVZhTEZOQlFWZzVSeXhKUVVOQmQwZ3NSVUZCYTBKc1NTeExRVUZMTUVnc2VVSkJSVm9zVVVGQldHaElMRWRCUVN0Q0xGTkJRVmhCTEVsQlEzQkNkMGdzUlVGQmEwSnNTU3hMUVVGTGJVZ3NaVUZGV2l4VFFVRllla2NzU1VGRFFYZElMRVZCUVd0Q2JFa3NTMEZCUzIxSUxHRkJRVmtzU1VGRmVFSXNVMEZCV0hwSExFbEJRMEYzU0N4RlFVRnJRbXhKTEV0QlFVdDFTQ3hqUVVGaExFbEJSWHBDTEZOQlFWZzNSeXhKUVVOQmQwZ3NSVUZCYTBKc1NTeExRVUZMZFVnc1owSkJSVm9zVTBGQldEZEhMRWxCUTBGM1NDeEZRVUZyUW14SkxFdEJRVXN5U0N4VlFVVmFMRkZCUVZocVNDeEpRVU5CZDBnc1JVRkJhMEpzU1N4TFFVRkxhVWdzWlVGRldpeFJRVUZZZGtjc1NVRkRRWGRJTEVWQlFXdENiRWtzUzBGQlMyZElMR1ZCUjNCQ2EwSXNSMEZCYlVKc1NTeExRVUZMYlVnc1pVRnFRMW9zVTBGQldIcEhMRWRCUVdsRExFbEJRVnBXTEV0QlFVdHhSQ3hIUVVOdVFuSkVMRXRCUVVzeVNDeFRRVVZVTTBnc1MwRkJTM2RJTEdWQlowTndRbGtzVFVGQlR5eFhRVU5JTEU5QlFVOTJTU3hGUVVGVlJ5eExRVUZMYlVVc1lVRkhNVUpyUlN4dFFrRkJiMElzVTBGQlUwTXNSVUZCU1VNc1IwRkROMElzU1VGQlNYcEpMRVZCUVZGM1NTeEZRVUZIUlN4TlFVRk5MRTFCUVU5NFNTeE5RVUZOZVVrc1ZVRkJWVU1zVFVGQlRVTXNTMEZCUzBvc1MwRkxka1FzVDBGS1FYWkpMRXRCUVV0clJDeEhRVUZMY0VRc1JVRkJUVzlFTEVkQlEyaENiRVFzUzBGQlMyMUVMRWRCUVV0eVJDeEZRVUZOY1VRc1IwRkRhRUp1UkN4TFFVRkxiMFFzUjBGQlMzUkVMRVZCUVUxelJDeEhRVU5vUW5CRUxFdEJRVXM0Unl4VFFVRlRhRWdzUlVGQlRYVkVMRWxCUTJKeVJDeE5RVVZZT0VVc1VVRkJVeXhYUVVOTUxFOUJRVTg1UlN4TFFVRkxjVWtzYlVKQlFXMUNka1FzUlVGQlV6aEVMRmxCUlRWRE4wUXNVMEZCVlN4WFFVTk9MRTlCUVU4dlJTeExRVUZMY1Vrc2JVSkJRVzFDZEVRc1JVRkJWVFpFTEZsQlJUZERNMFFzVDBGQlVTeFhRVU5LTEU5QlFVOXFSaXhMUVVGTGNVa3NiVUpCUVcxQ2NFUXNSVUZCVVRKRUxGbEJSVE5EY0VVc1YwRkJXU3hYUVVOU0xFOUJRVTk0UlN4TFFVRkxjVWtzYlVKQlFXMUNOMFFzUlVGQldXOUZMRmxCUlM5RGFFVXNVMEZCVlN4WFFVTk9MRTlCUVU4MVJTeExRVUZMY1Vrc2JVSkJRVzFDZWtRc1JVRkJWV2RGTEZsQlJUZERMMFFzVlVGQlZ5eFhRVU5RTEU5QlFVODNSU3hMUVVGTGNVa3NiVUpCUVcxQ2VFUXNSVUZCVnl0RUxGbEJSVGxETVVRc1MwRkJUU3hYUVVOR0xFOUJRVTlzUml4TFFVRkxjVWtzYlVKQlFXMUNia1FzUlVGQlRUQkVMRmxCUjNwRFF5eHJRa0ZCYlVJc1UwRkJVMUFzUlVGQlNVTXNSMEZETlVJc1QwRkJUMFFzUlVGQlIwVXNUVUZCVFN4TlFVRlBlRWtzVFVGQlRYbEpMRlZCUVZWRExFMUJRVTFETEV0QlFVdEtMRTFCUlhSRUwwTXNWVUZCVnl4WFFVTlFMRTlCUVU5NFJpeExRVUZMTmtrc2EwSkJRV3RDY2tRc1JVRkJWMjlFTEZsQlJUZERlRVFzVjBGQldTeFhRVU5TTEU5QlFVOXdSaXhMUVVGTE5ra3NhMEpCUVd0Q2VrUXNSVUZCV1hkRUxGbEJSVGxET1VNc1kwRkJaU3hYUVVOWUxFOUJRVTg1Uml4TFFVRkxOa2tzYTBKQlFXdENMME1zUlVGQlpUaERMRmxCUldwRWNrUXNaMEpCUVdsQ0xGZEJRMklzVDBGQlQzWkdMRXRCUVVzMlNTeHJRa0ZCYTBKMFJDeEZRVUZwUW5GRUxGbEJSVzVFZGtRc1RVRkJUeXhYUVVOSUxFOUJRVTl5Uml4TFFVRkxOa2tzYTBKQlFXdENlRVFzUlVGQlQzVkVMRmxCUlhwRGRFUXNUMEZCVVN4WFFVTktMRTlCUVU5MFJpeExRVUZMTmtrc2EwSkJRV3RDZGtRc1JVRkJVWE5FTEdGQlRUbERMMGtzUlVGQlZXbEtMRlZCUVZrc1UwRkJVMmhLTEVWQlFVOURMRWRCUTJ4RExFZEJRVzlDTEdsQ1FVRlVSQ3hGUVVGdFFpeERRVU14UWl4SlFVRkphVW9zUzBGRFNpeEpRVUZMTEVsQlFVa3pSeXhMUVVGTGRFTXNSVUZEVGtFc1JVRkJUV2RFTEdWQlFXVldMRXRCUldwQ01rY3NSVUZCVXpOSExFZEJSRWdzVFVGQlRrRXNSVUZEWTNSRExFVkJRVTF6UXl4SFFVZE9SQ3hGUVVGdlFuSkRMRVZCUVUxelF5eExRVWx3UkhSRExFVkJRVkZwU2l4RlFVZGFMRTlCUVU5c1NpeEZRVUZWUXl4RlFVRlBReXhKUVRCUk5VSkdMRVZCUVZWdFNpeFBRVUZUTEZOQlFWVkRMRVZCUVZGRExFZEJRMnBETEZOQlFVdEVMRWxCUVZkRExFbEJRMVJ5U2l4RlFVRlZiMG9zUjBGQlVYcENMR1ZCUVdsQ00wZ3NSVUZCVlhGS0xFZEJRVkV4UWl4bFFVZG9SVE5JTEVWQlFWVkVMRTlCUVZNc1YwRkRaaXhQUVVGUFF5eEZRVUZWYVVvc1YwRkRZalZKTEVWQlFVZFFMRWxCUTBoUkxFVkJRVWRTTEVsQlEwaFRMRVZCUVVkVUxFOUJNa2xZUlN4RlFVRlZjMG9zU1VGQlRTeFRRVUZUUml4RlFVRlJReXhGUVVGUmVrVXNSMEZEY2tOQkxFVkJRWEZDTEVsQlFWaEJMRVZCUVdkQ0xFVkJRVXRCTEVkQlFWVXNSMEZGZWtNc1NVRkJTVEpGTEVWQlFVOTJTaXhGUVVGVmIwb3NSMEZCVVdwRkxGRkJRM3BDY1VVc1JVRkJUM2hLTEVWQlFWVnhTaXhIUVVGUmJFVXNVVUZGZWtKNlF5eEZRVUZKYTBNc1JVRkJVeXhKUVZOcVFpeFBRVUZQTlVVc1IwRk9TRXNzUjBGQlMyMUtMRVZCUVV0dVNpeEZRVUZKYTBvc1JVRkJTMnhLTEVkQlFVdHhReXhGUVVGTE5rY3NSVUZCUzJ4S0xFVkJRMnhEUXl4SFFVRkxhMG9zUlVGQlMyeEtMRVZCUVVscFNpeEZRVUZMYWtvc1IwRkJTMjlETEVWQlFVczJSeXhGUVVGTGFrb3NSVUZEYkVORExFZEJRVXRwU2l4RlFVRkxha29zUlVGQlNXZEtMRVZCUVV0b1NpeEhRVUZMYlVNc1JVRkJTelpITEVWQlFVdG9TaXhGUVVOc1EwTXNSMEZCUzJkS0xFVkJRVXRvU2l4RlFVRkpLMGtzUlVGQlN5OUpMRWRCUVV0clF5eEZRVUZMTmtjc1JVRkJTeTlKTEV0QllURkRVaXhGUVVGVmVVb3NXVUZCWXl4VFFVRlRUQ3hGUVVGUlF5eEhRVU55UXl4SlFVRkpTeXhGUVVGTE1Vb3NSVUZCVlc5S0xFZEJRMlpQTEVWQlFVc3pTaXhGUVVGVmNVb3NSMEZEYmtJc1QwRkJVV3BMTEVWQlFVdFRMRWxCUVVrMlNpeEZRVUZIT1VNc1pVRkJaU3RETEVWQlFVY3ZReXhuUWtGQlowSXNUVUZCVTNoSUxFVkJRVXRQTEVsQlFVa3JTaXhGUVVGSE9VTXNaVUZCWlN0RExFVkJRVWN2UXl4blFrRkJaMElzVFVGaGFrZzFSeXhGUVVGVk5Fb3NWMEZCWVN4VFFVRlRVaXhGUVVGUlF5eEZRVUZSVVN4SFFVTTFReXhKUVVOSlF5eEZRVUZaUXl4RlFVUmFUaXhGUVVGamVrb3NSVUZCVlhsS0xGbEJRVmxNTEVWQlFWRkRMRWRCVFdoRUxFOUJTRUZWTEVkQlFVMHNSMEZGVGtRc1JVRnJZVW9zVTBGQk5FSkZMRWRCUjNoQ0xFbEJRVWxETEVWQlFVOURMRVZCUlZoRUxFbEJSRUZFTEVWQlFWRkJMRWxCUVZWRExFMUJRVkVzUzBGQlRVTXNTMEZCVHl4VlFVTjRRa1FzVDBGQlV5eE5RVUZOUlN4alFVTTVRa1FzUjBGQlVVWXNSVUZCVFVVc1RVRkJVU3hUUVVGVGJrb3NZMEZEYWtJc1QwRkJWbXRLTEVkQlFUUkNMRkZCUVZaQkxFbEJRMnhDUVN4RlFVRlJMRTFCUlVNc1ZVRkJWRU1zUjBGQk5rSXNWVUZCVkVFc1NVRkRjRUpCTEVWQlFVOHNVMEZGV0N4UFFVRlJSQ3hOUVVGUlFTeEZRVUZQUXl4TFFVRlBRU3hIUVM5aGFrSkZMRU5CUVcxQ1VDeEpRVU5pU1N4TlFVRlJTQ3hGUVVGWFNTeE5RVU5zUXl4SlFVRkxMRlZCUTB3c1NVRkJTeXhYUVVORVNDeEZRVUZOVGl4SFFVRmxMRWxCUTNKQ0xFMUJRMG9zU1VGQlN5eFZRVU5FVFN4RlFVRk5UaXhIUVVGbExFVkJRM0pDTEUxQlEwb3NTVUZCU3l4WFFVTkVUU3hGUVVGTlRpeEhRVUZsTEVWQlJ6ZENMRTlCUVU5TkxFZEJZVmd2U2l4RlFVRlZjVXNzWVVGQlpTeFRRVUZUUXl4RlFVRlhReXhGUVVGWE4wSXNSMEZEY0VRc1NVRkZTV1VzUlVGRFFXVXNSVUZCZFVKUUxFVkJRVTlETEVWQlNEbENUeXhGUVVGWkxFdEJRMXBETEVWQlFWa3NSVUZKYUVKR0xFZEJSRUU1UWl4RlFVRlBRU3hQUVVOelFqaENMSE5DUVVNM1FsQXNSVUZCVVhaQ0xFVkJRVXQxUWl4TlFVTmlReXhGUVVGUGVFSXNSVUZCUzNkQ0xFdEJSVm9zU1VGQlN5eEpRVUZKTTBnc1JVRkJSeXhGUVVGSFFTeEZRVUZKWjBrc1JVRkJWVWtzVDBGQlUzQkpMRXRCUTJ4RGEwZ3NSVUZCWTNwS0xFVkJRVlY1U2l4WlFVRlpZU3hGUVVGWFF5eEZRVUZWYUVrc1MwRkRka050U1N4SlFVTmtRU3hGUVVGWmFrSXNSVUZEV21kQ0xFVkJRVmw2U3l4RlFVRlZkVXNzUlVGQlZXaEpMRXRCU1hoRExFOUJRVWwyUXl4RlFVRlZORW9zVjBGQlYxVXNSVUZCVjBjc1IwRkJXVklzVFVGQlVVRXNSVUZCVFVNc1MwRkJUMEVzVFVGQlYwMHNSVUZEY2tWRExFZEJSMUF2UWl4RlFVRkxPRUlzZFVKQlFYTkNMRVZCUTNCQ2VFc3NSVUZCVlhGTExHRkJRV0ZETEVkQlFWY3NUMEZCVVN4UlFVRlJOVUlzUzBGUmFrVXNTVUZCU1hoSUxFVkJRVkZzUWl4RlFVRlZhMElzVDBGRGJFSXdTaXhWUVVGWExGTkJRMWhETEdGQlFXTXNVMEZEWkVNc1MwRkJUU3hOUVVOT1F5eFhRVUZaTEZOQlExcERMRTFCUVU4c1UwRkRVRU1zVFVGQlR5eFRRVU5RUXl4UFFVRlJMRk5CUTFKRExFMUJRVThzVFVGRFVFTXNaVUZCWjBJc1UwRkRhRUpETEV0QlFVMHNUVUZEVGtNc1YwRkJXU3hUUVVOYVF5eE5RVUZQTEZOQlExQkRMRlZCUVZjc1UwRkRXRU1zV1VGQllTeFRRVU5pUXl4VlFVRlhMRk5CUTFoRExGZEJRVmtzVTBGRFdrTXNWVUZCVnl4VFFVTllReXhOUVVGUExGTkJRMUJETEdWQlFXZENMRk5CUTJoQ1F5eFRRVUZWTEZOQlExWkRMRkZCUVZNc1UwRkRWRU1zUzBGQlRTeE5RVU5PUXl4VFFVRlZMRk5CUTFaRExGTkJRVlVzVTBGRFZrTXNZMEZCWlN4VFFVTm1ReXhUUVVGVkxGTkJRMVpETEZWQlFWY3NVMEZEV0VNc1UwRkJWU3hUUVVOV1F5eFZRVUZYTEZOQlExaERMRmxCUVdFc1UwRkRZa01zWlVGQlowSXNVMEZEYUVKRExGZEJRVmtzVTBGRFdrTXNWMEZCV1N4VFFVTmFReXhSUVVGVExGTkJRMVJETEZkQlFWa3NVMEZEV2tNc1lVRkJZeXhUUVVOa1F5eGpRVUZsTEZOQlEyWkRMR05CUVdVc1UwRkRaa01zWTBGQlpTeFRRVU5tUXl4alFVRmxMRk5CUTJaRExGZEJRVmtzVTBGRFdrTXNVMEZCVlN4VFFVTldReXhaUVVGaExGTkJRMkpETEZGQlFWTXNVMEZEVkVNc1VVRkJVeXhUUVVOVVF5eFhRVUZaTEZOQlExcERMRlZCUVZjc1UwRkRXRU1zV1VGQllTeFRRVU5pUXl4WlFVRmhMRk5CUTJKRExGRkJRVk1zVFVGRFZFTXNWVUZCVnl4VFFVTllReXhYUVVGWkxGTkJRMXBETEV0QlFVMHNVMEZEVGtNc1ZVRkJWeXhUUVVOWVF5eExRVUZOTEZOQlEwNURMRTFCUVU4c1UwRkRVRU1zV1VGQllTeFRRVU5pUXl4TFFVRk5MRk5CUTA1RExGTkJRVlVzVTBGRFZrTXNVVUZCVXl4VFFVTlVReXhWUVVGWExGTkJRMWhETEU5QlFWRXNVMEZEVWtNc1RVRkJUeXhUUVVOUVF5eE5RVUZQTEZOQlExQkRMRk5CUVZVc1UwRkRWa01zWTBGQlpTeFRRVU5tUXl4VlFVRlhMRk5CUTFoRExHRkJRV01zVTBGRFpFTXNWVUZCVnl4VFFVTllReXhYUVVGWkxGTkJRMXBETEZWQlFWY3NVMEZEV0VNc2NVSkJRWE5DTEZOQlEzUkNReXhWUVVGWExGTkJRMWhETEZkQlFWa3NVMEZEV2tNc1ZVRkJWeXhUUVVOWVF5eFZRVUZYTEZOQlExaERMRmxCUVdFc1UwRkRZa01zWTBGQlpTeFRRVU5tUXl4aFFVRmpMRk5CUTJSRExHVkJRV2RDTEUxQlEyaENReXhsUVVGblFpeE5RVU5vUWtNc1pVRkJaMElzVTBGRGFFSkRMRmxCUVdFc1UwRkRZa01zUzBGQlRTeE5RVU5PUXl4VlFVRlhMRk5CUTFoRExFMUJRVThzVTBGRFVFTXNVVUZCVXl4TlFVTlVReXhQUVVGUkxGTkJRMUpETEdsQ1FVRnJRaXhUUVVOc1FrTXNWMEZCV1N4VFFVTmFReXhoUVVGakxGTkJRMlJETEdGQlFXTXNVMEZEWkVNc1pVRkJaMElzVTBGRGFFSkRMR2RDUVVGcFFpeFRRVU5xUWtNc2EwSkJRVzFDTEZOQlEyNUNReXhuUWtGQmFVSXNVMEZEYWtKRExHZENRVUZwUWl4VFFVTnFRa01zWVVGQll5eFRRVU5rUXl4VlFVRlhMRk5CUTFoRExGVkJRVmNzVTBGRFdFTXNVMEZCVlN4VFFVTldReXhaUVVGaExGTkJRMkpETEV0QlFVMHNVMEZEVGtNc1VVRkJVeXhUUVVOVVF5eE5RVUZQTEZOQlExQkRMRlZCUVZjc1UwRkRXRU1zVDBGQlVTeFRRVU5TUXl4VlFVRlhMRk5CUTFoRExFOUJRVkVzVTBGRFVrTXNZMEZCWlN4VFFVTm1ReXhWUVVGWExGTkJRMWhETEdOQlFXVXNVMEZEWmtNc1kwRkJaU3hUUVVObVF5eFhRVUZaTEZOQlExcERMRlZCUVZjc1UwRkRXRU1zUzBGQlRTeFRRVU5PUXl4TFFVRk5MRk5CUTA1RExFdEJRVTBzVTBGRFRrTXNWMEZCV1N4VFFVTmFReXhQUVVGUkxGTkJRMUpETEdOQlFXVXNVMEZEWmtNc1NVRkJTeXhOUVVOTVF5eFZRVUZYTEZOQlExaERMRlZCUVZjc1UwRkRXRU1zV1VGQllTeFRRVU5pUXl4UFFVRlJMRk5CUTFKRExGZEJRVmtzVTBGRFdrTXNVMEZCVlN4VFFVTldReXhUUVVGVkxGTkJRMVpETEU5QlFWRXNVMEZEVWtNc1QwRkJVU3hUUVVOU1F5eFJRVUZUTEZOQlExUkRMRlZCUVZjc1UwRkRXRU1zVlVGQlZ5eFRRVU5ZUXl4VlFVRlhMRk5CUTFoRExFdEJRVTBzVTBGRFRrTXNXVUZCWVN4VFFVTmlReXhWUVVGWExGTkJRMWhETEVsQlFVc3NVMEZEVEVNc1MwRkJUU3hUUVVOT1F5eFJRVUZUTEZOQlExUkRMRTlCUVZFc1UwRkRVa01zVlVGQlZ5eFRRVU5ZUXl4UFFVRlJMRk5CUTFKRExFMUJRVThzVTBGRFVFTXNUVUZCVHl4TlFVTlFReXhYUVVGWkxGTkJRMXBETEU5QlFWRXNUVUZEVWtNc1dVRkJZU3hWUVVsaWFrMHNSVUZCVnk5SUxFVkJRVlVyU0N4VFFVOTZRaXhUUVVGamEwMHNSMEZEVml4SlFVRkpReXhMUVVOS0xFbEJRVXNzU1VGQlNUTlNMRXRCUVVzd1VpeEZRVU5PUVN4RlFVRkZhRklzWlVGQlpWWXNTMEZEYWtJeVVpeEZRVUZSUkN4RlFVRkZNVklzU1VGQlRVRXNSMEZIZUVJc1QwRkJUekpTTEVWQlpIbENReXhEUVVGTGFsUXNSMEZyUW5wRExGTkJRVk5uUXl4RlFVRlhNVU1zUjBGUGFFSXNUMEZPUVVFc1JVRkJTVFJVTEZkQlFWYzFWQ3hKUVVWWU5sUXNUVUZCVFRkVUxFbEJRVTFCTEVWQlFVa3NSMEZCUzBFc1JVRkJTU3hMUVVONlFrRXNSVUZCU1N4SFFVZEVRU3hGUVVsWUxGTkJRVk15UWl4RlFVRlJiVk1zUlVGQlIzcFZMRWxCWjBOd1FpeFRRVUYzUW5sVkxFZEJRM0JDTEUxQlFXMUNMR2xDUVVGTVFTeEpRVUZ2UXl4SFFVRnVRa0VzUlVGQlJVTXNVVUZCVVN4TlFVRm5ReXhKUVVGc1FrZ3NWMEZCVjBVc1NVRm9RemxFUlN4RFFVRmxSaXhMUVVGTlFTeEZRVUZKTEZGQlJUZENMRWxCUVVsSExFVkJhME5TTEZOQlFYTkNTQ3hIUVVOc1FpeE5RVUZ2UWl4cFFrRkJUa0VzU1VGQmNVTXNSMEZCYmtKQkxFVkJRVVZETEZGQlFWRXNTMEZ1UTNKQ1J5eERRVUZoU2l4SFFWTnNReXhQUVZKQlFTeEZRVUZKTlZVc1JVRkJVVWNzUlVGQlMwUXNSVUZCVVN4RlFVRkhkMVVzVjBGQlYwVXNTMEZIYmtOSExFbEJRMEZJTEVWQlFVbExMRk5CUVZOTUxFVkJRVWw2VlN4RlFVRkxMRWxCUVUwc1MwRkpNMEpVTEVWQlFVdDNWaXhKUVVGSlRpeEZRVUZKZWxVc1IwRkJUeXhMUVVOa0xFVkJTVWg1VlN4RlFVRkplbFVzUlVGQlQzVlZMRmRCUVZkMlZTeEhRVWxzUXl4VFFVRlRhVVlzUlVGQlVTdFFMRWRCUTJJc1QwRkJUMjVXTEVWQlFWRXNSVUZCUjBVc1JVRkJVU3hGUVVGSGFWWXNTVUZKYWtNc1UwRkJVMnBVTEVWQlFXZENhVlFzUjBGRGNrSXNUMEZCVDBZc1UwRkJVMFVzUlVGQlN5eEpRV1Y2UWl4VFFVRlRlRkVzUlVGQlMzbFJMRWRCUTFZc1QwRkJiVUlzUjBGQldrRXNSVUZCUlc1TExFOUJRV01zU1VGQlRXMUxMRVZCUVVrc1IwRkJTMEVzUlVGSk1VTXNVMEZCVTNoVExFVkJRVzlDWjFNc1IwRkxla0lzVDBGS1NVRXNSMEZCU3l4SlFVTk1RU3hGUVVGVExFbEJRVXBCTEVWQlFWY3NTMEZIWWtFc1JVRkpXQ3hUUVVGVE5WQXNSVUZCYjBKV0xFZEJRM3BDTEU5QlFVODFSU3hGUVVGTFN5eE5RVUZ6UWl4SlFVRm9RakpWTEZkQlFWZHdVU3hKUVVGVlRTeFRRVUZUTEVsQlIzQkVMRk5CUVZONlF5eEZRVUZ2UWs0c1IwRkRla0lzVDBGQlVVc3NSVUZCWjBKTUxFZEJRVXNzU1VGSGFrTXNTVUZUVVhkVUxFVkJTMEZETEVWQlEwRkRMRVZCWmtvNVZDeEhRV05KTmxRc1JVRkJiMElzWlVGTWNFSkVMRVZCUVZjc09FTkJTMjlETEdGQlFXVkJMRVZCUVZjc1lVRkJaVUVzUlVGQlZ5eFpRVU51UjBVc1JVRkJiMElzWTBGQlowSkdMRVZCUVZjc1lVRkJaVUVzUlVGQlZ5eGhRVUZsUVN4RlFVRlhMR0ZCUVdWQkxFVkJRVmNzWVVGSE4waEJMRk5CUVZVc1NVRkJTVWNzVDBGQlQwZ3NSMEZEY2tJelZTeEpRVUZMTEVsQlFVazRWU3hQUVVGUExFMUJRVkZHTEVkQlEzaENNMVFzUzBGQlRTeEpRVUZKTmxRc1QwRkJUeXhQUVVGVFJDeEhRVU14UWpOVUxFbEJRVXNzU1VGQlNUUlVMRTlCUVU4c1RVRkJVVVlzUjBGRGVFSjRWQ3hMUVVGTkxFbEJRVWt3VkN4UFFVRlBMRTlCUVZORUxFZEJRekZDZUZRc1NVRkJTeXhKUVVGSmVWUXNUMEZCVHl4TlFVRlJSaXhIUVVONFFuUlVMRXRCUVUwc1NVRkJTWGRVTEU5QlFVOHNUMEZCVTBRc1IwRkRNVUpxVkN4TFFVRk5MSFZFUVVOT1JpeExRVUZOTEhWRVFVTk9ReXhMUVVGTkxIVkZRVU5PU2l4TFFVRk5MSGxGUVU5a0xGTkJRVk5QTEVWQlFXVnFReXhIUVVOd1FpeFJRVUZUYTBJc1JVRkJVelJVTEZOQlFWTXpWQ3hMUVVGTGJrSXNSMEZuUjJRc2IwSkJRVmhyVml4UlFVRXdRa0VzVDBGQlQwTXNVVUZEZUVORUxFOUJRVTlETEZGQlFWVndWaXhGUVVkTkxHMUNRVUZZY1ZZc1VVRkJlVUpCTEU5QlFVOURMRWxCUXpWRFJDeFBRVUZQTEZkQlFXRXNUMEZCVDNKV0xFbEJTVE5DZFZZc1QwRkJUM1pXTEZWQlFWbEJMRVZCYm5GRGRrSXNRMEZ6Y1VOSFdpSXNJbVpwYkdVaU9pSXZkbUZ5TDNkM2R5OXRiM05oYVdOdkxXMWhjM1JsY2k5dWIyUmxYMjF2WkhWc1pYTXZkR2x1ZVdOdmJHOXlNaTkwYVc1NVkyOXNiM0l1YW5NaWZRPT0iLCIhZnVuY3Rpb24oZSl7ZShbXCJqcXVlcnlcIl0sZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQsbixvLHM9MCxpPXtlcnJvcjpcImVycm9yXCIsaW5mbzpcImluZm9cIixzdWNjZXNzOlwic3VjY2Vzc1wiLHdhcm5pbmc6XCJ3YXJuaW5nXCJ9LGE9e2NsZWFyOmZ1bmN0aW9uKG4sbyl7dmFyIHM9dSgpO3R8fHIocyk7bChuLHMsbyl8fGZ1bmN0aW9uKG4pe2Zvcih2YXIgbz10LmNoaWxkcmVuKCkscz1vLmxlbmd0aC0xO3M+PTA7cy0tKWwoZShvW3NdKSxuKX0ocyl9LHJlbW92ZTpmdW5jdGlvbihuKXt2YXIgbz11KCk7dHx8cihvKTtpZihuJiYwPT09ZShcIjpmb2N1c1wiLG4pLmxlbmd0aClyZXR1cm4gdm9pZCBwKG4pO3QuY2hpbGRyZW4oKS5sZW5ndGgmJnQucmVtb3ZlKCl9LGVycm9yOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZCh7dHlwZTppLmVycm9yLGljb25DbGFzczp1KCkuaWNvbkNsYXNzZXMuZXJyb3IsbWVzc2FnZTplLG9wdGlvbnNPdmVycmlkZTpuLHRpdGxlOnR9KX0sZ2V0Q29udGFpbmVyOnIsaW5mbzpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGQoe3R5cGU6aS5pbmZvLGljb25DbGFzczp1KCkuaWNvbkNsYXNzZXMuaW5mbyxtZXNzYWdlOmUsb3B0aW9uc092ZXJyaWRlOm4sdGl0bGU6dH0pfSxvcHRpb25zOnt9LHN1YnNjcmliZTpmdW5jdGlvbihlKXtuPWV9LHN1Y2Nlc3M6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBkKHt0eXBlOmkuc3VjY2VzcyxpY29uQ2xhc3M6dSgpLmljb25DbGFzc2VzLnN1Y2Nlc3MsbWVzc2FnZTplLG9wdGlvbnNPdmVycmlkZTpuLHRpdGxlOnR9KX0sdmVyc2lvbjpcIjIuMS40XCIsd2FybmluZzpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGQoe3R5cGU6aS53YXJuaW5nLGljb25DbGFzczp1KCkuaWNvbkNsYXNzZXMud2FybmluZyxtZXNzYWdlOmUsb3B0aW9uc092ZXJyaWRlOm4sdGl0bGU6dH0pfX07cmV0dXJuIGE7ZnVuY3Rpb24gcihuLG8pe3JldHVybiBufHwobj11KCkpLCh0PWUoXCIjXCIrbi5jb250YWluZXJJZCkpLmxlbmd0aD90OihvJiYodD1mdW5jdGlvbihuKXtyZXR1cm4odD1lKFwiPGRpdi8+XCIpLmF0dHIoXCJpZFwiLG4uY29udGFpbmVySWQpLmFkZENsYXNzKG4ucG9zaXRpb25DbGFzcykpLmFwcGVuZFRvKGUobi50YXJnZXQpKSx0fShuKSksdCl9ZnVuY3Rpb24gbCh0LG4sbyl7dmFyIHM9ISghb3x8IW8uZm9yY2UpJiZvLmZvcmNlO3JldHVybiEoIXR8fCFzJiYwIT09ZShcIjpmb2N1c1wiLHQpLmxlbmd0aCkmJih0W24uaGlkZU1ldGhvZF0oe2R1cmF0aW9uOm4uaGlkZUR1cmF0aW9uLGVhc2luZzpuLmhpZGVFYXNpbmcsY29tcGxldGU6ZnVuY3Rpb24oKXtwKHQpfX0pLCEwKX1mdW5jdGlvbiBjKGUpe24mJm4oZSl9ZnVuY3Rpb24gZChuKXt2YXIgaT11KCksYT1uLmljb25DbGFzc3x8aS5pY29uQ2xhc3M7aWYodm9pZCAwIT09bi5vcHRpb25zT3ZlcnJpZGUmJihpPWUuZXh0ZW5kKGksbi5vcHRpb25zT3ZlcnJpZGUpLGE9bi5vcHRpb25zT3ZlcnJpZGUuaWNvbkNsYXNzfHxhKSwhZnVuY3Rpb24oZSx0KXtpZihlLnByZXZlbnREdXBsaWNhdGVzKXtpZih0Lm1lc3NhZ2U9PT1vKXJldHVybiEwO289dC5tZXNzYWdlfXJldHVybiExfShpLG4pKXtzKyssdD1yKGksITApO3ZhciBsPW51bGwsZD1lKFwiPGRpdi8+XCIpLGY9ZShcIjxkaXYvPlwiKSxnPWUoXCI8ZGl2Lz5cIiksbT1lKFwiPGRpdi8+XCIpLGg9ZShpLmNsb3NlSHRtbCksdj17aW50ZXJ2YWxJZDpudWxsLGhpZGVFdGE6bnVsbCxtYXhIaWRlVGltZTpudWxsfSxDPXt0b2FzdElkOnMsc3RhdGU6XCJ2aXNpYmxlXCIsc3RhcnRUaW1lOm5ldyBEYXRlLG9wdGlvbnM6aSxtYXA6bn07cmV0dXJuIG4uaWNvbkNsYXNzJiZkLmFkZENsYXNzKGkudG9hc3RDbGFzcykuYWRkQ2xhc3MoYSksZnVuY3Rpb24oKXtpZihuLnRpdGxlKXt2YXIgZT1uLnRpdGxlO2kuZXNjYXBlSHRtbCYmKGU9dyhuLnRpdGxlKSksZi5hcHBlbmQoZSkuYWRkQ2xhc3MoaS50aXRsZUNsYXNzKSxkLmFwcGVuZChmKX19KCksZnVuY3Rpb24oKXtpZihuLm1lc3NhZ2Upe3ZhciBlPW4ubWVzc2FnZTtpLmVzY2FwZUh0bWwmJihlPXcobi5tZXNzYWdlKSksZy5hcHBlbmQoZSkuYWRkQ2xhc3MoaS5tZXNzYWdlQ2xhc3MpLGQuYXBwZW5kKGcpfX0oKSxpLmNsb3NlQnV0dG9uJiYoaC5hZGRDbGFzcyhpLmNsb3NlQ2xhc3MpLmF0dHIoXCJyb2xlXCIsXCJidXR0b25cIiksZC5wcmVwZW5kKGgpKSxpLnByb2dyZXNzQmFyJiYobS5hZGRDbGFzcyhpLnByb2dyZXNzQ2xhc3MpLGQucHJlcGVuZChtKSksaS5ydGwmJmQuYWRkQ2xhc3MoXCJydGxcIiksaS5uZXdlc3RPblRvcD90LnByZXBlbmQoZCk6dC5hcHBlbmQoZCksZnVuY3Rpb24oKXt2YXIgZT1cIlwiO3N3aXRjaChuLmljb25DbGFzcyl7Y2FzZVwidG9hc3Qtc3VjY2Vzc1wiOmNhc2VcInRvYXN0LWluZm9cIjplPVwicG9saXRlXCI7YnJlYWs7ZGVmYXVsdDplPVwiYXNzZXJ0aXZlXCJ9ZC5hdHRyKFwiYXJpYS1saXZlXCIsZSl9KCksZC5oaWRlKCksZFtpLnNob3dNZXRob2RdKHtkdXJhdGlvbjppLnNob3dEdXJhdGlvbixlYXNpbmc6aS5zaG93RWFzaW5nLGNvbXBsZXRlOmkub25TaG93bn0pLGkudGltZU91dD4wJiYobD1zZXRUaW1lb3V0KFQsaS50aW1lT3V0KSx2Lm1heEhpZGVUaW1lPXBhcnNlRmxvYXQoaS50aW1lT3V0KSx2LmhpZGVFdGE9KG5ldyBEYXRlKS5nZXRUaW1lKCkrdi5tYXhIaWRlVGltZSxpLnByb2dyZXNzQmFyJiYodi5pbnRlcnZhbElkPXNldEludGVydmFsKEQsMTApKSksZnVuY3Rpb24oKXtpLmNsb3NlT25Ib3ZlciYmZC5ob3ZlcihPLGIpOyFpLm9uY2xpY2smJmkudGFwVG9EaXNtaXNzJiZkLmNsaWNrKFQpO2kuY2xvc2VCdXR0b24mJmgmJmguY2xpY2soZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24/ZS5zdG9wUHJvcGFnYXRpb24oKTp2b2lkIDAhPT1lLmNhbmNlbEJ1YmJsZSYmITAhPT1lLmNhbmNlbEJ1YmJsZSYmKGUuY2FuY2VsQnViYmxlPSEwKSxpLm9uQ2xvc2VDbGljayYmaS5vbkNsb3NlQ2xpY2soZSksVCghMCl9KTtpLm9uY2xpY2smJmQuY2xpY2soZnVuY3Rpb24oZSl7aS5vbmNsaWNrKGUpLFQoKX0pfSgpLGMoQyksaS5kZWJ1ZyYmY29uc29sZSYmY29uc29sZS5sb2coQyksZH1mdW5jdGlvbiB3KGUpe3JldHVybiBudWxsPT1lJiYoZT1cIlwiKSxlLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIikucmVwbGFjZSgvJy9nLFwiJiMzOTtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpfWZ1bmN0aW9uIFQodCl7dmFyIG49dCYmITEhPT1pLmNsb3NlTWV0aG9kP2kuY2xvc2VNZXRob2Q6aS5oaWRlTWV0aG9kLG89dCYmITEhPT1pLmNsb3NlRHVyYXRpb24/aS5jbG9zZUR1cmF0aW9uOmkuaGlkZUR1cmF0aW9uLHM9dCYmITEhPT1pLmNsb3NlRWFzaW5nP2kuY2xvc2VFYXNpbmc6aS5oaWRlRWFzaW5nO2lmKCFlKFwiOmZvY3VzXCIsZCkubGVuZ3RofHx0KXJldHVybiBjbGVhclRpbWVvdXQodi5pbnRlcnZhbElkKSxkW25dKHtkdXJhdGlvbjpvLGVhc2luZzpzLGNvbXBsZXRlOmZ1bmN0aW9uKCl7cChkKSxjbGVhclRpbWVvdXQobCksaS5vbkhpZGRlbiYmXCJoaWRkZW5cIiE9PUMuc3RhdGUmJmkub25IaWRkZW4oKSxDLnN0YXRlPVwiaGlkZGVuXCIsQy5lbmRUaW1lPW5ldyBEYXRlLGMoQyl9fSl9ZnVuY3Rpb24gYigpeyhpLnRpbWVPdXQ+MHx8aS5leHRlbmRlZFRpbWVPdXQ+MCkmJihsPXNldFRpbWVvdXQoVCxpLmV4dGVuZGVkVGltZU91dCksdi5tYXhIaWRlVGltZT1wYXJzZUZsb2F0KGkuZXh0ZW5kZWRUaW1lT3V0KSx2LmhpZGVFdGE9KG5ldyBEYXRlKS5nZXRUaW1lKCkrdi5tYXhIaWRlVGltZSl9ZnVuY3Rpb24gTygpe2NsZWFyVGltZW91dChsKSx2LmhpZGVFdGE9MCxkLnN0b3AoITAsITApW2kuc2hvd01ldGhvZF0oe2R1cmF0aW9uOmkuc2hvd0R1cmF0aW9uLGVhc2luZzppLnNob3dFYXNpbmd9KX1mdW5jdGlvbiBEKCl7dmFyIGU9KHYuaGlkZUV0YS0obmV3IERhdGUpLmdldFRpbWUoKSkvdi5tYXhIaWRlVGltZSoxMDA7bS53aWR0aChlK1wiJVwiKX19ZnVuY3Rpb24gdSgpe3JldHVybiBlLmV4dGVuZCh7fSx7dGFwVG9EaXNtaXNzOiEwLHRvYXN0Q2xhc3M6XCJ0b2FzdFwiLGNvbnRhaW5lcklkOlwidG9hc3QtY29udGFpbmVyXCIsZGVidWc6ITEsc2hvd01ldGhvZDpcImZhZGVJblwiLHNob3dEdXJhdGlvbjozMDAsc2hvd0Vhc2luZzpcInN3aW5nXCIsb25TaG93bjp2b2lkIDAsaGlkZU1ldGhvZDpcImZhZGVPdXRcIixoaWRlRHVyYXRpb246MWUzLGhpZGVFYXNpbmc6XCJzd2luZ1wiLG9uSGlkZGVuOnZvaWQgMCxjbG9zZU1ldGhvZDohMSxjbG9zZUR1cmF0aW9uOiExLGNsb3NlRWFzaW5nOiExLGNsb3NlT25Ib3ZlcjohMCxleHRlbmRlZFRpbWVPdXQ6MWUzLGljb25DbGFzc2VzOntlcnJvcjpcInRvYXN0LWVycm9yXCIsaW5mbzpcInRvYXN0LWluZm9cIixzdWNjZXNzOlwidG9hc3Qtc3VjY2Vzc1wiLHdhcm5pbmc6XCJ0b2FzdC13YXJuaW5nXCJ9LGljb25DbGFzczpcInRvYXN0LWluZm9cIixwb3NpdGlvbkNsYXNzOlwidG9hc3QtdG9wLXJpZ2h0XCIsdGltZU91dDo1ZTMsdGl0bGVDbGFzczpcInRvYXN0LXRpdGxlXCIsbWVzc2FnZUNsYXNzOlwidG9hc3QtbWVzc2FnZVwiLGVzY2FwZUh0bWw6ITEsdGFyZ2V0OlwiYm9keVwiLGNsb3NlSHRtbDonPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI+JnRpbWVzOzwvYnV0dG9uPicsY2xvc2VDbGFzczpcInRvYXN0LWNsb3NlLWJ1dHRvblwiLG5ld2VzdE9uVG9wOiEwLHByZXZlbnREdXBsaWNhdGVzOiExLHByb2dyZXNzQmFyOiExLHByb2dyZXNzQ2xhc3M6XCJ0b2FzdC1wcm9ncmVzc1wiLHJ0bDohMX0sYS5vcHRpb25zKX1mdW5jdGlvbiBwKGUpe3R8fCh0PXIoKSksZS5pcyhcIjp2aXNpYmxlXCIpfHwoZS5yZW1vdmUoKSxlPW51bGwsMD09PXQuY2hpbGRyZW4oKS5sZW5ndGgmJih0LnJlbW92ZSgpLG89dm9pZCAwKSl9fSgpfSl9KFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmU6ZnVuY3Rpb24oZSx0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnk6bnVsbCk6d2luZG93LnRvYXN0cj10KHdpbmRvdy5qUXVlcnkpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJ2WVhOMGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKa1pXWnBibVVpTENJa0lpd2lKR052Ym5SaGFXNWxjaUlzSW14cGMzUmxibVZ5SWl3aWNISmxkbWx2ZFhOVWIyRnpkQ0lzSW5SdllYTjBTV1FpTENKMGIyRnpkRlI1Y0dVaUxDSmxjbkp2Y2lJc0ltbHVabThpTENKemRXTmpaWE56SWl3aWQyRnlibWx1WnlJc0luUnZZWE4wY2lJc0ltTnNaV0Z5SWl3aUpIUnZZWE4wUld4bGJXVnVkQ0lzSW1Oc1pXRnlUM0IwYVc5dWN5SXNJbTl3ZEdsdmJuTWlMQ0puWlhSUGNIUnBiMjV6SWl3aVoyVjBRMjl1ZEdGcGJtVnlJaXdpWTJ4bFlYSlViMkZ6ZENJc0luUnZZWE4wYzFSdlEyeGxZWElpTENKamFHbHNaSEpsYmlJc0lta2lMQ0pzWlc1bmRHZ2lMQ0pqYkdWaGNrTnZiblJoYVc1bGNpSXNJbkpsYlc5MlpTSXNJbkpsYlc5MlpWUnZZWE4wSWl3aWJXVnpjMkZuWlNJc0luUnBkR3hsSWl3aWIzQjBhVzl1YzA5MlpYSnlhV1JsSWl3aWJtOTBhV1o1SWl3aWRIbHdaU0lzSW1samIyNURiR0Z6Y3lJc0ltbGpiMjVEYkdGemMyVnpJaXdpYzNWaWMyTnlhV0psSWl3aVkyRnNiR0poWTJzaUxDSjJaWEp6YVc5dUlpd2lZM0psWVhSbElpd2lZMjl1ZEdGcGJtVnlTV1FpTENKaGRIUnlJaXdpWVdSa1EyeGhjM01pTENKd2IzTnBkR2x2YmtOc1lYTnpJaXdpWVhCd1pXNWtWRzhpTENKMFlYSm5aWFFpTENKamNtVmhkR1ZEYjI1MFlXbHVaWElpTENKbWIzSmpaU0lzSW1ocFpHVk5aWFJvYjJRaUxDSmtkWEpoZEdsdmJpSXNJbWhwWkdWRWRYSmhkR2x2YmlJc0ltVmhjMmx1WnlJc0ltaHBaR1ZGWVhOcGJtY2lMQ0pqYjIxd2JHVjBaU0lzSW5CMVlteHBjMmdpTENKaGNtZHpJaXdpYldGd0lpd2laWGgwWlc1a0lpd2ljSEpsZG1WdWRFUjFjR3hwWTJGMFpYTWlMQ0p6YUc5MWJHUkZlR2wwSWl3aWFXNTBaWEoyWVd4SlpDSXNJaVIwYVhSc1pVVnNaVzFsYm5RaUxDSWtiV1Z6YzJGblpVVnNaVzFsYm5RaUxDSWtjSEp2WjNKbGMzTkZiR1Z0Wlc1MElpd2lKR05zYjNObFJXeGxiV1Z1ZENJc0ltTnNiM05sU0hSdGJDSXNJbkJ5YjJkeVpYTnpRbUZ5SWl3aWFHbGtaVVYwWVNJc0ltMWhlRWhwWkdWVWFXMWxJaXdpY21WemNHOXVjMlVpTENKemRHRjBaU0lzSW5OMFlYSjBWR2x0WlNJc0lrUmhkR1VpTENKMGIyRnpkRU5zWVhOeklpd2ljM1ZtWm1sNElpd2laWE5qWVhCbFNIUnRiQ0lzSW1Gd2NHVnVaQ0lzSW5ScGRHeGxRMnhoYzNNaUxDSnpaWFJVYVhSc1pTSXNJbTFsYzNOaFoyVkRiR0Z6Y3lJc0luTmxkRTFsYzNOaFoyVWlMQ0pqYkc5elpVSjFkSFJ2YmlJc0ltTnNiM05sUTJ4aGMzTWlMQ0p3Y21Wd1pXNWtJaXdpY0hKdlozSmxjM05EYkdGemN5SXNJbkowYkNJc0ltNWxkMlZ6ZEU5dVZHOXdJaXdpWVhKcFlWWmhiSFZsSWl3aWMyVjBRWEpwWVNJc0ltaHBaR1VpTENKemFHOTNUV1YwYUc5a0lpd2ljMmh2ZDBSMWNtRjBhVzl1SWl3aWMyaHZkMFZoYzJsdVp5SXNJbTl1VTJodmQyNGlMQ0owYVcxbFQzVjBJaXdpYzJWMFZHbHRaVzkxZENJc0ltaHBaR1ZVYjJGemRDSXNJbkJoY25ObFJteHZZWFFpTENKblpYUlVhVzFsSWl3aWMyVjBTVzUwWlhKMllXd2lMQ0oxY0dSaGRHVlFjbTluY21WemN5SXNJbU5zYjNObFQyNUliM1psY2lJc0ltaHZkbVZ5SWl3aWMzUnBZMnRCY205MWJtUWlMQ0prWld4aGVXVmtTR2xrWlZSdllYTjBJaXdpYjI1amJHbGpheUlzSW5SaGNGUnZSR2x6YldsemN5SXNJbU5zYVdOcklpd2laWFpsYm5RaUxDSnpkRzl3VUhKdmNHRm5ZWFJwYjI0aUxDSjFibVJsWm1sdVpXUWlMQ0pqWVc1alpXeENkV0ppYkdVaUxDSnZia05zYjNObFEyeHBZMnNpTENKb1lXNWtiR1ZGZG1WdWRITWlMQ0prWldKMVp5SXNJbU52Ym5OdmJHVWlMQ0pzYjJjaUxDSnpiM1Z5WTJVaUxDSnlaWEJzWVdObElpd2liM1psY25KcFpHVWlMQ0p0WlhSb2IyUWlMQ0pqYkc5elpVMWxkR2h2WkNJc0ltTnNiM05sUkhWeVlYUnBiMjRpTENKamJHOXpaVVZoYzJsdVp5SXNJbU5zWldGeVZHbHRaVzkxZENJc0ltOXVTR2xrWkdWdUlpd2laVzVrVkdsdFpTSXNJbVY0ZEdWdVpHVmtWR2x0WlU5MWRDSXNJbk4wYjNBaUxDSndaWEpqWlc1MFlXZGxJaXdpZDJsa2RHZ2lMQ0pwY3lJc0ltRnRaQ0lzSW1SbGNITWlMQ0ptWVdOMGIzSjVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSW1wUmRXVnllU0pkTENKdFlYQndhVzVuY3lJNklrTkJZVU1zVTBGQlZVRXNSMEZEVUVFc1IwRkJVU3hWUVVGWExGTkJRVlZETEVkQlEzcENMRTlCUVU4c1YwRkRTQ3hKUVVGSlF5eEZRVU5CUXl4RlFYTkNRVU1zUlVGeVFrRkRMRVZCUVZVc1JVRkRWa01zUjBGRFFVTXNUVUZCVHl4UlFVTlFReXhMUVVGTkxFOUJRMDVETEZGQlFWTXNWVUZEVkVNc1VVRkJVeXhYUVVkVVF5eEhRVU5CUXl4TlFUQkZTaXhUUVVGbFF5eEZRVUZsUXl4SFFVTXhRaXhKUVVGSlF5eEZRVUZWUXl4SlFVTlVaQ3hIUVVGalpTeEZRVUZoUml4SFFVTXpRa2NzUlVGQlYwd3NSVUZCWlVVc1JVRkJVMFFzU1VGdFFqVkRMRk5CUVhsQ1F5eEhRVVZ5UWl4SlFVUkJMRWxCUVVsSkxFVkJRV2RDYWtJc1JVRkJWMnRDTEZkQlEzUkNReXhGUVVGSlJpeEZRVUZqUnl4UFFVRlRMRVZCUVVkRUxFZEJRVXNzUlVGQlIwRXNTVUZETTBOSUxFVkJRVmRxUWl4RlFVRkZhMElzUlVGQlkwVXNTVUZCUzA0c1IwRnlRbWhEVVN4RFFVRmxVaXhKUVRkRmJrSlRMRTlCYVVaS0xGTkJRV2RDV0N4SFFVTmFMRWxCUVVsRkxFVkJRVlZETEVsQlExUmtMRWRCUVdObExFVkJRV0ZHTEVkQlEyaERMRWRCUVVsR0xFZEJRWFZFTEVsQlFYUkRXaXhGUVVGRkxGTkJRVlZaTEVkQlFXVlRMRTlCUlRWRExGbEJSRUZITEVWQlFWbGFMRWRCUjFwWUxFVkJRVmRyUWl4WFFVRlhSU3hSUVVOMFFuQkNMRVZCUVZkelFpeFZRWGhHWm1wQ0xFMUJaMEpLTEZOQlFXVnRRaXhGUVVGVFF5eEZRVUZQUXl4SFFVTXpRaXhQUVVGUFF5eEhRVU5JUXl4TFFVRk5lRUlzUlVGQlZVTXNUVUZEYUVKM1FpeFZRVUZYWml4SlFVRmhaMElzV1VGQldYcENMRTFCUTNCRGJVSXNVVUZCVTBFc1JVRkRWRVVzWjBKQlFXbENRU3hGUVVOcVFrUXNUVUZCVDBFc1MwRnlRbGhXTEdGQlFXTkJMRVZCUTJSVUxFdEJiME5LTEZOQlFXTnJRaXhGUVVGVFF5eEZRVUZQUXl4SFFVTXhRaXhQUVVGUFF5eEhRVU5JUXl4TFFVRk5lRUlzUlVGQlZVVXNTMEZEYUVKMVFpeFZRVUZYWml4SlFVRmhaMElzV1VGQldYaENMRXRCUTNCRGEwSXNVVUZCVTBFc1JVRkRWRVVzWjBKQlFXbENRU3hGUVVOcVFrUXNUVUZCVDBFc1MwRjZRMWhhTEZkQlEwRnJRaXhWUVRSRFNpeFRRVUZ0UWtNc1IwRkRaaTlDTEVWQlFWY3JRaXhIUVRWRFdIcENMRkZCSzBOS0xGTkJRV2xDYVVJc1JVRkJVME1zUlVGQlQwTXNSMEZETjBJc1QwRkJUME1zUjBGRFNFTXNTMEZCVFhoQ0xFVkJRVlZITEZGQlEyaENjMElzVlVGQlYyWXNTVUZCWVdkQ0xGbEJRVmwyUWl4UlFVTndRMmxDTEZGQlFWTkJMRVZCUTFSRkxHZENRVUZwUWtFc1JVRkRha0pFTEUxQlFVOUJMRXRCY0VSWVVTeFJRVUZUTEZGQlExUjZRaXhSUVhWRVNpeFRRVUZwUW1kQ0xFVkJRVk5ETEVWQlFVOURMRWRCUXpkQ0xFOUJRVTlETEVkQlEwaERMRXRCUVUxNFFpeEZRVUZWU1N4UlFVTm9RbkZDTEZWQlFWZG1MRWxCUVdGblFpeFpRVUZaZEVJc1VVRkRjRU5uUWl4UlFVRlRRU3hGUVVOVVJTeG5Ra0ZCYVVKQkxFVkJRMnBDUkN4TlFVRlBRU3hOUVhoRVppeFBRVUZQYUVJc1JVRmpVQ3hUUVVGVFRTeEZRVUZoUml4RlFVRlRjVUlzUjBGSE0wSXNUMEZHUzNKQ0xFbEJRVmRCTEVWQlFWVkRMRTFCUXpGQ1pDeEZRVUZoUkN4RlFVRkZMRWxCUVUxakxFVkJRVkZ6UWl4alFVTmtaaXhQUVVOS2NFSXNSMEZGVUd0RExFbEJRMEZzUXl4RlFXbEdVaXhUUVVGNVFtRXNSMEZOY2tJc1QwRk1RV0lzUlVGQllVUXNSVUZCUlN4VlFVTldjVU1zUzBGQlN5eExRVUZOZGtJc1JVRkJVWE5DTEdGQlEyNUNSU3hUUVVGVGVFSXNSVUZCVVhsQ0xHZENRVVZZUXl4VFFVRlRlRU1zUlVGQlJXTXNSVUZCVVRKQ0xGTkJRM1pDZUVNc1JVRjJSbFY1UXl4RFFVRm5RalZDTEVsQlJURkNZaXhIUVd0RldDeFRRVUZUWjBJc1JVRkJXVXdzUlVGQlpVVXNSVUZCVTBRc1IwRkRla01zU1VGQlNUaENMRXRCUVZFNVFpeEpRVUZuUWtFc1JVRkJZVGhDTEZGQlFWRTVRaXhGUVVGaE9FSXNUVUZET1VRc1UwRkJTUzlDTEVsQlFXdENLMElzUjBGQkswTXNTVUZCZEVNelF5eEZRVUZGTEZOQlFWVlpMRWRCUVdWVExGVkJRM1JFVkN4RlFVRmpSU3hGUVVGUk9FSXNZVUZEYkVKRExGTkJRVlV2UWl4RlFVRlJaME1zWVVGRGJFSkRMRTlCUVZGcVF5eEZRVUZSYTBNc1YwRkRhRUpETEZOQlFWVXNWMEZCWTNwQ0xFVkJRVmxhTEU5QlJXcERMRWRCTUVSbUxGTkJRVk56UXl4RlFVRlJReXhIUVVOU2FrUXNSMEZEVEVFc1JVRkJVMmxFTEVkQlIySXNVMEZCVTNaQ0xFVkJRVTkzUWl4SFFVTmFMRWxCUVVsMFF5eEZRVUZWUXl4SlFVTldaU3hGUVVGWmMwSXNSVUZCU1hSQ0xGZEJRV0ZvUWl4RlFVRlJaMElzVlVGUGVrTXNVVUZNY1VNc1NVRkJla0p6UWl4RlFVRnRRaXhyUWtGRE0wSjBReXhGUVVGVlpDeEZRVUZGY1VRc1QwRkJUM1pETEVWQlFWTnpReXhGUVVGSmVrSXNhVUpCUTJoRFJ5eEZRVUZaYzBJc1JVRkJTWHBDTEdkQ1FVRm5Ra2NzVjBGQllVRXNTVUY1VEdwRUxGTkJRVzlDYUVJc1JVRkJVM05ETEVkQlEzcENMRWRCUVVsMFF5eEZRVUZSZDBNc2EwSkJRVzFDTEVOQlF6TkNMRWRCUVVsR0xFVkJRVWt6UWl4VlFVRlpkRUlzUlVGRGFFSXNUMEZCVHl4RlFVVlFRU3hGUVVGblFtbEVMRVZCUVVrelFpeFJRVWMxUWl4UFFVRlBMRVZCT1V4UU9FSXNRMEZCVjNwRExFVkJRVk56UXl4SFFVRjRRaXhEUVVWQmFFUXNTVUZGUVVnc1JVRkJZV1VzUlVGQllVWXNSMEZCVXl4SFFVVnVReXhKUVVGSk1FTXNSVUZCWVN4TFFVTmlOVU1zUlVGQlowSmFMRVZCUVVVc1ZVRkRiRUo1UkN4RlFVRm5RbnBFTEVWQlFVVXNWVUZEYkVJd1JDeEZRVUZyUWpGRUxFVkJRVVVzVlVGRGNFSXlSQ3hGUVVGdFFqTkVMRVZCUVVVc1ZVRkRja0kwUkN4RlFVRm5RalZFTEVWQlFVVmpMRVZCUVZFclF5eFhRVU14UWtNc1IwRkRRVTRzVjBGQldTeExRVU5hVHl4UlFVRlRMRXRCUTFSRExGbEJRV0VzVFVGRllrTXNSMEZEUVRkRUxGRkJRVk5CTEVWQlExUTRSQ3hOUVVGUExGVkJRMUJETEZWQlFWY3NTVUZCU1VNc1MwRkRablJFTEZGQlFWTkJMRVZCUTFSelF5eEpRVUZMUVN4SFFXVlVMRTlCTUVaUlFTeEZRVUZKZEVJc1YwRkRTbXhDTEVWQlFXTXdRaXhUUVVGVGVFSXNSVUZCVVhWRUxGbEJRVmt2UWl4VFFVRlRVaXhIUVZrMVJDeFhRVU5KTEVkQlFVbHpRaXhGUVVGSk1VSXNUVUZCVHl4RFFVTllMRWxCUVVrMFF5eEZRVUZUYkVJc1JVRkJTVEZDTEUxQlEySmFMRVZCUVZGNVJDeGhRVU5TUkN4RlFVRlRReXhGUVVGWGJrSXNSVUZCU1RGQ0xGRkJSVFZDSzBJc1JVRkJZMlVzVDBGQlQwWXNSMEZCVVdoRExGTkJRVk40UWl4RlFVRlJNa1FzV1VGRE9VTTNSQ3hGUVVGak5FUXNUMEZCVDJZc1NVRTNSbnBDYVVJc1IwRnBSMG9zVjBGRFNTeEhRVUZKZEVJc1JVRkJTVE5DTEZGQlFWTXNRMEZEWWl4SlFVRkpOa01zUlVGQlUyeENMRVZCUVVrelFpeFJRVU5pV0N4RlFVRlJlVVFzWVVGRFVrUXNSVUZCVTBNc1JVRkJWMjVDTEVWQlFVa3pRaXhWUVVVMVFtbERMRVZCUVdkQ1l5eFBRVUZQUml4SFFVRlJhRU1zVTBGQlUzaENMRVZCUVZFMlJDeGpRVU5vUkM5RUxFVkJRV00wUkN4UFFVRlBaQ3hKUVhaSGVrSnJRaXhIUVRSSFNUbEVMRVZCUVZFclJDeGpRVU5TYWtJc1JVRkJZM1JDTEZOQlFWTjRRaXhGUVVGUlowVXNXVUZCV1hwRExFdEJRVXNzVDBGQlVTeFZRVU40UkhwQ0xFVkJRV050UlN4UlFVRlJia0lzU1VGTGRFSTVReXhGUVVGUlowUXNZMEZEVWtnc1JVRkJhVUp5UWl4VFFVRlRlRUlzUlVGQlVXdEZMR1ZCUTJ4RGNFVXNSVUZCWTIxRkxGRkJRVkZ3UWl4SlFVdDBRamRETEVWQlFWRnRSU3hMUVVOU2NrVXNSVUZCWXpCQ0xGTkJRVk1zVDBFM1EzWkNlRUlzUlVGQlVXOUZMRmxCUTFKcVJpeEZRVUZYT0VVc1VVRkJVVzVGTEVkQlJXNUNXQ3hGUVVGWGRVVXNUMEZCVHpWRUxFZEJla1V4UWl4WFFVTkpMRWxCUVVsMVJTeEZRVUZaTEVkQlEyaENMRTlCUVZFdlFpeEZRVUZKZEVJc1YwRkRVaXhKUVVGTExHZENRVU5NTEVsQlFVc3NZVUZEUkhGRUxFVkJRV0VzVTBGRFlpeE5RVU5LTEZGQlEwbEJMRVZCUVZrc1dVRkZjRUoyUlN4RlFVRmplVUlzUzBGQlN5eFpRVUZoT0VNc1IwRmlhRU5ETEVkQmEwUkJlRVVzUlVGQlkzbEZMRTlCUldSNlJTeEZRVUZqUlN4RlFVRlJkMFVzWVVGRGFrSjZReXhUUVVGVkwwSXNSVUZCVVhsRkxHRkJRV040UXl4UFFVRlJha01zUlVGQlVUQkZMRmRCUVZsMlF5eFRRVUZWYmtNc1JVRkJVVEpGTEZWQlJ5OUZNMFVzUlVGQlVUUkZMRkZCUVZVc1NVRkRiRUpzUXl4RlFVRmhiVU1zVjBGQlYwTXNSVUZCVnpsRkxFVkJRVkUwUlN4VFFVTXpRelZDTEVWQlFWbEZMRmxCUVdNMlFpeFhRVUZYTDBVc1JVRkJVVFJGTEZOQlF6ZEROVUlzUlVGQldVTXNVMEZCVlN4SlFVRkpTeXhOUVVGUE1FSXNWVUZCV1doRExFVkJRVmxGTEZsQlEzSkViRVFzUlVGQlVXZEVMR05CUTFKQkxFVkJRVmxPTEZkQlFXRjFReXhaUVVGWlF5eEZRVUZuUWl4TlFUZERha1VzVjBGRFVXeEdMRVZCUVZGdFJpeGpRVU5TY2tZc1JVRkJZM05HTEUxQlFVMURMRVZCUVdGRExFbEJSMmhEZEVZc1JVRkJVWFZHTEZOQlFWZDJSaXhGUVVGUmQwWXNZMEZETlVJeFJpeEZRVUZqTWtZc1RVRkJUVmdzUjBGSGNFSTVSU3hGUVVGUkswUXNZVUZCWldwQ0xFZEJRM1pDUVN4RlFVRmpNa01zVFVGQlRTeFRRVUZWUXl4SFFVTjBRa0VzUlVGQlRVTXNaMEpCUTA1RUxFVkJRVTFETEhWQ1FVTjNRa01zU1VGQmRrSkdMRVZCUVUxSExHVkJRWEZFTEVsQlFYWkNTQ3hGUVVGTlJ5eGxRVU5xUkVnc1JVRkJUVWNzWTBGQlpTeEhRVWR5UWpkR0xFVkJRVkU0Uml4alFVTlNPVVlzUlVGQlVUaEdMR0ZCUVdGS0xFZEJSM3BDV2l4SFFVRlZMRXRCU1dRNVJTeEZRVUZSZFVZc1UwRkRVbnBHTEVWQlFXTXlSaXhOUVVGTkxGTkJRVlZETEVkQlF6RkNNVVlzUlVGQlVYVkdMRkZCUVZGSExFZEJRMmhDV2l4TlFUTkZXbWxDTEVkQlJVRXpSQ3hGUVVGUlpTeEhRVVZLYmtRc1JVRkJVV2RITEU5QlFWTkRMRk5CUTJwQ1FTeFJRVUZSUXl4SlFVRkpMME1zUjBGSFZISkVMRVZCUlZBc1UwRkJVekpFTEVWQlFWY3dReXhIUVV0b1FpeFBRVXBqTEUxQlFWWkJMRWxCUTBGQkxFVkJRVk1zU1VGSFRrRXNSVUZEUmtNc1VVRkJVU3hMUVVGTkxGTkJRMlJCTEZGQlFWRXNTMEZCVFN4VlFVTmtRU3hSUVVGUkxFdEJRVTBzVTBGRFpFRXNVVUZCVVN4TFFVRk5MRkZCUTJSQkxGRkJRVkVzUzBGQlRTeFJRV2RLZGtJc1UwRkJVM1JDTEVWQlFWVjFRaXhIUVVObUxFbEJRVWxETEVWQlFWTkVMRWxCUVc5RExFbEJRWGhDY2tjc1JVRkJVWFZITEZsQlFYZENka2NzUlVGQlVYVkhMRmxCUVdOMlJ5eEZRVUZST0VJc1YwRkRia1pETEVWQlFWZHpSU3hKUVVGelF5eEpRVUV4UW5KSExFVkJRVkYzUnl4alFVTXZRbmhITEVWQlFWRjNSeXhqUVVGblFuaEhMRVZCUVZGblF5eGhRVU5vUTBNc1JVRkJVMjlGTEVsQlFXOURMRWxCUVhoQ2NrY3NSVUZCVVhsSExGbEJRWGRDZWtjc1JVRkJVWGxITEZsQlFXTjZSeXhGUVVGUmEwTXNWMEZEZGtZc1NVRkJTV2hFTEVWQlFVVXNVMEZCVlZrc1IwRkJaVk1zVVVGQlZ6aEdMRVZCU1RGRExFOUJSRUZMTEdGQlFXRXhSQ3hGUVVGWlRpeFpRVU5zUWpWRExFVkJRV04zUnl4SlFVTnFRblpGTEZOQlFWVkJMRVZCUTFaRkxFOUJRVkZCTEVWQlExSkZMRk5CUVZVc1YwRkRUbnBDTEVWQlFWbGFMRWRCUTFvMFJ5eGhRVUZoYUVVc1IwRkRWREZETEVWQlFWRXlSeXhWUVVFclFpeFhRVUZ1UW5oRUxFVkJRVk5ETEU5QlF6ZENjRVFzUlVGQlVUSkhMRmRCUlZwNFJDeEZRVUZUUXl4TlFVRlJMRk5CUTJwQ1JDeEZRVUZUZVVRc1VVRkJWU3hKUVVGSmRFUXNTMEZEZGtKc1FpeEZRVUZSWlN4TlFVdHdRaXhUUVVGVGJVTXNTMEZEUkhSR0xFVkJRVkUwUlN4UlFVRlZMRWRCUVVzMVJTeEZRVUZSTmtjc1owSkJRV3RDTEV0QlEycEVia1VzUlVGQllXMURMRmRCUVZkRExFVkJRVmM1UlN4RlFVRlJOa2NzYVVKQlF6TkROMFFzUlVGQldVVXNXVUZCWXpaQ0xGZEJRVmN2UlN4RlFVRlJOa2NzYVVKQlF6ZEROMFFzUlVGQldVTXNVMEZCVlN4SlFVRkpTeXhOUVVGUE1FSXNWVUZCV1doRExFVkJRVmxGTEdGQlNXcEZMRk5CUVZOdFF5eEpRVU5NY1VJc1lVRkJZV2hGTEVkQlEySk5MRVZCUVZsRExGRkJRVlVzUlVGRGRFSnVSQ3hGUVVGalowZ3NUVUZCU3l4SFFVRk5MRWRCUVUwNVJ5eEZRVUZSZDBVc1lVRkRiRU42UXl4VFFVRlZMMElzUlVGQlVYbEZMR0ZCUVdONFF5eFBRVUZSYWtNc1JVRkJVVEJGTEdGQlNYcEVMRk5CUVZOUkxFbEJRMHdzU1VGQlNUWkNMRWRCUVdVdlJDeEZRVUZaUXl4VFFVRlhMRWxCUVVsTExFMUJRVTh3UWl4WFFVRmphRU1zUlVGQldVVXNXVUZCWlN4SlFVTTVSa3dzUlVGQmFVSnRSU3hOUVVGTlJDeEZRVUZoTEUxQlNUVkRMRk5CUVZNNVJ5eEpRVU5NTEU5QlFVOW1MRVZCUVVWeFJDeFhRWHBUVEdsRUxHTkJRV01zUlVGRFpHcERMRmRCUVZrc1VVRkRXbXBETEZsQlFXRXNhMEpCUTJJd1JTeFBRVUZQTEVWQlJWQjRRaXhYUVVGWkxGTkJRMXBETEdGQlFXTXNTVUZEWkVNc1YwRkJXU3hSUVVOYVF5eGhRVUZUYVVJc1JVRkRWRGxFTEZkQlFWa3NWVUZEV2tVc1lVRkJZeXhKUVVOa1JTeFhRVUZaTEZGQlExcDVSU3hqUVVGVlppeEZRVU5XVnl4aFFVRmhMRVZCUTJKRExHVkJRV1VzUlVGRFprTXNZVUZCWVN4RlFVTmlkRUlzWTBGQll5eEZRVVZrTUVJc1owSkJRV2xDTEVsQlEycENOVVlzWVVGRFNYcENMRTFCUVU4c1kwRkRVRU1zUzBGQlRTeGhRVU5PUXl4UlFVRlRMR2RDUVVOVVF5eFJRVUZUTEdsQ1FVVmljVUlzVlVGQlZ5eGhRVU5ZVXl4alFVRmxMR3RDUVVObWJVUXNVVUZCVXl4SlFVTlVha0lzVjBGQldTeGpRVU5hUlN4aFFVRmpMR2RDUVVOa1NpeFpRVUZaTEVWQlExbzVRaXhQUVVGUkxFOUJRMUp2UWl4VlFVRlhMSGxEUVVOWWFVSXNWMEZCV1N4eFFrRkRXa2tzWVVGQllTeEZRVU5pTlVJc2JVSkJRVzFDTEVWQlEyNUNVU3hoUVVGaExFVkJRMkpyUWl4alFVRmxMR2xDUVVObVF5eExRVUZMTEVkQmJWRXdRblpGTEVWQlFVOUpMRk5CUnpsRExGTkJRVk5WTEVWQlFWbGFMRWRCUTFwWUxFbEJRV05CTEVWQlFXRmxMRXRCUXpWQ1NpeEZRVUZqYlVnc1IwRkJSeXhqUVVkeVFtNUlMRVZCUVdOWExGTkJRMlJZTEVWQlFXZENMRXRCUTNGQ0xFbEJRV3BEV0N4RlFVRlhhMElzVjBGQlYwVXNVMEZEZEVKd1FpeEZRVUZYYzBJc1UwRkRXSEJDTEU5QlFXZENkVWNzUzBGb1kzSkNMRXRCUm1Zc1EwRjNZMjlDTEcxQ1FVRllNMGNzVVVGQmVVSkJMRTlCUVU5cFNTeEpRVUZOYWtrc1QwRkJVeXhUUVVGVmEwa3NSVUZCVFVNc1IwRkRPVU1zYjBKQlFWaERMRkZCUVRCQ1FTeFBRVUZQUXl4UlFVTjRRMFFzVDBGQlQwTXNVVUZCVlVZc1JVRkJNa0lzYjBKQlFWaEhMRTlCUVhsQ1FTeFBRVUZsTEU5QlFYTkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJaU3hQUVVGSkxFMUJSV2hKUkN4UFFVRlBNMGdzVDBGQlUzZElMRVZCUVZGSExFOUJRVTlGSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMMjV2WkdWZmJXOWtkV3hsY3k5MGIyRnpkSEl2ZEc5aGMzUnlMbXB6SW4wPSIsIlwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt0LnN1cGVyXz1lLHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pfTptb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3Quc3VwZXJfPWU7dmFyIG89ZnVuY3Rpb24oKXt9O28ucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyBvLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWFHVnlhWFJ6WDJKeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lUMkpxWldOMElpd2lZM0psWVhSbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbU4wYjNJaUxDSnpkWEJsY2tOMGIzSWlMQ0p6ZFhCbGNsOGlMQ0p3Y205MGIzUjVjR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJblpoYkhWbElpd2laVzUxYldWeVlXSnNaU0lzSW5keWFYUmhZbXhsSWl3aVkyOXVabWxuZFhKaFlteGxJaXdpVkdWdGNFTjBiM0lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUUyUWl4dFFrRkJiRUpCTEU5QlFVOURMRTlCUldoQ1F5eFBRVUZQUXl4UlFVRlZMRk5CUVd0Q1F5eEZRVUZOUXl4SFFVTjJRMFFzUlVGQlMwVXNUMEZCVTBRc1JVRkRaRVFzUlVGQlMwY3NWVUZCV1ZBc1QwRkJUME1zVDBGQlQwa3NSVUZCVlVVc1YwRkRka05ETEdGQlEwVkRMRTFCUVU5TUxFVkJRMUJOTEZsQlFWa3NSVUZEV2tNc1ZVRkJWU3hGUVVOV1F5eGpRVUZqTEUxQlRYQkNWaXhQUVVGUFF5eFJRVUZWTEZOQlFXdENReXhGUVVGTlF5eEhRVU4yUTBRc1JVRkJTMFVzVDBGQlUwUXNSVUZEWkN4SlFVRkpVU3hGUVVGWExHRkJRMlpCTEVWQlFWTk9MRlZCUVZsR0xFVkJRVlZGTEZWQlF5OUNTQ3hGUVVGTFJ5eFZRVUZaTEVsQlFVbE5MRVZCUTNKQ1ZDeEZRVUZMUnl4VlFVRlZReXhaUVVGalNpSXNJbVpwYkdVaU9pSXZkbUZ5TDNkM2R5OXRiM05oYVdOdkxXMWhjM1JsY2k5dWIyUmxYMjF2WkhWc1pYTXZkWFJwYkM5dWIyUmxYMjF2WkhWc1pYTXZhVzVvWlhKcGRITXZhVzVvWlhKcGRITmZZbkp2ZDNObGNpNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuIG8mJlwib2JqZWN0XCI9PXR5cGVvZiBvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLmNvcHkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG8uZmlsbCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygby5yZWFkVUludDh9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1selFuVm1abVZ5UW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lZWEpuSWl3aVkyOXdlU0lzSW1acGJHd2lMQ0p5WldGa1ZVbHVkRGdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UFFVRlBReXhSUVVGVkxGTkJRV3RDUXl4SFFVTnFReXhQUVVGUFFTeEhRVUZ6UWl4cFFrRkJVa0VzUjBGRFNTeHRRa0ZCWWtFc1JVRkJTVU1zVFVGRFV5eHRRa0ZCWWtRc1JVRkJTVVVzVFVGRFl5eHRRa0ZCYkVKR0xFVkJRVWxISWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMMjV2WkdWZmJXOWtkV3hsY3k5MWRHbHNMM04xY0hCdmNuUXZhWE5DZFdabVpYSkNjbTkzYzJWeUxtcHpJbjA9IiwidmFyIGZvcm1hdFJlZ0V4cD0vJVtzZGolXS9nO2V4cG9ydHMuZm9ybWF0PWZ1bmN0aW9uKGUpe2lmKCFpc1N0cmluZyhlKSl7Zm9yKHZhciByPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXIucHVzaChpbnNwZWN0KGFyZ3VtZW50c1t0XSkpO3JldHVybiByLmpvaW4oXCIgXCIpfXQ9MTtmb3IodmFyIG49YXJndW1lbnRzLGk9bi5sZW5ndGgsbz1TdHJpbmcoZSkucmVwbGFjZShmb3JtYXRSZWdFeHAsZnVuY3Rpb24oZSl7aWYoXCIlJVwiPT09ZSlyZXR1cm5cIiVcIjtpZih0Pj1pKXJldHVybiBlO3N3aXRjaChlKXtjYXNlXCIlc1wiOnJldHVybiBTdHJpbmcoblt0KytdKTtjYXNlXCIlZFwiOnJldHVybiBOdW1iZXIoblt0KytdKTtjYXNlXCIlalwiOnRyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoblt0KytdKX1jYXRjaChlKXtyZXR1cm5cIltDaXJjdWxhcl1cIn1kZWZhdWx0OnJldHVybiBlfX0pLHM9blt0XTt0PGk7cz1uWysrdF0paXNOdWxsKHMpfHwhaXNPYmplY3Qocyk/bys9XCIgXCIrczpvKz1cIiBcIitpbnNwZWN0KHMpO3JldHVybiBvfSxleHBvcnRzLmRlcHJlY2F0ZT1mdW5jdGlvbihlLHIpe2lmKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSlyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZSxyKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2lmKCEwPT09cHJvY2Vzcy5ub0RlcHJlY2F0aW9uKXJldHVybiBlO3ZhciB0PSExO3JldHVybiBmdW5jdGlvbigpe2lmKCF0KXtpZihwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pdGhyb3cgbmV3IEVycm9yKHIpO3Byb2Nlc3MudHJhY2VEZXByZWNhdGlvbj9jb25zb2xlLnRyYWNlKHIpOmNvbnNvbGUuZXJyb3IociksdD0hMH1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fTt2YXIgZGVidWdFbnZpcm9uLGRlYnVncz17fTtmdW5jdGlvbiBpbnNwZWN0KGUscil7dmFyIHQ9e3NlZW46W10sc3R5bGl6ZTpzdHlsaXplTm9Db2xvcn07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+PTMmJih0LmRlcHRoPWFyZ3VtZW50c1syXSksYXJndW1lbnRzLmxlbmd0aD49NCYmKHQuY29sb3JzPWFyZ3VtZW50c1szXSksaXNCb29sZWFuKHIpP3Quc2hvd0hpZGRlbj1yOnImJmV4cG9ydHMuX2V4dGVuZCh0LHIpLGlzVW5kZWZpbmVkKHQuc2hvd0hpZGRlbikmJih0LnNob3dIaWRkZW49ITEpLGlzVW5kZWZpbmVkKHQuZGVwdGgpJiYodC5kZXB0aD0yKSxpc1VuZGVmaW5lZCh0LmNvbG9ycykmJih0LmNvbG9ycz0hMSksaXNVbmRlZmluZWQodC5jdXN0b21JbnNwZWN0KSYmKHQuY3VzdG9tSW5zcGVjdD0hMCksdC5jb2xvcnMmJih0LnN0eWxpemU9c3R5bGl6ZVdpdGhDb2xvciksZm9ybWF0VmFsdWUodCxlLHQuZGVwdGgpfWZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3IoZSxyKXt2YXIgdD1pbnNwZWN0LnN0eWxlc1tyXTtyZXR1cm4gdD9cIlx1MDAxYltcIitpbnNwZWN0LmNvbG9yc1t0XVswXStcIm1cIitlK1wiXHUwMDFiW1wiK2luc3BlY3QuY29sb3JzW3RdWzFdK1wibVwiOmV9ZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3IoZSxyKXtyZXR1cm4gZX1mdW5jdGlvbiBhcnJheVRvSGFzaChlKXt2YXIgcj17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cltlXT0hMH0pLHJ9ZnVuY3Rpb24gZm9ybWF0VmFsdWUoZSxyLHQpe2lmKGUuY3VzdG9tSW5zcGVjdCYmciYmaXNGdW5jdGlvbihyLmluc3BlY3QpJiZyLmluc3BlY3QhPT1leHBvcnRzLmluc3BlY3QmJighci5jb25zdHJ1Y3Rvcnx8ci5jb25zdHJ1Y3Rvci5wcm90b3R5cGUhPT1yKSl7dmFyIG49ci5pbnNwZWN0KHQsZSk7cmV0dXJuIGlzU3RyaW5nKG4pfHwobj1mb3JtYXRWYWx1ZShlLG4sdCkpLG59dmFyIGk9Zm9ybWF0UHJpbWl0aXZlKGUscik7aWYoaSlyZXR1cm4gaTt2YXIgbz1PYmplY3Qua2V5cyhyKSxzPWFycmF5VG9IYXNoKG8pO2lmKGUuc2hvd0hpZGRlbiYmKG89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocikpLGlzRXJyb3IocikmJihvLmluZGV4T2YoXCJtZXNzYWdlXCIpPj0wfHxvLmluZGV4T2YoXCJkZXNjcmlwdGlvblwiKT49MCkpcmV0dXJuIGZvcm1hdEVycm9yKHIpO2lmKDA9PT1vLmxlbmd0aCl7aWYoaXNGdW5jdGlvbihyKSl7dmFyIHU9ci5uYW1lP1wiOiBcIityLm5hbWU6XCJcIjtyZXR1cm4gZS5zdHlsaXplKFwiW0Z1bmN0aW9uXCIrdStcIl1cIixcInNwZWNpYWxcIil9aWYoaXNSZWdFeHAocikpcmV0dXJuIGUuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwociksXCJyZWdleHBcIik7aWYoaXNEYXRlKHIpKXJldHVybiBlLnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyKSxcImRhdGVcIik7aWYoaXNFcnJvcihyKSlyZXR1cm4gZm9ybWF0RXJyb3Iocil9dmFyIGMsYT1cIlwiLGw9ITEscD1bXCJ7XCIsXCJ9XCJdOyhpc0FycmF5KHIpJiYobD0hMCxwPVtcIltcIixcIl1cIl0pLGlzRnVuY3Rpb24ocikpJiYoYT1cIiBbRnVuY3Rpb25cIisoci5uYW1lP1wiOiBcIityLm5hbWU6XCJcIikrXCJdXCIpO3JldHVybiBpc1JlZ0V4cChyKSYmKGE9XCIgXCIrUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpKSxpc0RhdGUocikmJihhPVwiIFwiK0RhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwocikpLGlzRXJyb3IocikmJihhPVwiIFwiK2Zvcm1hdEVycm9yKHIpKSwwIT09by5sZW5ndGh8fGwmJjAhPXIubGVuZ3RoP3Q8MD9pc1JlZ0V4cChyKT9lLnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpLFwicmVnZXhwXCIpOmUuc3R5bGl6ZShcIltPYmplY3RdXCIsXCJzcGVjaWFsXCIpOihlLnNlZW4ucHVzaChyKSxjPWw/Zm9ybWF0QXJyYXkoZSxyLHQscyxvKTpvLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZm9ybWF0UHJvcGVydHkoZSxyLHQscyxuLGwpfSksZS5zZWVuLnBvcCgpLHJlZHVjZVRvU2luZ2xlU3RyaW5nKGMsYSxwKSk6cFswXSthK3BbMV19ZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGUscil7aWYoaXNVbmRlZmluZWQocikpcmV0dXJuIGUuc3R5bGl6ZShcInVuZGVmaW5lZFwiLFwidW5kZWZpbmVkXCIpO2lmKGlzU3RyaW5nKHIpKXt2YXIgdD1cIidcIitKU09OLnN0cmluZ2lmeShyKS5yZXBsYWNlKC9eXCJ8XCIkL2csXCJcIikucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykrXCInXCI7cmV0dXJuIGUuc3R5bGl6ZSh0LFwic3RyaW5nXCIpfXJldHVybiBpc051bWJlcihyKT9lLnN0eWxpemUoXCJcIityLFwibnVtYmVyXCIpOmlzQm9vbGVhbihyKT9lLnN0eWxpemUoXCJcIityLFwiYm9vbGVhblwiKTppc051bGwocik/ZS5zdHlsaXplKFwibnVsbFwiLFwibnVsbFwiKTp2b2lkIDB9ZnVuY3Rpb24gZm9ybWF0RXJyb3IoZSl7cmV0dXJuXCJbXCIrRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkrXCJdXCJ9ZnVuY3Rpb24gZm9ybWF0QXJyYXkoZSxyLHQsbixpKXtmb3IodmFyIG89W10scz0wLHU9ci5sZW5ndGg7czx1OysrcyloYXNPd25Qcm9wZXJ0eShyLFN0cmluZyhzKSk/by5wdXNoKGZvcm1hdFByb3BlcnR5KGUscix0LG4sU3RyaW5nKHMpLCEwKSk6by5wdXNoKFwiXCIpO3JldHVybiBpLmZvckVhY2goZnVuY3Rpb24oaSl7aS5tYXRjaCgvXlxcZCskLyl8fG8ucHVzaChmb3JtYXRQcm9wZXJ0eShlLHIsdCxuLGksITApKX0pLG99ZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoZSxyLHQsbixpLG8pe3ZhciBzLHUsYztpZigoYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsaSl8fHt2YWx1ZTpyW2ldfSkuZ2V0P3U9Yy5zZXQ/ZS5zdHlsaXplKFwiW0dldHRlci9TZXR0ZXJdXCIsXCJzcGVjaWFsXCIpOmUuc3R5bGl6ZShcIltHZXR0ZXJdXCIsXCJzcGVjaWFsXCIpOmMuc2V0JiYodT1lLnN0eWxpemUoXCJbU2V0dGVyXVwiLFwic3BlY2lhbFwiKSksaGFzT3duUHJvcGVydHkobixpKXx8KHM9XCJbXCIraStcIl1cIiksdXx8KGUuc2Vlbi5pbmRleE9mKGMudmFsdWUpPDA/KHU9aXNOdWxsKHQpP2Zvcm1hdFZhbHVlKGUsYy52YWx1ZSxudWxsKTpmb3JtYXRWYWx1ZShlLGMudmFsdWUsdC0xKSkuaW5kZXhPZihcIlxcblwiKT4tMSYmKHU9bz91LnNwbGl0KFwiXFxuXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIiAgXCIrZX0pLmpvaW4oXCJcXG5cIikuc3Vic3RyKDIpOlwiXFxuXCIrdS5zcGxpdChcIlxcblwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCIgICBcIitlfSkuam9pbihcIlxcblwiKSk6dT1lLnN0eWxpemUoXCJbQ2lyY3VsYXJdXCIsXCJzcGVjaWFsXCIpKSxpc1VuZGVmaW5lZChzKSl7aWYobyYmaS5tYXRjaCgvXlxcZCskLykpcmV0dXJuIHU7KHM9SlNPTi5zdHJpbmdpZnkoXCJcIitpKSkubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pPyhzPXMuc3Vic3RyKDEscy5sZW5ndGgtMikscz1lLnN0eWxpemUocyxcIm5hbWVcIikpOihzPXMucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykucmVwbGFjZSgvKF5cInxcIiQpL2csXCInXCIpLHM9ZS5zdHlsaXplKHMsXCJzdHJpbmdcIikpfXJldHVybiBzK1wiOiBcIit1fWZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKGUscix0KXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSxyKXtyZXR1cm4gMCxyLmluZGV4T2YoXCJcXG5cIik+PTAmJjAsZStyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLFwiXCIpLmxlbmd0aCsxfSwwKT42MD90WzBdKyhcIlwiPT09cj9cIlwiOnIrXCJcXG4gXCIpK1wiIFwiK2Uuam9pbihcIixcXG4gIFwiKStcIiBcIit0WzFdOnRbMF0rcitcIiBcIitlLmpvaW4oXCIsIFwiKStcIiBcIit0WzFdfWZ1bmN0aW9uIGlzQXJyYXkoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl9ZnVuY3Rpb24gaXNCb29sZWFuKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZX1mdW5jdGlvbiBpc051bGwoZSl7cmV0dXJuIG51bGw9PT1lfWZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGUpe3JldHVybiBudWxsPT1lfWZ1bmN0aW9uIGlzTnVtYmVyKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGlzU3RyaW5nKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGlzU3ltYm9sKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGlzVW5kZWZpbmVkKGUpe3JldHVybiB2b2lkIDA9PT1lfWZ1bmN0aW9uIGlzUmVnRXhwKGUpe3JldHVybiBpc09iamVjdChlKSYmXCJbb2JqZWN0IFJlZ0V4cF1cIj09PW9iamVjdFRvU3RyaW5nKGUpfWZ1bmN0aW9uIGlzT2JqZWN0KGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZX1mdW5jdGlvbiBpc0RhdGUoZSl7cmV0dXJuIGlzT2JqZWN0KGUpJiZcIltvYmplY3QgRGF0ZV1cIj09PW9iamVjdFRvU3RyaW5nKGUpfWZ1bmN0aW9uIGlzRXJyb3IoZSl7cmV0dXJuIGlzT2JqZWN0KGUpJiYoXCJbb2JqZWN0IEVycm9yXVwiPT09b2JqZWN0VG9TdHJpbmcoZSl8fGUgaW5zdGFuY2VvZiBFcnJvcil9ZnVuY3Rpb24gaXNGdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGlzUHJpbWl0aXZlKGUpe3JldHVybiBudWxsPT09ZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZXx8XCJzdHJpbmdcIj09dHlwZW9mIGV8fFwic3ltYm9sXCI9PXR5cGVvZiBlfHx2b2lkIDA9PT1lfWZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gcGFkKGUpe3JldHVybiBlPDEwP1wiMFwiK2UudG9TdHJpbmcoMTApOmUudG9TdHJpbmcoMTApfWV4cG9ydHMuZGVidWdsb2c9ZnVuY3Rpb24oZSl7aWYoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSYmKGRlYnVnRW52aXJvbj1wcm9jZXNzLmVudi5OT0RFX0RFQlVHfHxcIlwiKSxlPWUudG9VcHBlckNhc2UoKSwhZGVidWdzW2VdKWlmKG5ldyBSZWdFeHAoXCJcXFxcYlwiK2UrXCJcXFxcYlwiLFwiaVwiKS50ZXN0KGRlYnVnRW52aXJvbikpe3ZhciByPXByb2Nlc3MucGlkO2RlYnVnc1tlXT1mdW5jdGlvbigpe3ZhciB0PWV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKTtjb25zb2xlLmVycm9yKFwiJXMgJWQ6ICVzXCIsZSxyLHQpfX1lbHNlIGRlYnVnc1tlXT1mdW5jdGlvbigpe307cmV0dXJuIGRlYnVnc1tlXX0sZXhwb3J0cy5pbnNwZWN0PWluc3BlY3QsaW5zcGVjdC5jb2xvcnM9e2JvbGQ6WzEsMjJdLGl0YWxpYzpbMywyM10sdW5kZXJsaW5lOls0LDI0XSxpbnZlcnNlOls3LDI3XSx3aGl0ZTpbMzcsMzldLGdyZXk6WzkwLDM5XSxibGFjazpbMzAsMzldLGJsdWU6WzM0LDM5XSxjeWFuOlszNiwzOV0sZ3JlZW46WzMyLDM5XSxtYWdlbnRhOlszNSwzOV0scmVkOlszMSwzOV0seWVsbG93OlszMywzOV19LGluc3BlY3Quc3R5bGVzPXtzcGVjaWFsOlwiY3lhblwiLG51bWJlcjpcInllbGxvd1wiLGJvb2xlYW46XCJ5ZWxsb3dcIix1bmRlZmluZWQ6XCJncmV5XCIsbnVsbDpcImJvbGRcIixzdHJpbmc6XCJncmVlblwiLGRhdGU6XCJtYWdlbnRhXCIscmVnZXhwOlwicmVkXCJ9LGV4cG9ydHMuaXNBcnJheT1pc0FycmF5LGV4cG9ydHMuaXNCb29sZWFuPWlzQm9vbGVhbixleHBvcnRzLmlzTnVsbD1pc051bGwsZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZD1pc051bGxPclVuZGVmaW5lZCxleHBvcnRzLmlzTnVtYmVyPWlzTnVtYmVyLGV4cG9ydHMuaXNTdHJpbmc9aXNTdHJpbmcsZXhwb3J0cy5pc1N5bWJvbD1pc1N5bWJvbCxleHBvcnRzLmlzVW5kZWZpbmVkPWlzVW5kZWZpbmVkLGV4cG9ydHMuaXNSZWdFeHA9aXNSZWdFeHAsZXhwb3J0cy5pc09iamVjdD1pc09iamVjdCxleHBvcnRzLmlzRGF0ZT1pc0RhdGUsZXhwb3J0cy5pc0Vycm9yPWlzRXJyb3IsZXhwb3J0cy5pc0Z1bmN0aW9uPWlzRnVuY3Rpb24sZXhwb3J0cy5pc1ByaW1pdGl2ZT1pc1ByaW1pdGl2ZSxleHBvcnRzLmlzQnVmZmVyPXJlcXVpcmUoXCIuL3N1cHBvcnQvaXNCdWZmZXJcIik7dmFyIG1vbnRocz1bXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdO2Z1bmN0aW9uIHRpbWVzdGFtcCgpe3ZhciBlPW5ldyBEYXRlLHI9W3BhZChlLmdldEhvdXJzKCkpLHBhZChlLmdldE1pbnV0ZXMoKSkscGFkKGUuZ2V0U2Vjb25kcygpKV0uam9pbihcIjpcIik7cmV0dXJuW2UuZ2V0RGF0ZSgpLG1vbnRoc1tlLmdldE1vbnRoKCldLHJdLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIGhhc093blByb3BlcnR5KGUscil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpfWV4cG9ydHMubG9nPWZ1bmN0aW9uKCl7Y29uc29sZS5sb2coXCIlcyAtICVzXCIsdGltZXN0YW1wKCksZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpKX0sZXhwb3J0cy5pbmhlcml0cz1yZXF1aXJlKFwiaW5oZXJpdHNcIiksZXhwb3J0cy5fZXh0ZW5kPWZ1bmN0aW9uKGUscil7aWYoIXJ8fCFpc09iamVjdChyKSlyZXR1cm4gZTtmb3IodmFyIHQ9T2JqZWN0LmtleXMociksbj10Lmxlbmd0aDtuLS07KWVbdFtuXV09clt0W25dXTtyZXR1cm4gZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpWm05eWJXRjBVbVZuUlhod0lpd2laWGh3YjNKMGN5SXNJbVp2Y20xaGRDSXNJbVlpTENKcGMxTjBjbWx1WnlJc0ltOWlhbVZqZEhNaUxDSnBJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWNIVnphQ0lzSW1sdWMzQmxZM1FpTENKcWIybHVJaXdpWVhKbmN5SXNJbXhsYmlJc0luTjBjaUlzSWxOMGNtbHVaeUlzSW5KbGNHeGhZMlVpTENKNElpd2lUblZ0WW1WeUlpd2lTbE5QVGlJc0luTjBjbWx1WjJsbWVTSXNJbDhpTENKcGMwNTFiR3dpTENKcGMwOWlhbVZqZENJc0ltUmxjSEpsWTJGMFpTSXNJbVp1SWl3aWJYTm5JaXdpYVhOVmJtUmxabWx1WldRaUxDSm5iRzlpWVd3aUxDSndjbTlqWlhOeklpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aWJtOUVaWEJ5WldOaGRHbHZiaUlzSW5kaGNtNWxaQ0lzSW5Sb2NtOTNSR1Z3Y21WallYUnBiMjRpTENKRmNuSnZjaUlzSW5SeVlXTmxSR1Z3Y21WallYUnBiMjRpTENKamIyNXpiMnhsSWl3aWRISmhZMlVpTENKbGNuSnZjaUlzSW1SbFluVm5SVzUyYVhKdmJpSXNJbVJsWW5WbmN5SXNJbTlpYWlJc0ltOXdkSE1pTENKamRIZ2lMQ0p6WldWdUlpd2ljM1I1YkdsNlpTSXNJbk4wZVd4cGVtVk9iME52Ykc5eUlpd2laR1Z3ZEdnaUxDSmpiMnh2Y25NaUxDSnBjMEp2YjJ4bFlXNGlMQ0p6YUc5M1NHbGtaR1Z1SWl3aVgyVjRkR1Z1WkNJc0ltTjFjM1J2YlVsdWMzQmxZM1FpTENKemRIbHNhWHBsVjJsMGFFTnZiRzl5SWl3aVptOXliV0YwVm1Gc2RXVWlMQ0p6ZEhsc1pWUjVjR1VpTENKemRIbHNaU0lzSW5OMGVXeGxjeUlzSW1GeWNtRjVWRzlJWVhOb0lpd2lZWEp5WVhraUxDSm9ZWE5vSWl3aVptOXlSV0ZqYUNJc0luWmhiQ0lzSW1sa2VDSXNJblpoYkhWbElpd2ljbVZqZFhKelpWUnBiV1Z6SWl3aWFYTkdkVzVqZEdsdmJpSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWNISnZkRzkwZVhCbElpd2ljbVYwSWl3aWNISnBiV2wwYVhabElpd2labTl5YldGMFVISnBiV2wwYVhabElpd2lhMlY1Y3lJc0lrOWlhbVZqZENJc0luWnBjMmxpYkdWTFpYbHpJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lJc0ltbHpSWEp5YjNJaUxDSnBibVJsZUU5bUlpd2labTl5YldGMFJYSnliM0lpTENKdVlXMWxJaXdpYVhOU1pXZEZlSEFpTENKU1pXZEZlSEFpTENKMGIxTjBjbWx1WnlJc0ltTmhiR3dpTENKcGMwUmhkR1VpTENKRVlYUmxJaXdpYjNWMGNIVjBJaXdpWW1GelpTSXNJbUp5WVdObGN5SXNJbWx6UVhKeVlYa2lMQ0owYjFWVVExTjBjbWx1WnlJc0ltWnZjbTFoZEVGeWNtRjVJaXdpYldGd0lpd2lhMlY1SWl3aVptOXliV0YwVUhKdmNHVnlkSGtpTENKd2IzQWlMQ0p5WldSMVkyVlViMU5wYm1kc1pWTjBjbWx1WnlJc0luTnBiWEJzWlNJc0ltbHpUblZ0WW1WeUlpd2liQ0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpYldGMFkyZ2lMQ0prWlhOaklpd2laMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2laMlYwSWl3aWMyVjBJaXdpYzNCc2FYUWlMQ0pzYVc1bElpd2ljM1ZpYzNSeUlpd2ljbVZrZFdObElpd2ljSEpsZGlJc0ltTjFjaUlzSW01MWJVeHBibVZ6UlhOMElpd2lZWElpTENKQmNuSmhlU0lzSW1GeVp5SXNJbWx6VG5Wc2JFOXlWVzVrWldacGJtVmtJaXdpYVhOVGVXMWliMndpTENKeVpTSXNJbTlpYW1WamRGUnZVM1J5YVc1bklpd2laQ0lzSW1VaUxDSnBjMUJ5YVcxcGRHbDJaU0lzSW04aUxDSndZV1FpTENKdUlpd2laR1ZpZFdkc2IyY2lMQ0psYm5ZaUxDSk9UMFJGWDBSRlFsVkhJaXdpZEc5VmNIQmxja05oYzJVaUxDSjBaWE4wSWl3aWNHbGtJaXdpWW05c1pDSXNJbWwwWVd4cFl5SXNJblZ1WkdWeWJHbHVaU0lzSW1sdWRtVnljMlVpTENKM2FHbDBaU0lzSW1keVpYa2lMQ0ppYkdGamF5SXNJbUpzZFdVaUxDSmplV0Z1SWl3aVozSmxaVzRpTENKdFlXZGxiblJoSWl3aWNtVmtJaXdpZVdWc2JHOTNJaXdpYzNCbFkybGhiQ0lzSW01MWJXSmxjaUlzSW1KdmIyeGxZVzRpTENKMWJtUmxabWx1WldRaUxDSnVkV3hzSWl3aWMzUnlhVzVuSWl3aVpHRjBaU0lzSW5KbFoyVjRjQ0lzSW1selFuVm1abVZ5SWl3aWNtVnhkV2x5WlNJc0ltMXZiblJvY3lJc0luUnBiV1Z6ZEdGdGNDSXNJblJwYldVaUxDSm5aWFJJYjNWeWN5SXNJbWRsZEUxcGJuVjBaWE1pTENKblpYUlRaV052Ym1Seklpd2laMlYwUkdGMFpTSXNJbWRsZEUxdmJuUm9JaXdpY0hKdmNDSXNJbXh2WnlJc0ltbHVhR1Z5YVhSeklpd2liM0pwWjJsdUlpd2lZV1JrSWwwc0ltMWhjSEJwYm1keklqb2lRVUZ4UWtFc1NVRkJTVUVzWVVGQlpTeFhRVU51UWtNc1VVRkJVVU1zVDBGQlV5eFRRVUZUUXl4SFFVTjRRaXhKUVVGTFF5eFRRVUZUUkN4SFFVRkpMRU5CUldoQ0xFbEJSRUVzU1VGQlNVVXNTMEZEUzBNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUXl4VlFVRlZReXhQUVVGUlJpeEpRVU53UTBRc1JVRkJVVWtzUzBGQlMwTXNVVUZCVVVnc1ZVRkJWVVFzUzBGRmFrTXNUMEZCVDBRc1JVRkJVVTBzUzBGQlN5eExRVWRzUWt3c1JVRkJTU3hGUVcxQ1VpeEpRVzVDUVN4SlFVTkpUU3hGUVVGUFRDeFZRVU5RVFN4RlFVRk5SQ3hGUVVGTFNpeFBRVU5ZVFN4RlFVRk5ReXhQUVVGUFdpeEhRVUZIWVN4UlFVRlJhRUlzWVVGQll5eFRRVUZUYVVJc1IwRkRha1FzUjBGQlZTeFBRVUZPUVN4RlFVRlpMRTFCUVU4c1NVRkRka0lzUjBGQlNWZ3NSMEZCUzA4c1JVRkJTeXhQUVVGUFNTeEZRVU55UWl4UFFVRlJRU3hIUVVOT0xFbEJRVXNzUzBGQlRTeFBRVUZQUml4UFFVRlBTQ3hGUVVGTFRpeE5RVU01UWl4SlFVRkxMRXRCUVUwc1QwRkJUMWtzVDBGQlQwNHNSVUZCUzA0c1RVRkRPVUlzU1VGQlN5eExRVU5JTEVsQlEwVXNUMEZCVDJFc1MwRkJTME1zVlVGQlZWSXNSVUZCUzA0c1RVRkRNMElzVFVGQlQyVXNSMEZEVUN4TlFVRlBMR0ZCUlZnc1VVRkRSU3hQUVVGUFNpeExRVWRLUVN4RlFVRkpUQ3hGUVVGTFRpeEhRVUZKUVN4RlFVRkpUeXhGUVVGTFNTeEZRVUZKVEN4SlFVRlBUaXhIUVVOd1EyZENMRTlCUVU5TUxFdEJRVTlOTEZOQlFWTk9MRWRCUTNwQ1NDeEhRVUZQTEVsQlFVMUhMRVZCUldKSUxFZEJRVThzU1VGQlRVb3NVVUZCVVU4c1IwRkhla0lzVDBGQlQwZ3NSMEZQVkdJc1VVRkJVWFZDTEZWQlFWa3NVMEZCVTBNc1JVRkJTVU1zUjBGRkwwSXNSMEZCU1VNc1dVRkJXVU1zVDBGQlQwTXNVMEZEY2tJc1QwRkJUeXhYUVVOTUxFOUJRVTgxUWl4UlFVRlJkVUlzVlVGQlZVTXNSVUZCU1VNc1IwRkJTMGtzVFVGQlRVTXNTMEZCVFhoQ0xGbEJTV3hFTEVsQlFUaENMRWxCUVRGQ2MwSXNVVUZCVVVjc1kwRkRWaXhQUVVGUFVDeEZRVWRVTEVsQlFVbFJMRWRCUVZNc1JVRmxZaXhQUVdSQkxGZEJRMFVzU1VGQlMwRXNSVUZCVVN4RFFVTllMRWRCUVVsS0xGRkJRVkZMTEdsQ1FVTldMRTFCUVUwc1NVRkJTVU1zVFVGQlRWUXNSMEZEVUVjc1VVRkJVVThzYVVKQlEycENReXhSUVVGUlF5eE5RVUZOV2l4SFFVVmtWeXhSUVVGUlJTeE5RVUZOWWl4SFFVVm9RazhzUjBGQlV5eEZRVVZZTEU5QlFVOVNMRVZCUVVkTExFMUJRVTFETEV0QlFVMTRRaXhoUVU4eFFpeEpRVU5KYVVNc1lVRkVRVU1zVlVFMlFrb3NVMEZCVXk5Q0xGRkJRVkZuUXl4RlFVRkxReXhIUVVWd1FpeEpRVUZKUXl4SFFVTkdReXhSUVVOQlF5eFJRVUZUUXl4blFrRnJRbGdzVDBGbVNYaERMRlZCUVZWRExGRkJRVlVzU1VGQlIyOURMRVZCUVVsSkxFMUJRVkY2UXl4VlFVRlZMRWxCUXpkRFFTeFZRVUZWUXl4UlFVRlZMRWxCUVVkdlF5eEZRVUZKU3l4UFFVRlRNVU1zVlVGQlZTeEpRVU01UXpKRExGVkJRVlZRTEVkQlJWcERMRVZCUVVsUExGZEJRV0ZTTEVWQlExSkJMRWRCUlZReFF5eFJRVUZSYlVRc1VVRkJVVklzUlVGQlMwUXNSMEZIYmtKb1FpeFpRVUZaYVVJc1JVRkJTVThzWTBGQllWQXNSVUZCU1U4c1dVRkJZU3hIUVVNNVEzaENMRmxCUVZscFFpeEZRVUZKU1N4VFFVRlJTaXhGUVVGSlNTeE5RVUZSTEVkQlEzQkRja0lzV1VGQldXbENMRVZCUVVsTExGVkJRVk5NTEVWQlFVbExMRkZCUVZNc1IwRkRkRU4wUWl4WlFVRlphVUlzUlVGQlNWTXNhVUpCUVdkQ1ZDeEZRVUZKVXl4bFFVRm5RaXhIUVVOd1JGUXNSVUZCU1Vzc1UwRkJVVXdzUlVGQlNVVXNVVUZCVlZFc2EwSkJRM1pDUXl4WlFVRlpXQ3hGUVVGTFJpeEZRVUZMUlN4RlFVRkpTU3hQUVc5RGJrTXNVMEZCVTAwc2FVSkJRV2xDZUVNc1JVRkJTekJETEVkQlF6ZENMRWxCUVVsRExFVkJRVkV2UXl4UlFVRlJaMFFzVDBGQlQwWXNSMEZGTTBJc1QwRkJTVU1zUlVGRFN5eExRVUZaTDBNc1VVRkJVWFZETEU5QlFVOVJMRWRCUVU4c1IwRkJTeXhKUVVGTk0wTXNSVUZETjBNc1MwRkJXVW9zVVVGQlVYVkRMRTlCUVU5UkxFZEJRVThzUjBGQlN5eEpRVVYyUXpORExFVkJTMWdzVTBGQlUybERMR1ZCUVdWcVF5eEZRVUZMTUVNc1IwRkRNMElzVDBGQlR6RkRMRVZCU1ZRc1UwRkJVelpETEZsQlFWbERMRWRCUTI1Q0xFbEJRVWxETEV0QlRVb3NUMEZLUVVRc1JVRkJUVVVzVVVGQlVTeFRRVUZUUXl4RlFVRkxReXhIUVVNeFFrZ3NSVUZCUzBVc1NVRkJUeXhKUVVkUVJpeEZRVWxVTEZOQlFWTk9MRmxCUVZsWUxFVkJRVXR4UWl4RlFVRlBReXhIUVVjdlFpeEhRVUZKZEVJc1JVRkJTVk1zWlVGRFNsa3NSMEZEUVVVc1YwRkJWMFlzUlVGQlRYWkVMRlZCUldwQ2RVUXNSVUZCVFhaRUxGVkJRVmxVTEZGQlFWRlRMRmRCUlhoQ2RVUXNSVUZCVFVjc1lVRkJaVWdzUlVGQlRVY3NXVUZCV1VNc1dVRkJZMG9zUjBGQlVTeERRVU5xUlN4SlFVRkpTeXhGUVVGTlRDeEZRVUZOZGtRc1VVRkJVWGRFTEVWQlFXTjBRaXhIUVVsMFF5eFBRVWhMZUVNc1UwRkJVMnRGTEV0QlExcEJMRVZCUVUxbUxGbEJRVmxZTEVWQlFVc3dRaXhGUVVGTFNpeEpRVVYyUWtrc1JVRkpWQ3hKUVVGSlF5eEZRVUZaUXl4blFrRkJaMEkxUWl4RlFVRkxjVUlzUjBGRGNrTXNSMEZCU1Uwc1JVRkRSaXhQUVVGUFFTeEZRVWxVTEVsQlFVbEZMRVZCUVU5RExFOUJRVTlFTEV0QlFVdFNMRWRCUTI1Q1ZTeEZRVUZqYUVJc1dVRkJXV01zUjBGUk9VSXNSMEZPU1RkQ0xFVkJRVWxQTEdGQlEwNXpRaXhGUVVGUFF5eFBRVUZQUlN4dlFrRkJiMEpZTEVsQlMyaERXU3hSUVVGUldpeExRVU5LVVN4RlFVRkxTeXhSUVVGUkxGbEJRV01zUjBGQlMwd3NSVUZCUzBzc1VVRkJVU3huUWtGQmEwSXNSMEZEY2tVc1QwRkJUME1zV1VGQldXUXNSMEZKY2tJc1IwRkJiMElzU1VGQmFFSlJMRVZCUVV0cVJTeFBRVUZqTEVOQlEzSkNMRWRCUVVreVJDeFhRVUZYUml4SFFVRlJMRU5CUTNKQ0xFbEJRVWxsTEVWQlFVOW1MRVZCUVUxbExFdEJRVThzUzBGQlQyWXNSVUZCVFdVc1MwRkJUeXhIUVVNMVF5eFBRVUZQY0VNc1JVRkJTVVVzVVVGQlVTeFpRVUZqYTBNc1JVRkJUeXhKUVVGTExGZEJSUzlETEVkQlFVbERMRk5CUVZOb1FpeEhRVU5ZTEU5QlFVOXlRaXhGUVVGSlJTeFJRVUZSYjBNc1QwRkJUMklzVlVGQlZXTXNVMEZCVTBNc1MwRkJTMjVDTEVkQlFWRXNWVUZGTlVRc1IwRkJTVzlDTEU5QlFVOXdRaXhIUVVOVUxFOUJRVTl5UWl4RlFVRkpSU3hSUVVGUmQwTXNTMEZCUzJwQ0xGVkJRVlZqTEZOQlFWTkRMRXRCUVV0dVFpeEhRVUZSTEZGQlJURkVMRWRCUVVsWkxGRkJRVkZhTEVkQlExWXNUMEZCVDJNc1dVRkJXV1FzUjBGSmRrSXNTVUV5UTBselFpeEZRVE5EUVVNc1JVRkJUeXhIUVVGSk5VSXNSMEZCVVN4RlFVRlBOa0lzUjBGQlZTeEpRVUZMTEUxQlIzcERReXhSUVVGUmVrSXNTMEZEVmt3c1IwRkJVU3hGUVVOU05rSXNSMEZCVlN4SlFVRkxMRTFCU1dKMFFpeFhRVUZYUml4TlFVVmlkVUlzUlVGQlR5eGpRVVJEZGtJc1JVRkJUV1VzUzBGQlR5eExRVUZQWml4RlFVRk5aU3hMUVVGUExFbEJRMllzUzBGclFqVkNMRTlCWkVsRExGTkJRVk5vUWl4TFFVTllkVUlzUlVGQlR5eEpRVUZOVGl4UFFVRlBZaXhWUVVGVll5eFRRVUZUUXl4TFFVRkxia0lzU1VGSk1VTnZRaXhQUVVGUGNFSXNTMEZEVkhWQ0xFVkJRVThzU1VGQlRVWXNTMEZCUzJwQ0xGVkJRVlZ6UWl4WlFVRlpVQ3hMUVVGTGJrSXNTVUZKTTBOWkxGRkJRVkZhTEV0QlExWjFRaXhGUVVGUExFbEJRVTFVTEZsQlFWbGtMRWxCUjFBc1NVRkJhRUpSTEVWQlFVdHFSU3hSUVVGclFtOUVMRWRCUVhsQ0xFZEJRV2hDU3l4RlFVRk5la1FzVDBGSmRFTXdSQ3hGUVVGbExFVkJRMkpsTEZOQlFWTm9RaXhIUVVOS2NrSXNSVUZCU1VVc1VVRkJVVzlETEU5QlFVOWlMRlZCUVZWakxGTkJRVk5ETEV0QlFVdHVRaXhIUVVGUkxGVkJSVzVFY2tJc1JVRkJTVVVzVVVGQlVTeFhRVUZaTEZsQlNXNURSaXhGUVVGSlF5eExRVUZMY0VNc1MwRkJTM2RFTEVkQlNWcHpRaXhGUVVSRk0wSXNSVUZEVDJkRExGbEJRVmxvUkN4RlFVRkxjVUlzUlVGQlQwTXNSVUZCWTFNc1JVRkJZVVlzUjBGRmJrUkJMRVZCUVV0dlFpeEpRVUZKTEZOQlFWTkRMRWRCUTNwQ0xFOUJRVTlETEdWQlFXVnVSQ3hGUVVGTGNVSXNSVUZCVDBNc1JVRkJZMU1zUlVGQllXMUNMRVZCUVV0c1F5eExRVWwwUldoQ0xFVkJRVWxETEV0QlFVdHRSQ3hOUVVWR1F5eHhRa0ZCY1VKV0xFVkJRVkZETEVWQlFVMURMRWxCZUVKcVEwRXNSVUZCVHl4SFFVRkxSQ3hGUVVGUFF5eEZRVUZQTEVkQk5FSnlReXhUUVVGVGFrSXNaMEpCUVdkQ05VSXNSVUZCUzNGQ0xFZEJRelZDTEVkQlFVbDBReXhaUVVGWmMwTXNSMEZEWkN4UFFVRlBja0lzUlVGQlNVVXNVVUZCVVN4WlFVRmhMR0ZCUTJ4RExFZEJRVWt4UXl4VFFVRlROa1FzUjBGQlVTeERRVU51UWl4SlFVRkphVU1zUlVGQlV5eEpRVUZQTDBVc1MwRkJTME1zVlVGQlZUWkRMRWRCUVU5cVJDeFJRVUZSTEZOQlFWVXNTVUZEYkVKQkxGRkJRVkVzUzBGQlRTeFBRVU5rUVN4UlFVRlJMRTlCUVZFc1MwRkJUeXhKUVVOcVJTeFBRVUZQTkVJc1JVRkJTVVVzVVVGQlVXOUVMRVZCUVZFc1ZVRkZOMElzVDBGQlNVTXNVMEZCVTJ4RExFZEJRMHB5UWl4RlFVRkpSU3hSUVVGUkxFZEJRVXR0UWl4RlFVRlBMRlZCUXpkQ1ppeFZRVUZWWlN4SFFVTk1ja0lzUlVGQlNVVXNVVUZCVVN4SFFVRkxiVUlzUlVGQlR5eFhRVVUzUWpORExFOUJRVTh5UXl4SFFVTkdja0lzUlVGQlNVVXNVVUZCVVN4UFFVRlJMR0ZCUkRkQ0xFVkJTMFlzVTBGQlUybERMRmxCUVZsa0xFZEJRMjVDTEUxQlFVOHNTVUZCVFRsQ0xFMUJRVTFyUXl4VlFVRlZZeXhUUVVGVFF5eExRVUZMYmtJc1IwRkJVeXhKUVVsMFJDeFRRVUZUTWtJc1dVRkJXV2hFTEVWQlFVdHhRaXhGUVVGUFF5eEZRVUZqVXl4RlFVRmhSaXhIUVVVeFJDeEpRVVJCTEVsQlFVbGpMRXRCUTB0cVJpeEZRVUZKTEVWQlFVYzRSaXhGUVVGSmJrTXNSVUZCVFhwRUxFOUJRVkZHTEVWQlFVazRSaXhKUVVGTE9VWXNSVUZEY2tNclJpeGxRVUZsY0VNc1JVRkJUMnhFTEU5QlFVOVVMRWxCUXk5Q2FVWXNSVUZCVHpsRkxFdEJRVXR6Uml4bFFVRmxia1FzUlVGQlMzRkNMRVZCUVU5RExFVkJRV05UTEVWQlEycEVOVVFzVDBGQlQxUXNTVUZCU1N4SlFVVm1hVVlzUlVGQlR6bEZMRXRCUVVzc1NVRlRhRUlzVDBGT1FXZEZMRVZCUVV0WUxGRkJRVkVzVTBGQlUyZERMRWRCUTJaQkxFVkJRVWxSTEUxQlFVMHNWVUZEWW1Zc1JVRkJUemxGTEV0QlFVdHpSaXhsUVVGbGJrUXNSVUZCUzNGQ0xFVkJRVTlETEVWQlFXTlRMRVZCUTJwRWJVSXNSMEZCU3l4TlFVZE9VQ3hGUVVsVUxGTkJRVk5STEdWQlFXVnVSQ3hGUVVGTGNVSXNSVUZCVDBNc1JVRkJZMU1zUlVGQllXMUNMRVZCUVV0c1F5eEhRVU5zUlN4SlFVRkpiMElzUlVGQlRXeEZMRVZCUVV0NVJpeEZRWE5EWml4SlFYSkRRVUVzUlVGQlR6ZENMRTlCUVU4NFFpeDVRa0ZCZVVKMlF5eEZRVUZQTmtJc1MwRkJWVGRDTEUxQlFVOUJMRVZCUVUwMlFpeExRVU0xUkZjc1NVRkZURE5HTEVWQlJFVjVSaXhGUVVGTFJ5eEpRVU5FT1VRc1JVRkJTVVVzVVVGQlVTeHJRa0ZCYlVJc1YwRkZMMEpHTEVWQlFVbEZMRkZCUVZFc1YwRkJXU3hYUVVjMVFubEVMRVZCUVV0SExFMUJRMUExUml4RlFVRk5PRUlzUlVGQlNVVXNVVUZCVVN4WFFVRlpMRmxCUnpkQ2RVUXNaVUZCWlRGQ0xFVkJRV0Z0UWl4TFFVTXZRbVFzUlVGQlR5eEpRVUZOWXl4RlFVRk5MRXRCUldoQ2FFWXNTVUZEUXpoQ0xFVkJRVWxETEV0QlFVdHBReXhSUVVGUmVVSXNSVUZCUzNSRExFOUJRVk1zUjBGRkwwSnVSQ3hGUVVSRlVTeFBRVUZQTkVNc1IwRkRTRmdzV1VGQldWZ3NSVUZCU3pKRUxFVkJRVXQwUXl4TlFVRlBMRTFCUlRkQ1ZpeFpRVUZaV0N4RlFVRkxNa1FzUlVGQlMzUkRMRTFCUVU5RExFVkJRV1VzU1VGRk5VTlpMRkZCUVZFc1QwRkJVeXhKUVVWeVFtaEZMRVZCUkVVNFF5eEZRVU5KT1VNc1JVRkJTVFpHTEUxQlFVMHNUVUZCVFdRc1NVRkJTU3hUUVVGVFpTeEhRVU5xUXl4TlFVRlBMRXRCUVU5QkxFbEJRMkpxUnl4TFFVRkxMRTFCUVUxclJ5eFBRVUZQTEVkQlJXWXNTMEZCVHk5R0xFVkJRVWsyUml4TlFVRk5MRTFCUVUxa0xFbEJRVWtzVTBGQlUyVXNSMEZEZUVNc1RVRkJUeXhOUVVGUlFTeEpRVU5rYWtjc1MwRkJTeXhQUVVsYVJ5eEZRVUZOT0VJc1JVRkJTVVVzVVVGQlVTeGhRVUZqTEZsQlIyaERia0lzV1VGQldYRkVMRWRCUVU4c1EwRkRja0lzUjBGQlNYQkNMRWRCUVZOclF5eEZRVUZKVVN4TlFVRk5MRk5CUTNKQ0xFOUJRVTk0Uml4SFFVVlVhMFVzUlVGQlR6ZEVMRXRCUVV0RExGVkJRVlVzUjBGQlN6QkZMRWxCUTJ4Q1VTeE5RVUZOTEdsRFFVTmlkRUlzUlVGQlQwRXNSVUZCU3paQ0xFOUJRVThzUlVGQlJ6ZENMRVZCUVV0NFJTeFBRVUZUTEVkQlEzQkRkMFVzUlVGQlQzQkRMRVZCUVVsRkxGRkJRVkZyUXl4RlFVRk5MRlZCUlhwQ1FTeEZRVUZQUVN4RlFVRkxhRVVzVVVGQlVTeExRVUZOTEU5QlEyUkJMRkZCUVZFc1QwRkJVU3hMUVVOb1FrRXNVVUZCVVN4WFFVRlpMRXRCUTJoRFowVXNSVUZCVDNCRExFVkJRVWxGTEZGQlFWRnJReXhGUVVGTkxGZEJTVGRDTEU5QlFVOUJMRVZCUVU4c1MwRkJUMnhGTEVWQlNYWkNMRk5CUVZOdFJpeHhRa0ZCY1VKV0xFVkJRVkZETEVWQlFVMURMRWRCVVRGRExFOUJUbUZHTEVWQlFVOTFRaXhQUVVGUExGTkJRVk5ETEVWQlFVMURMRWRCUjNoRExFOUJSa0ZETEVWQlEwbEVMRVZCUVVsc1F5eFJRVUZSTEU5QlFWTXNSMEZCUjIxRExFVkJRM0pDUml4RlFVRlBReXhGUVVGSmFFY3NVVUZCVVN4clFrRkJiVUlzU1VGQlNWSXNUMEZCVXl4SFFVTjZSQ3hIUVVWVkxFZEJRMHBwUml4RlFVRlBMRWxCUTBjc1MwRkJWRVFzUlVGQll5eEhRVUZMUVN4RlFVRlBMRTlCUXpOQ0xFbEJRMEZFTEVWQlFVODFSU3hMUVVGTExGTkJRMW9zU1VGRFFUaEZMRVZCUVU4c1IwRkhWRUVzUlVGQlR5eEhRVUZMUkN4RlFVRlBMRWxCUVUxRUxFVkJRVTgxUlN4TFFVRkxMRTFCUVZFc1NVRkJUVGhGTEVWQlFVOHNSMEZOYmtVc1UwRkJVME1zVVVGQlVYZENMRWRCUTJZc1QwRkJUME1zVFVGQlRYcENMRkZCUVZGM1FpeEhRVWwyUWl4VFFVRlRhRVVzVlVGQlZXdEZMRWRCUTJwQ0xFMUJRWE5DTEd0Q1FVRlNRU3hGUVVsb1FpeFRRVUZUT1VZc1QwRkJUemhHTEVkQlEyUXNUMEZCWlN4UFFVRlNRU3hGUVVsVUxGTkJRVk5ETEd0Q1FVRnJRa1FzUjBGRGVrSXNUMEZCWXl4TlFVRlFRU3hGUVVsVUxGTkJRVk5xUWl4VFFVRlRhVUlzUjBGRGFFSXNUVUZCYzBJc2FVSkJRVkpCTEVWQlNXaENMRk5CUVZOb1NDeFRRVUZUWjBnc1IwRkRhRUlzVFVGQmMwSXNhVUpCUVZKQkxFVkJTV2hDTEZOQlFWTkZMRk5CUVZOR0xFZEJRMmhDTEUxQlFYTkNMR2xDUVVGU1FTeEZRVWxvUWl4VFFVRlRla1lzV1VGQldYbEdMRWRCUTI1Q0xGbEJRV1VzU1VGQlVrRXNSVUZKVkN4VFFVRlRia01zVTBGQlUzTkRMRWRCUTJoQ0xFOUJRVTlvUnl4VFFVRlRaMGNzU1VGQk9FSXNiMEpCUVhaQ1F5eGxRVUZsUkN4SFFVbDRReXhUUVVGVGFFY3NVMEZCVXpaR0xFZEJRMmhDTEUxQlFYTkNMR2xDUVVGU1FTeEhRVUUwUWl4UFFVRlNRU3hGUVVsd1F5eFRRVUZUTDBJc1QwRkJUMjlETEVkQlEyUXNUMEZCVDJ4SExGTkJRVk5yUnl4SlFVRTBRaXhyUWtGQmRFSkVMR1ZCUVdWRExFZEJTWFpETEZOQlFWTTFReXhSUVVGUk5rTXNSMEZEWml4UFFVRlBia2NzVTBGQlUyMUhMRXRCUTFjc2JVSkJRWFJDUml4bFFVRmxSU3hKUVVFeVFrRXNZVUZCWVhaR0xFOUJTVGxFTEZOQlFWTm5ReXhYUVVGWGFVUXNSMEZEYkVJc1RVRkJjMElzYlVKQlFWSkJMRVZCU1doQ0xGTkJRVk5QTEZsQlFWbFFMRWRCUTI1Q0xFOUJRV1VzVDBGQlVrRXNSMEZEWlN4clFrRkJVa0VzUjBGRFVTeHBRa0ZCVWtFc1IwRkRVU3hwUWtGQlVrRXNSMEZEVVN4cFFrRkJVa0VzVVVGRFVTeEpRVUZTUVN4RlFVMW9RaXhUUVVGVFNTeGxRVUZsU1N4SFFVTjBRaXhQUVVGUGJFUXNUMEZCVDB3c1ZVRkJWV01zVTBGQlUwTXNTMEZCUzNkRExFZEJTWGhETEZOQlFWTkRMRWxCUVVsRExFZEJRMWdzVDBGQlQwRXNSVUZCU1N4SFFVRkxMRWxCUVUxQkxFVkJRVVV6UXl4VFFVRlRMRWxCUVUweVF5eEZRVUZGTTBNc1UwRkJVeXhKUVhCaWNFUnNSaXhSUVVGUk9FZ3NVMEZCVnl4VFFVRlRja0lzUjBGSk1VSXNSMEZJU1M5RkxGbEJRVmxoTEdkQ1FVTmtRU3hoUVVGbFdDeFJRVUZSYlVjc1NVRkJTVU1zV1VGQll5eEpRVU16UTNaQ0xFVkJRVTFCTEVWQlFVbDNRaXhsUVVOTWVrWXNUMEZCVDJsRkxFZEJRMVlzUjBGQlNTeEpRVUZKZUVJc1QwRkJUeXhOUVVGUmQwSXNSVUZCVFN4TlFVRlBMRXRCUVV0NVFpeExRVUZMTTBZc1kwRkJaU3hEUVVNelJDeEpRVUZKTkVZc1JVRkJUWFpITEZGQlFWRjFSeXhKUVVOc1FqTkdMRTlCUVU5cFJTeEhRVUZQTEZkQlExb3NTVUZCU1doR0xFVkJRVTE2UWl4UlFVRlJReXhQUVVGUE5FSXNUVUZCVFRkQ0xGRkJRVk5OTEZkQlEzaERPRUlzVVVGQlVVVXNUVUZCVFN4WlFVRmhiVVVzUlVGQlN6QkNMRVZCUVVzeFJ5eFRRVWQyUTJVc1QwRkJUMmxGTEVkQlFVOHNZVUZIYkVJc1QwRkJUMnBGTEU5QlFVOXBSU3hKUVc5RGFFSjZSeXhSUVVGUlV5eFJRVUZWUVN4UlFVbHNRa0VzVVVGQlVYVkRMRkZCUTA1dlJpeE5RVUZWTEVWQlFVY3NTVUZEWWtNc1VVRkJXU3hGUVVGSExFbEJRMlpETEZkQlFXVXNSVUZCUnl4SlFVTnNRa01zVTBGQllTeEZRVUZITEVsQlEyaENReXhQUVVGWExFZEJRVWtzU1VGRFprTXNUVUZCVlN4SFFVRkpMRWxCUTJSRExFOUJRVmNzUjBGQlNTeEpRVU5tUXl4TlFVRlZMRWRCUVVrc1NVRkRaRU1zVFVGQlZTeEhRVUZKTEVsQlEyUkRMRTlCUVZjc1IwRkJTU3hKUVVObVF5eFRRVUZoTEVkQlFVa3NTVUZEYWtKRExFdEJRVk1zUjBGQlNTeEpRVU5pUXl4UlFVRlpMRWRCUVVrc1MwRkpiRUoyU1N4UlFVRlJaMFFzVVVGRFRuZEdMRkZCUVZjc1QwRkRXRU1zVDBGQlZTeFRRVU5XUXl4UlFVRlhMRk5CUTFoRExGVkJRV0VzVDBGRFlrTXNTMEZCVVN4UFFVTlNReXhQUVVGVkxGRkJRMVpETEV0QlFWRXNWVUZGVWtNc1QwRkJWU3hQUVd0U1duaEtMRkZCUVZGNVJpeFJRVUZWUVN4UlFVdHNRbnBHTEZGQlFWRnBSQ3hWUVVGWlFTeFZRVXR3UW1wRUxGRkJRVkZ4UWl4UFFVRlRRU3hQUVV0cVFuSkNMRkZCUVZGdlNDeHJRa0ZCYjBKQkxHdENRVXMxUW5CSUxGRkJRVkZyUnl4VFFVRlhRU3hUUVV0dVFteEhMRkZCUVZGSExGTkJRVmRCTEZOQlMyNUNTQ3hSUVVGUmNVZ3NVMEZCVjBFc1UwRkxia0p5U0N4UlFVRlJNRUlzV1VGQlkwRXNXVUZMZEVJeFFpeFJRVUZSWjBZc1UwRkJWMEVzVTBGTGJrSm9SaXhSUVVGUmMwSXNVMEZCVjBFc1UwRkxia0owUWl4UlFVRlJiMFlzVDBGQlUwRXNUMEZOYWtKd1JpeFJRVUZSTkVVc1VVRkJWVUVzVVVGTGJFSTFSU3hSUVVGUmEwVXNWMEZCWVVFc1YwRlZja0pzUlN4UlFVRlJNRWdzV1VGQlkwRXNXVUZGZEVJeFNDeFJRVUZSZVVvc1UwRkJWME1zVVVGQlVTeHpRa0ZaTTBJc1NVRkJTVU1zVVVGQlZTeE5RVUZQTEUxQlFVOHNUVUZCVHl4TlFVRlBMRTFCUVU4c1RVRkJUeXhOUVVGUExFMUJRVThzVFVGRGVFUXNUVUZCVHl4TlFVRlBMRTlCUnpWQ0xGTkJRVk5ETEZsQlExQXNTVUZCU1hCRExFVkJRVWtzU1VGQlNXNURMRXRCUTFKM1JTeEhRVUZSYWtNc1NVRkJTVW9zUlVGQlJYTkRMRmxCUTA1c1F5eEpRVUZKU2l4RlFVRkZkVU1zWTBGRFRtNURMRWxCUVVsS0xFVkJRVVYzUXl4bFFVRmxkRW9zUzBGQlN5eExRVU4wUXl4UFFVRlJPRWNzUlVGQlJYbERMRlZCUVZkT0xFOUJRVTl1UXl4RlFVRkZNRU1zV1VGQllVd3NSMEZCVFc1S0xFdEJRVXNzUzBGeFEzaEVMRk5CUVZNd1JpeGxRVUZsTTBRc1JVRkJTekJJTEVkQlF6TkNMRTlCUVU4eFJpeFBRVUZQVEN4VlFVRlZaME1zWlVGQlpXcENMRXRCUVVzeFF5eEZRVUZMTUVnc1IwRnFRMjVFYmtzc1VVRkJVVzlMTEVsQlFVMHNWMEZEV21oSkxGRkJRVkZuU1N4SlFVRkpMRlZCUVZkU0xGbEJRV0UxU2l4UlFVRlJReXhQUVVGUE5FSXNUVUZCVFRkQ0xGRkJRVk5OTEdGQmFVSndSVTRzVVVGQlVYRkxMRk5CUVZkWUxGRkJRVkVzV1VGRk0wSXhTaXhSUVVGUmJVUXNVVUZCVlN4VFFVRlRiVWdzUlVGQlVVTXNSMEZGYWtNc1NVRkJTMEVzU1VGQlVXcEtMRk5CUVZOcFNpeEhRVUZOTEU5QlFVOUVMRVZCU1c1RExFbEJSa0VzU1VGQlNUbEdMRVZCUVU5RExFOUJRVTlFTEV0QlFVc3JSaXhIUVVOdVFteExMRVZCUVVsdFJTeEZRVUZMYWtVc1QwRkRUa1lzUzBGRFRHbExMRVZCUVU4NVJpeEZRVUZMYmtVc1NVRkJUV3RMTEVWQlFVa3ZSaXhGUVVGTGJrVXNTVUZGTjBJc1QwRkJUMmxMSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMMjV2WkdWZmJXOWtkV3hsY3k5MWRHbHNMM1YwYVd3dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHRlbXBsYXRlTG9hZGVyPXJlcXVpcmUoXCIuL3RlbXBsYXRlLWxvYWRlci5qc1wiKSxjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCwkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnk6bnVsbDtyZXF1aXJlKFwiLi9rby1iaW5kaW5ncy5qc1wiKTt2YXIgcGVyZm9ybWFuY2VBd2FyZUNhbGxlcj1yZXF1aXJlKFwiLi90aW1lZC1jYWxsLmpzXCIpLnRpbWVkQ2FsbCxhZGRVbmRvU3RhY2tFeHRlbnNpb25NYWtlcj1yZXF1aXJlKFwiLi91bmRvbWFuYWdlci91bmRvbWFpbi5qc1wiKSxjb2xvclBsdWdpbj1yZXF1aXJlKFwiLi9leHQvY29sb3IuanNcIiksdXRpbFBsdWdpbj1yZXF1aXJlKFwiLi9leHQvdXRpbC5qc1wiKSxpbmxpbmVyUGx1Z2luPXJlcXVpcmUoXCIuL2V4dC9pbmxpbmVyLmpzXCIpLGxvY2FsU3RvcmFnZUxvYWRlcj1yZXF1aXJlKFwiLi9leHQvbG9jYWxzdG9yYWdlLmpzXCIpO2lmKHZvaWQgMD09PWtvKXRocm93XCJDYW5ub3QgZmluZCBrbm9ja291dC5qcyBsaWJyYXJ5IVwiO2lmKHZvaWQgMD09PSQpdGhyb3dcIkNhbm5vdCBmaW5kIGpxdWVyeSBsaWJyYXJ5IVwiO2Z1bmN0aW9uIF9jYW5vbmljYWxpemUoZSl7dmFyIGk9Z2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGkuaW5uZXJIVE1MPVwiPGE+PC9hPlwiLGkuZmlyc3RDaGlsZC5ocmVmPWUsaS5pbm5lckhUTUw9aS5pbm5lckhUTUwsaS5maXJzdENoaWxkLmhyZWZ9ZnVuY3Rpb24gX2FwcGVuZFVybFBhcmFtZXRlcnMoZSxpKXt2YXIgbj0tMT09ZS5pbmRleE9mKFwiP1wiKT9cIj9cIjpcIiZcIixhPWU7Zm9yKHZhciB0IGluIGkpaS5oYXNPd25Qcm9wZXJ0eSh0KSYmKGErPW4rdCtcIj1cIitlbmNvZGVVUklDb21wb25lbnQoaVt0XSksbj1cIiZcIik7cmV0dXJuIGF9dmFyIGFwcGx5QmluZGluZ09wdGlvbnM9ZnVuY3Rpb24oZSxpKXtpLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU3JjLmNvbnZlcnRlZFVybD1mdW5jdGlvbihpLG4sYSx0KXt2YXIgbz1lLmltZ1Byb2Nlc3NvckJhY2tlbmQ/ZS5pbWdQcm9jZXNzb3JCYWNrZW5kOlwiLi91cGxvYWRcIixyPW8ubWF0Y2goL14oaHR0cHM/OlxcL1xcL1teXFwvXSpcXC8pLiokLyksbD1pLm1hdGNoKC9eKGh0dHBzPzpcXC9cXC9bXlxcL10qXFwvKS4qJC8pO2lmKG51bGw9PT1yfHxudWxsIT09bCYmclsxXT09bFsxXSlyZXR1cm4gby5pbmRleE9mKFwiP1wiKSxfYXBwZW5kVXJsUGFyYW1ldGVycyhvLHtzcmM6aSxtZXRob2Q6bixwYXJhbXM6YStcIixcIit0fSk7Y29uc29sZS5sb2coXCJDYW5ub3QgYXBwbHkgYmFja2VuZCBpbWFnZSByZXNpemluZyB0byBub24tbG9jYWwgcmVzb3VyY2VzIFwiLGksbixhLHQscixsKTt2YXIgZD17bWV0aG9kOm4sd2lkdGg6YX07cmV0dXJuIG51bGwhPT10JiYoZC5oZWlnaHQ9dCksX2FwcGVuZFVybFBhcmFtZXRlcnMoaSxkKX0saS5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z1NyYy5wbGFjZWhvbGRlclVybD1mdW5jdGlvbihpLG4sYSl7cmV0dXJuIF9hcHBlbmRVcmxQYXJhbWV0ZXJzKGUuaW1nUHJvY2Vzc29yQmFja2VuZD9lLmltZ1Byb2Nlc3NvckJhY2tlbmQ6XCIuL3VwbG9hZFwiLHttZXRob2Q6XCJwbGFjZWhvbGRlclwiLHBhcmFtczppK1wiLFwiK259KX0sZSYmZS50aW55bWNlQ29uZmlnJiYoaS5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5zdGFuZGFyZE9wdGlvbnM9ZS50aW55bWNlQ29uZmlnKSxlJiZlLnRpbnltY2VDb25maWdGdWxsJiYoaS5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5mdWxsT3B0aW9ucz1lLnRpbnltY2VDb25maWdGdWxsKX0sc3RhcnQ9ZnVuY3Rpb24oZSxpLG4sYSx0KXt0ZW1wbGF0ZUxvYWRlci5maXhQYWdlRXZlbnRzKCk7dmFyIG89W2Z1bmN0aW9uKGkpe2UmJmUuc3RyaW5ncyYmKGkudD1mdW5jdGlvbihuLGEpe3ZhciB0PWUuc3RyaW5nc1tuXTtyZXR1cm4gdm9pZCAwPT09dCYmKGNvbnNvbGUud2FybihcIk1pc3NpbmcgdHJhbnNsYXRpb24gc3RyaW5nIGZvclwiLG4sXCI6IHVzaW5nIGRlZmF1bHQgc3RyaW5nXCIpLHQ9biksaS50dCh0LGEpfSl9LGFkZFVuZG9TdGFja0V4dGVuc2lvbk1ha2VyKHBlcmZvcm1hbmNlQXdhcmVDYWxsZXIpLGNvbG9yUGx1Z2luLHV0aWxQbHVnaW4saW5saW5lclBsdWdpbl07aWYodm9pZCAwIT09dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylvLnB1c2godFtyXSk7by5wdXNoKGZ1bmN0aW9uKGkpe3ZhciBuPXttZXNzYWdlczp7dW5rbm93bkVycm9yOmkudChcIlVua25vd24gZXJyb3JcIiksdXBsb2FkZWRCeXRlczppLnQoXCJVcGxvYWRlZCBieXRlcyBleGNlZWQgZmlsZSBzaXplXCIpLG1heE51bWJlck9mRmlsZXM6aS50KFwiTWF4aW11bSBudW1iZXIgb2YgZmlsZXMgZXhjZWVkZWRcIiksYWNjZXB0RmlsZVR5cGVzOmkudChcIkZpbGUgdHlwZSBub3QgYWxsb3dlZFwiKSxtYXhGaWxlU2l6ZTppLnQoXCJGaWxlIGlzIHRvbyBsYXJnZVwiKSxtaW5GaWxlU2l6ZTppLnQoXCJGaWxlIGlzIHRvbyBzbWFsbFwiKSxwb3N0X21heF9zaXplOmkudChcIlRoZSB1cGxvYWRlZCBmaWxlIGV4Y2VlZHMgdGhlIHBvc3RfbWF4X3NpemUgZGlyZWN0aXZlIGluIHBocC5pbmlcIiksbWF4X2ZpbGVfc2l6ZTppLnQoXCJGaWxlIGlzIHRvbyBiaWdcIiksbWluX2ZpbGVfc2l6ZTppLnQoXCJGaWxlIGlzIHRvbyBzbWFsbFwiKSxhY2NlcHRfZmlsZV90eXBlczppLnQoXCJGaWxldHlwZSBub3QgYWxsb3dlZFwiKSxtYXhfbnVtYmVyX29mX2ZpbGVzOmkudChcIk1heGltdW0gbnVtYmVyIG9mIGZpbGVzIGV4Y2VlZGVkXCIpLG1heF93aWR0aDppLnQoXCJJbWFnZSBleGNlZWRzIG1heGltdW0gd2lkdGhcIiksbWluX3dpZHRoOmkudChcIkltYWdlIHJlcXVpcmVzIGEgbWluaW11bSB3aWR0aFwiKSxtYXhfaGVpZ2h0OmkudChcIkltYWdlIGV4Y2VlZHMgbWF4aW11bSBoZWlnaHRcIiksbWluX2hlaWdodDppLnQoXCJJbWFnZSByZXF1aXJlcyBhIG1pbmltdW0gaGVpZ2h0XCIpLGFib3J0OmkudChcIkZpbGUgdXBsb2FkIGFib3J0ZWRcIiksaW1hZ2VfcmVzaXplOmkudChcIkZhaWxlZCB0byByZXNpemUgaW1hZ2VcIiksZ2VuZXJpYzppLnQoXCJVbmV4cGVjdGVkIHVwbG9hZCBlcnJvclwiKX19O2UmJmUuZmlsZXVwbG9hZENvbmZpZyYmKG49JC5leHRlbmQoITAsbixlLmZpbGV1cGxvYWRDb25maWcpKSxrby5iaW5kaW5nSGFuZGxlcnMuZmlsZXVwbG9hZC5leHRlbmRPcHRpb25zPW59KTt2YXIgbD1lLmZpbGV1cGxvYWRDb25maWc/ZS5maWxldXBsb2FkQ29uZmlnLnVybDpcIi91cGxvYWQvXCI7YXBwbHlCaW5kaW5nT3B0aW9ucyhlLGtvKSwkKFwiXFx4M2MhLS0ga28gdGVtcGxhdGU6ICdtYWluJyAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2VcIikuYXBwZW5kVG8oZ2xvYmFsLmRvY3VtZW50LmJvZHkpLHZvaWQgMD09PWkmJnZvaWQgMCE9PW4mJihpPW4udGVtcGxhdGUpLHRlbXBsYXRlTG9hZGVyLmxvYWQocGVyZm9ybWFuY2VBd2FyZUNhbGxlcixpLG4sYSxvLGwpfSxpbml0RnJvbUxvY2FsU3RvcmFnZT1mdW5jdGlvbihlLGksbil7dHJ5e3ZhciBhPWxvY2FsU3RvcmFnZUxvYWRlcihpLGUuZW1haWxQcm9jZXNzb3JCYWNrZW5kKSx0PXZvaWQgMCE9PW4/bjpbXTt0LnB1c2goYS5leHRlbnNpb24pO3ZhciBvPV9jYW5vbmljYWxpemUoYS5tZXRhZGF0YS50ZW1wbGF0ZSk7c3RhcnQoZSxvLGEubWV0YWRhdGEsYS5tb2RlbCx0KX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwiVE9ETyBub3QgZm91bmQgXCIsaSxlKX19LGluaXQ9ZnVuY3Rpb24oZSxpKXt2YXIgbj1nbG9iYWwubG9jYXRpb24uaGFzaD9nbG9iYWwubG9jYXRpb24uaHJlZi5zcGxpdChcIiNcIilbMV06dm9pZCAwO2lmKGUmJihlLnRlbXBsYXRlfHxlLmRhdGEpKWlmKGUuZGF0YSl7dmFyIGE9XCJzdHJpbmdcIj09dHlwZW9mIGE/SlNPTi5wYXJzZShlLmRhdGEpOmUuZGF0YTtzdGFydChlLHZvaWQgMCxhLm1ldGFkYXRhLGEuY29udGVudCxpKX1lbHNlIHN0YXJ0KGUsZS50ZW1wbGF0ZSx2b2lkIDAsdm9pZCAwLGkpO2Vsc2UgaWYobiYmNz09bi5sZW5ndGgpaW5pdEZyb21Mb2NhbFN0b3JhZ2UoZSxuLGkpO2Vsc2V7aWYoIW4pcmV0dXJuITE7c3RhcnQoZSxfY2Fub25pY2FsaXplKG4pLHZvaWQgMCx2b2lkIDAsaSl9cmV0dXJuITB9O21vZHVsZS5leHBvcnRzPXtpc0NvbXBhdGlibGU6dGVtcGxhdGVMb2FkZXIuaXNDb21wYXRpYmxlLGluaXQ6aW5pdCxzdGFydDpzdGFydH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ3Y0M1cWN5SmRMQ0p1WVcxbGN5STZXeUowWlcxd2JHRjBaVXh2WVdSbGNpSXNJbkpsY1hWcGNtVWlMQ0pqYjI1emIyeGxJaXdpYTI4aUxDSjNhVzVrYjNjaUxDSm5iRzlpWVd3aUxDSWtJaXdpYWxGMVpYSjVJaXdpY0dWeVptOXliV0Z1WTJWQmQyRnlaVU5oYkd4bGNpSXNJblJwYldWa1EyRnNiQ0lzSW1Ga1pGVnVaRzlUZEdGamEwVjRkR1Z1YzJsdmJrMWhhMlZ5SWl3aVkyOXNiM0pRYkhWbmFXNGlMQ0oxZEdsc1VHeDFaMmx1SWl3aWFXNXNhVzVsY2xCc2RXZHBiaUlzSW14dlkyRnNVM1J2Y21GblpVeHZZV1JsY2lJc0lsOWpZVzV2Ym1sallXeHBlbVVpTENKMWNtd2lMQ0prYVhZaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnBibTVsY2toVVRVd2lMQ0ptYVhKemRFTm9hV3hrSWl3aWFISmxaaUlzSWw5aGNIQmxibVJWY214UVlYSmhiV1YwWlhKeklpd2lZbUZ6WlZWeWJDSXNJbkJoY21GdFpYUmxjbk1pTENKd1lYSmhiVk5sY0dGeVlYUnZjaUlzSW1sdVpHVjRUMllpTENKeVpYTWlMQ0p3WVhKaGJTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2laVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIbENhVzVrYVc1blQzQjBhVzl1Y3lJc0ltOXdkR2x2Ym5NaUxDSmlhVzVrYVc1blNHRnVaR3hsY25NaUxDSjNlWE5wZDNsblUzSmpJaXdpWTI5dWRtVnlkR1ZrVlhKc0lpd2ljM0pqSWl3aWJXVjBhRzlrSWl3aWQybGtkR2dpTENKb1pXbG5hSFFpTENKcGJXZFFjbTlqWlhOemIzSkNZV05yWlc1a0lpd2lZbUZqYTBWdVpFMWhkR05vSWl3aWJXRjBZMmdpTENKemNtTk5ZWFJqYUNJc0luQmhjbUZ0Y3lJc0lteHZaeUlzSW5Cc1lXTmxhRzlzWkdWeVZYSnNJaXdpZEdWNGRDSXNJblJwYm5sdFkyVkRiMjVtYVdjaUxDSjNlWE5wZDNsbklpd2ljM1JoYm1SaGNtUlBjSFJwYjI1eklpd2lkR2x1ZVcxalpVTnZibVpwWjBaMWJHd2lMQ0ptZFd4c1QzQjBhVzl1Y3lJc0luTjBZWEowSWl3aWRHVnRjR3hoZEdWR2FXeGxJaXdpZEdWdGNHeGhkR1ZOWlhSaFpHRjBZU0lzSW1wemIzSnFjMjl1SWl3aVkzVnpkRzl0UlhoMFpXNXphVzl1Y3lJc0ltWnBlRkJoWjJWRmRtVnVkSE1pTENKbGVIUmxibk5wYjI1eklpd2lkbTBpTENKemRISnBibWR6SWl3aWRDSXNJbXRsZVNJc0ltOWlhbEJoY21GdElpd2lkMkZ5YmlJc0luUjBJaXdpYXlJc0lteGxibWQwYUNJc0luQjFjMmdpTENKbWFXeGxkWEJzYjJGa1EyOXVabWxuSWl3aWJXVnpjMkZuWlhNaUxDSjFibXR1YjNkdVJYSnliM0lpTENKMWNHeHZZV1JsWkVKNWRHVnpJaXdpYldGNFRuVnRZbVZ5VDJaR2FXeGxjeUlzSW1GalkyVndkRVpwYkdWVWVYQmxjeUlzSW0xaGVFWnBiR1ZUYVhwbElpd2liV2x1Um1sc1pWTnBlbVVpTENKd2IzTjBYMjFoZUY5emFYcGxJaXdpYldGNFgyWnBiR1ZmYzJsNlpTSXNJbTFwYmw5bWFXeGxYM05wZW1VaUxDSmhZMk5sY0hSZlptbHNaVjkwZVhCbGN5SXNJbTFoZUY5dWRXMWlaWEpmYjJaZlptbHNaWE1pTENKdFlYaGZkMmxrZEdnaUxDSnRhVzVmZDJsa2RHZ2lMQ0p0WVhoZmFHVnBaMmgwSWl3aWJXbHVYMmhsYVdkb2RDSXNJbUZpYjNKMElpd2lhVzFoWjJWZmNtVnphWHBsSWl3aVoyVnVaWEpwWXlJc0ltVjRkR1Z1WkNJc0ltWnBiR1YxY0d4dllXUWlMQ0psZUhSbGJtUlBjSFJwYjI1eklpd2laMkZzYkdWeWVWVnliQ0lzSW1Gd2NHVnVaRlJ2SWl3aVltOWtlU0lzSW5SbGJYQnNZWFJsSWl3aWJHOWhaQ0lzSW1sdWFYUkdjbTl0VEc5allXeFRkRzl5WVdkbElpd2lhR0Z6YUY5clpYa2lMQ0pzYzBSaGRHRWlMQ0psYldGcGJGQnliMk5sYzNOdmNrSmhZMnRsYm1RaUxDSmxlSFJsYm5OcGIyNGlMQ0p0WlhSaFpHRjBZU0lzSW0xdlpHVnNJaXdpWlNJc0ltVnljbTl5SWl3aWFXNXBkQ0lzSW1oaGMyZ2lMQ0pzYjJOaGRHbHZiaUlzSW5Od2JHbDBJaXdpWkdGMFlTSXNJa3BUVDA0aUxDSndZWEp6WlNJc0ltTnZiblJsYm5RaUxDSjFibVJsWm1sdVpXUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhORGIyMXdZWFJwWW14bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVWxCTEVsQlFVbEJMR1ZCUVdsQ1F5eFJRVUZSTEhkQ1FVTjZRa01zVVVGQlZVUXNVVUZCVVN4elFrRkRiRUpGTEVkQlFYZENMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWMFFzUjBGQmMwSXNiMEpCUVZoRkxFOUJRWGxDUVN4UFFVRlhSaXhIUVVGSkxFdEJRM0JIUnl4RlFVRjFRaXh2UWtGQldFWXNUMEZCZVVKQkxFOUJRV1ZITEU5QlFYTkNMRzlDUVVGWVJpeFBRVUY1UWtFc1QwRkJaVVVzVDBGQlNTeExRVU12UjA0c1VVRkJVU3h2UWtGRFVpeEpRVUZKVHl4MVFrRkJlVUpRTEZGQlFWRXNiVUpCUVcxQ1VTeFZRVVZ3UkVNc01rSkJRVFpDVkN4UlFVRlJMRFpDUVVOeVExVXNXVUZCWTFZc1VVRkJVU3hyUWtGRGRFSlhMRmRCUVdGWUxGRkJRVkVzYVVKQlEzSkNXU3hqUVVGblFsb3NVVUZCVVN4dlFrRkZlRUpoTEcxQ1FVRnhRbUlzVVVGQlVTeDVRa0ZGYWtNc1VVRkJRU3hKUVVGWFJTeEhRVUZ0UWl4TFFVRk5MRzFEUVVOd1F5eFJRVUZCTEVsQlFWZEhMRVZCUVd0Q0xFdEJRVTBzT0VKQlJXNURMRk5CUVZOVExHTkJRV05ETEVkQlEzSkNMRWxCUVVsRExFVkJRVTFhTEU5QlFVOWhMRk5CUVZORExHTkJRV01zVDBGSmVFTXNUMEZJUVVZc1JVRkJTVWNzVlVGQldTeFZRVU5vUWtnc1JVRkJTVWtzVjBGQlYwTXNTMEZCVDA0c1JVRkRkRUpETEVWQlFVbEhMRlZCUVZsSUxFVkJRVWxITEZWQlEySklMRVZCUVVsSkxGZEJRVmRETEV0QlIzaENMRk5CUVZORExIRkNRVUZ4UWtNc1JVRkJVME1zUjBGRGNrTXNTVUZCU1VNc1IwRkJNRU1zUjBGQmVrSkdMRVZCUVZGSExGRkJRVkVzUzBGQllTeEpRVUZOTEVsQlEzQkVReXhGUVVGTlNpeEZRVU5XTEVsQlFVc3NTVUZCU1Vzc1MwRkJVMG9zUlVGQlowSkJMRVZCUVZkTExHVkJRV1ZFTEV0QlF6RkVSQ3hIUVVGUFJpeEZRVUZwUWtjc1JVRkJVU3hKUVVGTlJTeHRRa0ZCYlVKT0xFVkJRVmRKTEVsQlEzQkZTQ3hGUVVGcFFpeExRVVZ1UWl4UFFVRlBSU3hGUVVkVUxFbEJRVWxKTEc5Q1FVRnpRaXhUUVVGVFF5eEZRVUZUT1VJc1IwRkZNVU5CTEVWQlFVY3JRaXhuUWtGQlowSkRMRmRCUVZkRExHRkJRV1VzVTBGQlUwTXNSVUZCUzBNc1JVRkJVVU1zUlVGQlQwTXNSMEZEZUVVc1NVRkRTVU1zUlVGQmMwSlNMRVZCUVZGUkxHOUNRVUZ6UWxJc1JVRkJVVkVzYjBKQlFYTkNMRmRCUTJ4R1F5eEZRVUZsUkN4RlFVRnZRa1VzVFVGQlRTdzJRa0ZEZWtORExFVkJRVmRRTEVWQlFVbE5MRTFCUVUwc05rSkJRM3BDTEVkQlFYRkNMRTlCUVdwQ1JDeEhRVUYxUXl4UFFVRmlSU3hIUVVGeFFrWXNSVUZCWVN4SlFVRk5SU3hGUVVGVExFZEJSVGRGTEU5QlJITkNTQ3hGUVVGdlFtUXNVVUZCVVN4TFFVTXpRMG9zY1VKQlFYRkNhMElzUjBGQmRVSktMRWxCUVV0QkxFVkJRVXRETEU5QlFWRkJMRVZCUVZGUExFOUJRVkZPTEVWQlFWRXNTVUZCVFVNc1NVRkZia2QwUXl4UlFVRlJORU1zU1VGQlNTdzRSRUZCSzBSVUxFVkJRVXRETEVWQlFWRkRMRVZCUVU5RExFVkJRVkZGTEVWQlFXTkZMRWRCUTNKSUxFbEJRVWxETEVkQlFWZFFMRTlCUVZGQkxFVkJRVkZETEUxQlFVOUJMRWRCUlhSRExFOUJSR1VzVDBGQldFTXNTVUZCYVVKTExFVkJRV1ZNTEU5QlFVbEJMRWRCUTJwRGFrSXNjVUpCUVhGQ1l5eEZRVUZMVVN4SlFVbHlRekZETEVWQlFVY3JRaXhuUWtGQlowSkRMRmRCUVZkWkxHVkJRV2xDTEZOQlFWTlNMRVZCUVU5RExFVkJRVkZSTEVkQlJYSkZMRTlCUVU5NlFpeHhRa0ZFYlVKVkxFVkJRVkZSTEc5Q1FVRnpRbElzUlVGQlVWRXNiMEpCUVhOQ0xGbEJRMjVEU0N4UFFVRlJMR05CUVdWUExFOUJRVkZPTEVWQlFWRXNTVUZCVFVNc1MwRkpPVVpRTEVkQlFWZEJMRVZCUVZGblFpeG5Ra0ZEY2tJNVF5eEZRVUZISzBJc1owSkJRV2RDWjBJc1VVRkJVVU1zWjBKQlFXdENiRUlzUlVGQlVXZENMR1ZCUTI1RWFFSXNSMEZCVjBFc1JVRkJVVzFDTEc5Q1FVTnlRbXBFTEVWQlFVY3JRaXhuUWtGQlowSm5RaXhSUVVGUlJ5eFpRVUZqY0VJc1JVRkJVVzFDTEc5Q1FVZHFSRVVzVFVGQlVTeFRRVUZUY2tJc1JVRkJVM05DTEVWQlFXTkRMRVZCUVd0Q1F5eEZRVUZWUXl4SFFVbDBSVEZFTEdWQlFXVXlSQ3huUWtGRlppeEpRVFpEU1VNc1IwRmtNRUlzVTBGQlUwTXNSMEZEYWtNMVFpeEhRVUZYUVN4RlFVRlJOa0lzVlVGRGNrSkVMRVZCUVVkRkxFVkJRVWtzVTBGQlUwTXNSVUZCUzBNc1IwRkRia0lzU1VGQlNYSkRMRVZCUVUxTExFVkJRVkUyUWl4UlFVRlJSU3hIUVVzeFFpeFpRVUZCTEVsQlNsZHdReXhKUVVOVU1VSXNVVUZCVVdkRkxFdEJRVXNzYVVOQlFXbERSaXhGUVVGSkxEQkNRVU5zUkhCRExFVkJRVTF2UXl4SFFVVkVTQ3hGUVVGSFRTeEhRVUZIZGtNc1JVRkJTM0ZETEUxQlRXMUNka1FzTWtKQlFUSkNSaXgzUWtGQmVVSkhMRmxCUVdGRExGZEJRVmxETEdWQlEzaElMRkZCUVVFc1NVRkJWelpETEVWQlExUXNTVUZCU3l4SlFVRkpWU3hGUVVGSkxFVkJRVWRCTEVWQlFVbFdMRVZCUVdsQ1Z5eFBRVUZSUkN4SlFVRkxVaXhGUVVGWFZTeExRVUZMV2l4RlFVRnBRbFVzU1VGRGNrWlNMRVZCUVZkVkxFdEJhRVIxUWl4VFFVRlRWQ3hIUVVONlF5eEpRVUZKVlN4SFFVTkdReXhWUVVORlF5eGhRVUZqV2l4RlFVRkhSU3hGUVVGRkxHbENRVU51UWxjc1kwRkJaV0lzUlVGQlIwVXNSVUZCUlN4dFEwRkRjRUpaTEdsQ1FVRnJRbVFzUlVGQlIwVXNSVUZCUlN4dlEwRkRka0poTEdkQ1FVRnBRbVlzUlVGQlIwVXNSVUZCUlN4NVFrRkRkRUpqTEZsQlFXRm9RaXhGUVVGSFJTeEZRVUZGTEhGQ1FVTnNRbVVzV1VGQllXcENMRVZCUVVkRkxFVkJRVVVzY1VKQlEyeENaMElzWTBGQlpXeENMRVZCUVVkRkxFVkJRVVVzYjBWQlEzQkNhVUlzWTBGQlpXNUNMRVZCUVVkRkxFVkJRVVVzYlVKQlEzQkNhMElzWTBGQlpYQkNMRVZCUVVkRkxFVkJRVVVzY1VKQlEzQkNiVUlzYTBKQlFXMUNja0lzUlVGQlIwVXNSVUZCUlN4M1FrRkRlRUp2UWl4dlFrRkJjVUowUWl4RlFVRkhSU3hGUVVGRkxHOURRVU14UW5GQ0xGVkJRVmQyUWl4RlFVRkhSU3hGUVVGRkxDdENRVU5vUW5OQ0xGVkJRVmQ0UWl4RlFVRkhSU3hGUVVGRkxHdERRVU5vUW5WQ0xGZEJRVmw2UWl4RlFVRkhSU3hGUVVGRkxHZERRVU5xUW5kQ0xGZEJRVmt4UWl4RlFVRkhSU3hGUVVGRkxHMURRVU5xUW5sQ0xFMUJRVTh6UWl4RlFVRkhSU3hGUVVGRkxIVkNRVU5hTUVJc1lVRkJZelZDTEVWQlFVZEZMRVZCUVVVc01FSkJRMjVDTWtJc1VVRkJVemRDTEVWQlFVZEZMRVZCUVVVc05rSkJTV1E1UWl4SFFVRlhRU3hGUVVGUmMwTXNiVUpCUTNKQ1FTeEZRVUZ0UW1wRkxFVkJRVVZ4Uml4UlFVRkJRU3hGUVVGaGNFSXNSVUZCYTBKMFF5eEZRVUZSYzBNc2JVSkJSVGxFY0VVc1IwRkJSeXRDTEdkQ1FVRTBRakJFTEZkQlFVVkRMR05CUVdkQ2RFSXNTVUYxUW01RUxFbEJRVWwxUWl4RlFVRmhOMFFzUlVGQlVYTkRMR2xDUVVGdFFuUkRMRVZCUVZGelF5eHBRa0ZCYVVKMlJDeEpRVUZOTEZkQlF6TkZaMElzYjBKQlFXOUNReXhGUVVGVE9VSXNTVUZITjBKSExFVkJRVVVzZDBSQlFUUkRlVVlzVTBGQlV6RkdMRTlCUVU5aExGTkJRVk00UlN4WFFVRkJRU3hKUVVjMVJIcERMRkZCUVVGQkxFbEJRWE5EUXl4SlFVTXZRMFFzUlVGQlpVTXNSVUZCYVVKNVF5eFZRVWxzUTJwSExHVkJRV1ZyUnl4TFFVRkxNVVlzZFVKQlFYZENLME1zUlVGQlkwTXNSVUZCYTBKRExFVkJRVlZITEVWQlFWbHJReXhKUVVsb1Iwc3NjVUpCUVhWQ0xGTkJRVk5zUlN4RlFVRlRiVVVzUlVGQlZURkRMRWRCUTNKRUxFbEJRMFVzU1VGQlNUSkRMRVZCUVZOMlJpeHRRa0ZCYlVKelJpeEZRVUZWYmtVc1JVRkJVWEZGTEhWQ1FVTTVRekZETEU5QlFVRkJMRWxCUVc5Q1JpeEZRVUZ0UTBFc1MwRkRNMFJGTEVWQlFWZFZMRXRCUVVzclFpeEZRVUZQUlN4WFFVTjJRaXhKUVVGSlRpeEZRVUZYYkVZc1kwRkJZM05HTEVWQlFVOUhMRk5CUVZOUUxGVkJRemRETTBNc1RVRkJUWEpDTEVWQlFWTm5SU3hGUVVGVlNTeEZRVUZQUnl4VFFVRlZTQ3hGUVVGUFNTeE5RVUZQTjBNc1IwRkRlRVFzVFVGQlR6aERMRWRCUTFCNFJ5eFJRVUZSZVVjc1RVRkJUU3hyUWtGQmJVSlFMRVZCUVZWTkxFdEJTVE5EUlN4TFFVRlBMRk5CUVZNelJTeEZRVUZUZVVJc1IwRkZNMElzU1VGQlNXMUVMRVZCUVU5NFJ5eFBRVUZQZVVjc1UwRkJVMFFzUzBGQlQzaEhMRTlCUVU5NVJ5eFRRVUZUZUVZc1MwRkJTM2xHTEUxQlFVMHNTMEZCU3l4UlFVRkJMRVZCUjJ4RkxFZEJRVWs1UlN4SlFVRlpRU3hGUVVGUlowVXNWVUZCV1doRkxFVkJRVkVyUlN4TlFVTXhReXhIUVVGSkwwVXNSVUZCVVN0RkxFdEJRVTBzUTBGRGFFSXNTVUZCU1VFc1JVRkJjMElzYVVKQlFWSkJMRVZCUVcxQ1F5eExRVUZMUXl4TlFVRk5ha1lzUlVGQlVTdEZMRTFCUVZFdlJTeEZRVUZSSzBVc1MwRkRlRVV4UkN4TlFVRk5ja0lzVDBGQlFVRXNSVUZCYjBJclJTeEZRVUZMVWl4VFFVRlZVU3hGUVVGTFJ5eFJRVUZUZWtRc1VVRkZka1JLTEUxQlFVMXlRaXhGUVVGVFFTeEZRVUZSWjBVc1kwRkJRVUVzVDBGQlZXMUNMRVZCUVhOQ01VUXNVVUZIY0VRc1IwRkJTVzFFTEVkQlFYVkNMRWRCUVdaQkxFVkJRVXQ0UXl4UFFVTjBRamhDTEhGQ1FVRnhRbXhGTEVWQlFWTTBSU3hGUVVGTmJrUXNUMEZGTDBJc1EwRkJRU3hKUVVGSmJVUXNSVUZIVkN4UFFVRkJMRVZCUmtGMlJDeE5RVUZOY2tJc1JVRkJVMnhDTEdOQlFXTTRSaXhSUVVGQlFTeFBRVUZQVHl4RlFVRnpRakZFTEVkQlNUVkVMRTlCUVVFc1IwRkhSakpFTEU5QlFVOURMRk5CUTB4RExHRkJRV04yU0N4bFFVRmxkVWdzWVVGRE4wSllMRXRCUVUxQkxFdEJRMDUwUkN4TlFVRlBRU0lzSW1acGJHVWlPaUl2ZG1GeUwzZDNkeTl0YjNOaGFXTnZMVzFoYzNSbGNpOXpjbU12YW5NdllYQndMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKSxhZGRTY3JpcHRUZW1wbGF0ZT1mdW5jdGlvbihlLHQsbil7dmFyIG89ZS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3JldHVybiBvLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHQvaHRtbFwiKSxvLnNldEF0dHJpYnV0ZShcImlkXCIsdCksby50ZXh0PW4sZS5ib2R5LmFwcGVuZENoaWxkKG8pLG99O2tvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lPXt0cGw6JzwhRE9DVFlQRSBodG1sPlxcclxcbjxodG1sPlxcclxcbjxoZWFkPlxcclxcbjwvaGVhZD5cXHJcXG48Ym9keT48ZGl2IGRhdGEtYmluZD1cImJsb2NrOiBjb250ZW50XCI+PC9kaXY+PC9ib2R5PlxcclxcbjwvaHRtbD5cXHJcXG4nLGluaXQ6ZnVuY3Rpb24oZSx0KXshZnVuY3Rpb24obil7dHJ5e3ZhciBvPWUuY29udGVudERvY3VtZW50O28ub3BlbigpLG8ud3JpdGUoa28uYmluZGluZ0hhbmRsZXJzLmJpbmRJZnJhbWUudHBsKSxvLmNsb3NlKCk7dHJ5e3ZhciByPW8uYm9keTtpZihyKXtmb3IodmFyIGk9ZS5jb250ZW50V2luZG93LnBhcmVudC5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxkPTA7ZDxpLmxlbmd0aDtkKyspXCJ0ZXh0L2h0bWxcIj09aVtkXS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpJiZpW2RdLmdldEF0dHJpYnV0ZShcImlkXCIpJiZhZGRTY3JpcHRUZW1wbGF0ZShvLGlbZF0uZ2V0QXR0cmlidXRlKFwiaWRcIiksaVtkXS5pbm5lckhUTUwpO3ZhciBhPW8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJIVE1MXCIpO2tvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZSxmdW5jdGlvbigpe2tvLmNsZWFuTm9kZShhWzBdfHxyKX0pLGtvLmFwcGx5QmluZGluZ3ModCgpLGFbMF18fHIpfWVsc2UgY29uc29sZS5sb2coXCJubyBpZnJhbWVkb2NcIixuKX1jYXRjaChlKXt0aHJvdyBjb25zb2xlLmxvZyhcImVycm9yIHJlYWRpbmcgaWZyYW1lLmJvZHlcIixlLG4pLGV9fWNhdGNoKGUpe3Rocm93IGNvbnNvbGUubG9nKFwiZXJyb3IgcmVhZGluZyBpZnJhbWUgY29udGVudERvY3VtZW50XCIsZSxuKSxlfX0oXCJmaXJzdCBjYWxsXCIpfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpwYm1RdGFXWnlZVzFsTG1weklsMHNJbTVoYldWeklqcGJJbXR2SWl3aWQybHVaRzkzSWl3aVoyeHZZbUZzSWl3aVkyOXVjMjlzWlNJc0luSmxjWFZwY21VaUxDSmhaR1JUWTNKcGNIUlVaVzF3YkdGMFpTSXNJbVJ2WXlJc0luUmxiWEJzWVhSbFRtRnRaU0lzSW5SbGJYQnNZWFJsVFdGeWEzVndJaXdpYzJOeWFYQjBWR0ZuSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5ObGRFRjBkSEpwWW5WMFpTSXNJblJsZUhRaUxDSmliMlI1SWl3aVlYQndaVzVrUTJocGJHUWlMQ0ppYVc1a2FXNW5TR0Z1Wkd4bGNuTWlMQ0ppYVc1a1NXWnlZVzFsSWl3aWRIQnNJaXdpYVc1cGRDSXNJbVZzWlcxbGJuUWlMQ0oyWVd4MVpVRmpZMlZ6YzI5eUlpd2liRzlqWVd3aUxDSnBabkpoYldVaUxDSmpiMjUwWlc1MFJHOWpkVzFsYm5RaUxDSnZjR1Z1SWl3aWQzSnBkR1VpTENKamJHOXpaU0lzSW1sbWNtRnRaV1J2WXlJc0luUmxiWEJzWVhSbGN5SXNJbU52Ym5SbGJuUlhhVzVrYjNjaUxDSndZWEpsYm5RaUxDSmtiMk4xYldWdWRDSXNJbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsSWl3aWFTSXNJbXhsYm1kMGFDSXNJbWRsZEVGMGRISnBZblYwWlNJc0ltbHVibVZ5U0ZSTlRDSXNJbWgwYld3aUxDSjFkR2xzY3lJc0ltUnZiVTV2WkdWRWFYTndiM05oYkNJc0ltRmtaRVJwYzNCdmMyVkRZV3hzWW1GamF5SXNJbU5zWldGdVRtOWtaU0lzSW1Gd2NHeDVRbWx1WkdsdVozTWlMQ0pzYjJjaUxDSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEVkQlFYZENMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWMFFzUjBGQmMwSXNiMEpCUVZoRkxFOUJRWGxDUVN4UFFVRlhSaXhIUVVGSkxFdEJRM0JIUnl4UlFVRlZReXhSUVVGUkxITkNRVWRzUWtNc2EwSkJRVzlDTEZOQlFWTkRMRVZCUVV0RExFVkJRV05ETEVkQlEyeEVMRWxCUVVsRExFVkJRVmxJTEVWQlFVbEpMR05CUVdNc1ZVRkxiRU1zVDBGS1FVUXNSVUZCVlVVc1lVRkJZU3hQUVVGUkxHRkJReTlDUml4RlFVRlZSU3hoUVVGaExFdEJRVTFLTEVkQlF6ZENSU3hGUVVGVlJ5eExRVUZQU2l4RlFVTnFRa1lzUlVGQlNVOHNTMEZCUzBNc1dVRkJXVXdzUjBGRFpFRXNSMEZMVkZRc1IwRkJSMlVzWjBKQlFXZENReXhaUVVWcVFrTXNTVUZCU3l4MVNFRkRURU1zUzBGQlRTeFRRVUZUUXl4RlFVRlRReXhKUVVOMFFpeFRRVUZ2UWtNc1IwRkRiRUlzU1VGRFJTeEpRVUZKUXl4RlFVRlRTQ3hGUVVGUlNTeG5Ra0ZEY2tKRUxFVkJRVTlGTEU5QlExQkdMRVZCUVU5SExFMUJRVTE2UWl4SFFVRkhaU3huUWtGQlowSkRMRmRCUVZkRExFdEJRek5EU3l4RlFVRlBTU3hSUVVWUUxFbEJRMFVzU1VGQlNVTXNSVUZCV1V3c1JVRkJUMVFzUzBGRGRrSXNSMEZCU1dNc1JVRkJWeXhEUVVkaUxFbEJSRUVzU1VGQlNVTXNSVUZCV1ZRc1JVRkJVVlVzWTBGQlkwTXNUMEZCVDBNc1UwRkJVME1zY1VKQlFYRkNMRlZCUTJ4RlF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsTUxFVkJRVlZOTEU5QlFWRkVMRWxCUTBzc1lVRkJja05NTEVWQlFWVkxMRWRCUVVkRkxHRkJRV0VzVTBGQk1FSlFMRVZCUVZWTExFZEJRVWRGTEdGQlFXRXNUMEZEYUVZNVFpeHJRa0ZCYTBKcFFpeEZRVUZSVFN4RlFVRlZTeXhIUVVGSFJTeGhRVUZoTEUxQlFVOVFMRVZCUVZWTExFZEJRVWRITEZkQlNUVkZMRWxCUVVsRExFVkJRVTltTEVWQlFVOVZMSEZDUVVGeFFpeFJRVVYyUTJoRExFZEJRVWR6UXl4TlFVRk5ReXhuUWtGQlowSkRMRzFDUVVGdFFuSkNMRVZCUVZNc1YwRkRia1J1UWl4SFFVRkhlVU1zVlVGQlZVb3NSVUZCU3l4SlFVRk5WaXhMUVVjeFFqTkNMRWRCUVVjd1F5eGpRVUZqZEVJc1NVRkJhVUpwUWl4RlFVRkxMRWxCUVUxV0xGRkJSVGREZUVJc1VVRkJVWGRETEVsQlFVa3NaVUZCWjBKMFFpeEhRVVU1UWl4TlFVRlBkVUlzUjBGRlVDeE5RVVJCZWtNc1VVRkJVWGRETEVsQlFVa3NORUpCUVRaQ1F5eEZRVUZIZGtJc1IwRkRkRU4xUWl4SFFVVlNMRTFCUVU5QkxFZEJSVkFzVFVGRVFYcERMRkZCUVZGM1F5eEpRVUZKTEhWRFFVRjNRME1zUlVGQlIzWkNMRWRCUTJwRWRVSXNSMEZzUTFZc1EwRnpRMWNpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwySnBibVJwYm1kekwySnBibVF0YVdaeVlXMWxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtrby5iaW5kaW5nSGFuZGxlcnMud2l0aFByb3BlcnRpZXM9e2luaXQ6ZnVuY3Rpb24oZSxuLG8sdCxsKXt2YXIgYT1sLmNyZWF0ZUNoaWxkQ29udGV4dChsLiRyYXdEYXRhLG51bGwsZnVuY3Rpb24oZSl7a28udXRpbHMuZXh0ZW5kKGUsbigpKX0pO3JldHVybiBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhhLGUpLHtjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLndpdGhQcm9wZXJ0aWVzPSEwLGtvLmJpbmRpbmdIYW5kbGVycy5sb2c9e2luaXQ6ZnVuY3Rpb24oZSxuLG8sdCxsKXtjb25zb2xlLmxvZyhcImxvZ1wiLG4oKSl9fSxrby5iaW5kaW5nSGFuZGxlcnMuYmxvY2s9e3RlbXBsYXRlRXhpc3RzOmZ1bmN0aW9uKGUpe3JldHVybiEhZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpfSxfY2hvb3NlVGVtcGxhdGU6ZnVuY3Rpb24oZSxuLG8sdCl7dmFyIGw9bitcIi1cIitvO2lmKGtvLmJpbmRpbmdIYW5kbGVycy5ibG9jay50ZW1wbGF0ZUV4aXN0cyhsKSlyZXR1cm4gbDtpZih2b2lkIDAhPT10JiZudWxsIT09dClyZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLmJsb2NrLl9jaG9vc2VUZW1wbGF0ZShlLG4sdCk7dmFyIGE9ZT9cImFycmF5XCI6XCJvYmplY3QtXCIrbztpZihrby5iaW5kaW5nSGFuZGxlcnMuYmxvY2sudGVtcGxhdGVFeGlzdHMoYSkpcmV0dXJuIGE7dGhyb3dcImNhbm5vdCBmaW5kIHRlbXBsYXRlIGZvciBcIitsK1wiL1wiK2F9LF9kaXNwbGF5TW9kZTpmdW5jdGlvbihlLG4pe3ZhciBvPXZvaWQgMCE9PWUudHlwZT9rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGUudHlwZSk6XCJub3RhYmxvY2stXCIrdHlwZW9mIGUsdD12b2lkIDAhPT1lLnNwbGljZSxsPW4udGVtcGxhdGVNb2RlP24udGVtcGxhdGVNb2RlOlwic2hvd1wiO3JldHVybiBrby5iaW5kaW5nSGFuZGxlcnMuYmxvY2suX2Nob29zZVRlbXBsYXRlKHQsbyxsLG4udGVtcGxhdGVNb2RlRmFsbGJhY2spfSxfbWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcjpmdW5jdGlvbihlLG4pe3JldHVybiBmdW5jdGlvbigpe3ZhciBvLHQsbD1lKCksYT1rby51dGlscy5wZWVrT2JzZXJ2YWJsZShsKTtpZighYXx8XCJvYmplY3RcIiE9dHlwZW9mIGEuZGF0YSYmXCJmdW5jdGlvblwiIT10eXBlb2YgYS5kYXRhKW89bDtlbHNlIGlmKG89YS5kYXRhLHZvaWQgMCE9PWEudGVtcGxhdGUpe3ZhciBpPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYS50ZW1wbGF0ZSkscj1uLnRlbXBsYXRlTW9kZT9uLnRlbXBsYXRlTW9kZTpcInNob3dcIjt0PWtvLmJpbmRpbmdIYW5kbGVycy5ibG9jay5fY2hvb3NlVGVtcGxhdGUoITEsaSxyLG4udGVtcGxhdGVNb2RlRmFsbGJhY2spfXZhciBkPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobyk7aWYoa28uaXNPYnNlcnZhYmxlKGQpJiZjb25zb2xlLmxvZyhcImRvdWJsZU9ic2VydmFibGVcIixkKSx2b2lkIDA9PT10KWlmKHZvaWQgMD09PW8pdD1cImVtcHR5XCI7ZWxzZSB0cnl7dD1rby5iaW5kaW5nSGFuZGxlcnMuYmxvY2suX2Rpc3BsYXlNb2RlKGQsbil9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5sb2coZSxkLG4uJGRhdGEsbi50ZW1wbGF0ZU1vZGUpLGV9cmV0dXJue25hbWU6dCxkYXRhOm8sdGVtcGxhdGVFbmdpbmU6a28ubmF0aXZlVGVtcGxhdGVFbmdpbmUuaW5zdGFuY2V9fX0saW5pdDpmdW5jdGlvbihlLG4sbyx0LGwpe3ZvaWQgMD09PW4oKSYmY29uc29sZS5sb2coXCJmb3VuZCBhIG51bGwgYmxvY2s6IGNoZWNrIGVuZGluZyBjb21tYXMgaW4gYXJyYXlzIGRlZnMgaW4gSUVcIik7dmFyIGE9a28uYmluZGluZ0hhbmRsZXJzLmJsb2NrLl9tYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yKG4sbCk7cmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy50ZW1wbGF0ZS5pbml0KGUsYSl9LHVwZGF0ZTpmdW5jdGlvbihlLG4sbyx0LGwpe3ZhciBhPWtvLmJpbmRpbmdIYW5kbGVycy5ibG9jay5fbWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcihuLGwpO3JldHVybiBrby5iaW5kaW5nSGFuZGxlcnMudGVtcGxhdGUudXBkYXRlKGUsYSxvLHQsbCl9fSxrby5leHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9ycy5ibG9jaz0hMSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLmJsb2NrPSEwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Kc2IyTnJjeTVxY3lKZExDSnVZVzFsY3lJNld5SnJieUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSW1OdmJuTnZiR1VpTENKeVpYRjFhWEpsSWl3aVltbHVaR2x1WjBoaGJtUnNaWEp6SWl3aWQybDBhRkJ5YjNCbGNuUnBaWE1pTENKcGJtbDBJaXdpWld4bGJXVnVkQ0lzSW5aaGJIVmxRV05qWlhOemIzSWlMQ0poYkd4Q2FXNWthVzVuY3lJc0luWnBaWGROYjJSbGJDSXNJbUpwYm1ScGJtZERiMjUwWlhoMElpd2lZMmhwYkdSQ2FXNWthVzVuUTI5dWRHVjRkQ0lzSW1OeVpXRjBaVU5vYVd4a1EyOXVkR1Y0ZENJc0lpUnlZWGRFWVhSaElpd2lZMjl1ZEdWNGRDSXNJblYwYVd4eklpd2laWGgwWlc1a0lpd2lZWEJ3YkhsQ2FXNWthVzVuYzFSdlJHVnpZMlZ1WkdGdWRITWlMQ0pqYjI1MGNtOXNjMFJsYzJObGJtUmhiblJDYVc1a2FXNW5jeUlzSW5acGNuUjFZV3hGYkdWdFpXNTBjeUlzSW1Gc2JHOTNaV1JDYVc1a2FXNW5jeUlzSW14dlp5SXNJbUpzYjJOcklpd2lkR1Z0Y0d4aGRHVkZlR2x6ZEhNaUxDSnBaQ0lzSW1SdlkzVnRaVzUwSWl3aVoyVjBSV3hsYldWdWRFSjVTV1FpTENKZlkyaHZiM05sVkdWdGNHeGhkR1VpTENKcGMwRnljbUY1SWl3aWNISmxabWw0SWl3aVlXTjBhVzl1SWl3aVptRnNiR0poWTJzaUxDSm1ZV3hzUW1GamEwbGtJaXdpWDJScGMzQnNZWGxOYjJSbElpd2lkVzUzY21Gd2NHVmtJaXdpZEhsd1pTSXNJblZ1ZDNKaGNFOWljMlZ5ZG1GaWJHVWlMQ0psSWl3aWMzQnNhV05sSWl3aWRHVnRjR3hoZEdWTmIyUmxJaXdpZEdWdGNHeGhkR1ZOYjJSbFJtRnNiR0poWTJzaUxDSmZiV0ZyWlZSbGJYQnNZWFJsVm1Gc2RXVkJZMk5sYzNOdmNpSXNJbTF2WkdWc1ZtRnNkV1VpTENKMFpXMXdiR0YwWlNJc0luWmhiSFZsSWl3aWRXNTNjbUZ3Y0dWa1ZtRnNkV1VpTENKd1pXVnJUMkp6WlhKMllXSnNaU0lzSW1SaGRHRWlMQ0owWlcxd2JHRjBaVkJoY21GdElpd2lkVzUzY21Gd2NHVmtUVzlrWld4V1lXeDFaU0lzSW1selQySnpaWEoyWVdKc1pTSXNJaVJrWVhSaElpd2libUZ0WlNJc0luUmxiWEJzWVhSbFJXNW5hVzVsSWl3aWJtRjBhWFpsVkdWdGNHeGhkR1ZGYm1kcGJtVWlMQ0pwYm5OMFlXNWpaU0lzSW01bGQxWmhiSFZsUVdOalpYTnpiM0lpTENKMWNHUmhkR1VpTENKbGVIQnlaWE56YVc5dVVtVjNjbWwwYVc1bklpd2lZbWx1WkdsdVoxSmxkM0pwZEdWV1lXeHBaR0YwYjNKeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVWRCTEVsQlFVbEJMRWRCUVhkQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlYwUXNSMEZCYzBJc2IwSkJRVmhGTEU5QlFYbENRU3hQUVVGWFJpeEhRVUZKTEV0QlEzQkhSeXhSUVVGVlF5eFJRVUZSTEhOQ1FVZDBRa29zUjBGQlIwc3NaMEpCUVdkRFF5eG5Ra0ZEYWtORExFdEJRVTBzVTBGQlUwTXNSVUZCVTBNc1JVRkJaVU1zUlVGQllVTXNSVUZCVjBNc1IwRkZOMFFzU1VGQlNVTXNSVUZCYzBKRUxFVkJRV1ZGTEcxQ1FVTjJRMFlzUlVGQlpVY3NVMEZEWml4TFFVTkJMRk5CUVZORExFZEJRMUJvUWl4SFFVRkhhVUlzVFVGQlRVTXNUMEZCVDBZc1JVRkJVMUFzVDBGTk4wSXNUMEZJUVZRc1IwRkJSMjFDTERKQ1FVRXlRazRzUlVGQmNVSk1MRWxCU1dwRVdTdzBRa0ZCUVVFc1MwRkpUbkJDTEVkQlFVZHhRaXhuUWtGQlowSkRMR2RDUVVGblEyaENMR2RDUVVGQkxFVkJSVzVFVGl4SFFVRkhTeXhuUWtGQmNVSnJRaXhMUVVOMFFtaENMRXRCUVUwc1UwRkJVME1zUlVGQlUwTXNSVUZCWlVNc1JVRkJZVU1zUlVGQlYwTXNSMEZETjBSVUxGRkJRVkZ2UWl4SlFVRkpMRTFCUVU5a0xFOUJTM1pDVkN4SFFVRkhTeXhuUWtGQmRVSnRRaXhQUVVWNFFrTXNaVUZCWjBJc1UwRkJVME1zUjBGRmRrSXNVVUZFVTNoQ0xFOUJRVTk1UWl4VFFVRlRReXhsUVVGbFJpeEpRVXN4UTBjc1owSkJRV2xDTEZOQlFWTkRMRVZCUVZORExFVkJRVkZETEVWQlFWRkRMRWRCUTJwRUxFbEJRVWxRTEVWQlFVdExMRVZCUVZNc1NVRkJUVU1zUlVGRGVFSXNSMEZCU1doRExFZEJRVWRMTEdkQ1FVRjFRbTFDTEUxQlFVVkRMR1ZCUVdWRExFZEJRVXNzVDBGQlQwRXNSVUZETTBRc1VVRkJRU3hKUVVGWFR5eEhRVUYzUXl4UFFVRmlRU3hGUVVGdFFpeFBRVUZQYWtNc1IwRkJSMHNzWjBKQlFYVkNiVUlzVFVGQlJVc3NaMEpCUVdkQ1F5eEZRVUZUUXl4RlFVRlJSU3hIUVVVelNDeEpRVUZKUXl4RlFVRmhTaXhGUVVGVkxGRkJRVlVzVlVGQldVVXNSVUZEYWtRc1IwRkJTV2hETEVkQlFVZExMR2RDUVVGMVFtMUNMRTFCUVVWRExHVkJRV1ZUTEVkQlFXRXNUMEZCVDBFc1JVRkRPVVFzUzBGQlRTdzBRa0ZCT0VKU0xFVkJRVXNzU1VGQlRWRXNSMEZMZUVSRExHRkJRV01zVTBGQlUwTXNSVUZCVjNoQ0xFZEJRMmhETEVsQlFVbHRRaXhQUVVGQlFTeEpRVUZuUWtzc1JVRkJWVU1zUzBGQmMwSnlReXhIUVVGSGFVSXNUVUZCVFhGQ0xHbENRVUZwUWtZc1JVRkJWVU1zVFVGQlVTeHZRa0ZCY1VKRkxFVkJRMnBJVkN4UFFVRkJRU3hKUVVGcFFrMHNSVUZCVlVrc1QwRkRNMEpETEVWQlFXVTNRaXhGUVVGbE5rSXNZVUZCWlRkQ0xFVkJRV1UyUWl4aFFVRmxMRTlCUXk5RkxFOUJRVTk2UXl4SFFVRkhTeXhuUWtGQmRVSnRRaXhOUVVGRlN5eG5Ra0ZCWjBKRExFVkJRVk5ETEVWQlFWRlZMRVZCUVdNM1FpeEZRVUZsT0VJc2RVSkJSMjVIUXl3eVFrRkJORUlzVTBGQlUyeERMRVZCUVdWSExFZEJRMnhFTEU5QlFVOHNWMEZEVEN4SlFVbEpaME1zUlVGRFFVTXNSVUZNUVVNc1JVRkJVWEpETEVsQlExWnpReXhGUVVGcFFpOURMRWRCUVVkcFFpeE5RVUZOSzBJc1pVRkJaVVlzUjBGTk0wTXNTVUZCVFVNc1IwRkJhMFFzYVVKQlFYWkNRU3hGUVVGbFJTeE5RVUZyUkN4dFFrRkJka0pHTEVWQlFXVkZMRXRCUTNoR1RDeEZRVUZoUlN4UFFVZGlMRWRCUkVGR0xFVkJRV0ZITEVWQlFXVkZMRlZCUVVGQkxFbEJRMnBDUml4RlFVRmxSaXhUUVVGNVFpeERRVU5xUkN4SlFVRkpTeXhGUVVGblFteEVMRWRCUVVkcFFpeE5RVUZOY1VJc2FVSkJRV2xDVXl4RlFVRmxSaXhWUVVONlJFb3NSVUZCWlRkQ0xFVkJRV1UyUWl4aFFVRmxOMElzUlVGQlpUWkNMR0ZCUVdVc1QwRkRMMFZKTEVWQlFWYzNReXhIUVVGSFN5eG5Ra0ZCZFVKdFFpeE5RVUZGU3l4cFFrRkJRVUVzUlVGQmRVSnhRaXhGUVVGbFZDeEZRVUZqTjBJc1JVRkJaVGhDTEhOQ1FVazVSeXhKUVVGSlV5eEZRVUZ6UW01RUxFZEJRVWRwUWl4TlFVRk5jVUlzYVVKQlFXbENUU3hIUVVkd1JDeEhRVVpKTlVNc1IwRkJSMjlFTEdGQlFXRkVMRWxCUVhOQ2FFUXNVVUZCVVc5Q0xFbEJRVWtzYlVKQlFXOUNORUlzVVVGQlFVRXNTVUZGTDBST0xFVkJSVlFzVVVGQlFTeEpRVUZKUkN4RlFVTkdReXhGUVVGWExHRkJSVmdzU1VGRFJVRXNSVUZCVnpkRExFZEJRVWRMTEdkQ1FVRjFRbTFDTEUxQlFVVlhMR0ZCUVdGblFpeEZRVUZ4UW5aRExFZEJRM3BGTEUxQlFVOHlRaXhIUVVWUUxFMUJSRUZ3UXl4UlFVRlJiMElzU1VGQlNXZENMRVZCUVVkWkxFVkJRWEZDZGtNc1JVRkJjMEo1UXl4TlFVRkhla01zUlVGQlpUWkNMR05CUTNSRlJpeEZRVXRhTEU5QlEwVmxMRXRCUVZGVUxFVkJRMUpKTEV0QlFWRk1MRVZCUTFKWExHVkJRV3RDZGtRc1IwRkJSM2RFTEhGQ1FVRnhRa01zV1VGTGFFUnNSQ3hMUVVGUkxGTkJRVk5ETEVWQlFWTkRMRVZCUVdWRExFVkJRV0ZETEVWQlFWZERMRkZCUVVGQkxFbEJRM0JFU0N4TFFVRnBRMDRzVVVGQlVXOUNMRWxCUVVrc1owVkJRM2hFTEVsQlFVbHRReXhGUVVGdFFqRkVMRWRCUVVkTExHZENRVUYxUW0xQ0xFMUJRVVZ0UWl3eVFrRkJNa0pzUXl4RlFVRmxSeXhIUVVNM1JpeFBRVUZQV2l4SFFVRkhTeXhuUWtGQk1FSjNReXhUUVVGUmRFTXNTMEZCUlVNc1JVRkJVMnRFTEVsQlJYcEVReXhQUVVGVkxGTkJRVk51UkN4RlFVRlRReXhGUVVGbFF5eEZRVUZoUXl4RlFVRlhReXhIUVVOcVJTeEpRVUZKT0VNc1JVRkJiVUl4UkN4SFFVRkhTeXhuUWtGQmRVSnRRaXhOUVVGRmJVSXNNa0pCUVRKQ2JFTXNSVUZCWlVjc1IwRkROMFlzVDBGQlQxb3NSMEZCUjBzc1owSkJRVEJDZDBNc1UwRkJWV01zVDBGQlJXNUVMRVZCUVZOclJDeEZRVUZyUW1oRUxFVkJRV0ZETEVWQlFWZERMRXRCUjNaSFdpeEhRVUZITkVRc2IwSkJRVzlDUXl4NVFrRkJaME55UXl4UFFVRkJMRVZCUTNaRWVFSXNSMEZCUjNGQ0xHZENRVUZuUWtNc1owSkJRWFZDUlN4UFFVRkJJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwzTnlZeTlxY3k5aWFXNWthVzVuY3k5aWJHOWphM011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9zdHJpbmctdGVtcGxhdGUuanNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbU5vYjI5elpTMTBaVzF3YkdGMFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkxRVUVzVDBGQlQwTXNVVUZCVlVNc1VVRkJVU0lzSW1acGJHVWlPaUl2ZG1GeUwzZDNkeTl0YjNOaGFXTnZMVzFoYzNSbGNpOXpjbU12YW5NdlltbHVaR2x1WjNNdlkyaHZiM05sTFhSbGJYQnNZWFJsTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiZXZvbC1jb2xvcnBpY2tlclwiKTt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxrb2pxdWk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua29qcXVpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvanF1aTpudWxsLENvbG9yUGlja2VyPWZ1bmN0aW9uKCl7a29qcXVpLkJpbmRpbmdIYW5kbGVyLmNhbGwodGhpcyxcImNvbG9ycGlja2VyXCIpfTtDb2xvclBpY2tlci5wcm90b3R5cGU9a29qcXVpLnV0aWxzLmNyZWF0ZU9iamVjdChrb2pxdWkuQmluZGluZ0hhbmRsZXIucHJvdG90eXBlKSxDb2xvclBpY2tlci5wcm90b3R5cGUuY29uc3RydWN0b3I9Q29sb3JQaWNrZXIsQ29sb3JQaWNrZXIucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24obyxlLGkpe3ZhciByPWUoKSxuPXIuY29sb3IsbD1rby5jb21wdXRlZCh7cmVhZDpuLHdyaXRlOm4sZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOm99KTtrby5iaW5kaW5nSGFuZGxlcnMudmFsdWUuaW5pdChvLGZ1bmN0aW9uKCl7cmV0dXJuIGx9LGkpO3ZhciB0PWZ1bmN0aW9uKG8sZSl7dm9pZCAwIT09ZSYmbChlKX07JChvKS5vbihcImNoYW5nZS5jb2xvclwiLHQpLGtvLmNvbXB1dGVkKHtyZWFkOmZ1bmN0aW9uKCl7dmFyIGU9e2NvbG9yOmtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobCksc2hvd09uOlwiYnV0dG9uXCJ9O2Zvcih2YXIgaSBpbiByKVwiY29sb3JcIiE9PWkmJnIuaGFzT3duUHJvcGVydHkoaSkmJihlW2ldPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocltpXSkpOyQobykuY29sb3JwaWNrZXIoZSl9LGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDpvfSksa28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhvLGZ1bmN0aW9uKCl7JChvKS5vZmYoXCJjaGFuZ2UuY29sb3JcIix0KSwkKG8pLmNvbG9ycGlja2VyKFwiZGVzdHJveVwiKX0pfSxrb2pxdWkudXRpbHMucmVnaXN0ZXIoQ29sb3JQaWNrZXIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmJHOXljR2xqYTJWeUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENJa0lpd2lkMmx1Wkc5M0lpd2lhbEYxWlhKNUlpd2laMnh2WW1Gc0lpd2lhMjhpTENKcmIycHhkV2tpTENKRGIyeHZjbEJwWTJ0bGNpSXNJa0pwYm1ScGJtZElZVzVrYkdWeUlpd2lZMkZzYkNJc0luUm9hWE1pTENKd2NtOTBiM1I1Y0dVaUxDSjFkR2xzY3lJc0ltTnlaV0YwWlU5aWFtVmpkQ0lzSW1OdmJuTjBjblZqZEc5eUlpd2lhVzVwZENJc0ltVnNaVzFsYm5RaUxDSjJZV3gxWlVGalkyVnpjMjl5SWl3aVlXeHNRbWx1WkdsdVozTWlMQ0oyWVNJc0luWmhiSFZsSWl3aVkyOXNiM0lpTENKdVpYZEVUeUlzSW1OdmJYQjFkR1ZrSWl3aWNtVmhaQ0lzSW5keWFYUmxJaXdpWkdsemNHOXpaVmRvWlc1T2IyUmxTWE5TWlcxdmRtVmtJaXdpWW1sdVpHbHVaMGhoYm1Sc1pYSnpJaXdpWTJoaGJtZGxVSEp2Y0dGbllYUnZjaUlzSW1WMlpXNTBJaXdpYjI0aUxDSnZjSFFpTENKMWJuZHlZWEJQWW5ObGNuWmhZbXhsSWl3aWMyaHZkMDl1SWl3aWNISnZjQ0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTI5c2IzSndhV05yWlhJaUxDSmtiMjFPYjJSbFJHbHpjRzl6WVd3aUxDSmhaR1JFYVhOd2IzTmxRMkZzYkdKaFkyc2lMQ0p2Wm1ZaUxDSnlaV2RwYzNSbGNpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZIUVVFc1VVRkJVU3h2UWtGRlVpeEpRVUZKUXl4RlFVRjFRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRV1ZETEU5QlFYTkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJaVVFzVDBGQlNTeExRVU16UjBVc1IwRkJkMElzYjBKQlFWaElMRTlCUVhsQ1FTeFBRVUZYUnl4SFFVRnpRaXh2UWtGQldFUXNUMEZCZVVKQkxFOUJRVmRETEVkQlFVa3NTMEZEY0VkRExFOUJRVFJDTEc5Q1FVRllTaXhQUVVGNVFrRXNUMEZCWlVrc1QwRkJjMElzYjBKQlFWaEdMRTlCUVhsQ1FTeFBRVUZsUlN4UFFVRkpMRXRCUjJoSVF5eFpRVUZqTEZkQlEyaENSQ3hQUVVGUFJTeGxRVUZsUXl4TFFVRkxReXhMUVVGTkxHZENRVVZ1UTBnc1dVRkJXVWtzVlVGQldVd3NUMEZCVDAwc1RVRkJUVU1zWVVGQllWQXNUMEZCVDBVc1pVRkJaVWNzVjBGRGVFVktMRmxCUVZsSkxGVkJRVlZITEZsQlFXTlFMRmxCUlhCRFFTeFpRVUZaU1N4VlFVRlZTU3hMUVVGUExGTkJRVk5ETEVWQlFWTkRMRVZCUVdWRExFZEJRelZFTEVsQlFVbERMRVZCUVV0R0xFbEJRMHhITEVWQlFWRkVMRVZCUVVkRkxFMUJTVmhETEVWQlFWRnFRaXhIUVVGSGEwSXNWVUZEWWtNc1MwRkJUVW9zUlVGRFRrc3NUVUZCVDB3c1JVRkRVRTBzZVVKQlFUQkNWaXhKUVUwMVFsZ3NSMEZCUjNOQ0xHZENRVUZuUWxBc1RVRkJUVXdzUzBGQlMwTXNSVUZLYkVJc1YwRkRWaXhQUVVGUFRTeEhRVWR4UTBvc1IwRkZPVU1zU1VGQlNWVXNSVUZCYlVJc1UwRkJVME1zUlVGQlQxSXNVVUZCUVVFc1NVRkRNVUpCTEVkQlFYVkNReXhGUVVGTlJDeEpRVVV4UTNCQ0xFVkJRVVZsTEVkQlFWTmpMRWRCUVVjc1pVRkJaMEpHTEVkQlJUbENka0lzUjBGQlIydENMRlZCUTBSRExFdEJRVTBzVjBGRFNpeEpRVUZKVHl4SFFVTkdWaXhOUVVGUGFFSXNSMEZCUjA4c1RVRkJUVzlDTEdsQ1FVRnBRbFlzUjBGRGFrTlhMRTlCUVZFc1ZVRkZWaXhKUVVGTExFbEJRVWxETEV0QlFWRm1MRVZCUTBZc1ZVRkJWR1VzUjBGQmIwSm1MRVZCUVVkblFpeGxRVUZsUkN4TFFVRlBTQ3hGUVVGSlJ5eEhRVUZSTjBJc1IwRkJSMDhzVFVGQlRXOUNMR2xDUVVGcFFtSXNSVUZCUjJVc1MwRkROVVpxUXl4RlFVRkZaU3hIUVVGVGIwSXNXVUZCV1V3c1NVRkZla0pNTEhsQ1FVRXdRbFlzU1VGSE5VSllMRWRCUVVkUExFMUJRVTE1UWl4blFrRkJaMEpETEcxQ1FVRnRRblJDTEVWQlFWTXNWMEZEYmtSbUxFVkJRVVZsTEVkQlFWTjFRaXhKUVVGSkxHVkJRV2RDV0N4SFFVTXZRak5DTEVWQlFVVmxMRWRCUVZOdlFpeFpRVUZaTEdOQlNUTkNPVUlzVDBGQlQwMHNUVUZCVFRSQ0xGTkJRVk5xUXlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl6Y21NdmFuTXZZbWx1WkdsdVozTXZZMjlzYjNKd2FXTnJaWEl1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIga289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbDtrby5iaW5kaW5nSGFuZGxlcnMuY3NzVGV4dD17dXBkYXRlOmZ1bmN0aW9uKGUsbix0KXt2YXIgbz1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKG4oKSk7dHJ5e2UuaW5uZXJUZXh0PW99Y2F0Y2gobil7ZS5zdHlsZVNoZWV0fHwoZS5pbm5lckhUTUw9XCJhe31cIiksZS5zdHlsZVNoZWV0LmNzc1RleHQ9b319fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnpjM1JsZUhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYTI4aUxDSjNhVzVrYjNjaUxDSm5iRzlpWVd3aUxDSmlhVzVrYVc1blNHRnVaR3hsY25NaUxDSmpjM05VWlhoMElpd2lkWEJrWVhSbElpd2libTlrWlNJc0luWmhiSFZsUVdOalpYTnpiM0lpTENKaGJHeENhVzVrYVc1bmN5SXNJblJsZUhRaUxDSjFkR2xzY3lJc0luVnVkM0poY0U5aWMyVnlkbUZpYkdVaUxDSnBibTVsY2xSbGVIUWlMQ0psSWl3aWMzUjViR1ZUYUdWbGRDSXNJbWx1Ym1WeVNGUk5UQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4SFFVRjNRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRVmRFTEVkQlFYTkNMRzlDUVVGWVJTeFBRVUY1UWtFc1QwRkJWMFlzUjBGQlNTeExRVWQ0UjBFc1IwRkJSMGNzWjBKQlFXZENReXhUUVVOcVFrTXNUMEZCVlN4VFFVRlRReXhGUVVGTlF5eEZRVUZsUXl4SFFVTjBReXhKUVVGSlF5eEZRVUZQVkN4SFFVRkhWU3hOUVVGTlF5eHBRa0ZCYVVKS0xFdEJRM0pETEVsQlEwVkVMRVZCUVV0TkxGVkJRVmxJTEVWQlEycENMRTFCUVU5SkxFZEJRMFpRTEVWQlFVdFJMR0ZCUVZsU0xFVkJRVXRUTEZWQlFWa3NUMEZEZGtOVUxFVkJRVXRSTEZkQlFWZFdMRkZCUVZWTElpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDNOeVl5OXFjeTlpYVc1a2FXNW5jeTlqYzNOMFpYaDBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLCQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtrby5iaW5kaW5nSGFuZGxlcnMuZm9jdXNhYmxlPXtmb2N1czpmdW5jdGlvbigpe30sYmx1cjpmdW5jdGlvbigpe30saW5pdDpmdW5jdGlvbihvKXtrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKG8sZnVuY3Rpb24oKXskKG8pLm9mZihcImZvY3VzaW5cIixrby5iaW5kaW5nSGFuZGxlcnMuZm9jdXNhYmxlLmZvY3VzKSwkKG8pLm9mZihcImZvY3Vzb3V0XCIsa28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5ibHVyKX0pLCQobykub24oXCJmb2N1c2luXCIsa28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5mb2N1cyksJChvKS5vbihcImZvY3Vzb3V0XCIsa28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5ibHVyKX19LGtvLmJpbmRpbmdIYW5kbGVycy5zY3JvbGxhYmxlPXtzY3JvbGw6ZnVuY3Rpb24oKXt9LGluaXQ6ZnVuY3Rpb24obyl7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhvLGZ1bmN0aW9uKCl7JChvKS5vZmYoXCJzY3JvbGxcIixrby5iaW5kaW5nSGFuZGxlcnMuc2Nyb2xsYWJsZS5zY3JvbGwpfSksJChvKS5vbihcInNjcm9sbFwiLGtvLmJpbmRpbmdIYW5kbGVycy5zY3JvbGxhYmxlLnNjcm9sbCl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVjJaVzUwWVdKc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKcmJ5SXNJbmRwYm1SdmR5SXNJbWRzYjJKaGJDSXNJaVFpTENKcVVYVmxjbmtpTENKamIyNXpiMnhsSWl3aWNtVnhkV2x5WlNJc0ltSnBibVJwYm1kSVlXNWtiR1Z5Y3lJc0ltWnZZM1Z6WVdKc1pTSXNJbVp2WTNWeklpd2lZbXgxY2lJc0ltbHVhWFFpTENKbGJHVnRaVzUwSWl3aWRYUnBiSE1pTENKa2IyMU9iMlJsUkdsemNHOXpZV3dpTENKaFpHUkVhWE53YjNObFEyRnNiR0poWTJzaUxDSnZabVlpTENKdmJpSXNJbk5qY205c2JHRmliR1VpTENKelkzSnZiR3dpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1IwRkJkMElzYjBKQlFWaERMRTlCUVhsQ1FTeFBRVUZYUkN4SFFVRnpRaXh2UWtGQldFVXNUMEZCZVVKQkxFOUJRVmRHTEVkQlFVa3NTMEZEY0VkSExFVkJRWFZDTEc5Q1FVRllSaXhQUVVGNVFrRXNUMEZCWlVjc1QwRkJjMElzYjBKQlFWaEdMRTlCUVhsQ1FTeFBRVUZsUlN4UFFVRkpMRXRCUXpOSFF5eFJRVUZWUXl4UlFVRlJMSE5DUVVkMFFrNHNSMEZCUjA4c1owSkJRV2RDUXl4WFFVTnFRa01zVFVGQlV5eGhRVU5VUXl4TFFVRlJMR0ZCUTFKRExFdEJRVkVzVTBGQlUwTXNSMEZEWmxvc1IwRkJSMkVzVFVGQlRVTXNaMEpCUVdkQ1F5eHRRa0ZCYlVKSUxFVkJRVk1zVjBGRGJrUlVMRVZCUVVWVExFZEJRVk5KTEVsQlFVa3NWVUZCVjJoQ0xFZEJRVWRQTEdkQ1FVRm5Ra01zVlVGQlZVTXNUMEZEZGtST0xFVkJRVVZUTEVkQlFWTkpMRWxCUVVrc1YwRkJXV2hDTEVkQlFVZFBMR2RDUVVGblFrTXNWVUZCVlVVc1VVRkhNVVJRTEVWQlFVVlRMRWRCUVZOTExFZEJRVWNzVlVGQlYycENMRWRCUVVkUExHZENRVUZuUWtNc1ZVRkJWVU1zVDBGRGRFUk9MRVZCUVVWVExFZEJRVk5MTEVkQlFVY3NWMEZCV1dwQ0xFZEJRVWRQTEdkQ1FVRm5Ra01zVlVGQlZVVXNVVUZMTTBSV0xFZEJRVWRQTEdkQ1FVRm5RbGNzV1VGRGFrSkRMRTlCUVZVc1lVRkRWbElzUzBGQlVTeFRRVUZUUXl4SFFVTm1XaXhIUVVGSFlTeE5RVUZOUXl4blFrRkJaMEpETEcxQ1FVRnRRa2dzUlVGQlV5eFhRVU51UkZRc1JVRkJSVk1zUjBGQlUwa3NTVUZCU1N4VFFVRlZhRUlzUjBGQlIwOHNaMEpCUVdkQ1Z5eFhRVUZYUXl4VlFVZDZSR2hDTEVWQlFVVlRMRWRCUVZOTExFZEJRVWNzVTBGQlZXcENMRWRCUVVkUExHZENRVUZuUWxjc1YwRkJWME1pTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwySnBibVJwYm1kekwyVjJaVzUwWVdKc1pTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsLGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGw7IWZ1bmN0aW9uKGUsbyl7ZS51dGlscy51bndyYXBPYnNlcnZhYmxlO3ZhciBuPWUudXRpbHMuZG9tRGF0YS5nZXQ7ZS51dGlscy5kb21EYXRhLnNldCxlLmJpbmRpbmdIYW5kbGVycy5leHRkcm9wcGFibGU9e2luaXQ6ZnVuY3Rpb24odCxkLGEsbCxpKXt2YXIgcyxwPW8odCkscj1lLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZCgpKXx8e30sdT17fTtvLmV4dGVuZCghMCx1LGUuYmluZGluZ0hhbmRsZXJzLmV4dGRyb3BwYWJsZSksci5kYXRhPyhyLm9wdGlvbnMmJnUub3B0aW9ucyYmKGUudXRpbHMuZXh0ZW5kKHUub3B0aW9ucyxyLm9wdGlvbnMpLGRlbGV0ZSByLm9wdGlvbnMpLGUudXRpbHMuZXh0ZW5kKHUscikpOnUuZGF0YT1yLHM9dS5vcHRpb25zLmRyb3AscC5kcm9wcGFibGUoZS51dGlscy5leHRlbmQodS5vcHRpb25zLHtkcm9wOmZ1bmN0aW9uKGUsbyl7dmFyIHQ9by5kcmFnZ2FibGVbMF0sZD1uKHQsXCJrb19zb3J0SXRlbVwiKXx8bih0LFwia29fZHJhZ0l0ZW1cIik7ZCYmKGQuY2xvbmUmJihkPWQuY2xvbmUoKSksdS5kcmFnZ2VkJiYoZD11LmRyYWdnZWQuY2FsbCh0aGlzLGQsZSxvKXx8ZCksdS5kYXRhJiZ1LmRhdGEoZCkpLHMmJnMuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSx2b2lkIDAhPT11LmlzRW5hYmxlZCYmZS5jb21wdXRlZCh7cmVhZDpmdW5jdGlvbigpe3AuZHJvcHBhYmxlKGUudXRpbHMudW53cmFwT2JzZXJ2YWJsZSh1LmlzRW5hYmxlZCk/XCJlbmFibGVcIjpcImRpc2FibGVcIil9LGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDp0fSl9LHVwZGF0ZTpmdW5jdGlvbihlLG8sbix0LGQpe30sdGFyZ2V0SW5kZXg6bnVsbCxhZnRlck1vdmU6bnVsbCxiZWZvcmVNb3ZlOm51bGwsb3B0aW9uczp7fX19KGtvLCQpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WNGRHUnliM0J3WVdKc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lJa0lpd2lkMmx1Wkc5M0lpd2lhbEYxWlhKNUlpd2laMnh2WW1Gc0lpd2lhMjhpTENKMWRHbHNjeUlzSW5WdWQzSmhjRTlpYzJWeWRtRmliR1VpTENKa1lYUmhSMlYwSWl3aVpHOXRSR0YwWVNJc0ltZGxkQ0lzSW5ObGRDSXNJbUpwYm1ScGJtZElZVzVrYkdWeWN5SXNJbVY0ZEdSeWIzQndZV0pzWlNJc0ltbHVhWFFpTENKbGJHVnRaVzUwSWl3aWRtRnNkV1ZCWTJObGMzTnZjaUlzSW1Gc2JFSnBibVJwYm1kelFXTmpaWE56YjNJaUxDSmtZWFJoSWl3aVkyOXVkR1Y0ZENJc0ltUnliM0JCWTNSMVlXd2lMQ0lrWld4bGJXVnVkQ0lzSW5aaGJIVmxJaXdpWkhKdmNIQmhZbXhsSWl3aVpYaDBaVzVrSWl3aWIzQjBhVzl1Y3lJc0ltUnliM0FpTENKbGRtVnVkQ0lzSW5WcElpd2laV3dpTENKa2NtRm5aMkZpYkdVaUxDSnBkR1Z0SWl3aVkyeHZibVVpTENKa2NtRm5aMlZrSWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0poY0hCc2VTSXNJbUZ5WjNWdFpXNTBjeUlzSW1selJXNWhZbXhsWkNJc0ltTnZiWEIxZEdWa0lpd2ljbVZoWkNJc0ltUnBjM0J2YzJWWGFHVnVUbTlrWlVselVtVnRiM1psWkNJc0luVndaR0YwWlNJc0luUmhjbWRsZEVsdVpHVjRJaXdpWVdaMFpYSk5iM1psSWl3aVltVm1iM0psVFc5MlpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3hGUVVGMVFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkRMRTlCUVhOQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpVUXNUMEZCU1N4TFFVTXpSMFVzUjBGQmQwSXNiMEpCUVZoSUxFOUJRWGxDUVN4UFFVRlhSeXhIUVVGelFpeHZRa0ZCV0VRc1QwRkJlVUpCTEU5QlFWZERMRWRCUVVrc1RVRkxja2NzVTBGQlUwRXNSVUZCU1Vvc1IwRk5TRWtzUlVGQlIwTXNUVUZCVFVNc2FVSkJUSEJDTEVsQlRVVkRMRVZCUVZWSUxFVkJRVWRETEUxQlFVMUhMRkZCUVZGRExFbEJRMnBDVEN4RlFVRkhReXhOUVVGTlJ5eFJRVUZSUlN4SlFVYzNRazRzUlVGQlIwOHNaMEpCUVdkQ1F5eGpRVU5xUWtNc1MwRkJUU3hUUVVGVFF5eEZRVUZUUXl4RlFVRmxReXhGUVVGeFFrTXNSVUZCVFVNc1IwRkRhRVVzU1VGSFJVTXNSVUZJUlVNc1JVRkJWM0JDTEVWQlFVVmpMRWRCUTJaUExFVkJRVkZxUWl4RlFVRkhReXhOUVVGTlF5eHBRa0ZCYVVKVExGTkJRMnhEVHl4TFFVZEdkRUlzUlVGQlJYVkNMRkZCUVVGQkxFVkJRV0ZFTEVWQlFWZHNRaXhGUVVGSFR5eG5Ra0ZCWjBKRExHTkJRM3BEVXl4RlFVRk5TaXhOUVVOS1NTeEZRVUZOUnl4VFFVRlhSaXhGUVVGVlJTeFZRVU0zUW5CQ0xFVkJRVWRETEUxQlFVMXJRaXhQUVVGUFJDeEZRVUZWUlN4UlFVRlRTQ3hGUVVGTlJ5eG5Ra0ZEYkVOSUxFVkJRVTFITEZOQlJXWndRaXhGUVVGSFF5eE5RVUZOYTBJc1QwRkJUMFFzUlVGQlYwUXNTVUZGTTBKRExFVkJRVlZNTEV0QlFVOUpMRVZCUjI1Q1JpeEZRVUZoUnl4RlFVRlZSU3hSUVVGUlF5eExRVVV2UWt3c1JVRkJVMFVzVlVGQlZXeENMRVZCUVVkRExFMUJRVTFyUWl4UFFVRlBSQ3hGUVVGVlJTeFRRVU16UTBNc1MwRkJUU3hUUVVGVFF5eEZRVUZQUXl4SFFVVndRaXhKUVVGSlF5eEZRVUZMUkN4RlFVRkhSU3hWUVVGVkxFZEJRM0JDUXl4RlFVRlBka0lzUlVGQlVYRkNMRVZCYkVOWUxHZENRV3RETWtKeVFpeEZRVUZSY1VJc1JVRTVRbkpETEdWQlowTkJSU3hKUVVWRlFTeEZRVUZMUXl4UlFVTlFSQ3hGUVVGUFFTeEZRVUZMUXl4VFFVZFdWQ3hGUVVGVlZTeFZRVU5hUml4RlFVRlBVaXhGUVVGVlZTeFJRVUZSUXl4TFFVRkxReXhMUVVGTlNpeEZRVUZOU2l4RlFVRlBReXhKUVVGUFJ5eEhRVWQwUkZJc1JVRkJWVXdzVFVGRFdrc3NSVUZCVlV3c1MwRkJTMkVzU1VGTFpsZ3NSMEZEUmtFc1JVRkJWMmRDTEUxQlFVMUVMRXRCUVUxRkxHOUNRVUZCUVN4SlFVOTZRbVFzUlVGQlZXVXNWMEZEV21wRExFVkJRVWRyUXl4VlFVTkVReXhMUVVGTkxGZEJRMHB1UWl4RlFVRlRSU3hWUVVGVmJFSXNSVUZCUjBNc1RVRkJUVU1zYVVKQlFXbENaMElzUlVGQlZXVXNWMEZCWVN4VFFVRlhMRmxCUldwR1J5eDVRa0ZCTUVJeFFpeExRVXRvUXpKQ0xFOUJRVkVzVTBGQlV6TkNMRVZCUVZORExFVkJRV1ZETEVWQlFYRkNReXhGUVVGTlF5eExRVWR3UlhkQ0xGbEJRV0VzUzBGRFlrTXNWVUZCVnl4TFFVTllReXhYUVVGWkxFdEJRMXB3UWl4WlFUZEZSQ3hEUVVSUGNFSXNSMEZCU1VvaUxDSm1hV3hsSWpvaUwzWmhjaTkzZDNjdmJXOXpZV2xqYnkxdFlYTjBaWEl2YzNKakwycHpMMkpwYm1ScGJtZHpMMlY0ZEdSeWIzQndZV0pzWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIga289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbDtrby5leHRlbmRlcnMucGFnaW5nPWZ1bmN0aW9uKGUsbil7dmFyIHQ9a28ub2JzZXJ2YWJsZShufHwxMCksbz1rby5vYnNlcnZhYmxlKDEpO3JldHVybiBlLnBhZ2VTaXplPWtvLmNvbXB1dGVkKHtyZWFkOnQsd3JpdGU6ZnVuY3Rpb24oZSl7dChlPjA/ZToxMCl9fSksZS5jdXJyZW50UGFnZT1rby5jb21wdXRlZCh7cmVhZDpvLHdyaXRlOmZ1bmN0aW9uKG4pe24+ZS5wYWdlQ291bnQoKT9vKGUucGFnZUNvdW50KCkpOm8objw9MD8xOm4pfX0pLGUucGFnZUNvdW50PWtvLmNvbXB1dGVkKGZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguY2VpbChlKCkubGVuZ3RoL2UucGFnZVNpemUoKSl8fDF9KSxlLmN1cnJlbnRQYWdlRGF0YT1rby5jb21wdXRlZChmdW5jdGlvbigpe3ZhciBuPXQoKSxyPW8oKSx1PW4qKHItMSksYT1uKnI7cmV0dXJuIGUoKS5zbGljZSh1LGEpfSksZS5tb3ZlRmlyc3Q9ZnVuY3Rpb24oKXtlLmN1cnJlbnRQYWdlKDEpfSxlLm1vdmVQcmV2aW91cz1mdW5jdGlvbigpe2UuY3VycmVudFBhZ2UoZS5jdXJyZW50UGFnZSgpLTEpfSxlLm1vdmVOZXh0PWZ1bmN0aW9uKCl7ZS5jdXJyZW50UGFnZShlLmN1cnJlbnRQYWdlKCkrMSl9LGUubW92ZUxhc3Q9ZnVuY3Rpb24oKXtlLmN1cnJlbnRQYWdlKGUucGFnZUNvdW50KCkpfSxlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVjRkR1Z1WkdWeUxYQmhaMmx1WVhScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaWEyOGlMQ0ozYVc1a2IzY2lMQ0puYkc5aVlXd2lMQ0psZUhSbGJtUmxjbk1pTENKd1lXZHBibWNpTENKMFlYSm5aWFFpTENKd1lXZGxVMmw2WlNJc0lsOXdZV2RsVTJsNlpTSXNJbTlpYzJWeWRtRmliR1VpTENKZlkzVnljbVZ1ZEZCaFoyVWlMQ0pqYjIxd2RYUmxaQ0lzSW5KbFlXUWlMQ0ozY21sMFpTSXNJbTVsZDFaaGJIVmxJaXdpWTNWeWNtVnVkRkJoWjJVaUxDSndZV2RsUTI5MWJuUWlMQ0pOWVhSb0lpd2lZMlZwYkNJc0lteGxibWQwYUNJc0ltTjFjbkpsYm5SUVlXZGxSR0YwWVNJc0luQmhaMlZKYm1SbGVDSXNJbk4wWVhKMFNXNWtaWGdpTENKbGJtUkpibVJsZUNJc0luTnNhV05sSWl3aWJXOTJaVVpwY25OMElpd2liVzkyWlZCeVpYWnBiM1Z6SWl3aWJXOTJaVTVsZUhRaUxDSnRiM1psVEdGemRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3hIUVVGM1FpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFWZEVMRWRCUVhOQ0xHOUNRVUZZUlN4UFFVRjVRa0VzVDBGQlYwWXNSMEZCU1N4TFFVVjRSMEVzUjBGQlIwY3NWVUZCVlVNc1QwRkJVeXhUUVVGVFF5eEZRVUZSUXl4SFFVTnlReXhKUVVGSlF5eEZRVUZaVUN4SFFVRkhVU3hYUVVGWFJpeEhRVUZaTEVsQlJYaERSeXhGUVVGbFZDeEhRVUZIVVN4WFFVRlhMRWRCYlVRdlFpeFBRV3hFUVVnc1JVRkJUME1zVTBGQlYwNHNSMEZCUjFVc1ZVRkRia0pETEV0QlFVMUtMRVZCUTA1TExFMUJRVThzVTBGQlUwTXNSMEZGV2s0c1JVRkVSVTBzUlVGQlZ5eEZRVU5JUVN4RlFVVkJMRTlCUzJoQ1VpeEZRVUZQVXl4WlFVRmpaQ3hIUVVGSFZTeFZRVU4wUWtNc1MwRkJUVVlzUlVGRFRrY3NUVUZCVHl4VFFVRlRReXhIUVVOV1FTeEZRVUZYVWl4RlFVRlBWU3haUVVOd1FrNHNSVUZCWVVvc1JVRkJUMVVzWVVGRmNFSk9MRVZCUkZOSkxFZEJRVmtzUlVGRFVpeEZRVVZCUVN4TlFVdHVRbElzUlVGQlQxVXNWVUZCV1dZc1IwRkJSMVVzVTBGQlV5eFhRVU0zUWl4UFFVRlBUU3hMUVVGTFF5eExRVUZMV2l4SlFVRlRZU3hQUVVGVFlpeEZRVUZQUXl4aFFVRmxMRWxCUnpORVJDeEZRVUZQWXl4blFrRkJhMEp1UWl4SFFVRkhWU3hUUVVGVExGZEJRMjVETEVsQlFVbEtMRVZCUVZkRExFbEJRMkpoTEVWQlFWbFlMRWxCUTFwWkxFVkJRV0ZtTEVkQlFWbGpMRVZCUVZrc1IwRkRja05GTEVWQlFWZG9RaXhGUVVGWFl5eEZRVVY0UWl4UFFVRlBaaXhKUVVGVGEwSXNUVUZCVFVZc1JVRkJXVU1zUzBGSGNFTnFRaXhGUVVGUGJVSXNWVUZCV1N4WFFVTnFRbTVDTEVWQlFVOVRMRmxCUVZrc1NVRkZja0pVTEVWQlFVOXZRaXhoUVVGbExGZEJRM0JDY0VJc1JVRkJUMU1zV1VGQldWUXNSVUZCVDFNc1kwRkJaMElzU1VGRk5VTlVMRVZCUVU5eFFpeFRRVUZYTEZkQlEyaENja0lzUlVGQlQxTXNXVUZCV1ZRc1JVRkJUMU1zWTBGQlowSXNTVUZGTlVOVUxFVkJRVTl6UWl4VFFVRlhMRmRCUTJoQ2RFSXNSVUZCVDFNc1dVRkJXVlFzUlVGQlQxVXNZMEZIY2tKV0lpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDNOeVl5OXFjeTlpYVc1a2FXNW5jeTlsZUhSbGJtUmxjaTF3WVdkcGJtRjBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxzb3J0YWJsZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnkudWkuc29ydGFibGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5LnVpLnNvcnRhYmxlOm51bGwsZHJhZ2dhYmxlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeS51aS5kcmFnZ2FibGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5LnVpLmRyYWdnYWJsZTpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtpZihyZXF1aXJlKFwia25vY2tvdXQtc29ydGFibGVcIiksdm9pZCAwPT09c29ydGFibGUpdGhyb3dcIkNhbm5vdCBmaW5kIGpxdWVyeS11aSBzb3J0YWJsZSB3aWRnZXQgZGVwZW5kZW5jeSFcIjtpZih2b2lkIDA9PT1kcmFnZ2FibGUpdGhyb3dcIkNhbm5vdCBmaW5kIGpxdWVyeS11aSBzb3J0YWJsZSB3aWRnZXQgZGVwZW5kZW5jeSFcIjt2YXIgaXNEcmFnZ2luZ0hlbHBlcj1mdW5jdGlvbihlLG4pe2UoKT9uLnR5cGU9PWUoKStcInN0b3BcIiYmZSghMSk6XCJkcmFnc3RhcnRcIiE9bi50eXBlJiZcInNvcnRzdGFydFwiIT1uLnR5cGV8fGUobi50eXBlLnN1YnN0cmluZygwLDQpKX0sbWFrZUV4dGVuZGVkVmFsdWVBY2Nlc3Nvcj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1lKCk7a28udXRpbHMucGVla09ic2VydmFibGUobiksa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShuKSxcInVuZGVmaW5lZFwiPT1uLm9wdGlvbnMmJihuLm9wdGlvbnM9e30pO3ZhciBvPW4ub3B0aW9ucy5zdGFydDtuLm9wdGlvbnMuc3RhcnQ9ZnVuY3Rpb24oZSxyKXtpZih2b2lkIDAhPT1uLmRyYWdnaW5nJiZrby5pc1dyaXRhYmxlT2JzZXJ2YWJsZShuLmRyYWdnaW5nKSYmaXNEcmFnZ2luZ0hlbHBlcihuLmRyYWdnaW5nLGUpLHZvaWQgMCE9PW4uZHJvcENvbnRhaW5lciYmKG4uc2Nyb2xsSW50ZXJ2YWw9Z2xvYmFsLnNldEludGVydmFsKGZ1bmN0aW9uKCl7dmFyIGU9JChuLmRyb3BDb250YWluZXIpLnNjcm9sbFRvcCgpOyQobi5kcm9wQ29udGFpbmVyKS5zY3JvbGxUb3AoZStuLmFkZGluZyl9LDIwKSksdm9pZCAwIT09bylyZXR1cm4gbyhlLHIpfTt2YXIgcj1uLm9wdGlvbnMuc3RvcDtuLm9wdGlvbnMuc3RvcD1mdW5jdGlvbihlLG8pe2lmKHZvaWQgMCE9PW4uZHJhZ2dpbmcmJmtvLmlzV3JpdGFibGVPYnNlcnZhYmxlKG4uZHJhZ2dpbmcpJiZpc0RyYWdnaW5nSGVscGVyKG4uZHJhZ2dpbmcsZSksdm9pZCAwIT09bi5kcm9wQ29udGFpbmVyJiZnbG9iYWwuY2xlYXJJbnRlcnZhbChuLnNjcm9sbEludGVydmFsKSx2b2lkIDAhPT1yKXJldHVybiByKGUsbyl9O3ZhciBpPW4ub3B0aW9ucy5kcmFnO3JldHVybiBuLm9wdGlvbnMuZHJhZz1mdW5jdGlvbihlLG8pe2lmKHZvaWQgMCE9PW4uZHJvcENvbnRhaW5lcil7dmFyIHI9ZS5wYWdlWS0kKG4uZHJvcENvbnRhaW5lcikub2Zmc2V0KCkudG9wLHQ9ci0kKG4uZHJvcENvbnRhaW5lcikuaGVpZ2h0KCk7bi5hZGRpbmc9cjwtMjA/LTIwOnI8MD8tMTA6cjwxMD8tNTp0PjIwPzIwOnQ+MD8xMDp0Pi0xMD81OjB9aWYodm9pZCAwIT09aSlyZXR1cm4gaShlLG8pfSxufX07a28uYmluZGluZ0hhbmRsZXJzLmV4dHNvcnRhYmxlPXtpbml0OmZ1bmN0aW9uKGUsbixvLHIsaSl7cmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy5zb3J0YWJsZS5pbml0KGUsbWFrZUV4dGVuZGVkVmFsdWVBY2Nlc3NvcihuKSxvLHIsaSl9LHVwZGF0ZTpmdW5jdGlvbihlLG4sbyxyLGkpe3JldHVybiBrby5iaW5kaW5nSGFuZGxlcnMuc29ydGFibGUudXBkYXRlKGUsbWFrZUV4dGVuZGVkVmFsdWVBY2Nlc3NvcihuKSxvLHIsaSl9fSxrby5iaW5kaW5nSGFuZGxlcnMuZXh0ZHJhZ2dhYmxlPXtpbml0OmZ1bmN0aW9uKGUsbixvLHIsaSl7cmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy5kcmFnZ2FibGUuaW5pdChlLG1ha2VFeHRlbmRlZFZhbHVlQWNjZXNzb3IobiksbyxyLGkpfSx1cGRhdGU6ZnVuY3Rpb24oZSxuLG8scixpKXtyZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLmRyYWdnYWJsZS51cGRhdGUoZSxtYWtlRXh0ZW5kZWRWYWx1ZUFjY2Vzc29yKG4pLG8scixpKX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WNGRITnZjblJoWW14bGN5NXFjeUpkTENKdVlXMWxjeUk2V3lJa0lpd2lkMmx1Wkc5M0lpd2lhbEYxWlhKNUlpd2laMnh2WW1Gc0lpd2lhMjhpTENKemIzSjBZV0pzWlNJc0luVnBJaXdpWkhKaFoyZGhZbXhsSWl3aVkyOXVjMjlzWlNJc0luSmxjWFZwY21VaUxDSnBjMFJ5WVdkbmFXNW5TR1ZzY0dWeUlpd2lkM0pwZEdGaWJHVWlMQ0psSWl3aWRIbHdaU0lzSW5OMVluTjBjbWx1WnlJc0ltMWhhMlZGZUhSbGJtUmxaRlpoYkhWbFFXTmpaWE56YjNJaUxDSjJZV3gxWlVGalkyVnpjMjl5SWl3aWJXOWtaV3hXWVd4MVpTSXNJblYwYVd4eklpd2ljR1ZsYTA5aWMyVnlkbUZpYkdVaUxDSjFibmR5WVhCUFluTmxjblpoWW14bElpd2liM0IwYVc5dWN5SXNJbTl5YVdkVGRHRnlkQ0lzSW5OMFlYSjBJaXdpWkhKaFoyZHBibWNpTENKcGMxZHlhWFJoWW14bFQySnpaWEoyWVdKc1pTSXNJbVJ5YjNCRGIyNTBZV2x1WlhJaUxDSnpZM0p2Ykd4SmJuUmxjblpoYkNJc0luTmxkRWx1ZEdWeWRtRnNJaXdpWm05dklpd2ljMk55YjJ4c1ZHOXdJaXdpWVdSa2FXNW5JaXdpYjNKcFoxTjBiM0FpTENKemRHOXdJaXdpWTJ4bFlYSkpiblJsY25aaGJDSXNJbTl5YVdkRWNtRm5JaXdpWkhKaFp5SXNJblJ2Y0NJc0luQmhaMlZaSWl3aWIyWm1jMlYwSWl3aVltOTBkRzl0SWl3aWFHVnBaMmgwSWl3aVltbHVaR2x1WjBoaGJtUnNaWEp6SWl3aVpYaDBjMjl5ZEdGaWJHVWlMQ0pwYm1sMElpd2laV3hsYldWdWRDSXNJbUZzYkVKcGJtUnBibWR6UVdOalpYTnpiM0lpTENKa1lYUmhJaXdpWTI5dWRHVjRkQ0lzSW5Wd1pHRjBaU0lzSW1WNGRHUnlZV2RuWVdKc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZIUVN4SlFVRkpRU3hGUVVGMVFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkRMRTlCUVhOQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpVUXNUMEZCU1N4TFFVTXpSMFVzUjBGQmQwSXNiMEpCUVZoSUxFOUJRWGxDUVN4UFFVRlhSeXhIUVVGelFpeHZRa0ZCV0VRc1QwRkJlVUpCTEU5QlFWZERMRWRCUVVrc1MwRkRjRWRETEZOQlFUaENMRzlDUVVGWVNpeFBRVUY1UWtFc1QwRkJaVU1zVDBGQlRVa3NSMEZCV1VRc1UwRkJjMElzYjBKQlFWaEdMRTlCUVhsQ1FTeFBRVUZsUkN4UFFVRk5TU3hIUVVGWlJDeFRRVUZKTEV0QlEzUktSU3hWUVVFclFpeHZRa0ZCV0U0c1QwRkJlVUpCTEU5QlFXVkRMRTlCUVUxSkxFZEJRV0ZETEZWQlFYTkNMRzlDUVVGWVNpeFBRVUY1UWtFc1QwRkJaVVFzVDBGQlRVa3NSMEZCWVVNc1ZVRkJTU3hMUVVONlNrTXNVVUZCVlVNc1VVRkJVU3h6UWtGSGRFSXNSMEZHUVVFc1VVRkJVU3d3UWtGQlFTeEpRVVZIU2l4VFFVRjVRaXhMUVVGTkxHOUVRVU14UXl4UlFVRkJMRWxCUVZkRkxGVkJRVEJDTEV0QlFVMHNiMFJCUlRORExFbEJRVWxITEdsQ1FVRnRRaXhUUVVGVFF5eEZRVUZWUXl4SFFVTndRMFFzU1VGRFJVTXNSVUZCUlVNc1RVRkJVVVlzU1VGQllTeFJRVUZSUVN4SFFVRkJRU3hIUVVWeVFpeGhRVUZXUXl4RlFVRkZReXhOUVVGcFF5eGhRVUZXUkN4RlFVRkZReXhOUVVGeFFrWXNSVUZCVTBNc1JVRkJSVU1zUzBGQlMwTXNWVUZCVlN4RlFVRkhMRXRCU1dwR1F5d3dRa0ZCTkVJc1UwRkJVME1zUjBGRGRrTXNUMEZCVHl4WFFVTk1MRWxCUVVsRExFVkJRV0ZFTEVsQlEwVmFMRWRCUVVkakxFMUJRVTFETEdWQlFXVkdMRWRCUlRORFlpeEhRVUZIWXl4TlFVRk5SU3hwUWtGQmFVSklMRWRCUlVFc1lVRkJkRUpCTEVWQlFWZEpMRlZCUTJKS0xFVkJRVmRKTEZsQlIySXNTVUZCU1VNc1JVRkJXVXdzUlVGQlYwa3NVVUZCVVVVc1RVRkRia05PTEVWQlFWZEpMRkZCUVZGRkxFMUJRVkVzVTBGQlUxZ3NSVUZCUjA0c1IwRlJja01zVVVGQlFTeEpRVkJYVnl4RlFVRlhUeXhWUVVFeVFuQkNMRWRCUVVkeFFpeHhRa0ZCY1VKU0xFVkJRVmRQTEZkQlFWZGtMR2xDUVVGcFFrOHNSVUZCVjA4c1UwRkJWVm9zVVVGQlFVRXNTVUZETVVoTExFVkJRVmRUTEdkQ1FVTndRbFFzUlVGQlYxVXNaVUZCYVVKNFFpeFBRVUZQZVVJc1dVRkJXU3hYUVVNM1F5eEpRVUZKUXl4RlFVRk5OMElzUlVGQlJXbENMRVZCUVZkVExHVkJRV1ZKTEZsQlEzUkRPVUlzUlVGQlJXbENMRVZCUVZkVExHVkJRV1ZKTEZWQlFWVkVMRVZCUVUxYUxFVkJRVmRqTEZOQlEzUkVMRlZCUVVFc1NVRkZUVlFzUlVGQk1FSXNUMEZCVDBFc1JVRkJWVllzUlVGQlIwNHNTVUZGTTBRc1NVRkJTVEJDTEVWQlFWZG1MRVZCUVZkSkxGRkJRVkZaTEV0QlEyeERhRUlzUlVGQlYwa3NVVUZCVVZrc1MwRkJUeXhUUVVGVGNrSXNSVUZCUjA0c1IwRkxjRU1zVVVGQlFTeEpRVXBYVnl4RlFVRlhUeXhWUVVFeVFuQkNMRWRCUVVkeFFpeHhRa0ZCY1VKU0xFVkJRVmRQTEZkQlFWZGtMR2xDUVVGcFFrOHNSVUZCVjA4c1UwRkJWVm9zVVVGQlFVRXNTVUZETVVoTExFVkJRVmRUTEdWQlEzQkNka0lzVDBGQlR5dENMR05CUVdOcVFpeEZRVUZYVlN4eFFrRkJRVUVzU1VGRmRrSkxMRVZCUVhsQ0xFOUJRVTlCTEVWQlFWTndRaXhGUVVGSFRpeEpRVVY2UkN4SlFVRkpOa0lzUlVGQlYyeENMRVZCUVZkSkxGRkJRVkZsTEV0QkswSnNReXhQUVRsQ1FXNUNMRVZCUVZkSkxGRkJRVkZsTEV0QlFVOHNVMEZCVTNoQ0xFVkJRVWRPTEVkQlEzQkRMRkZCUVVFc1NVRkJWMWNzUlVGQlYxTXNZMEZCT0VJc1EwRkRiRVFzU1VGQlNWY3NSVUZCVFhwQ0xFVkJRVVV3UWl4TlFVRlJkRU1zUlVGQlJXbENMRVZCUVZkVExHVkJRV1ZoTEZOQlFWTkdMRWxCUTNKRVJ5eEZRVUZUU0N4RlFVRk5ja01zUlVGQlJXbENMRVZCUVZkVExHVkJRV1ZsTEZOQlJ6ZERlRUlzUlVGQlYyTXNUMEZFVkUwc1IwRkJUeXhKUVVOWkxFZEJSVnBCTEVWQlFVMHNSMEZEVFN4SFFVVmFRU3hGUVVGTkxFbEJRMDBzUlVGRldrY3NSVUZCVXl4SFFVTkZMRWRCUlZoQkxFVkJRVk1zUlVGRFJTeEhRVVZZUVN4SFFVRlZMRWRCUTBNc1JVRkhRU3hGUVVkNFFpeFJRVUZCTEVsQlFWZE1MRVZCUVhsQ0xFOUJRVTlCTEVWQlFWTjJRaXhGUVVGSFRpeEpRVWRzUkZjc1NVRkpXR0lzUjBGQlIzTkRMR2RDUVVGblFrTXNZVUZEYWtKRExFdEJRVTBzVTBGQlUwTXNSVUZCVXpkQ0xFVkJRV1U0UWl4RlFVRnhRa01zUlVGQlRVTXNSMEZEYUVVc1QwRkJUelZETEVkQlFVZHpReXhuUWtGQlowSnlReXhUUVVGVGRVTXNTMEZCUzBNc1JVRkJVemxDTERCQ1FVRXdRa01zUjBGQlowSTRRaXhGUVVGeFFrTXNSVUZCVFVNc1NVRkZlRWhETEU5QlFWRXNVMEZCVTBvc1JVRkJVemRDTEVWQlFXVTRRaXhGUVVGeFFrTXNSVUZCVFVNc1IwRkRiRVVzVDBGQlR6VkRMRWRCUVVkelF5eG5Ra0ZCWjBKeVF5eFRRVUZUTkVNc1QwRkJUMG9zUlVGQlV6bENMREJDUVVFd1FrTXNSMEZCWjBJNFFpeEZRVUZ4UWtNc1JVRkJUVU1zUzBGSk5VZzFReXhIUVVGSGMwTXNaMEpCUVdkQ1VTeGpRVU5xUWs0c1MwRkJUU3hUUVVGVFF5eEZRVUZUTjBJc1JVRkJaVGhDTEVWQlFYRkNReXhGUVVGTlF5eEhRVU5vUlN4UFFVRlBOVU1zUjBGQlIzTkRMR2RDUVVGblFtNURMRlZCUVZWeFF5eExRVUZMUXl4RlFVRlRPVUlzTUVKQlFUQkNReXhIUVVGblFqaENMRVZCUVhGQ1F5eEZRVUZOUXl4SlFVVjZTRU1zVDBGQlVTeFRRVUZUU2l4RlFVRlROMElzUlVGQlpUaENMRVZCUVhGQ1F5eEZRVUZOUXl4SFFVTnNSU3hQUVVGUE5VTXNSMEZCUjNORExHZENRVUZuUW01RExGVkJRVlV3UXl4UFFVRlBTaXhGUVVGVE9VSXNNRUpCUVRCQ1F5eEhRVUZuUWpoQ0xFVkJRWEZDUXl4RlFVRk5ReUlzSW1acGJHVWlPaUl2ZG1GeUwzZDNkeTl0YjNOaGFXTnZMVzFoYzNSbGNpOXpjbU12YW5NdlltbHVaR2x1WjNNdlpYaDBjMjl5ZEdGaWJHVnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnk6bnVsbCxrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtrby5iaW5kaW5nSGFuZGxlcnMuZnVkcm9wcGFibGU9e2luaXQ6ZnVuY3Rpb24oZSxpKXt2YXIgbz1pKCl8fHt9LHI9e30sbD1mdW5jdGlvbihlLGksbyxyLGwsYSl7ZVtpXT9nbG9iYWwuY2xlYXJUaW1lb3V0KGVbaV0pOih2b2lkIDAhPT1yJiZvLmNsYXNzTGlzdC5hZGQociksa28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKGwpJiYhbCgpJiZsKCEwKSk7dmFyIHM9ZnVuY3Rpb24oKXtlW2ldPW51bGwsdm9pZCAwIT09ciYmby5jbGFzc0xpc3QucmVtb3ZlKHIpLGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShsKSYmbCgpJiZsKCExKX07XCJkcmFnbGVhdmVcIj09YS50eXBlP3MoKTplW2ldPWdsb2JhbC5zZXRUaW1lb3V0KHMsNTAwKX07KG8uYWN0aXZlfHxvLmFjdGl2ZUNsYXNzKSYma28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZ2xvYmFsLFwiZHJhZ292ZXJcIixsLmJpbmQodm9pZCAwLHIsXCJhY3RpdmVUaW1lb3V0XCIsZSxvLmFjdGl2ZUNsYXNzLG8uYWN0aXZlKSksby5ob3ZlckNsYXNzJiZrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlLFwiZHJhZ292ZXIgZHJhZ2VudGVyIGRyYWdsZWF2ZVwiLGwuYmluZCh2b2lkIDAscixcImhvdmVyVGltZW91dFwiLGUsby5ob3ZlckNsYXNzLHZvaWQgMCkpfX0sa28uYmluZGluZ0hhbmRsZXJzLmZpbGV1cGxvYWQ9e2V4dGVuZE9wdGlvbnM6e30scmVtb3RlRmlsZVByZXByb2Nlc3NvcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0saW5pdDpmdW5jdGlvbihlLGkpe2tvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZSxmdW5jdGlvbigpeyQoZSkuZmlsZXVwbG9hZChcImRlc3Ryb3lcIil9KSwhKFwiV2Via2l0QXBwZWFyYW5jZVwiaW4gZ2xvYmFsLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSl8fFwid2Via2l0TmJzcE1vZGVcImluIGdsb2JhbC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGV8fFwiU3R5bGVNZWRpYVwiaW4gZ2xvYmFsPyQoZSkuYXR0cihcInRpdGxlXCIsXCJcIik6JChlKS5hdHRyKFwidGl0bGVcIixcIiBcIil9LHVwZGF0ZTpmdW5jdGlvbihlLGkpe3ZhciBvPWkoKXx8e30scj0kKGUpLGw9ci5wYXJlbnRzKFwiLnVwbG9hZHpvbmVcIiksYT1vLmRhdGE7by5kYXRhPXZvaWQgMDt2YXIgcz1vLmNhbnZhc1ByZXZpZXc7a28udXRpbHMuZXh0ZW5kKG8se3VybDpcIi91cGxvYWQvXCIsZGF0YVR5cGU6XCJqc29uXCIsZHJvcFpvbmU6bC5maW5kKFwiLm1vLXVwbG9hZHpvbmVcIilbMF0sYXV0b1VwbG9hZDohMCxhY2NlcHRGaWxlVHlwZXM6LyhcXC58XFwvKShnaWZ8anBlP2d8cG5nKSQvaSxtYXhGaWxlU2l6ZToxMDQ4NTc2LGRpc2FibGVJbWFnZVJlc2l6ZTovQW5kcm9pZCg/IS4qQ2hyb21lKXxPcGVyYS8udGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCkscHJldmlld01heFdpZHRoOjIwMCxwcmV2aWV3TWF4SGVpZ2h0OjIwMCxwcmV2aWV3Q3JvcDohMSxyZXBsYWNlRmlsZUlucHV0OiExLG1lc3NhZ2VzOnt1bmtub3duRXJyb3I6XCJVbmtub3duIGVycm9yXCIsdXBsb2FkZWRCeXRlczpcIlVwbG9hZGVkIGJ5dGVzIGV4Y2VlZCBmaWxlIHNpemVcIixtYXhOdW1iZXJPZkZpbGVzOlwiTWF4aW11bSBudW1iZXIgb2YgZmlsZXMgZXhjZWVkZWRcIixhY2NlcHRGaWxlVHlwZXM6XCJGaWxlIHR5cGUgbm90IGFsbG93ZWRcIixtYXhGaWxlU2l6ZTpcIkZpbGUgaXMgdG9vIGxhcmdlXCIsbWluRmlsZVNpemU6XCJGaWxlIGlzIHRvbyBzbWFsbFwiLHBvc3RfbWF4X3NpemU6XCJUaGUgdXBsb2FkZWQgZmlsZSBleGNlZWRzIHRoZSBwb3N0X21heF9zaXplIGRpcmVjdGl2ZSBpbiBwaHAuaW5pXCIsbWF4X2ZpbGVfc2l6ZTpcIkZpbGUgaXMgdG9vIGJpZ1wiLG1pbl9maWxlX3NpemU6XCJGaWxlIGlzIHRvbyBzbWFsbFwiLGFjY2VwdF9maWxlX3R5cGVzOlwiRmlsZXR5cGUgbm90IGFsbG93ZWRcIixtYXhfbnVtYmVyX29mX2ZpbGVzOlwiTWF4aW11bSBudW1iZXIgb2YgZmlsZXMgZXhjZWVkZWRcIixtYXhfd2lkdGg6XCJJbWFnZSBleGNlZWRzIG1heGltdW0gd2lkdGhcIixtaW5fd2lkdGg6XCJJbWFnZSByZXF1aXJlcyBhIG1pbmltdW0gd2lkdGhcIixtYXhfaGVpZ2h0OlwiSW1hZ2UgZXhjZWVkcyBtYXhpbXVtIGhlaWdodFwiLG1pbl9oZWlnaHQ6XCJJbWFnZSByZXF1aXJlcyBhIG1pbmltdW0gaGVpZ2h0XCIsYWJvcnQ6XCJGaWxlIHVwbG9hZCBhYm9ydGVkXCIsaW1hZ2VfcmVzaXplOlwiRmFpbGVkIHRvIHJlc2l6ZSBpbWFnZVwiLGdlbmVyaWM6XCJVbmV4cGVjdGVkIHVwbG9hZCBlcnJvclwifX0pLGtvLnV0aWxzLmV4dGVuZChvLGtvLmJpbmRpbmdIYW5kbGVycy5maWxldXBsb2FkLmV4dGVuZE9wdGlvbnMpO3ZhciBuPTAsdD1cIlwiLGQ9ZnVuY3Rpb24oKXswPT0tLW4mJihhJiZhKHQpLHQ9XCJcIixzJiYobC5maW5kKFwiaW1nXCIpLnNob3coKSxsLmZpbmQoXCJjYW52YXNcIikucmVtb3ZlKCkpLGwucmVtb3ZlQ2xhc3MoXCJ1cGxvYWRpbmdcIiksbC5maW5kKFwiLnByb2dyZXNzLWJhclwiKS5jc3MoXCJ3aWR0aFwiLDApKX0sdT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2Ygby5tZXNzYWdlcyYmbnVsbCE9PW8ubWVzc2FnZXMpe3ZhciBpPWUubWF0Y2goL14oW14gXSspKC4qKSQvKTtpZihpJiZ2b2lkIDAhPT1vLm1lc3NhZ2VzW2lbMV1dKXJldHVybiBvLm1lc3NhZ2VzW2lbMV1dK2lbMl19cmV0dXJuIGV9O3IuZmlsZXVwbG9hZChvKTtmb3IodmFyIHA9W1wiZmlsZXVwbG9hZGFkZFwiLFwiZmlsZXVwbG9hZHByb2Nlc3NhbHdheXNcIixcImZpbGV1cGxvYWRwcm9ncmVzc2FsbFwiLFwiZmlsZXVwbG9hZGRvbmVcIixcImZpbGV1cGxvYWRmYWlsXCJdLGY9ZnVuY3Rpb24oZSxpKXtpZihcImZpbGV1cGxvYWRhZGRcIj09ZS50eXBlJiZuKyssXCJmaWxldXBsb2FkZmFpbFwiPT1lLnR5cGUmJihjb25zb2xlLmxvZyhcImZpbGV1cGxvYWRmYWlsXCIsZSxpKSxvLm9uZXJyb3ImJihcIlwiPT09aS5lcnJvclRocm93biYmXCJlcnJvclwiPT1pLnRleHRTdGF0dXM/by5vbmVycm9yKHUoXCJnZW5lcmljXCIpKTpvLm9uZXJyb3IodShcImdlbmVyaWMgKFwiK2kuZXJyb3JUaHJvd24rXCIpXCIpKSksZCgpKSxcImZpbGV1cGxvYWRkb25lXCI9PWUudHlwZSlpZih2b2lkIDAhPT1pLnJlc3VsdC5maWxlc1swXS51cmwpe2lmKG8ub25maWxlKWZvcih2YXIgcj0wO3I8aS5yZXN1bHQuZmlsZXMubGVuZ3RoO3IrKylpLnJlc3VsdC5maWxlc1tyXT1rby5iaW5kaW5nSGFuZGxlcnMuZmlsZXVwbG9hZC5yZW1vdGVGaWxlUHJlcHJvY2Vzc29yKGkucmVzdWx0LmZpbGVzW3JdKSxvLm9uZmlsZShpLnJlc3VsdC5maWxlc1tyXSk7aWYoXCJcIj09PXQmJih0PWkucmVzdWx0LmZpbGVzWzBdLnVybCkscyl7dmFyIGE9bmV3IEltYWdlO2Eub25sb2FkPWQsYS5vbmVycm9yPWQsYS5zcmM9aS5yZXN1bHQuZmlsZXNbMF0udXJsfWVsc2UgZCgpfWVsc2Ugdm9pZCAwIT09aS5yZXN1bHQuZmlsZXNbMF0uZXJyb3I/KGNvbnNvbGUubG9nKFwicmVtb3RlIGVycm9yXCIsZSxpKSxvLm9uZXJyb3ImJm8ub25lcnJvcih1KGkucmVzdWx0LmZpbGVzWzBdLmVycm9yKSksZCgpKTooY29uc29sZS5sb2coXCJ1bmV4cGVjdGVkIGVycm9yXCIsZSxpKSxvLm9uZXJyb3ImJm8ub25lcnJvcih1KFwiZ2VuZXJpYyAoVW5leHBlY3RlZCBFcnJvciByZXRyaWV2aW5nIHVwbG9hZGVkIGZpbGUpXCIpKSxkKCkpO2lmKFwiZmlsZXVwbG9hZHByb2Nlc3NhbHdheXNcIj09ZS50eXBlKXt2YXIgcD1pLmluZGV4LGY9aS5maWxlc1twXTtpZihmLnByZXZpZXcmJjA9PT1wJiYwPT09bC5maW5kKFwiY2FudmFzXCIpLmxlbmd0aCl7aWYocyl7dmFyIG09JChmLnByZXZpZXcpLmNzcyhcIndpZHRoXCIsXCIxMDAlXCIpO2wuZmluZChcImltZ1wiKS5oaWRlKCksbC5wcmVwZW5kKG0pfWwuYWRkQ2xhc3MoXCJ1cGxvYWRpbmdcIiksbC5maW5kKFwiLnByb2dyZXNzLWJhclwiKS5jc3MoXCJ3aWR0aFwiLDApfWYuZXJyb3ImJihvLm9uZXJyb3ImJm8ub25lcnJvcih1KGYuZXJyb3IpKSxkKCkpfWlmKFwiZmlsZXVwbG9hZHByb2dyZXNzYWxsXCI9PWUudHlwZSl7dmFyIGc9cGFyc2VJbnQoaS5sb2FkZWQvaS50b3RhbCoxMDAsMTApO2wuZmluZChcIi5wcm9ncmVzcy1iYXJcIikuY3NzKFwid2lkdGhcIixnK1wiJVwiKX19LG09cC5sZW5ndGgtMTttPj0wO20tLSl7dmFyIGc9cFttXTtyLm9uKGcsZil9JC5zdXBwb3J0LmZpbGVJbnB1dHx8ci5wcm9wKFwiZGlzYWJsZWRcIiwhMCkucGFyZW50KCkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1acGJHVjFjR3h2WVdRdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkNJc0luZHBibVJ2ZHlJc0ltcFJkV1Z5ZVNJc0ltZHNiMkpoYkNJc0ltdHZJaXdpWTI5dWMyOXNaU0lzSW5KbGNYVnBjbVVpTENKaWFXNWthVzVuU0dGdVpHeGxjbk1pTENKbWRXUnliM0J3WVdKc1pTSXNJbWx1YVhRaUxDSmxiR1Z0Wlc1MElpd2lkbUZzZFdWQlkyTmxjM052Y2lJc0ltOXdkQ0lzSW5ScGJXVnZkWFJ6VDJKcUlpd2liM1psY2lJc0luUnBiV1Z2ZFhSeklpd2laSEp2Y0ZwdmJtVlVhVzFsYjNWMElpd2lZMnhoYzNOT1lXMWxJaXdpYjJKelpYSjJZV0pzWlNJc0ltVjJaVzUwSWl3aVkyeGxZWEpVYVcxbGIzVjBJaXdpWTJ4aGMzTk1hWE4wSWl3aVlXUmtJaXdpYVhOWGNtbDBaV0ZpYkdWUFluTmxjblpoWW14bElpd2ljM1J2Y0NJc0luSmxiVzkyWlNJc0luUjVjR1VpTENKelpYUlVhVzFsYjNWMElpd2lZV04wYVhabElpd2lZV04wYVhabFEyeGhjM01pTENKMWRHbHNjeUlzSW5KbFoybHpkR1Z5UlhabGJuUklZVzVrYkdWeUlpd2lZbWx1WkNJc0ltaHZkbVZ5UTJ4aGMzTWlMQ0ptYVd4bGRYQnNiMkZrSWl3aVpYaDBaVzVrVDNCMGFXOXVjeUlzSW5KbGJXOTBaVVpwYkdWUWNtVndjbTlqWlhOemIzSWlMQ0oxY213aUxDSmtiMjFPYjJSbFJHbHpjRzl6WVd3aUxDSmhaR1JFYVhOd2IzTmxRMkZzYkdKaFkyc2lMQ0prYjJOMWJXVnVkQ0lzSW1SdlkzVnRaVzUwUld4bGJXVnVkQ0lzSW5OMGVXeGxJaXdpWVhSMGNpSXNJblZ3WkdGMFpTSXNJbTl3ZEdsdmJuTWlMQ0lrWm5VaUxDSWtjR0Z5Wlc1MElpd2ljR0Z5Wlc1MGN5SXNJbVJoZEdGV1lXeDFaU0lzSW1SaGRHRWlMQ0pqWVc1MllYTlFjbVYyYVdWM0lpd2laWGgwWlc1a0lpd2laR0YwWVZSNWNHVWlMQ0prY205d1dtOXVaU0lzSW1acGJtUWlMQ0poZFhSdlZYQnNiMkZrSWl3aVlXTmpaWEIwUm1sc1pWUjVjR1Z6SWl3aWJXRjRSbWxzWlZOcGVtVWlMQ0prYVhOaFlteGxTVzFoWjJWU1pYTnBlbVVpTENKMFpYTjBJaXdpYm1GMmFXZGhkRzl5SWl3aWRYTmxja0ZuWlc1MElpd2ljSEpsZG1sbGQwMWhlRmRwWkhSb0lpd2ljSEpsZG1sbGQwMWhlRWhsYVdkb2RDSXNJbkJ5WlhacFpYZERjbTl3SWl3aWNtVndiR0ZqWlVacGJHVkpibkIxZENJc0ltMWxjM05oWjJWeklpd2lkVzVyYm05M2JrVnljbTl5SWl3aWRYQnNiMkZrWldSQ2VYUmxjeUlzSW0xaGVFNTFiV0psY2s5bVJtbHNaWE1pTENKdGFXNUdhV3hsVTJsNlpTSXNJbkJ2YzNSZmJXRjRYM05wZW1VaUxDSnRZWGhmWm1sc1pWOXphWHBsSWl3aWJXbHVYMlpwYkdWZmMybDZaU0lzSW1GalkyVndkRjltYVd4bFgzUjVjR1Z6SWl3aWJXRjRYMjUxYldKbGNsOXZabDltYVd4bGN5SXNJbTFoZUY5M2FXUjBhQ0lzSW0xcGJsOTNhV1IwYUNJc0ltMWhlRjlvWldsbmFIUWlMQ0p0YVc1ZmFHVnBaMmgwSWl3aVlXSnZjblFpTENKcGJXRm5aVjl5WlhOcGVtVWlMQ0puWlc1bGNtbGpJaXdpZDI5eWEybHVaeUlzSW1acGNuTjBWMjl5YTJWa0lpd2lZMnhsWVc1MWNDSXNJbk5vYjNjaUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1OemN5SXNJblJ5WVc1emJHRjBaV1JOWlhOellXZGxJaXdpZEdWNGRDSXNJbTFoZEdOb0lpd2laWFpsYm5Seklpd2laWFpsYm5SSVlXNWtiR1Z5SWl3aVpTSXNJbXh2WnlJc0ltOXVaWEp5YjNJaUxDSmxjbkp2Y2xSb2NtOTNiaUlzSW5SbGVIUlRkR0YwZFhNaUxDSnlaWE4xYkhRaUxDSm1hV3hsY3lJc0ltOXVabWxzWlNJc0lta2lMQ0pzWlc1bmRHZ2lMQ0pwYldjaUxDSkpiV0ZuWlNJc0ltOXViRzloWkNJc0luTnlZeUlzSW1WeWNtOXlJaXdpYVc1a1pYZ2lMQ0ptYVd4bElpd2ljSEpsZG1sbGR5SXNJbVZzSWl3aWFHbGtaU0lzSW5CeVpYQmxibVFpTENKaFpHUkRiR0Z6Y3lJc0luQnliMmR5WlhOeklpd2ljR0Z5YzJWSmJuUWlMQ0pzYjJGa1pXUWlMQ0owYjNSaGJDSXNJbVYyWlc1MFRtRnRaU0lzSW05dUlpd2ljM1Z3Y0c5eWRDSXNJbVpwYkdWSmJuQjFkQ0lzSW5CeWIzQWlMQ0p3WVhKbGJuUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCV1VFc1NVRkJTVUVzUlVGQmRVSXNiMEpCUVZoRExFOUJRWGxDUVN4UFFVRmxReXhQUVVGelFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkVMRTlCUVVrc1MwRkRNMGRGTEVkQlFYZENMRzlDUVVGWVNDeFBRVUY1UWtFc1QwRkJWMGNzUjBGQmMwSXNiMEpCUVZoRUxFOUJRWGxDUVN4UFFVRlhReXhIUVVGSkxFdEJRM0JIUXl4UlFVRlZReXhSUVVGUkxITkNRVVYwUWtZc1IwRkJSMGNzWjBKQlFUWkNReXhoUVVNNVFrTXNTMEZCVFN4VFFVRlRReXhGUVVGVFF5eEhRVU4wUWl4SlFVRkpReXhGUVVGTlJDeFJRVU5PUlN4TFFVVkJReXhGUVVGUExGTkJRVk5ETEVWQlFWVkRMRVZCUVdsQ1RpeEZRVUZUVHl4RlFVRlhReXhGUVVGWlF5eEhRVVY0UlVvc1JVRkJVME1zUjBGUldtSXNUMEZCVDJsQ0xHRkJRV0ZNTEVWQlFWTkRMRlZCUVVGQkxFbEJVR3hDUXl4SFFVTlVVQ3hGUVVGUlZ5eFZRVUZWUXl4SlFVRkpUQ3hIUVVWd1FtSXNSMEZCUjIxQ0xITkNRVUZ6UWt3c1MwRkJaMEpCTEV0QlF6TkRRU3hIUVVGQlFTeEpRVTFLTEVsQlFVbE5MRVZCUVU4c1YwRkRWRlFzUlVGQlUwTXNSMEZCYlVJc1ZVRkJRU3hKUVVOcVFrTXNSMEZEVkZBc1JVRkJVVmNzVlVGQlZVa3NUMEZCVDFJc1IwRkZka0ppTEVkQlFVZHRRaXh6UWtGQmMwSk1MRWxCUVdWQkxFdEJRekZEUVN4SFFVRkJRU3hKUVVsakxHRkJRV1JETEVWQlFVMVBMRXRCUVhGQ1JpeEpRVWMzUWxRc1JVRkJVME1zUjBGQmJVSmlMRTlCUVU5M1FpeFhRVUZYU0N4RlFVRk5MRTlCUzNCRVdpeEZRVUZKWjBJc1VVRkJWV2hDTEVWQlFVbHBRaXhqUVVOd1FucENMRWRCUVVjd1FpeE5RVUZOUXl4eFFrRkJjVUkxUWl4UFFVRlJMRmRCUVZsWExFVkJRVXRyUWl4VlFVRkJRU3hGUVVGblFtNUNMRVZCUVdFc1owSkJRV2xDU0N4RlFVRlRSU3hGUVVGSmFVSXNXVUZCWVdwQ0xFVkJRVWxuUWl4VFFVVnFTV2hDTEVWQlFVbHhRaXhaUVVWT04wSXNSMEZCUnpCQ0xFMUJRVTFETEhGQ1FVRnhRbkpDTEVWQlFWTXNLMEpCUVdkRFNTeEZRVUZMYTBJc1ZVRkJRVUVzUlVGQlowSnVRaXhGUVVGaExHVkJRV2RDU0N4RlFVRlRSU3hGUVVGSmNVSXNaMEpCUVVGQkxFMUJTelZKTjBJc1IwRkJSMGNzWjBKQlFUUkNNa0lzV1VGRE4wSkRMR2xDUVVOQlF5eDFRa0ZCZDBJc1UwRkJVME1zUjBGQlR5eFBRVUZQUVN4SFFVTXZRelZDTEV0QlFVMHNVMEZCVTBNc1JVRkJVME1zUjBGSmRFSlFMRWRCUVVjd1FpeE5RVUZOVVN4blFrRkJaMEpETEcxQ1FVRnRRamRDTEVWQlFWTXNWMEZEYmtSV0xFVkJRVVZWTEVkQlFWTjNRaXhYUVVGWExHVkJWVzVDTEhGQ1FVRnpRaTlDTEU5QlFVOXhReXhUUVVGVFF5eG5Ra0ZCWjBKRExGRkJRVmtzYlVKQlFXOUNka01zVDBGQlQzRkRMRk5CUVZORExHZENRVUZuUWtNc1QwRkJXU3hsUVVGblFuWkRMRTlCUjNKS1NDeEZRVUZGVlN4SFFVRlRhVU1zUzBGQlN5eFJRVUZUTEVsQlJucENNME1zUlVGQlJWVXNSMEZCVTJsRExFdEJRVXNzVVVGQlV5eE5RVXMzUWtNc1QwRkJVU3hUUVVGVGJFTXNSVUZCVTBNc1IwRkRlRUlzU1VGQlNXdERMRVZCUVZWc1F5eFJRVVZXYlVNc1JVRkJUVGxETEVWQlFVVlZMRWRCUTFKeFF5eEZRVUZWUkN4RlFVRkpSU3hSUVVGUkxHVkJSWFJDUXl4RlFVRlpTaXhGUVVGUlN5eExRVU40UWt3c1JVRkJVVXNzVlVGQlFVRXNSVUZGVWl4SlFVRkpReXhGUVVGblFrNHNSVUZCVVUwc1kwRkhOVUl2UXl4SFFVRkhNRUlzVFVGQlRYTkNMRTlCUVU5UUxFZEJRMlJTTEVsQlFVc3NWMEZEVEdkQ0xGTkJRVlVzVDBGRFZrTXNVMEZCVlZBc1JVRkJVVkVzUzBGQlN5eHJRa0ZCYTBJc1IwRkRla05ETEZsQlFVRkJMRVZCUTBGRExHZENRVUZwUWl3eVFrRkRha0pETEZsQlFXRXNVVUZKWWtNc2JVSkJRVzlDTERSQ1FVRTBRa01zUzBGQlMzcEVMRTlCUVU4d1JDeFZRVUZWUXl4WFFVTjBSVU1zWjBKQlFXbENMRWxCUTJwQ1F5eHBRa0ZCYTBJc1NVRkRiRUpETEdGQlFVRkJMRVZCUTBGRExHdENRVUZCUVN4RlFVVkJReXhWUVVWRlF5eGhRVUZqTEdkQ1FVTmtReXhqUVVGbExHdERRVU5tUXl4cFFrRkJhMElzYlVOQlEyeENZaXhuUWtGQmFVSXNkMEpCUTJwQ1F5eFpRVUZoTEc5Q1FVTmlZU3haUVVGaExHOUNRVVZpUXl4alFVRmxMRzFGUVVObVF5eGpRVUZsTEd0Q1FVTm1ReXhqUVVGbExHOUNRVU5tUXl4clFrRkJiVUlzZFVKQlEyNUNReXh2UWtGQmNVSXNiVU5CUTNKQ1F5eFZRVUZYTERoQ1FVTllReXhWUVVGWExHbERRVU5ZUXl4WFFVRlpMQ3RDUVVOYVF5eFhRVUZaTEd0RFFVTmFReXhOUVVGUExITkNRVU5RUXl4aFFVRmpMSGxDUVVOa1F5eFJRVUZUTERaQ1FVbGlMMFVzUjBGQlJ6QkNMRTFCUVUxelFpeFBRVUZQVUN4RlFVRlRla01zUjBGQlIwY3NaMEpCUVRSQ01rSXNWMEZCUlVNc1pVRkZNVVFzU1VGQlNXbEVMRVZCUVZVc1JVRkRWa01zUlVGQll5eEhRVVZrUXl4RlFVRlZMRmRCUTAwc1MwRkJXa1lzU1VGRFFXNURMRWRCUTBaQkxFVkJRVlZ2UXl4SFFVVmFRU3hGUVVGakxFZEJRMVpzUXl4SlFVTkdTaXhGUVVGUlVTeExRVUZMTEU5QlFVOW5ReXhQUVVOd1FuaERMRVZCUVZGUkxFdEJRVXNzVlVGQlZUbENMRlZCUlhwQ2MwSXNSVUZCVVhsRExGbEJRVmtzWVVGRGNFSjZReXhGUVVGUlVTeExRVUZMTEdsQ1FVRnBRbXRETEVsQlFVa3NVVUZCVXl4TFFVa3pRME1zUlVGQmIwSXNVMEZCVTBNc1IwRkRMMElzUjBGQkswSXNhVUpCUVhCQ09VTXNSVUZCVVhOQ0xGVkJRVFpETEU5QlFYSkNkRUlzUlVGQlVYTkNMRk5CUVcxQ0xFTkJRM0JGTEVsQlFVbDVRaXhGUVVGUlJDeEZRVUZMUXl4TlFVRk5MR2xDUVVOMlFpeEhRVUZKUVN4UlFVRkJRU3hKUVVOVEwwTXNSVUZCVVhOQ0xGTkJRVk41UWl4RlFVRk5MRWxCUTJoRExFOUJRVTh2UXl4RlFVRlJjMElzVTBGQlUzbENMRVZCUVUwc1NVRkJUVUVzUlVGQlRTeEhRVWxvUkN4UFFVRlBSQ3hIUVVkVU4wTXNSVUZCU1Zvc1YwRkJWMWNzUjBGblJtWXNTVUU1UlVFc1NVRkJTV2RFTEVkQlFWVXNaMEpCUVdsQ0xEQkNRVUV5UWl4M1FrRkJlVUlzYVVKQlFXdENMR3RDUVVOcVIwTXNSVUZCWlN4VFFVRlRReXhGUVVGSE4wTXNSMEZsTjBJc1IwRmtZeXhwUWtGQlZqWkRMRVZCUVVWeVJTeE5RVU5LTUVRc1NVRkZXU3hyUWtGQlZsY3NSVUZCUlhKRkxFOUJRMHB5UWl4UlFVRlJNa1lzU1VGQlNTeHBRa0ZCYTBKRUxFVkJRVWMzUXl4SFFVTTNRa3dzUlVGQlVXOUVMRlZCUTJVc1MwRkJja0l2UXl4RlFVRkxaMFFzWVVGQmVVTXNVMEZCYmtKb1JDeEZRVUZMYVVRc1YwRkRiRU4wUkN4RlFVRlJiMFFzVVVGQlVWQXNSVUZCYTBJc1dVRkZiRU0zUXl4RlFVRlJiMFFzVVVGQlVWQXNSVUZCYTBJc1dVRkJZM2hETEVWQlFVdG5SQ3haUVVGakxFOUJSM1pGV2l4TFFVVlpMR3RDUVVGV1V5eEZRVUZGY2tVc1MwRkRTaXhSUVVGQkxFbEJRVmQzUWl4RlFVRkxhMFFzVDBGQlQwTXNUVUZCVFN4SFFVRkhhRVVzU1VGQmNVSXNRMEZEYmtRc1IwRkJTVkVzUlVGQlVYbEVMRTlCUTFZc1NVRkJTeXhKUVVGSlF5eEZRVUZKTEVWQlFVZEJMRVZCUVVseVJDeEZRVUZMYTBRc1QwRkJUME1zVFVGQlRVY3NUMEZCVVVRc1NVRkROVU55UkN4RlFVRkxhMFFzVDBGQlQwTXNUVUZCVFVVc1IwRkJTMjVITEVkQlFVZEhMR2RDUVVFMFFqSkNMRmRCUVVWRkxIVkNRVUYxUW1Nc1JVRkJTMnRFTEU5QlFVOURMRTFCUVUxRkxFbEJRMnBITVVRc1JVRkJVWGxFTEU5QlFVOXdSQ3hGUVVGTGEwUXNUMEZCVDBNc1RVRkJUVVVzU1VGTmNrTXNSMEZHYjBJc1MwRkJhRUpzUWl4SlFVRnZRa0VzUlVGQlkyNURMRVZCUVV0clJDeFBRVUZQUXl4TlFVRk5MRWRCUVVkb1JTeExRVVYyUkdNc1JVRkJaU3hEUVVOcVFpeEpRVUZKYzBRc1JVRkJUU3hKUVVGSlF5eE5RVU5rUkN4RlFVRkpSU3hQUVVGVGNrSXNSVUZEWW0xQ0xFVkJRVWxTTEZGQlFWVllMRVZCUTJSdFFpeEZRVUZKUnl4SlFVRk5NVVFzUlVGQlMydEVMRTlCUVU5RExFMUJRVTBzUjBGQlIyaEZMRk5CUlM5Q2FVUXNZMEZCUVVFc1NVRkZZM0JETEVWQlFVdHJSQ3hQUVVGUFF5eE5RVUZOTEVkQlFVZFJMRTlCUTNKRGVFY3NVVUZCVVRKR0xFbEJRVWtzWlVGQlowSkVMRVZCUVVjM1F5eEhRVU16UWt3c1JVRkJVVzlFTEZOQlExWndSQ3hGUVVGUmIwUXNVVUZCVVZBc1JVRkJhMEo0UXl4RlFVRkxhMFFzVDBGQlQwTXNUVUZCVFN4SFFVRkhVU3hSUVVWNlJIWkNMRTFCUlVGcVJpeFJRVUZSTWtZc1NVRkJTU3h0UWtGQmIwSkVMRVZCUVVjM1F5eEhRVU12UWt3c1JVRkJVVzlFTEZOQlExWndSQ3hGUVVGUmIwUXNVVUZCVVZBc1JVRkJhMElzZDBSQlJYQkRTaXhMUVVkS0xFZEJRV01zTWtKQlFWWlRMRVZCUVVWeVJTeExRVUZ0UXl4RFFVTjJReXhKUVVGSmIwWXNSVUZCVVRWRUxFVkJRVXMwUkN4TlFVTm1ReXhGUVVGUE4wUXNSVUZCUzIxRUxFMUJRVTFUTEVkQlEzQkNMRWRCUVVsRExFVkJRVXRETEZOQlFYRkNMRWxCUVZaR0xFZEJSVzlDTEVsQlFXeERMMFFzUlVGQlVWRXNTMEZCU3l4VlFVRlZhVVFzVDBGQll5eERRVU4yUXl4SFFVRkpja1FzUlVGQlpTeERRVU5xUWl4SlFVRkpPRVFzUlVGQlMycElMRVZCUVVVclJ5eEZRVUZMUXl4VFFVRlRka0lzU1VGQlNTeFJRVUZUTEZGQlEzUkRNVU1zUlVGQlVWRXNTMEZCU3l4UFFVRlBNa1FzVDBGRGNFSnVSU3hGUVVGUmIwVXNVVUZCVVVZc1IwRkZiRUpzUlN4RlFVRlJjVVVzVTBGQlV5eGhRVU5xUW5KRkxFVkJRVkZSTEV0QlFVc3NhVUpCUVdsQ2EwTXNTVUZCU1N4UlFVRlRMRWRCUnpORGMwSXNSVUZCUzBZc1VVRkhTR2hGTEVWQlFWRnZSQ3hUUVVOV2NFUXNSVUZCVVc5RUxGRkJRVkZRTEVWQlFXdENjVUlzUlVGQlMwWXNVVUZGZWtOMlFpeExRVWRLTEVkQlFXTXNlVUpCUVZaVExFVkJRVVZ5UlN4TFFVRnBReXhEUVVOeVF5eEpRVUZKTWtZc1JVRkJWME1zVTBGQlUzQkZMRVZCUVV0eFJTeFBRVUZUY2tVc1JVRkJTM05GTEUxQlFWRXNTVUZCU3l4SlFVTjRSSHBGTEVWQlFWRlJMRXRCUVVzc2FVSkJRV2xDYTBNc1NVRkJTU3hSUVVGVE5FSXNSVUZCVnl4UFFVZHFSR1FzUlVGQlNWWXNSVUZCVDFjc1QwRkJVeXhGUVVGSFJDeEhRVUZMTEVWQlFVZEJMRWxCUVVzc1EwRkRNME1zU1VGQlNXdENMRVZCUVZrMVFpeEZRVUZQVlN4SFFVTjJRbnBFTEVWQlFVazBSU3hIUVVGSFJDeEZRVUZYTTBJc1IwRkZaamxHTEVWQlFVVXlTQ3hSUVVGUlF5eFhRVU5pT1VVc1JVRkJTU3RGTEV0QlFVc3NXVUZCUVN4SFFVRnJRa01zVTBGQlUxWXNVMEZCVXlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl6Y21NdmFuTXZZbWx1WkdsdVozTXZabWxzWlhWd2JHOWhaQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBiZWZvcmVTdWJzY3JpcHRpb25Qcm9wLGFmdGVyU3Vic2NyaXB0aW9uUHJvcCxrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtpZihrby5iaW5kaW5nSGFuZGxlcnMuaWZTdWJzPXtjbG9uZU5vZGVzOmZ1bmN0aW9uKG8sZSl7Zm9yKHZhciBpPTAsbj1vLmxlbmd0aCxyPVtdO2k8bjtpKyspe3ZhciBzPW9baV0uY2xvbmVOb2RlKCEwKTtyLnB1c2goZT9rby5jbGVhbk5vZGUocyk6cyl9cmV0dXJuIHJ9LGluaXQ6ZnVuY3Rpb24obyxlLGksbixyKXt2YXIgcyx0LHU9ZSgpO3JldHVybiB2b2lkIDA9PT11LmRhdGEuc3Vic0NvdW50JiZrby5leHRlbmRlcnMuc3Vic2NyaXB0aW9uc0NvdW50KHUuZGF0YSksa28uY29tcHV0ZWQoZnVuY3Rpb24oKXt2YXIgaSxuLGI9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShlKCkuZGF0YS5zdWJzQ291bnQpLHA9IXQ7bj0tKHZvaWQgMCE9PWUoKS5ndXR0ZXI/ZSgpLmd1dHRlcjoxKSxpPWIrKHM/bjowKT49a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh1LnRocmVzaG9sZCksdm9pZCAwIT09ZSgpLm5vdCYmZSgpLm5vdCYmKGk9IWkpLChwfHxpIT09cykmJihwJiZrby5jb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzQ291bnQoKSYmKHQ9a28uYmluZGluZ0hhbmRsZXJzLmlmU3Vicy5jbG9uZU5vZGVzKGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKG8pLCEwKSksaT8ocHx8a28udmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbihvLGtvLmJpbmRpbmdIYW5kbGVycy5pZlN1YnMuY2xvbmVOb2Rlcyh0KSksa28uYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMocixvKSk6a28udmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZShvKSxzPWkpfSxudWxsLHtkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6b30pLHtjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLmlmU3Vicz0hMCxcImZ1bmN0aW9uXCI9PXR5cGVvZiBrby5zdWJzY3JpcHRpb24mJnZvaWQgMCE9PWtvLmlzV3JpdGFibGVPYnNlcnZhYmxlKWJlZm9yZVN1YnNjcmlwdGlvblByb3A9XCJiZWZvcmVTdWJzY3JpcHRpb25BZGRcIixhZnRlclN1YnNjcmlwdGlvblByb3A9XCJhZnRlclN1YnNjcmlwdGlvblJlbW92ZVwiO2Vsc2UgaWYoXCIzLjIuMFwiPT1rby52ZXJzaW9uKWJlZm9yZVN1YnNjcmlwdGlvblByb3A9XCJ2YVwiLGFmdGVyU3Vic2NyaXB0aW9uUHJvcD1cIm5iXCI7ZWxzZSBpZihcIjMuMy4wXCI9PWtvLnZlcnNpb24pYmVmb3JlU3Vic2NyaXB0aW9uUHJvcD1cImphXCIsYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wPVwidWFcIjtlbHNlIGlmKFwiMy40LjBcIj09a28udmVyc2lvbiliZWZvcmVTdWJzY3JpcHRpb25Qcm9wPVwic2FcIixhZnRlclN1YnNjcmlwdGlvblByb3A9XCJJYVwiO2Vsc2UgaWYoXCIzLjQuMVwiPT1rby52ZXJzaW9uKWJlZm9yZVN1YnNjcmlwdGlvblByb3A9XCJzYVwiLGFmdGVyU3Vic2NyaXB0aW9uUHJvcD1cIklhXCI7ZWxzZSBpZihcIjMuNC4yXCI9PWtvLnZlcnNpb24pYmVmb3JlU3Vic2NyaXB0aW9uUHJvcD1cInVhXCIsYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wPVwiS2FcIjtlbHNle2lmKFwiMy41LjAtYmV0YVwiIT1rby52ZXJzaW9uKXRocm93XCJVbnN1cHBvcnRlZCBtaW5pbWl6ZWQgS25vY2tvdXQgdmVyc2lvbiBcIitrby52ZXJzaW9uK1wiIChzdXBwb3J0ZWQgREVCVUcgb3IgbWluaW1pemVkIDMuMi4wIC4uLiAzLjUuMC1iZXRhKVwiO2JlZm9yZVN1YnNjcmlwdGlvblByb3A9XCJQYVwiLGFmdGVyU3Vic2NyaXB0aW9uUHJvcD1cImFiXCJ9a28uZXh0ZW5kZXJzLnN1YnNjcmlwdGlvbnNDb3VudD1mdW5jdGlvbihvLGUsaSl7aWYodm9pZCAwPT09by5zdWJzQ291bnQpe28uc3Vic0NvdW50PWtvLm9ic2VydmFibGUoby5nZXRTdWJzY3JpcHRpb25zQ291bnQoKSkuZXh0ZW5kKHtub3RpZnk6XCJhbHdheXNcIn0pO3ZhciBuPW9bYmVmb3JlU3Vic2NyaXB0aW9uUHJvcF0scj1vW2FmdGVyU3Vic2NyaXB0aW9uUHJvcF07b1tiZWZvcmVTdWJzY3JpcHRpb25Qcm9wXT1mdW5jdGlvbihyKXtuJiZuLmNhbGwobyxyKTt2YXIgcz1vLmdldFN1YnNjcmlwdGlvbnNDb3VudCgpKzE7dm9pZCAwIT09ZSYmcyE9ZSYmdm9pZCAwIT09aSYmcyE9aXx8by5zdWJzQ291bnQocyl9LG9bYWZ0ZXJTdWJzY3JpcHRpb25Qcm9wXT1mdW5jdGlvbihuKXtyJiZyLmNhbGwobyxuKTt2YXIgcz1vLmdldFN1YnNjcmlwdGlvbnNDb3VudCgpO3ZvaWQgMCE9PWUmJnMhPWUmJnZvaWQgMCE9PWkmJnMhPWl8fG8uc3Vic0NvdW50KHMpfX1lbHNlIGNvbnNvbGUubG9nKFwiYWxyZWFkeSBhcHBsaWVkIHN1YnNjcmlwdGlvbkNvdW50IHRvIG9ic2VydmFibGVcIik7cmV0dXJuIG51bGx9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sbUxYTjFZbk11YW5NaVhTd2libUZ0WlhNaU9sc2lZbVZtYjNKbFUzVmljMk55YVhCMGFXOXVVSEp2Y0NJc0ltRm1kR1Z5VTNWaWMyTnlhWEIwYVc5dVVISnZjQ0lzSW10dklpd2lkMmx1Wkc5M0lpd2laMnh2WW1Gc0lpd2lZMjl1YzI5c1pTSXNJbkpsY1hWcGNtVWlMQ0ppYVc1a2FXNW5TR0Z1Wkd4bGNuTWlMQ0pwWmxOMVluTWlMQ0pqYkc5dVpVNXZaR1Z6SWl3aWJtOWtaWE5CY25KaGVTSXNJbk5vYjNWc1pFTnNaV0Z1VG05a1pYTWlMQ0pwSWl3aWFpSXNJbXhsYm1kMGFDSXNJbTVsZDA1dlpHVnpRWEp5WVhraUxDSmpiRzl1WldST2IyUmxJaXdpWTJ4dmJtVk9iMlJsSWl3aWNIVnphQ0lzSW1Oc1pXRnVUbTlrWlNJc0ltbHVhWFFpTENKbGJHVnRaVzUwSWl3aWRtRnNkV1ZCWTJObGMzTnZjaUlzSW1Gc2JFSnBibVJwYm1keklpd2lkbWxsZDAxdlpHVnNJaXdpWW1sdVpHbHVaME52Ym5SbGVIUWlMQ0prYVdSRWFYTndiR0Y1VDI1TVlYTjBWWEJrWVhSbElpd2ljMkYyWldST2IyUmxjeUlzSW5aaGJIVmxRV05qSWl3aVpHRjBZU0lzSW5OMVluTkRiM1Z1ZENJc0ltVjRkR1Z1WkdWeWN5SXNJbk4xWW5OamNtbHdkR2x2Ym5ORGIzVnVkQ0lzSW1OdmJYQjFkR1ZrSWl3aWMyaHZkV3hrUkdsemNHeGhlU0lzSW1kMWRIUmxjaUlzSW1SaGRHRldZV3gxWlNJc0luVjBhV3h6SWl3aWRXNTNjbUZ3VDJKelpYSjJZV0pzWlNJc0ltbHpSbWx5YzNSU1pXNWtaWElpTENKMGFISmxjMmh2YkdRaUxDSnViM1FpTENKamIyMXdkWFJsWkVOdmJuUmxlSFFpTENKblpYUkVaWEJsYm1SbGJtTnBaWE5EYjNWdWRDSXNJblpwY25SMVlXeEZiR1Z0Wlc1MGN5SXNJbU5vYVd4a1RtOWtaWE1pTENKelpYUkViMjFPYjJSbFEyaHBiR1J5Wlc0aUxDSmhjSEJzZVVKcGJtUnBibWR6Vkc5RVpYTmpaVzVrWVc1MGN5SXNJbVZ0Y0hSNVRtOWtaU0lzSW1ScGMzQnZjMlZYYUdWdVRtOWtaVWx6VW1WdGIzWmxaQ0lzSW1OdmJuUnliMnh6UkdWelkyVnVaR0Z1ZEVKcGJtUnBibWR6SWl3aVlXeHNiM2RsWkVKcGJtUnBibWR6SWl3aWMzVmljMk55YVhCMGFXOXVJaXdpYVhOWGNtbDBZV0pzWlU5aWMyVnlkbUZpYkdVaUxDSjJaWEp6YVc5dUlpd2lkR0Z5WjJWMElpd2liREVpTENKc01pSXNJbTlpYzJWeWRtRmliR1VpTENKblpYUlRkV0p6WTNKcGNIUnBiMjV6UTI5MWJuUWlMQ0psZUhSbGJtUWlMQ0p1YjNScFpua2lMQ0oxYm1SbGNteDVhVzVuUW1WbWIzSmxVM1ZpYzJOeWFYQjBhVzl1UVdSa1JuVnVZM1JwYjI0aUxDSjFibVJsY214NWFXNW5RV1owWlhKVGRXSnpZM0pwY0hScGIyNVNaVzF2ZG1WR2RXNWpkR2x2YmlJc0ltVjJaVzUwSWl3aVkyRnNiQ0lzSW1NaUxDSnNiMmNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZuUlVsQkxIVkNRVU5CUXl4elFrRnFSVUZETEVkQlFYZENMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWMFFzUjBGQmMwSXNiMEpCUVZoRkxFOUJRWGxDUVN4UFFVRlhSaXhIUVVGSkxFdEJRM0JIUnl4UlFVRlZReXhSUVVGUkxITkNRV2xGZEVJc1IwRXZSRUZLTEVkQlFVZExMR2RDUVVGM1FrTXNVVUZGZWtKRExGZEJRVmtzVTBGQlUwTXNSVUZCV1VNc1IwRkRMMElzU1VGQlN5eEpRVUZKUXl4RlFVRkpMRVZCUVVkRExFVkJRVWxJTEVWQlFWZEpMRTlCUVZGRExFdEJRVzlDU0N4RlFVRkpReXhGUVVGSFJDeEpRVUZMTEVOQlEzSkZMRWxCUVVsSkxFVkJRV0ZPTEVWQlFWZEZMRWRCUVVkTExGZEJRVUZCTEVkQlF5OUNSaXhGUVVGalJ5eExRVUZMVUN4RlFVRnRRbFFzUjBGQlIybENMRlZCUVZWSUxFZEJRV05CTEVkQlJXNUZMRTlCUVU5RUxFZEJSVlJMTEV0QlFWRXNVMEZCVTBNc1JVRkJVME1zUlVGQlpVTXNSVUZCWVVNc1JVRkJWME1zUjBGREwwUXNTVUZCU1VNc1JVRkRSa01zUlVGRFFVTXNSVUZCVjA0c1NVRnhRMklzV1VGQlFTeEpRWEJEVjAwc1JVRkJVME1zUzBGQlMwTXNWMEZEZGtJMVFpeEhRVUZITmtJc1ZVRkJPRUpETEcxQ1FVRkZTaXhGUVVGVFF5eE5RVWM1UXpOQ0xFZEJRVWNyUWl4VFFVRlRMRmRCUTFZc1NVRkZSVU1zUlVGQk5rSkRMRVZCUmpOQ1F5eEZRVUZaYkVNc1IwRkJSMjFETEUxQlFVMURMR2xDUVVGcFFtaENMRWxCUVdkQ1R5eExRVUZMUXl4WFFVTTNSRk1zUjBGQmFVSmFMRVZCUjI1Q1VTeFRRVUZCUVN4SlFVRnJRbUlzU1VGQlowSmhMRTlCUVhsQ1lpeEpRVUZuUW1Fc1QwRkJVeXhIUVVOd1JrUXNSVUZCWjBKRkxFZEJRV0ZXTEVWQlFYbENVeXhGUVVGVExFbEJRVTFxUXl4SFFVRkhiVU1zVFVGQlRVTXNhVUpCUVdsQ1ZpeEZRVUZUV1N4blFrRkJRVUVzU1VGRE4wWnNRaXhKUVVGblFtMUNMRXRCUVhWQ2JrSXNTVUZCWjBKdFFpeE5RVU5vUlZBc1IwRkJhVUpCTEVsQlJVcExMRWRCUVd0Q1RDeEpRVUZyUWxJc1MwRkpOME5oTEVkQlFXbENja01zUjBGQlIzZERMR2RDUVVGblFrTXNlVUpCUTNSRGFFSXNSVUZCWVhwQ0xFZEJRVWRMTEdkQ1FVRjNRa01zVDBGQlJVTXNWMEZCVjFBc1IwRkJSekJETEdkQ1FVRm5Ra01zVjBGQlYzaENMRWxCUVVGQkxFbEJSMnBHWVN4SFFVTkhTeXhIUVVOSWNrTXNSMEZCUnpCRExHZENRVUZuUWtVc2JVSkJRVzFDZWtJc1JVRkJVMjVDTEVkQlFVZExMR2RDUVVGM1FrTXNUMEZCUlVNc1YwRkJWMnRDTEVsQlJYcEdla0lzUjBGQlJ6WkRMREpDUVVFeVFuUkNMRVZCUVdkQ1NpeEpRVVU1UTI1Q0xFZEJRVWN3UXl4blFrRkJaMEpKTEZWQlFWVXpRaXhIUVVjdlFrc3NSVUZCZVVKUkxFbEJSVEZDTEUxQlEwUmxMSGxDUVVFd1FqVkNMRXRCUnpGQ05rSXNORUpCUVVGQkxFdEJTVTVvUkN4SFFVRkhNRU1zWjBKQlFXZENUeXhuUWtGQmQwSXpReXhSUVVGQkxFVkJVMklzYlVKQlFXNUNUaXhIUVVGSGEwUXNiVUpCUVVGQkxFbEJRWEZEYkVRc1IwRkJSMjFFTEhGQ1FVTndSSEpFTEhWQ1FVRjVRaXgzUWtGRGVrSkRMSE5DUVVGM1Fpd3JRa0ZEYmtJc1IwRkJhMElzVTBGQlpFTXNSMEZCUjI5RUxGRkJRMXAwUkN4MVFrRkJlVUlzUzBGRGVrSkRMSE5DUVVGM1FpeFZRVU51UWl4SFFVRnJRaXhUUVVGa1F5eEhRVUZIYjBRc1VVRkRXblJFTEhWQ1FVRjVRaXhMUVVONlFrTXNjMEpCUVhkQ0xGVkJRMjVDTEVkQlFXdENMRk5CUVdSRExFZEJRVWR2UkN4UlFVTmFkRVFzZFVKQlFYbENMRXRCUTNwQ1F5eHpRa0ZCZDBJc1ZVRkRia0lzUjBGQmEwSXNVMEZCWkVNc1IwRkJSMjlFTEZGQlExcDBSQ3gxUWtGQmVVSXNTMEZEZWtKRExITkNRVUYzUWl4VlFVTnVRaXhIUVVGclFpeFRRVUZrUXl4SFFVRkhiMFFzVVVGRFduUkVMSFZDUVVGNVFpeExRVU42UWtNc2MwSkJRWGRDTEZOQlEyNUNMRU5CUVVFc1IwRkJhMElzWTBGQlpFTXNSMEZCUjI5RUxGRkJTVlFzUzBGQlRTd3dRMEZCTkVOd1JDeEhRVUZIYjBRc1VVRkJWU3gxUkVGSWJFVjBSQ3gxUWtGQmVVSXNTMEZEZWtKRExITkNRVUYzUWl4TFFVMHhRa01zUjBGQlJ6WkNMRlZCUVRoQ1F5eHRRa0ZCU1N4VFFVRlRkVUlzUlVGQlVVTXNSVUZCU1VNc1IwRkRlRVFzVVVGQlFTeEpRVUZYUml4RlFVRlBla0lzVlVGQk1rSXNRMEZETTBONVFpeEZRVUZQZWtJc1ZVRkJXVFZDTEVkQlFVZDNSQ3hYUVVGWFNDeEZRVUZQU1N4NVFrRkJlVUpETEZGQlF5OUVReXhQUVVGUkxGZEJSVllzU1VGQlNVTXNSVUZCTUVOUUxFVkJRVTkyUkN4M1FrRkRha1FyUkN4RlFVRTBRMUlzUlVGQlQzUkVMSFZDUVVOMlJITkVMRVZCUVU5MlJDeDNRa0ZCTUVJc1UwRkJVMmRGTEVkQlEzQkRSaXhIUVVGNVEwRXNSVUZCZDBOSExFdEJRVXRXTEVWQlFWRlRMRWRCUTJ4SExFbEJRVWxGTEVWQlFVbFlMRVZCUVU5SkxIZENRVUV3UWl4UFFVRkJMRWxCUXpsQ1NDeEhRVUZ6UWxVc1IwRkJTMVlzVVVGQlFVRXNTVUZCWVVNc1IwRkJjMEpUTEVkQlFVdFVMRWRCUVVsR0xFVkJRVTk2UWl4VlFVRlZiME1zU1VGRmNrZFlMRVZCUVU5MFJDeDFRa0ZCZVVJc1UwRkJVeXRFTEVkQlEyNURSQ3hIUVVFeVEwRXNSVUZCTUVORkxFdEJRVXRXTEVWQlFWRlRMRWRCUTNSSExFbEJRVWxGTEVWQlFVbFlMRVZCUVU5SkxEWkNRVUZCUVN4SlFVTktTQ3hIUVVGelFsVXNSMEZCUzFZc1VVRkJRVUVzU1VGQllVTXNSMEZCYzBKVExFZEJRVXRVTEVkQlFVbEdMRVZCUVU5NlFpeFZRVUZWYjBNc1UwRkhja2MzUkN4UlFVRlJPRVFzU1VGQlNTeHRSRUZGWkN4UFFVRlBJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwzTnlZeTlxY3k5aWFXNWthVzVuY3k5cFppMXpkV0p6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsc3Bpbm5lcj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnkudWkuc3Bpbm5lcjpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnkudWkuc3Bpbm5lcjpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtpZih2b2lkIDA9PT1zcGlubmVyKXRocm93XCJDYW5ub3QgZmluZCBqcXVlcnktdWkgc3Bpbm5lciB3aWRnZXQgZGVwZW5kZW5jeSFcIjskLndpZGdldChcInVpLnNwaW5uZXJcIixzcGlubmVyLHtfYWRqdXN0VmFsdWU6ZnVuY3Rpb24obil7dGhpcy5fc3VwZXIobik7dmFyIGU9dGhpcy5vcHRpb25zO3JldHVybiBuPXBhcnNlRmxvYXQobi50b0ZpeGVkKHRoaXMuX3ByZWNpc2lvbigpKSksbnVsbCE9PWUubWF4JiZuPmUubWF4P2UubWF4Om51bGwhPT1lLm1pbiYmbjxlLm1pbj9lLm1pbjpufX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1weGRXVnllWFZwTFhOd2FXNXVaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lKQ0lzSW5kcGJtUnZkeUlzSW1wUmRXVnllU0lzSW1kc2IySmhiQ0lzSW5Od2FXNXVaWElpTENKMWFTSXNJbU52Ym5OdmJHVWlMQ0p5WlhGMWFYSmxJaXdpZDJsa1oyVjBJaXdpWDJGa2FuVnpkRlpoYkhWbElpd2lkbUZzZFdVaUxDSjBhR2x6SWl3aVgzTjFjR1Z5SWl3aWIzQjBhVzl1Y3lJc0luQmhjbk5sUm14dllYUWlMQ0owYjBacGVHVmtJaXdpWDNCeVpXTnBjMmx2YmlJc0ltMWhlQ0lzSW0xcGJpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZMUVN4SlFVRkpRU3hGUVVGMVFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkRMRTlCUVhOQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpVUXNUMEZCU1N4TFFVTXpSMFVzVVVGQk5rSXNiMEpCUVZoSUxFOUJRWGxDUVN4UFFVRmxReXhQUVVGTlJ5eEhRVUZYUkN4UlFVRnpRaXh2UWtGQldFUXNUMEZCZVVKQkxFOUJRV1ZFTEU5QlFVMUhMRWRCUVZkRUxGRkJRVWtzUzBGRGJrcEZMRkZCUVZWRExGRkJRVkVzYzBKQlJYUkNMRkZCUVVFc1NVRkJWMGdzVVVGQmQwSXNTMEZCVFN4dFJFRkZla05LTEVWQlFVVlJMRTlCUVU4c1lVRkJZMG9zVTBGRGNrSkxMR0ZCUVdNc1UwRkJVME1zUjBGRFdFTXNTMEZCUzBNc1QwRkJUMFlzUjBGQmRFSXNTVUZGU1Vjc1JVRkJWVVlzUzBGQlMwVXNVVUZOYmtJc1QwRklRVWdzUlVGQlVVa3NWMEZCVjBvc1JVRkJUVXNzVVVGQlVVb3NTMEZCUzBzc1pVRkhiRUlzVDBGQmFFSklMRVZCUVZGSkxFdEJRV2RDVUN4RlFVRlJSeXhGUVVGUlNTeEpRVU51UTBvc1JVRkJVVWtzU1VGRlJ5eFBRVUZvUWtvc1JVRkJVVXNzUzBGQlowSlNMRVZCUVZGSExFVkJRVkZMTEVsQlEyNURUQ3hGUVVGUlN5eEpRVWRXVWlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl6Y21NdmFuTXZZbWx1WkdsdVozTXZhbkYxWlhKNWRXa3RjM0JwYm01bGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKSx0YWJzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeS51aS50YWJzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeS51aS50YWJzOm51bGw7aWYodm9pZCAwPT09dGFicyl0aHJvd1wiQ2Fubm90IGZpbmQganF1ZXJ5LXVpIHRhYnMgd2lkZ2V0IGRlcGVuZGVuY3khXCI7JC53aWRnZXQoXCJ1aS50YWJzXCIsdGFicyx7X2lzTG9jYWw6ZnVuY3Rpb24oZSl7cmV0dXJuXCJ0cnVlXCI9PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1sb2NhbFwiKXx8dGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1weGRXVnllWFZwTFhSaFluTXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpDSXNJbmRwYm1SdmR5SXNJbXBSZFdWeWVTSXNJbWRzYjJKaGJDSXNJbU52Ym5OdmJHVWlMQ0p5WlhGMWFYSmxJaXdpZEdGaWN5SXNJblZwSWl3aWQybGtaMlYwSWl3aVgybHpURzlqWVd3aUxDSmhibU5vYjNJaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKMGFHbHpJaXdpWDNOMWNHVnlRWEJ3YkhraUxDSmhjbWQxYldWdWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUzBFc1NVRkJTVUVzUlVGQmRVSXNiMEpCUVZoRExFOUJRWGxDUVN4UFFVRmxReXhQUVVGelFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkVMRTlCUVVrc1MwRkRNMGRGTEZGQlFWVkRMRkZCUVZFc2MwSkJRMnhDUXl4TFFVRXdRaXh2UWtGQldFd3NUMEZCZVVKQkxFOUJRV1ZETEU5QlFVMUxMRWRCUVZGRUxFdEJRWE5DTEc5Q1FVRllTQ3hQUVVGNVFrRXNUMEZCWlVRc1QwRkJUVXNzUjBGQlVVUXNTMEZCU1N4TFFVVTVTU3hSUVVGQkxFbEJRVmRCTEV0QlFYRkNMRXRCUVUwc1owUkJSWFJEVGl4RlFVRkZVU3hQUVVGUExGVkJRVmRHTEUxQlEyeENSeXhUUVVGVkxGTkJRVlZETEVkQlEyeENMRTFCUVhsRExGRkJRWEpEUVN4RlFVRlBReXhoUVVGaExHVkJRMXBETEV0QlFVdERMRmxCUVdGRElpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDNOeVl5OXFjeTlpYVc1a2FXNW5jeTlxY1hWbGNubDFhUzEwWVdKekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGw7a28uYmluZGluZ0hhbmRsZXJzLnByZWxvYWRlcj17aW5pdDpmdW5jdGlvbihlLG8pe3ZhciBkPW8oKTtpZih2b2lkIDA9PT1kLnByZWxvYWRlZCl7ZC5wcmVsb2FkZWQ9a28ub2JzZXJ2YWJsZShcIlwiKTt2YXIgbj1mdW5jdGlvbihlKXtpZihlIT1kLnByZWxvYWRlZCgpKWlmKFwiXCIhPT1lKXt2YXIgbz1uZXcgSW1hZ2U7by5vbmxvYWQ9ZnVuY3Rpb24oKXtkLnByZWxvYWRlZChlKX0sby5vbmVycm9yPWZ1bmN0aW9uKCl7ZC5wcmVsb2FkZWQoZSl9LG8uc3JjPWV9ZWxzZSBkLnByZWxvYWRlZChlKX07ZC5zdWJzY3JpYmUobiksbihkKCkpfX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CeVpXeHZZV1JsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpyYnlJc0luZHBibVJ2ZHlJc0ltZHNiMkpoYkNJc0ltSnBibVJwYm1kSVlXNWtiR1Z5Y3lJc0luQnlaV3h2WVdSbGNpSXNJbWx1YVhRaUxDSmxiR1Z0Wlc1MElpd2lkbUZzZFdWQlkyTmxjM052Y2lJc0luWmhiSFZsSWl3aWNISmxiRzloWkdWa0lpd2liMkp6WlhKMllXSnNaU0lzSW01bGQxWmhiSFZsSWl3aWFXMW5JaXdpU1cxaFoyVWlMQ0p2Ym14dllXUWlMQ0p2Ym1WeWNtOXlJaXdpYzNKaklpd2ljM1ZpYzJOeWFXSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVkQkxFbEJRVWxCTEVkQlFYZENMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJWMFFzUjBGQmMwSXNiMEpCUVZoRkxFOUJRWGxDUVN4UFFVRlhSaXhIUVVGSkxFdEJSM2hIUVN4SFFVRkhSeXhuUWtGQk1rSkRMRmRCUXpWQ1F5eExRVUZOTEZOQlFWTkRMRVZCUVZORExFZEJRM1JDTEVsQlFVbERMRVZCUVZGRUxFbEJRMW9zVVVGQlFTeEpRVUZYUXl4RlFVRk5ReXhWUVVFd1FpeERRVU42UTBRc1JVRkJUVU1zVlVGQldWUXNSMEZCUjFVc1YwRkJWeXhKUVVWb1F5eEpRVUZKVGl4RlFVRlpMRk5CUVZOUExFZEJRM1pDTEVkQlFVbEJMRWRCUVZsSUxFVkJRVTFETEZsQlEzQkNMRWRCUVdsQ0xFdEJRV0pGTEVWQlFXbENMRU5CUTI1Q0xFbEJRVWxETEVWQlFVMHNTVUZCU1VNc1RVRkRaRVFzUlVGQlNVVXNUMEZCVXl4WFFVTllUaXhGUVVGTlF5eFZRVUZWUlN4SlFVVnNRa01zUlVGQlNVY3NVVUZCVlN4WFFVTmFVQ3hGUVVGTlF5eFZRVUZWUlN4SlFVVnNRa01zUlVGQlNVa3NTVUZCVFV3c1QwRkZWa2dzUlVGQlRVTXNWVUZCVlVVc1NVRkxkRUpJTEVWQlFVMVRMRlZCUVZWaUxFZEJRMmhDUVN4RlFVRlZTU0lzSW1acGJHVWlPaUl2ZG1GeUwzZDNkeTl0YjNOaGFXTnZMVzFoYzNSbGNpOXpjbU12YW5NdlltbHVaR2x1WjNNdmNISmxiRzloWkdWeUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcHVzaFRlbXBsYXRlKGUsdCl7dmFyIG49Z2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJ0ZXh0L2h0bWxcIiksbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLGUpLG4udGV4dD10LGdsb2JhbC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG4pfWZ1bmN0aW9uIHJlbW92ZVRlbXBsYXRlKGUpe3ZhciB0PWdsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTt0JiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCl9ZnVuY3Rpb24gaW5pdCgpe31mdW5jdGlvbiBnZXRUZW1wbGF0ZUNvbnRlbnQoZSl7dmFyIHQ9Z2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpO3JldHVybiB0P3QuaW5uZXJIVE1MOnZvaWQgMH1tb2R1bGUuZXhwb3J0cz17aW5pdDppbml0LGFkZFRlbXBsYXRlOnB1c2hUZW1wbGF0ZSxyZW1vdmVUZW1wbGF0ZTpyZW1vdmVUZW1wbGF0ZSxnZXRUZW1wbGF0ZUNvbnRlbnQ6Z2V0VGVtcGxhdGVDb250ZW50fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTmpjbWx3ZEMxMFpXMXdiR0YwWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp3ZFhOb1ZHVnRjR3hoZEdVaUxDSjBaVzF3YkdGMFpVNWhiV1VpTENKMFpXMXdiR0YwWlZSbGVIUWlMQ0p6WTNKcGNIUlVZV2NpTENKbmJHOWlZV3dpTENKa2IyTjFiV1Z1ZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0owWlhoMElpd2lZbTlrZVNJc0ltRndjR1Z1WkVOb2FXeGtJaXdpY21WdGIzWmxWR1Z0Y0d4aGRHVWlMQ0psYkNJc0ltZGxkRVZzWlcxbGJuUkNlVWxrSWl3aWNHRnlaVzUwVG05a1pTSXNJbkpsYlc5MlpVTm9hV3hrSWl3aWFXNXBkQ0lzSW1kbGRGUmxiWEJzWVhSbFEyOXVkR1Z1ZENJc0ltbGtJaXdpYVc1dVpYSklWRTFNSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltRmtaRlJsYlhCc1lYUmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVkQkxGTkJRVk5CTEdGQlFXRkRMRVZCUVdORExFZEJRMnhETEVsQlFVbERMRVZCUVZsRExFOUJRVTlETEZOQlFWTkRMR05CUVdNc1ZVRkRPVU5JTEVWQlFWVkpMR0ZCUVdFc1QwRkJVU3hoUVVNdlFrb3NSVUZCVlVrc1lVRkJZU3hMUVVGTlRpeEhRVU0zUWtVc1JVRkJWVXNzUzBGQlQwNHNSVUZEYWtKRkxFOUJRVTlETEZOQlFWTkpMRXRCUVV0RExGbEJRVmxRTEVkQlIyNURMRk5CUVZOUkxHVkJRV1ZXTEVkQlEzUkNMRWxCUVVsWExFVkJRVXRTTEU5QlFVOURMRk5CUVZOUkxHVkJRV1ZhTEVkQlEzQkRWeXhIUVVGSlFTeEZRVUZIUlN4WFFVRlhReXhaUVVGWlNDeEhRVWR3UXl4VFFVRlRTU3hSUVVWVUxGTkJRVk5ETEcxQ1FVRnRRa01zUjBGRE1VSXNTVUZCU1U0c1JVRkJTMUlzVDBGQlQwTXNVMEZCVTFFc1pVRkJaVXNzUjBGRGVFTXNUMEZCU1U0c1JVRkJWMEVzUlVGQlIwOHNaVUZCUVVFc1JVRkpjRUpETEU5QlFVOURMRk5CUTB4TUxFdEJRVTFCTEV0QlEwNU5MRmxCUVdGMFFpeGhRVU5pVnl4bFFVRm5Ra0VzWlVGRGFFSk5MRzFDUVVGdlFrRWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmMzSmpMMnB6TDJKcGJtUnBibWR6TDNOamNtbHdkQzEwWlcxd2JHRjBaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciB0aW1lb3V0LGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGwsJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLHRpbnltY2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cudGlueW1jZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC50aW55bWNlOm51bGwscmVuZGVyPWZ1bmN0aW9uKCl7aWYodGltZW91dD12b2lkIDAsdm9pZCAwIT09dGlueW1jZS5hY3RpdmVFZGl0b3ImJm51bGwhPT10aW55bWNlLmFjdGl2ZUVkaXRvciYmdm9pZCAwIT09dGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUmJm51bGwhPT10aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZSYmdm9pZCAwIT09dGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwmJm51bGwhPT10aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbCl7KHZvaWQgMCE9PXRpbnltY2UuYWN0aXZlRWRpdG9yLnRoZW1lLnBhbmVsLl92aXNpYmxlJiZ0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5fdmlzaWJsZSYmdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuX2ZpeGVkfHx2b2lkIDAhPT10aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5zdGF0ZSYmdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuc3RhdGUuZ2V0KFwidmlzaWJsZVwiKSYmdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwuc3RhdGUuZ2V0KFwiZml4ZWRcIikpJiZ0aW55bWNlLmFjdGl2ZUVkaXRvci50aGVtZS5wYW5lbC5maXhlZCghMSk7dmFyIGU9dm9pZCAwIT09dGlueW1jZS5hY3RpdmVFZGl0b3IuYm9keUVsZW1lbnQ/dGlueW1jZS5hY3RpdmVFZGl0b3IuYm9keUVsZW1lbnQ6dGlueW1jZS5hY3RpdmVFZGl0b3IuZG9tLnNldHRpbmdzLnJvb3RfZWxlbWVudDtudWxsIT09ZSYmdm9pZCAwIT09ZS5jbGFzc0xpc3QmJmUuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWNlLWVkaXQtZm9jdXNcIikmJih0aW55bWNlLmFjdGl2ZUVkaXRvci5ub2RlQ2hhbmdlZCgpLHRpbnltY2UuYWN0aXZlRWRpdG9yLnRoZW1lLnBhbmVsLnZpc2libGUoITApLHRpbnltY2UuYWN0aXZlRWRpdG9yLnRoZW1lLnBhbmVsLmxheW91dFJlY3QoKS55PD00MCYmdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwubW92ZUJ5KDAsNDAtdGlueW1jZS5hY3RpdmVFZGl0b3IudGhlbWUucGFuZWwubGF5b3V0UmVjdCgpLnkpKX19O2tvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU2Nyb2xsZml4PXtzY3JvbGw6ZnVuY3Rpb24oZSl7dGltZW91dCYmZ2xvYmFsLmNsZWFyVGltZW91dCh0aW1lb3V0KSx0aW1lb3V0PWdsb2JhbC5zZXRUaW1lb3V0KHJlbmRlciw1MCl9LGluaXQ6ZnVuY3Rpb24oZSl7a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlLGZ1bmN0aW9uKCl7JChlKS5vZmYoXCJzY3JvbGxcIixrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z1Njcm9sbGZpeC5zY3JvbGwpfSksJChlKS5vbihcInNjcm9sbFwiLGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU2Nyb2xsZml4LnNjcm9sbCl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTmpjbTlzYkdacGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKMGFXMWxiM1YwSWl3aWEyOGlMQ0ozYVc1a2IzY2lMQ0puYkc5aVlXd2lMQ0lrSWl3aWFsRjFaWEo1SWl3aVkyOXVjMjlzWlNJc0luSmxjWFZwY21VaUxDSjBhVzU1YldObElpd2ljbVZ1WkdWeUlpd2lkVzVrWldacGJtVmtJaXdpWVdOMGFYWmxSV1JwZEc5eUlpd2lkR2hsYldVaUxDSndZVzVsYkNJc0lsOTJhWE5wWW14bElpd2lYMlpwZUdWa0lpd2ljM1JoZEdVaUxDSm5aWFFpTENKbWFYaGxaQ0lzSW1Wc1pXMWxiblFpTENKaWIyUjVSV3hsYldWdWRDSXNJbVJ2YlNJc0luTmxkSFJwYm1keklpd2ljbTl2ZEY5bGJHVnRaVzUwSWl3aVkyeGhjM05NYVhOMElpd2lZMjl1ZEdGcGJuTWlMQ0p1YjJSbFEyaGhibWRsWkNJc0luWnBjMmxpYkdVaUxDSnNZWGx2ZFhSU1pXTjBJaXdpZVNJc0ltMXZkbVZDZVNJc0ltSnBibVJwYm1kSVlXNWtiR1Z5Y3lJc0luZDVjMmwzZVdkVFkzSnZiR3htYVhnaUxDSnpZM0p2Ykd3aUxDSmxkbVZ1ZENJc0ltTnNaV0Z5VkdsdFpXOTFkQ0lzSW5ObGRGUnBiV1Z2ZFhRaUxDSnBibWwwSWl3aWRYUnBiSE1pTENKa2IyMU9iMlJsUkdsemNHOXpZV3dpTENKaFpHUkVhWE53YjNObFEyRnNiR0poWTJzaUxDSnZabVlpTENKdmJpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZIUVN4SlFVdEpRU3hSUVV4QlF5eEhRVUYzUWl4dlFrRkJXRU1zVDBGQmVVSkJMRTlCUVZkRUxFZEJRWE5DTEc5Q1FVRllSU3hQUVVGNVFrRXNUMEZCVjBZc1IwRkJTU3hMUVVOd1IwY3NSVUZCZFVJc2IwSkJRVmhHTEU5QlFYbENRU3hQUVVGbFJ5eFBRVUZ6UWl4dlFrRkJXRVlzVDBGQmVVSkJMRTlCUVdWRkxFOUJRVWtzUzBGRE0wZERMRkZCUVZWRExGRkJRVkVzYzBKQlEyeENReXhSUVVFMlFpeHZRa0ZCV0U0c1QwRkJlVUpCTEU5QlFXZENUU3hSUVVGelFpeHZRa0ZCV0V3c1QwRkJlVUpCTEU5QlFXZENTeXhSUVVGSkxFdEJZMjVJUXl4UFFVRlRMRmRCU1Znc1IwRkdRVlFzWVVGQlFVRXNUMEZCVlZVc1NVRkZRMFlzVVVGQlVVY3NZMEZCZVVRc1QwRkJla0pJTEZGQlFWRkhMRzFDUVVGQlFTeEpRVU5vUkVnc1VVRkJVVWNzWVVGQllVTXNUMEZCZDBRc1QwRkJMMEpLTEZGQlFWRkhMR0ZCUVdGRExGbEJRVUZCTEVsQlEyNUZTaXhSUVVGUlJ5eGhRVUZoUXl4TlFVRk5ReXhQUVVFNFJDeFBRVUZ5UTB3c1VVRkJVVWNzWVVGQllVTXNUVUZCVFVNc1RVRkJaMElzVDBGQlFTeEpRVXMxUmt3c1VVRkJVVWNzWVVGQllVTXNUVUZCVFVNc1RVRkJUVU1zVlVGQk5FSk9MRkZCUVZGSExHRkJRV0ZETEUxQlFVMURMRTFCUVUxRExGVkJRVmxPTEZGQlFWRkhMR0ZCUVdGRExFMUJRVTFETEUxQlFVMUZMR0ZCUVVGQkxFbEJRek5KVUN4UlFVRlJSeXhoUVVGaFF5eE5RVUZOUXl4TlFVRk5SeXhQUVVGNVFsSXNVVUZCVVVjc1lVRkJZVU1zVFVGQlRVTXNUVUZCVFVjc1RVRkJUVU1zU1VGQlNTeFpRVUZqVkN4UlFVRlJSeXhoUVVGaFF5eE5RVUZOUXl4TlFVRk5SeXhOUVVGTlF5eEpRVUZKTEZkQlEzaExWQ3hSUVVGUlJ5eGhRVUZoUXl4TlFVRk5ReXhOUVVGTlN5eFBRVUZCUVN4SFFVZHVReXhKUVVGSlF5eFBRVUZCUVN4SlFVRnBRbGdzVVVGQlVVY3NZVUZCWVZNc1dVRkJPRUphTEZGQlFWRkhMR0ZCUVdGVExGbEJRV05hTEZGQlFWRkhMR0ZCUVdGVkxFbEJRVWxETEZOQlFWTkRMR0ZCUXpkSUxFOUJRVnBLTEZGQlFVRkJMRWxCUVRKQ1FTeEZRVUZSU3l4WFFVRTJRa3dzUlVGQlVVc3NWVUZCVlVNc1UwRkJVeXh2UWtGRE4wWnFRaXhSUVVGUlJ5eGhRVUZoWlN4alFVTnlRbXhDTEZGQlFWRkhMR0ZCUVdGRExFMUJRVTFETEUxQlFVMWpMRk5CUVVGQkxFZEJRemRDYmtJc1VVRkJVVWNzWVVGQllVTXNUVUZCVFVNc1RVRkJUV1VzWVVGQllVTXNSMEZCU3l4SlFVTnlSSEpDTEZGQlFWRkhMR0ZCUVdGRExFMUJRVTFETEUxQlFVMXBRaXhQUVVGUExFVkJRVWNzUjBGQlMzUkNMRkZCUVZGSExHRkJRV0ZETEUxQlFVMURMRTFCUVUxbExHRkJRV0ZETEUxQlRYUkhOVUlzUjBGQlJ6aENMR2RDUVVGblFrTXNhMEpCUTJwQ1F5eFBRVUZWTEZOQlFWTkRMRWRCUTJKc1F5eFRRVUZUUnl4UFFVRlBaME1zWVVGQllXNURMRk5CUTJwRFFTeFJRVUZWUnl4UFFVRlBhVU1zVjBGQlZ6TkNMRTlCUVZFc1MwRkZkRU0wUWl4TFFVRlJMRk5CUVZOc1FpeEhRVU5tYkVJc1IwRkJSM0ZETEUxQlFVMURMR2RDUVVGblFrTXNiVUpCUVcxQ2NrSXNSVUZCVXl4WFFVTnVSR1lzUlVGQlJXVXNSMEZCVTNOQ0xFbEJRVWtzVTBGQlZYaERMRWRCUVVjNFFpeG5Ra0ZCWjBKRExHbENRVUZwUWtNc1ZVRkhMMFEzUWl4RlFVRkZaU3hIUVVGVGRVSXNSMEZCUnl4VFFVRlZla01zUjBGQlJ6aENMR2RDUVVGblFrTXNhVUpCUVdsQ1F5SXNJbVpwYkdVaU9pSXZkbUZ5TDNkM2R5OXRiM05oYVdOdkxXMWhjM1JsY2k5emNtTXZhbk12WW1sdVpHbHVaM012YzJOeWIyeHNabWw0TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksX3Njcm9sbEludG9WaWV3PWZ1bmN0aW9uKG8sZSxsLG4pe3ZhciBpPWwuc2Nyb2xsVG9wKCksdD1pLW4tKGU/MjA6LTIwKTtpZih2b2lkIDAhPT1sWzBdLm5vZGVUeXBlKXt2YXIgcj17c2Nyb2xsVG9wOk1hdGgucm91bmQodCkrXCJweFwifSxzPU1hdGgucm91bmQoTWF0aC5hYnModC1pKSk7bC5zdG9wKCkuYW5pbWF0ZShyLHMpfWVsc2UgbC5zY3JvbGxUb3AodCl9O2tvLmJpbmRpbmdIYW5kbGVycy5zY3JvbGxJbnRvVmlldz17dXBkYXRlOmZ1bmN0aW9uKG8sZSxsLG4saSl7aWYoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShlKCkpKXRyeXtmb3IoOzg9PT1vLm5vZGVUeXBlOylvPW8ubmV4dFNpYmxpbmc7aWYoOCE9PW8ubm9kZVR5cGUpe3ZhciB0LHI9JChvKS5zY3JvbGxQYXJlbnQoKSxzPSExOzk9PXJbMF0ubm9kZVR5cGU/KHI9JChyWzBdLmRlZmF1bHRWaWV3KSx0PTAscz0hMCk6dD1yLm9mZnNldCgpLnRvcDt2YXIgYT1yLmhlaWdodCgpLGQ9ci5zY3JvbGxUb3AoKSxjPXQrYSxmPSQobyksdz1mLm9mZnNldCgpLnRvcDtzJiYody09ZCk7dmFyIHA9Zi5oZWlnaHQoKSx1PXcrcDt3PnQmJncrcDxjfHwocDxhPyh3PHQmJl9zY3JvbGxJbnRvVmlldyhvLCEwLHIsdC13KSx1PmMmJl9zY3JvbGxJbnRvVmlldyhvLCExLHIsYy11KSk6KHc8dCYmdTxjJiZfc2Nyb2xsSW50b1ZpZXcobywhMSxyLGMtdSksdz50JiZ1PmMmJl9zY3JvbGxJbnRvVmlldyhvLCEwLHIsdC13KSkpfX1jYXRjaChvKXtjb25zb2xlLmxvZyhcIlRPRE8gZXhjZXB0aW9uIHNjcm9sbGluZyBpbnRvIHZpZXdcIixvKX19fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnNjcm9sbEludG9WaWV3PSEwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OamNtOXNiR2x1ZEc5MmFXVjNMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUWlMQ0ozYVc1a2IzY2lMQ0pxVVhWbGNua2lMQ0puYkc5aVlXd2lMQ0pyYnlJc0ltTnZibk52YkdVaUxDSnlaWEYxYVhKbElpd2lYM05qY205c2JFbHVkRzlXYVdWM0lpd2lKR1ZzWlcxbGJuUWlMQ0poYkdsbmJsUnZjQ0lzSW5OamNtOXNiRkJoY21WdWRDSXNJbTF2ZG1WQ2VTSXNJbU4xY25KbGJuUlRZM0p2Ykd4VWIzQWlMQ0p6WTNKdmJHeFViM0FpTENKdVpYZFRZM0p2Ykd4VWIzQWlMQ0p1YjJSbFZIbHdaU0lzSW1GamRHbHZiaUlzSWsxaGRHZ2lMQ0p5YjNWdVpDSXNJblJwYldVaUxDSmhZbk1pTENKemRHOXdJaXdpWVc1cGJXRjBaU0lzSW1KcGJtUnBibWRJWVc1a2JHVnljeUlzSW5OamNtOXNiRWx1ZEc5V2FXVjNJaXdpZFhCa1lYUmxJaXdpWld4bGJXVnVkQ0lzSW5aaGJIVmxRV05qWlhOemIzSWlMQ0poYkd4Q2FXNWthVzVuYzBGalkyVnpjMjl5SWl3aWRtbGxkMDF2WkdWc0lpd2lZbWx1WkdsdVowTnZiblJsZUhRaUxDSjFkR2xzY3lJc0luVnVkM0poY0U5aWMyVnlkbUZpYkdVaUxDSnVaWGgwVTJsaWJHbHVaeUlzSW5CaGNtVnVkRlJ2Y0NJc0luSmxiR0YwYVhabFQyWm1jMlYwSWl3aVpHVm1ZWFZzZEZacFpYY2lMQ0p2Wm1aelpYUWlMQ0owYjNBaUxDSndZWEpsYm5SSVpXbG5hSFFpTENKb1pXbG5hSFFpTENKd1lYSmxiblJUWTNKdmJHd2lMQ0p3WVhKbGJuUkNiM1IwYjIwaUxDSmxiRlJ2Y0NJc0ltVnNTR1ZwWjJoMElpd2laV3hDYjNSMGIyMGlMQ0psSWl3aWJHOW5JaXdpZG1seWRIVmhiRVZzWlcxbGJuUnpJaXdpWVd4c2IzZGxaRUpwYm1ScGJtZHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEVWQlFYVkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJaVU1zVDBGQmMwSXNiMEpCUVZoRExFOUJRWGxDUVN4UFFVRmxSQ3hQUVVGSkxFdEJRek5IUlN4SFFVRjNRaXh2UWtGQldFZ3NUMEZCZVVKQkxFOUJRVmRITEVkQlFYTkNMRzlDUVVGWVJDeFBRVUY1UWtFc1QwRkJWME1zUjBGQlNTeExRVU53UjBNc1VVRkJWVU1zVVVGQlVTeHpRa0ZGYkVKRExHZENRVUZyUWl4VFFVRlRReXhGUVVGVlF5eEZRVUZWUXl4RlFVRmpReXhIUVVNdlJDeEpRVUZKUXl4RlFVRnRRa1lzUlVGQllVY3NXVUZEYUVORExFVkJRV1ZHTEVWQlFXMUNSQ3hIUVVGVlJpeEZRVUZYTEVsQlFVMHNTVUZIYWtVc1VVRkJRU3hKUVVSeFFrTXNSVUZCWVN4SFFVRkhTeXhUUVVONFFpeERRVU5ZTEVsQlFVbERMRWRCUTBaSUxGVkJRV3RDU1N4TFFVRkxReXhOUVVGTlNpeEhRVUZuUWl4TlFVVXpRMHNzUlVGQlQwWXNTMEZCUzBNc1RVRkJUVVFzUzBGQlMwY3NTVUZCU1U0c1JVRkJaVVlzU1VGRE9VTkdMRVZCUVdGWExFOUJRVTlETEZGQlFWRk9MRVZCUVZGSExGRkJSWEJEVkN4RlFVRmhSeXhWUVVGVlF5eEpRVTB6UWxZc1IwRkJSMjFDTEdkQ1FVRm5Ra01zWjBKQlEycENReXhQUVVGUkxGTkJRVk5ETEVWQlFWTkRMRVZCUVdWRExFVkJRWEZDUXl4RlFVRlhReXhIUVVWMlJTeEhRVVJsTVVJc1IwRkJSekpDTEUxQlFVMURMR2xDUVVGcFFrd3NTMEZGZWtNc1NVRkZSU3hMUVVFMFFpeEpRVUZ5UWtRc1JVRkJVVmdzVlVGRllsY3NSVUZCVlVFc1JVRkJVVThzV1VGRmNFSXNSMEZCZVVJc1NVRkJja0pRTEVWQlFWRllMRk5CUVdkQ0xFTkJRekZDTEVsQlJVbHRRaXhGUVVaQmVFSXNSVUZCWlZZc1JVRkJSVEJDTEVkQlFWTm9RaXhsUVVjeFFubENMRWRCUVVGQkxFVkJRelJDTEVkQlFUVkNla0lzUlVGQllTeEhRVUZIU3l4VlFVVnNRa3dzUlVGQlpWWXNSVUZCUlZVc1JVRkJZU3hIUVVGSE1FSXNZVUZEYWtOR0xFVkJRVmtzUlVGRFdrTXNSMEZCUVVFc1IwRkZRVVFzUlVGQldYaENMRVZCUVdFeVFpeFRRVUZUUXl4SlFVZHdReXhKUVVGSlF5eEZRVUZsTjBJc1JVRkJZVGhDTEZOQlF6VkNReXhGUVVGbEwwSXNSVUZCWVVjc1dVRkROVUkyUWl4RlFVRmxVaXhGUVVGWlN5eEZRVWN6UWk5Q0xFVkJRVmRTTEVWQlFVVXdRaXhIUVVOaWFVSXNSVUZCVVc1RExFVkJRVk0yUWl4VFFVRlRReXhKUVVVeFFrZ3NTVUZCWjBKUkxFZEJRV2RDUml4SFFVTndReXhKUVVGSlJ5eEZRVUZYY0VNc1JVRkJVMmRETEZOQlEzQkNTeXhGUVVGWFJpeEZRVUZSUXl4RlFVTnVRa1FzUlVGQlVWUXNSMEZCWVZNc1JVRkJVVU1zUlVGQlYwWXNTVUZGYWtORkxFVkJRVmRNTEVkQlJXaENTU3hGUVVGUlZDeEhRVUZYTTBJc1owSkJRV2RDYlVJc1IwRkJRVUVzUlVGQlpXaENMRVZCUVdOM1FpeEZRVUZaVXl4SFFVVTFSVVVzUlVGQlYwZ3NSMEZCWTI1RExHZENRVUZuUW0xQ0xFZEJRVUZCTEVWQlFXZENhRUlzUlVGQlkyZERMRVZCUVdWSExFdEJTM1JHUml4RlFVRlJWQ3hIUVVGaFZ5eEZRVUZYU0N4SFFVRmpia01zWjBKQlFXZENiVUlzUjBGQlFVRXNSVUZCWjBKb1FpeEZRVUZqWjBNc1JVRkJaVWNzUjBGRk0wZEdMRVZCUVZGVUxFZEJRV0ZYTEVWQlFWZElMRWRCUVdOdVF5eG5Ra0ZCWjBKdFFpeEhRVUZCUVN4RlFVRmxhRUlzUlVGQlkzZENMRVZCUVZsVExFMUJTeTlITEUxQlFVOUhMRWRCUTFCNlF5eFJRVUZSTUVNc1NVRkJTU3h4UTBGQmMwTkVMRTFCU1hoRU1VTXNSMEZCUnpSRExHZENRVUZuUWtNc1owSkJRV2REZWtJc1owSkJRVUVpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwySnBibVJwYm1kekwzTmpjbTlzYkdsdWRHOTJhV1YzTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIga289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxvcmlnVGVtcGxhdGVTeXN0ZW09cmVxdWlyZShcIi4vc2NyaXB0LXRlbXBsYXRlLmpzXCIpLHRlbXBsYXRlcz17fTtmdW5jdGlvbiBjcmVhdGVTdHJpbmdUZW1wbGF0ZUVuZ2luZShlKXt2YXIgdD1lLm1ha2VUZW1wbGF0ZVNvdXJjZTtyZXR1cm4gZS5tYWtlVGVtcGxhdGVTb3VyY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PXRlbXBsYXRlc1tlXT9uZXcga28udGVtcGxhdGVTb3VyY2VzLnN0cmluZ1RlbXBsYXRlKGUsdGVtcGxhdGVzW2VdKTp0KGUpfSxlfWZ1bmN0aW9uIHB1c2hUZW1wbGF0ZShlLHQpe3RlbXBsYXRlc1tlXT10fWZ1bmN0aW9uIHJlbW92ZVRlbXBsYXRlKGUpe3ZvaWQgMCE9PXRlbXBsYXRlc1tlXT90ZW1wbGF0ZXNbZV09dm9pZCAwOm9yaWdUZW1wbGF0ZVN5c3RlbS5yZW1vdmVUZW1wbGF0ZShlKX1mdW5jdGlvbiBpbml0KCl7a28uc2V0VGVtcGxhdGVFbmdpbmUoY3JlYXRlU3RyaW5nVGVtcGxhdGVFbmdpbmUobmV3IGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lKSl9ZnVuY3Rpb24gZ2V0VGVtcGxhdGVDb250ZW50KGUpe3JldHVybiB2b2lkIDAhPT10ZW1wbGF0ZXNbZV0/dGVtcGxhdGVzW2VdOm9yaWdUZW1wbGF0ZVN5c3RlbS5nZXRUZW1wbGF0ZUNvbnRlbnQoZSl9a28udGVtcGxhdGVTb3VyY2VzLnN0cmluZ1RlbXBsYXRlPWZ1bmN0aW9uKGUsdCl7dGhpcy50ZW1wbGF0ZU5hbWU9ZSx0aGlzLnRlbXBsYXRlPXQsdGhpcy5fZGF0YT17fX0sa28udXRpbHMuZXh0ZW5kKGtvLnRlbXBsYXRlU291cmNlcy5zdHJpbmdUZW1wbGF0ZS5wcm90b3R5cGUse2RhdGE6ZnVuY3Rpb24oZSx0KXtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5fZGF0YVtlXTt0aGlzLl9kYXRhW2VdPXR9LHRleHQ6ZnVuY3Rpb24oZSl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMudGVtcGxhdGU7dGhpcy50ZW1wbGF0ZT1lfX0pLG1vZHVsZS5leHBvcnRzPXtpbml0OmluaXQsYWRkVGVtcGxhdGU6cHVzaFRlbXBsYXRlLHJlbW92ZVRlbXBsYXRlOnJlbW92ZVRlbXBsYXRlLGdldFRlbXBsYXRlQ29udGVudDpnZXRUZW1wbGF0ZUNvbnRlbnR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OMGNtbHVaeTEwWlcxd2JHRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SnJieUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSW05eWFXZFVaVzF3YkdGMFpWTjVjM1JsYlNJc0luSmxjWFZwY21VaUxDSjBaVzF3YkdGMFpYTWlMQ0pqY21WaGRHVlRkSEpwYm1kVVpXMXdiR0YwWlVWdVoybHVaU0lzSW5SbGJYQnNZWFJsUlc1bmFXNWxJaXdpYjNKcFp5SXNJbTFoYTJWVVpXMXdiR0YwWlZOdmRYSmpaU0lzSW5SbGJYQnNZWFJsVG1GdFpTSXNJblJsYlhCc1lYUmxVMjkxY21ObGN5SXNJbk4wY21sdVoxUmxiWEJzWVhSbElpd2ljSFZ6YUZSbGJYQnNZWFJsSWl3aWRHVnRjR3hoZEdWVVpYaDBJaXdpY21WdGIzWmxWR1Z0Y0d4aGRHVWlMQ0pwYm1sMElpd2ljMlYwVkdWdGNHeGhkR1ZGYm1kcGJtVWlMQ0p1WVhScGRtVlVaVzF3YkdGMFpVVnVaMmx1WlNJc0ltZGxkRlJsYlhCc1lYUmxRMjl1ZEdWdWRDSXNJbWxrSWl3aWRHVnRjR3hoZEdVaUxDSjBhR2x6SWl3aVgyUmhkR0VpTENKMWRHbHNjeUlzSW1WNGRHVnVaQ0lzSW5CeWIzUnZkSGx3WlNJc0ltUmhkR0VpTENKclpYa2lMQ0oyWVd4MVpTSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5SbGVIUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWVdSa1ZHVnRjR3hoZEdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNSMEZCZDBJc2IwSkJRVmhETEU5QlFYbENRU3hQUVVGWFJDeEhRVUZ6UWl4dlFrRkJXRVVzVDBGQmVVSkJMRTlCUVZkR0xFZEJRVWtzUzBGRGNFZEhMRzFDUVVGeFFrTXNVVUZCVVN4M1FrRkZOMEpETEdGQk5rSktMRk5CUVZORExESkNRVUV5UWtNc1IwRkRiRU1zU1VGQlNVTXNSVUZCVDBRc1JVRkJaVVVzYlVKQlVURkNMRTlCVUVGR0xFVkJRV1ZGTEcxQ1FVRnhRaXhUUVVGVFF5eEhRVU16UXl4WlFVRkJMRWxCUVZkTUxGVkJRVlZMTEVkQlExb3NTVUZCU1ZZc1IwRkJSMWNzWjBKQlFXZENReXhsUVVGbFJpeEZRVUZqVEN4VlFVRlZTeXhKUVVVNVJFWXNSVUZCUzBVc1NVRkhWRWdzUlVGSFZDeFRRVUZUVFN4aFFVRmhTQ3hGUVVGalNTeEhRVU5zUTFRc1ZVRkJWVXNzUjBGQlowSkpMRVZCUnpWQ0xGTkJRVk5ETEdWQlFXVk1MRkZCUVVGQkxFbEJRMWhNTEZWQlFWVkxMRWRCUTI1Q1RDeFZRVUZWU3l4UlFVRkJRU3hGUVVWV1VDeHRRa0ZCYlVKWkxHVkJRV1ZNTEVkQlNYUkRMRk5CUVZOTkxFOUJRMUJvUWl4SFFVRkhhVUlzYTBKQlFXdENXQ3d5UWtGQk1rSXNTVUZCU1U0c1IwRkJSMnRDTEhWQ1FVZDZSQ3hUUVVGVFF5eHRRa0ZCYlVKRExFZEJRekZDTEZsQlFVRXNTVUZCVjJZc1ZVRkJWV1VzUjBGRFdtWXNWVUZCVldVc1IwRkZWbXBDTEcxQ1FVRnRRbWRDTEcxQ1FVRnRRa01zUjBFeFJHcEVjRUlzUjBGQlIxY3NaMEpCUVdkQ1F5eGxRVUZwUWl4VFFVRlRSaXhGUVVGalZ5eEhRVU42UkVNc1MwRkJTMW9zWVVGQlpVRXNSVUZEY0VKWkxFdEJRVXRFTEZOQlFWZEJMRVZCUTJoQ1F5eExRVUZMUXl4VlFVZFFka0lzUjBGQlIzZENMRTFCUVUxRExFOUJRVTk2UWl4SFFVRkhWeXhuUWtGQlowSkRMR1ZCUVdWakxGZEJRMmhFUXl4TFFVRk5MRk5CUVZORExFVkJRVXRETEVkQlJXeENMRWRCUVhsQ0xFbEJRWEpDUXl4VlFVRlZReXhQUVVOYUxFOUJRVTlVTEV0QlFVdERMRTFCUVUxTExFZEJSM0JDVGl4TFFVRkxReXhOUVVGTlN5eEhRVUZQUXl4SFFVVndRa2NzUzBGQlRTeFRRVUZUU0N4SFFVVmlMRWRCUVhsQ0xFbEJRWEpDUXl4VlFVRlZReXhQUVVOYUxFOUJRVTlVTEV0QlFVdEVMRk5CUldSRExFdEJRVXRFTEZOQlFWZFJMRXRCTUVOd1Fra3NUMEZCVDBNc1UwRkRUR3hDTEV0QlFVMUJMRXRCUTA1dFFpeFpRVUZoZEVJc1lVRkRZa1VzWlVGQlowSkJMR1ZCUTJoQ1NTeHRRa0ZCYjBKQklpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDNOeVl5OXFjeTlpYVc1a2FXNW5jeTl6ZEhKcGJtY3RkR1Z0Y0d4aGRHVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLCQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsLGtvanF1aT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rb2pxdWk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua29qcXVpOm51bGwsY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGV4dGVuZFZhbHVlQWNjZXNzb3I9ZnVuY3Rpb24obyxuKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4ga28udXRpbHMuZXh0ZW5kKG4sbygpKSxufX0sb3B0aW9ucz17c2hvdzp7ZGVsYXk6NTAwfSx0cmFjazohMCxpdGVtczonW3RpdGxlXVt0aXRsZSE9XCJcIl1bdGl0bGUhPVwiIFwiXSd9O2tvLmJpbmRpbmdIYW5kbGVycy50b29sdGlwcz17aW5pdDpmdW5jdGlvbihvLG4saSxlLHQpe2lmKHZvaWQgMCE9PSQuZm4udG9vbHRpcCYmdm9pZCAwIT09a28uYmluZGluZ0hhbmRsZXJzLnRvb2x0aXApcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy50b29sdGlwLmluaXQobyxleHRlbmRWYWx1ZUFjY2Vzc29yKG4sb3B0aW9ucyksaSxlLHQpfSx1cGRhdGU6ZnVuY3Rpb24obyxuLGksZSx0KXtpZih2b2lkIDAhPT0kLmZuLnRvb2x0aXAmJnZvaWQgMCE9PWtvLmJpbmRpbmdIYW5kbGVycy50b29sdGlwKXJldHVybiBrby5iaW5kaW5nSGFuZGxlcnMudG9vbHRpcC51cGRhdGUobyxleHRlbmRWYWx1ZUFjY2Vzc29yKG4sb3B0aW9ucyksaSxlLHQpfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJ2YjJ4MGFYQnpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltdHZJaXdpZDJsdVpHOTNJaXdpWjJ4dlltRnNJaXdpSkNJc0ltcFJkV1Z5ZVNJc0ltdHZhbkYxYVNJc0ltTnZibk52YkdVaUxDSnlaWEYxYVhKbElpd2laWGgwWlc1a1ZtRnNkV1ZCWTJObGMzTnZjaUlzSW5aaGJIVmxRV05qWlhOemIzSWlMQ0p2WW1vaUxDSjFkR2xzY3lJc0ltVjRkR1Z1WkNJc0ltOXdkR2x2Ym5NaUxDSnphRzkzSWl3aVpHVnNZWGtpTENKMGNtRmpheUlzSW1sMFpXMXpJaXdpWW1sdVpHbHVaMGhoYm1Sc1pYSnpJaXdpZEc5dmJIUnBjSE1pTENKcGJtbDBJaXdpWld4bGJXVnVkQ0lzSW1Gc2JFSnBibVJwYm1kelFXTmpaWE56YjNJaUxDSmtZWFJoSWl3aVkyOXVkR1Y0ZENJc0ltWnVJaXdpZEc5dmJIUnBjQ0lzSW5Wd1pHRjBaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4SFFVRjNRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRVmRFTEVkQlFYTkNMRzlDUVVGWVJTeFBRVUY1UWtFc1QwRkJWMFlzUjBGQlNTeExRVU53UjBjc1JVRkJkVUlzYjBKQlFWaEdMRTlCUVhsQ1FTeFBRVUZsUnl4UFFVRnpRaXh2UWtGQldFWXNUMEZCZVVKQkxFOUJRV1ZGTEU5QlFVa3NTMEZETTBkRExFOUJRVFJDTEc5Q1FVRllTaXhQUVVGNVFrRXNUMEZCWlVrc1QwRkJjMElzYjBKQlFWaElMRTlCUVhsQ1FTeFBRVUZsUnl4UFFVRkpMRXRCUTJoSVF5eFJRVUZWUXl4UlFVRlJMSE5DUVVWc1FrTXNiMEpCUVhOQ0xGTkJRVk5ETEVWQlFXVkRMRWRCUTJoRUxFOUJRVThzVjBGRlRDeFBRVVJCVml4SFFVRkhWeXhOUVVGTlF5eFBRVUZQUml4RlFVRkxSQ3hMUVVOa1F5eEpRVWxRUnl4VFFVTkdReXhOUVVORlF5eE5RVUZQTEV0QlJWUkRMRTlCUVVGQkxFVkJRMEZETEUxQlFVOHNhME5CUjFScVFpeEhRVUZIYTBJc1owSkJRV2RDUXl4VlFVTnFRa01zUzBGQlRTeFRRVUZUUXl4RlFVRlRXaXhGUVVGbFlTeEZRVUZ4UWtNc1JVRkJUVU1zUjBGRGFFVXNVVUZCUVN4SlFVRlhja0lzUlVGQlJYTkNMRWRCUVVkRExHTkJRVUZCTEVsQlFXdERNVUlzUjBGQlIydENMR2RDUVVGblFsRXNVVUZIYmtVc1QwRkJUekZDTEVkQlFVZHJRaXhuUWtGQlowSlJMRkZCUVZGT0xFdEJRVXRETEVWQlFWTmlMRzlDUVVGdlFrTXNSVUZCWlVrc1UwRkJWVk1zUlVGQmNVSkRMRVZCUVUxRExFbEJSelZJUnl4UFFVRlJMRk5CUVZOT0xFVkJRVk5hTEVWQlFXVmhMRVZCUVhGQ1F5eEZRVUZOUXl4SFFVTnNSU3hSUVVGQkxFbEJRVmR5UWl4RlFVRkZjMElzUjBGQlIwTXNZMEZCUVVFc1NVRkJhME14UWl4SFFVRkhhMElzWjBKQlFXZENVU3hSUVVOdVJTeFBRVUZQTVVJc1IwRkJSMnRDTEdkQ1FVRm5RbEVzVVVGQlVVTXNUMEZCVDA0c1JVRkJVMklzYjBKQlFXOUNReXhGUVVGbFNTeFRRVUZWVXl4RlFVRnhRa01zUlVGQlRVTWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmMzSmpMMnB6TDJKcGJtUnBibWR6TDNSdmIyeDBhWEJ6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIga289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIik7a28uYmluZGluZ0hhbmRsZXJzLnZhbGlkYXRlZFZhbHVlPXtpbml0OmZ1bmN0aW9uKGUsbixpKXt2YXIgbz1uO2lmKHZvaWQgMCE9PWUucGF0dGVybil7dmFyIHQ9bmV3IFJlZ0V4cChcIl4oPzpcIitlLnBhdHRlcm4rXCIpJFwiKSxhPWtvLmNvbXB1dGVkKHtyZWFkOmZ1bmN0aW9uKCl7dmFyIGk9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShuKCkpO3JldHVybiBudWxsPT09aXx8XCJcIj09PWl8fHQudGVzdChpKT9lLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZhbGlkXCIpOmUuY2xhc3NMaXN0LmFkZChcImludmFsaWRcIiksaX0sd3JpdGU6a28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKG4oKSkmJmZ1bmN0aW9uKGkpe2tvLnNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZShlLGkpO3ZhciBvPWtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGUpO24oKShvKX0sZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmV9KTtvPWZ1bmN0aW9uKCl7cmV0dXJuIGF9fWtvLmJpbmRpbmdIYW5kbGVycy52YWx1ZS5pbml0KGUsbyxpKX19LGtvLmV4cHJlc3Npb25SZXdyaXRpbmcuX3R3b1dheUJpbmRpbmdzLnZhbGlkYXRlZFZhbHVlPSEwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5aaGJHbGtZWFJsWkMxMllXeDFaUzVxY3lKZExDSnVZVzFsY3lJNld5SnJieUlzSW5kcGJtUnZkeUlzSW1kc2IySmhiQ0lzSW1OdmJuTnZiR1VpTENKeVpYRjFhWEpsSWl3aVltbHVaR2x1WjBoaGJtUnNaWEp6SWl3aWRtRnNhV1JoZEdWa1ZtRnNkV1VpTENKcGJtbDBJaXdpWld4bGJXVnVkQ0lzSW5aaGJIVmxRV05qWlhOemIzSWlMQ0poYkd4Q2FXNWthVzVuY3lJc0ltNWxkMVpoYkhWbFFXTmpaWE56YjNJaUxDSndZWFIwWlhKdUlpd2ljbVVpTENKU1pXZEZlSEFpTENKamIyMXdkWFJsWkNJc0luSmxZV1FpTENKeVpYTWlMQ0oxZEdsc2N5SXNJblZ1ZDNKaGNFOWljMlZ5ZG1GaWJHVWlMQ0owWlhOMElpd2lZMnhoYzNOTWFYTjBJaXdpY21WdGIzWmxJaXdpWVdSa0lpd2lkM0pwZEdVaUxDSnBjMWR5YVhSbFlXSnNaVTlpYzJWeWRtRmliR1VpTENKMllXeDFaU0lzSW5ObGJHVmpkRVY0ZEdWdWMybHZibk1pTENKM2NtbDBaVlpoYkhWbElpd2lkWEJrVm1Gc2RXVWlMQ0p5WldGa1ZtRnNkV1VpTENKa2FYTndiM05sVjJobGJrNXZaR1ZKYzFKbGJXOTJaV1FpTENKbGVIQnlaWE56YVc5dVVtVjNjbWwwYVc1bklpd2lYM1IzYjFkaGVVSnBibVJwYm1keklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRWRCUVhkQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlYwUXNSMEZCYzBJc2IwSkJRVmhGTEU5QlFYbENRU3hQUVVGWFJpeEhRVUZKTEV0QlEzQkhSeXhSUVVGVlF5eFJRVUZSTEhOQ1FVZDBRa29zUjBGQlIwc3NaMEpCUVdkRFF5eG5Ra0ZEYkVORExFdEJRVTBzVTBGQlUwTXNSVUZCVTBNc1JVRkJaVU1zUjBGRGRFTXNTVUZCU1VNc1JVRkJiVUpHTEVWQlEzWkNMRkZCUVVFc1NVRkJWMFFzUlVGQlVVa3NVVUZCZVVJc1EwRkRNME1zU1VGQlNVTXNSVUZCU3l4SlFVRkpReXhQUVVGUExFOUJRVk5PTEVWQlFWRkpMRkZCUVZVc1RVRkRNME5ITEVWQlFWZG1MRWRCUVVkbExGVkJRMnBDUXl4TFFVRk5MRmRCUTB3c1NVRkJTVU1zUlVGQlRXcENMRWRCUVVkclFpeE5RVUZOUXl4cFFrRkJhVUpXTEV0QlUzQkRMRTlCVUc5Q0xFOUJRVkpSTEVkQlFYZENMRXRCUVZKQkxFZEJRV05LTEVWQlFVZFBMRXRCUVV0SUxFZEJSMnBFVkN4RlFVRlJZU3hWUVVGVlF5eFBRVUZQTEZkQlJYcENaQ3hGUVVGUllTeFZRVUZWUlN4SlFVRkpMRmRCUldoQ1RpeEhRVVZTVHl4TlFVRlBlRUlzUjBGQlIzbENMSE5DUVVGelFtaENMRTFCUVc5Q0xGTkJRVk5wUWl4SFFVVTFSREZDTEVkQlFVY3lRaXhwUWtGQmFVSkRMRmRCUVZkd1FpeEZRVUZUYTBJc1IwRkRlRU1zU1VGQlNVY3NSVUZCVnpkQ0xFZEJRVWN5UWl4cFFrRkJhVUpITEZWQlFWVjBRaXhIUVVNM1EwTXNSMEZCUVVFc1EwRkJaMEp2UWl4SlFVVnFRa1VzZVVKQlFUQkNka0lzU1VGRk0wSkhMRVZCUVcxQ0xGZEJRMnhDTEU5QlFVOUpMRWRCUjFSbUxFZEJRVWRMTEdkQ1FVRjFRbkZDTEUxQlFVVnVRaXhMUVVGTFF5eEZRVUZUUnl4RlFVRnJRa1FzUzBGSE9VUldMRWRCUVVkblF5eHZRa0ZCYjBKRExHZENRVUZuUXpOQ0xHZENRVUZCSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWlhVzVrYVc1bmN5OTJZV3hwWkdGMFpXUXRkbUZzZFdVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGwsY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpO2tvLmJpbmRpbmdIYW5kbGVycy51bmlxdWVJZD17Y3VycmVudEluZGV4OjAsaW5pdDpmdW5jdGlvbihlLG4pe3ZhciB0PWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobigpKXx8e307aWYoXCJcIj09PXQuaWQoKSl7dmFyIGksbCxyO3I9XCJrb19cIisodm9pZCAwIT09dC50eXBlP2tvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodC50eXBlKTpcImJsb2NrXCIpO2Rve2k9citcIl9cIisgKytrby5iaW5kaW5nSGFuZGxlcnMudW5pcXVlSWQuY3VycmVudEluZGV4LGw9Z2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGkpfXdoaWxlKGwpO3QuaWQoaSl9fX0sa28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5ncy51bmlxdWVJZD0hMCxrby5iaW5kaW5nSGFuZGxlcnMudmlydHVhbEF0dHI9e3VwZGF0ZTpmdW5jdGlvbihlLG4pezghPT1lLm5vZGVUeXBlJiZrby5iaW5kaW5nSGFuZGxlcnMuYXR0ci51cGRhdGUoZSxuKX19LGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3MudmlydHVhbEF0dHI9ITAsa28uYmluZGluZ0hhbmRsZXJzLnZpcnR1YWxBdHRyU3R5bGU9e3VwZGF0ZTpmdW5jdGlvbihlLG4sdCxpLGwpe2lmKDghPT1lLm5vZGVUeXBlKXt2YXIgcj1bXCJzdHlsZVwiXTsodm9pZCAwPT09bC50ZW1wbGF0ZU1vZGV8fFwid3lzaXd5Z1wiIT1sLnRlbXBsYXRlTW9kZSkmJnIucHVzaChcInJlcGxhY2Vkc3R5bGVcIik7Zm9yKHZhciBvPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobigpKSxkPTA7ZDxyLmxlbmd0aDtkKyspe3ZhciBhPXJbZF07ITE9PT1vfHxudWxsPT09b3x8dm9pZCAwPT09bz9lLnJlbW92ZUF0dHJpYnV0ZShhKTplLnNldEF0dHJpYnV0ZShhLG8udG9TdHJpbmcoKSl9fX19LGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3MudmlydHVhbEF0dHJTdHlsZT0hMCxrby5iaW5kaW5nSGFuZGxlcnMudmlydHVhbFN0eWxlPXt1cGRhdGU6ZnVuY3Rpb24oZSxuKXs4IT09ZS5ub2RlVHlwZSYma28uYmluZGluZ0hhbmRsZXJzLnN0eWxlLnVwZGF0ZShlLG4pfX0sa28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5ncy52aXJ0dWFsU3R5bGU9ITAsa28uYmluZGluZ0hhbmRsZXJzLnZpcnR1YWxIdG1sPXtpbml0OmtvLmJpbmRpbmdIYW5kbGVycy5odG1sLmluaXQsdXBkYXRlOmZ1bmN0aW9uKGUsbil7aWYoOD09PWUubm9kZVR5cGUpe3ZhciB0PWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobigpKTtpZihrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKGUpLG51bGwhPT10JiZ2b2lkIDAhPT10KXtcInN0cmluZ1wiIT10eXBlb2YgdCYmKHQ9dC50b1N0cmluZygpKTt2YXIgaT1rby51dGlscy5wYXJzZUh0bWxGcmFnbWVudCh0KTtpZihpKWZvcih2YXIgbD1lLm5leHRTaWJsaW5nLHI9MCxvPWkubGVuZ3RoO3I8bztyKyspbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpW3JdLGwpfX1lbHNlIGtvLmJpbmRpbmdIYW5kbGVycy5odG1sLnVwZGF0ZShlLG4pO3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnZpcnR1YWxIdG1sPSEwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5acGNuUjFZV3h6TG1weklsMHNJbTVoYldWeklqcGJJbXR2SWl3aWQybHVaRzkzSWl3aVoyeHZZbUZzSWl3aVkyOXVjMjlzWlNJc0luSmxjWFZwY21VaUxDSmlhVzVrYVc1blNHRnVaR3hsY25NaUxDSjFibWx4ZFdWSlpDSXNJbU4xY25KbGJuUkpibVJsZUNJc0ltbHVhWFFpTENKbGJHVnRaVzUwSWl3aWRtRnNkV1ZCWTJObGMzTnZjaUlzSW1SaGRHRWlMQ0oxZEdsc2N5SXNJblZ1ZDNKaGNFOWljMlZ5ZG1GaWJHVWlMQ0pwWkNJc0ltVnNJaXdpY0hKbFptbDRJaXdpZEhsd1pTSXNJbVJ2WTNWdFpXNTBJaXdpWjJWMFJXeGxiV1Z1ZEVKNVNXUWlMQ0oyYVhKMGRXRnNSV3hsYldWdWRITWlMQ0poYkd4dmQyVmtRbWx1WkdsdVozTWlMQ0oyYVhKMGRXRnNRWFIwY2lJc0luVndaR0YwWlNJc0ltNXZaR1ZVZVhCbElpd2lZWFIwY2lJc0luWnBjblIxWVd4QmRIUnlVM1I1YkdVaUxDSmhiR3hDYVc1a2FXNW5jMEZqWTJWemMyOXlJaXdpZG1sbGQwMXZaR1ZzSWl3aVltbHVaR2x1WjBOdmJuUmxlSFFpTENKaGRIUnljeUlzSW5SbGJYQnNZWFJsVFc5a1pTSXNJbkIxYzJnaUxDSmhkSFJ5Vm1Gc2RXVWlMQ0pwSWl3aWJHVnVaM1JvSWl3aVlYUjBjazVoYldVaUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSnpaWFJCZEhSeWFXSjFkR1VpTENKMGIxTjBjbWx1WnlJc0luWnBjblIxWVd4VGRIbHNaU0lzSW5OMGVXeGxJaXdpZG1seWRIVmhiRWgwYld3aUxDSm9kRzFzSWl3aVpXMXdkSGxPYjJSbElpd2ljR0Z5YzJWa1RtOWtaWE1pTENKd1lYSnpaVWgwYld4R2NtRm5iV1Z1ZENJc0ltVnVaRU52YlcxbGJuUk9iMlJsSWl3aWJtVjRkRk5wWW14cGJtY2lMQ0pxSWl3aWNHRnlaVzUwVG05a1pTSXNJbWx1YzJWeWRFSmxabTl5WlNJc0ltTnZiblJ5YjJ4elJHVnpZMlZ1WkdGdWRFSnBibVJwYm1keklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVWRCTEVsQlFVbEJMRWRCUVhkQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlYwUXNSMEZCYzBJc2IwSkJRVmhGTEU5QlFYbENRU3hQUVVGWFJpeEhRVUZKTEV0QlEzQkhSeXhSUVVGVlF5eFJRVUZSTEhOQ1FVVjBRa29zUjBGQlIwc3NaMEpCUVRCQ1F5eFZRVU16UWtNc1lVRkJZeXhGUVVOa1F5eExRVUZSTEZOQlFWTkRMRVZCUVZORExFZEJRM2hDTEVsQlFVbERMRVZCUVU5WUxFZEJRVWRaTEUxQlFVMURMR2xDUVVGcFFrZ3NVMEZEY2tNc1IwRkJhMElzUzBGQlpFTXNSVUZCUzBjc1MwRkJZU3hEUVVOd1FpeEpRVUZKUVN4RlFVRkpReXhGUVVGSlF5eEZRVVZhUVN4RlFVRlRMRmxCUVVFc1NVRkJaMEpNTEVWQlFVdE5MRXRCUVhWQ2FrSXNSMEZCUjFrc1RVRkJUVU1zYVVKQlFXbENSaXhGUVVGTFRTeE5RVUZSTEZOQlJUVkdMRWRCUTBWSUxFVkJRVXRGTEVWQlFWTXNUMEZCVTJoQ0xFZEJRVWRMTEdkQ1FVRXdRa01zVTBGQlJVTXNZVUZEZEVSUkxFVkJRVXRpTEU5QlFVOW5RaXhUUVVGVFF5eGxRVUZsVEN4VFFWRTNRa01zUjBGRFZFb3NSVUZCUzBjc1IwRkJSMEVzVFVGSlpHUXNSMEZCUjI5Q0xHZENRVUZuUWtNc1owSkJRVEJDWml4VlFVRkJMRVZCUlRkRFRpeEhRVUZIU3l4blFrRkJOa0pwUWl4aFFVTTVRa01zVDBGQlVTeFRRVUZUWkN4RlFVRlRReXhIUVVORExFbEJRWEpDUkN4RlFVRlJaU3hWUVVOV2VFSXNSMEZCUjBzc1owSkJRWE5DYjBJc1MwRkJSVVlzVDBGQlQyUXNSVUZCVTBNc1MwRkpha1JXTEVkQlFVZHZRaXhuUWtGQlowSkRMR2RDUVVFMlFrTXNZVUZCUVN4RlFVVm9SSFJDTEVkQlFVZExMR2RDUVVGclEzRkNMR3RDUVVOdVEwZ3NUMEZCVVN4VFFVRlRaQ3hGUVVGVFF5eEZRVUZsYVVJc1JVRkJjVUpETEVWQlFWZERMRWRCUTNaRkxFZEJRWGxDTEVsQlFYSkNjRUlzUlVGQlVXVXNVMEZCWjBJc1EwRkZNVUlzU1VGRFNVMHNSMEZCVXl4bFFVRkJMRWxCUkd0Q1JDeEZRVUZsUlN4alFVRTRSQ3hYUVVFdlFrWXNSVUZCWlVVc1pVRkZkRVZFTEVWQlFVMUZMRXRCUVVzc2FVSkJSV3BETEVsQlJFRXNTVUZCU1VNc1JVRkJXV3BETEVkQlFVZFpMRTFCUVUxRExHbENRVUZwUWtnc1MwRkRha04zUWl4RlFVRkpMRVZCUVVkQkxFVkJRVWxLTEVWQlFVMUxMRTlCUVZGRUxFbEJRVXNzUTBGRGNrTXNTVUZCU1VVc1JVRkJWMDRzUlVGQlRVa3NTVUZCUVVFc1NVRkRURVFzUjBGQmRVTXNUMEZCWkVFc1VVRkJRVUVzU1VGQmQwSkJMRVZCUlM5RWVFSXNSVUZCVVRSQ0xHZENRVUZuUWtRc1IwRkZlRUl6UWl4RlFVRlJOa0lzWVVGQllVWXNSVUZCVlVnc1JVRkJWVTBzWjBKQlMyNUVka01zUjBGQlIyOUNMR2RDUVVGblFrTXNaMEpCUVd0RFN5eHJRa0ZCUVN4RlFVVnlSREZDTEVkQlFVZExMR2RDUVVFNFFtMURMR05CUXk5Q2FrSXNUMEZCVVN4VFFVRlRaQ3hGUVVGVFF5eEhRVU5ETEVsQlFYSkNSQ3hGUVVGUlpTeFZRVU5XZUVJc1IwRkJSMHNzWjBKQlFYVkNiME1zVFVGQlJXeENMRTlCUVU5a0xFVkJRVk5ETEV0QlNXeEVWaXhIUVVGSGIwSXNaMEpCUVdkQ1F5eG5Ra0ZCT0VKdFFpeGpRVUZCTEVWQlIycEVlRU1zUjBGQlIwc3NaMEpCUVRaQ2NVTXNZVUZET1VKc1F5eExRVUZOVWl4SFFVRkhTeXhuUWtGQmMwSnpReXhMUVVGRmJrTXNTMEZEYWtObExFOUJRVkVzVTBGQlUyUXNSVUZCVTBNc1IwRkRlRUlzUjBGQmVVSXNTVUZCY2tKRUxFVkJRVkZsTEZOQlFXZENMRU5CUXpGQ0xFbEJRVWx0UWl4RlFVRlBNME1zUjBGQlIxa3NUVUZCVFVNc2FVSkJRV2xDU0N4TFFVZHlReXhIUVVSQlZpeEhRVUZIYjBJc1owSkJRV2RDZDBJc1ZVRkJWVzVETEVkQlEyWXNUMEZCVkd0RExGRkJRVUZCTEVsQlFXMUNRU3hGUVVGeFFpeERRVU4yUWl4cFFrRkJWRUVzU1VGRFZFRXNSVUZCVDBFc1JVRkJTMG9zV1VGSFpDeEpRVUZKVFN4RlFVRmpOME1zUjBGQlIxa3NUVUZCVFd0RExHdENRVUZyUWtnc1IwRkROME1zUjBGQlNVVXNSVUZGUml4SlFVUkJMRWxCUVVsRkxFVkJRV2xDZEVNc1JVRkJVWFZETEZsQlEzQkNaQ3hGUVVGSkxFVkJRVWRsTEVWQlFVbEtMRVZCUVZsV0xFOUJRVkZFTEVWQlFVbGxMRVZCUVVkbUxFbEJRemREWVN4RlFVRmxSeXhYUVVGWFF5eGhRVUZoVGl4RlFVRlpXQ3hIUVVGSllTeFRRVWszUkM5RExFZEJRVWRMTEdkQ1FVRnpRbk5ETEV0QlFVVndRaXhQUVVGUFpDeEZRVUZUUXl4SFFVazNReXhQUVVORk1FTXNORUpCUVVGQkxFdEJTVTV3UkN4SFFVRkhiMElzWjBKQlFXZENReXhuUWtGQk5rSnhRaXhoUVVGQklpd2labWxzWlNJNklpOTJZWEl2ZDNkM0wyMXZjMkZwWTI4dGJXRnpkR1Z5TDNOeVl5OXFjeTlpYVc1a2FXNW5jeTkyYVhKMGRXRnNjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciB0aW55bWNlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LnRpbnltY2U6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwudGlueW1jZTpudWxsLCQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cualF1ZXJ5OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmpRdWVyeTpudWxsLGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGwsY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpO3JlcXVpcmUoXCIuL2V2ZW50YWJsZS5qc1wiKSxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z09ySHRtbD17aW5pdDpmdW5jdGlvbihlLGksbix0LG8pe3JldHVybiB2b2lkIDA9PT1vLnRlbXBsYXRlTW9kZXx8XCJ3eXNpd3lnXCIhPW8udGVtcGxhdGVNb2RlP2tvLmJpbmRpbmdIYW5kbGVycy52aXJ0dWFsSHRtbC5pbml0KCk6a28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuaW5pdChlLGksbix0LG8pfSx1cGRhdGU6ZnVuY3Rpb24oZSxpLG4sdCxvKXtpZih2b2lkIDA9PT1vLnRlbXBsYXRlTW9kZXx8XCJ3eXNpd3lnXCIhPW8udGVtcGxhdGVNb2RlKXJldHVybiBrby5iaW5kaW5nSGFuZGxlcnMudmlydHVhbEh0bWwudXBkYXRlKGUsaSxuLHQsbyl9fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnd5c2l3eWdPckh0bWw9ITAsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdIcmVmPXtpbml0OmZ1bmN0aW9uKGUsaSxuLHQsbyl7OCE9PWUubm9kZVR5cGUmJihpKCksdm9pZCAwPT09by50ZW1wbGF0ZU1vZGV8fFwid3lzaXd5Z1wiIT1vLnRlbXBsYXRlTW9kZT9lLnNldEF0dHJpYnV0ZShcInRhcmdldFwiLFwiX25ld1wiKTp2b2lkIDAhPT1uKCkud3lzaXd5Z09ySHRtbD9lLnNldEF0dHJpYnV0ZShcImhyZWZcIixcImphdmFzY3JpcHQ6dm9pZCgwKVwiKTooZS5yZW1vdmVBdHRyaWJ1dGUoXCJocmVmXCIpLGUuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRocmVmXCIsXCIjXCIpKSl9LHVwZGF0ZTpmdW5jdGlvbihlLGksbix0LG8pe2lmKDghPT1lLm5vZGVUeXBlKXt2YXIgbD12b2lkIDA9PT1vLnRlbXBsYXRlTW9kZXx8XCJ3eXNpd3lnXCIhPW8udGVtcGxhdGVNb2RlLHM9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpKCkpO2wmJighMT09PXN8fG51bGw9PT1zfHx2b2lkIDA9PT1zP2UucmVtb3ZlQXR0cmlidXRlKFwiaHJlZlwiKTplLnNldEF0dHJpYnV0ZShcImhyZWZcIixzLnRvU3RyaW5nKCkpKX19fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnd5c2l3eWdIcmVmPSEwLGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnU3JjPXtjb252ZXJ0ZWRVcmw6ZnVuY3Rpb24oZSxpLG4sdCl7cmV0dXJuIGUrKC0xPT1lLmluZGV4T2YoXCI/XCIpP1wiP1wiOlwiJlwiKStcIm1ldGhvZD1cIitpK1wiJndpZHRoPVwiK24rKG51bGwhPT10P1wiJmhlaWdodD1cIit0OlwiXCIpfSxwbGFjZWhvbGRlclVybDpmdW5jdGlvbihlLGksbil7fSx1cGRhdGU6ZnVuY3Rpb24oZSxpLG4sdCxvKXt2YXIgbD1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGkoKSkscz1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGwuc3JjKSxyPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobC5wbGFjZWhvbGRlciksYT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGwud2lkdGgpLGQ9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShsLmhlaWdodCk7aWYoITE9PT1zfHxudWxsPT09c3x8dm9pZCAwPT09c3x8XCJcIj09PXMpXCJvYmplY3RcIj09dHlwZW9mIHImJm51bGwhPT1yP2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdTcmMucGxhY2Vob2xkZXJVcmwoci53aWR0aCxyLmhlaWdodCxyLnRleHQpKTplLnJlbW92ZUF0dHJpYnV0ZShcInNyY1wiKTtlbHNle3ZhciBnPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobC5tZXRob2QpO2d8fChnPWE+MCYmZD4wP1wiY292ZXJcIjpcInJlc2l6ZVwiKTt2YXIgdT1rby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z1NyYy5jb252ZXJ0ZWRVcmwocy50b1N0cmluZygpLGcsYSxkKTtlLnNldEF0dHJpYnV0ZShcInNyY1wiLHUpfXZvaWQgMCE9PWEmJm51bGwhPT1hP2Uuc2V0QXR0cmlidXRlKFwid2lkdGhcIixhKTplLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpLHZvaWQgMCE9PWQmJm51bGwhPT1kP2Uuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsZCk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJoZWlnaHRcIil9fSxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z0lkPXtpbml0OmZ1bmN0aW9uKGUsaSxuLHQsbyl7dm9pZCAwPT09by50ZW1wbGF0ZU1vZGV8fFwid3lzaXd5Z1wiIT1vLnRlbXBsYXRlTW9kZXx8ZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaSgpKSl9LHVwZGF0ZTpmdW5jdGlvbihlLGksbix0LG8pe3ZvaWQgMD09PW8udGVtcGxhdGVNb2RlfHxcInd5c2l3eWdcIiE9by50ZW1wbGF0ZU1vZGV8fGUuc2V0QXR0cmlidXRlKFwiaWRcIixrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGkoKSkpfX0sa28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5ncy53eXNpd3lnSWQ9ITAsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdDbGljaz17aW5pdDpmdW5jdGlvbihlLGksbix0LG8pe3ZvaWQgMD09PW8udGVtcGxhdGVNb2RlfHxcInd5c2l3eWdcIiE9by50ZW1wbGF0ZU1vZGV8fGtvLmJpbmRpbmdIYW5kbGVycy5jbGljay5pbml0KGUsaSxuLHQsbyl9fSxrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzLnd5c2l3eWdDbGljaz0hMCxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z0Nzcz17dXBkYXRlOmZ1bmN0aW9uKGUsaSxuLHQsbyl7dm9pZCAwPT09by50ZW1wbGF0ZU1vZGV8fFwid3lzaXd5Z1wiIT1vLnRlbXBsYXRlTW9kZXx8a28uYmluZGluZ0hhbmRsZXJzLmNzcy51cGRhdGUoZSxpLG4sdCxvKX19LGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3Mud3lzaXd5Z0Nzcz0hMCxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Z0ltZz17bWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcjpmdW5jdGlvbihlLGkpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXZvaWQgMCE9PWkudGVtcGxhdGVNb2RlJiZcInd5c2l3eWdcIj09aS50ZW1wbGF0ZU1vZGUsdD1lKCksbz1rby51dGlscy5wZWVrT2JzZXJ2YWJsZSh0KTtyZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh0KSx7bmFtZTpuP28uX2VkaXRUZW1wbGF0ZTpvLl90ZW1wbGF0ZSx0ZW1wbGF0ZUVuZ2luZTprby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZX19fSxpbml0OmZ1bmN0aW9uKGUsaSxuLHQsbyl7cmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVycy50ZW1wbGF0ZS5pbml0KGUsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdJbWcubWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcihpLG8pKX0sdXBkYXRlOmZ1bmN0aW9uKGUsaSxuLHQsbyl7cmV0dXJuIG89by5leHRlbmQoaSgpKSxrby5iaW5kaW5nSGFuZGxlcnMudGVtcGxhdGUudXBkYXRlKGUsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWdJbWcubWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvcihpLG8pLG4sdCxvKX19LGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3Mud3lzaXd5Z0ltZz0hMDt2YXIgX2NhdGNoaW5nRmlyZT1mdW5jdGlvbihlLGkpe3RyeXtyZXR1cm4gdGhpcy5vcmlnaW5hbEZpcmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGkpe2NvbnNvbGUud2FybihcIkNvdWdodCB0aW55bWNlIGV4Y2VwdGlvbiB3aGlsZSBmaXJpbmcgZWRpdG9yIGV2ZW50XCIsZSxpKX19O2tvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnPXtkZWJ1ZzohMSxnZXRDb250ZW50T3B0aW9uczp7Zm9ybWF0OlwicmF3XCJ9LHVzZVRhcmdldDohMSxjdXJyZW50SW5kZXg6MCxzdGFuZGFyZE9wdGlvbnM6e30saW5pdGlhbGl6aW5nQ2xhc3M6XCJ3eXNpd3lnLWxvYWRpbmdcIixyZW1vdmVTZWxlY3Rpb25PbkJsdXI6ITAsZW1wdHlDbGFzczp2b2lkIDAsZnVsbE9wdGlvbnM6e3Rvb2xiYXIxOlwiYm9sZCBpdGFsaWMgZm9yZWNvbG9yIGJhY2tjb2xvciBociBzdHlsZXNlbGVjdCByZW1vdmVmb3JtYXQgfCBsaW5rIHVubGluayB8IHBhc3RldGV4dCBjb2RlXCIscGx1Z2luczpbXCJsaW5rIGhyIHBhc3RlIGxpc3RzIHRleHRjb2xvciBjb2RlXCJdfSxpbml0OmZ1bmN0aW9uKGUsaSxuLHQsbyl7a28uYmluZGluZ0hhbmRsZXJzLmZvY3VzYWJsZS5pbml0KGUpO3ZhciBsLHM9a28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuZGVidWcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUuZGVidWc7a28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcudXNlVGFyZ2V0P2w9XCJAdGFyZ2V0X1wiKyArK2tvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmN1cnJlbnRJbmRleDoobD1lLmdldEF0dHJpYnV0ZShcImlkXCIpKXx8KGw9XCJ3eXNpd3lnX1wiKyArK2tvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmN1cnJlbnRJbmRleCxlLnNldEF0dHJpYnV0ZShcImlkXCIsbCkpLGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmluaXRpYWxpemluZ0NsYXNzJiZlLmNsYXNzTGlzdC5hZGQoa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuaW5pdGlhbGl6aW5nQ2xhc3MpLGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2soZSxmdW5jdGlvbigpe3MmJmNvbnNvbGUuZGVidWcoXCJFZGl0b3IgZm9yIHNlbGVjdG9yXCIsbCxcImlzIGJlaW5nIHJlbW92ZWQuLi5cIiksdGlueW1jZS5yZW1vdmUoXCIjXCIrZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkscyYmY29uc29sZS5kZWJ1ZyhcIkVkaXRvciBmb3Igc2VsZWN0b3JcIixsLFwiaGFzIGJlZW4gcmVtb3ZlZC5cIil9KTt2YXIgcj1pKCk7aWYoIWtvLmlzT2JzZXJ2YWJsZShyKSl0aHJvd1wiV3lzaXd5ZyBiaW5kaW5nIGNhbGxlZCB3aXRoIG5vbiBvYnNlcnZhYmxlXCI7aWYoOD09PWUubm9kZVR5cGUpdGhyb3dcIld5c2l3eWcgYmluZGluZyBjYWxsZWQgb24gdmlydHVhbCBub2RlLCBpZ25vcmluZy4uLi5cIitlLmlubmVySFRNTDt2YXIgYSxkPVwiRElWXCI9PWUudGFnTmFtZXx8XCJURFwiPT1lLnRhZ05hbWUsZz0hMSx1PSExLHc9e2lubGluZTohMCxoaWRkZW5faW5wdXQ6ITEscGx1Z2luczpbXCJwYXN0ZVwiXSx0b29sYmFyMTpcImJvbGQgaXRhbGljXCIsdG9vbGJhcjI6XCJcIixwcmV2aWV3X3N0eWxlczohMSxwYXN0ZV9hc190ZXh0OiEwLGxhbmd1YWdlOlwiZW5cIixzY2hlbWE6XCJodG1sNVwiLGV4dGVuZGVkX3ZhbGlkX2VsZW1lbnRzOlwic3Ryb25nL2IsZW0vaSwqWypdXCIsbWVudWJhcjohMSxza2luOlwiZ3JheS1mbGF0XCIsZm9yY2VkX3Jvb3RfYmxvY2s6ZD9cInBcIjpcIlwiLGluaXRfaW5zdGFuY2VfY2FsbGJhY2s6ZnVuY3Rpb24oaSl7aWYocyYmY29uc29sZS5kZWJ1ZyhcIkVkaXRvciBmb3Igc2VsZWN0b3JcIixsLFwiaXMgbm93IGluaXRpYWxpemVkLlwiKSxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5pbml0aWFsaXppbmdDbGFzcyYmZS5jbGFzc0xpc3QucmVtb3ZlKGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmluaXRpYWxpemluZ0NsYXNzKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmRlYnVnKXt2YXIgbj1lLmN1cnJlbnRTdHlsZT9lLmN1cnJlbnRTdHlsZS5kaXNwbGF5Omdsb2JhbC5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCkuZGlzcGxheTtcImlubGluZVwiPT1uJiZjb25zb2xlLmRlYnVnKFwiSW5pdGlhbGl6aW5nIGFuIGVkaXRvciBvbiBhbiBpbmxpbmUgZWxlbWVudDogcGxlYXNlIG5vdGUgdGhhdCB3aGlsZSBpdCBtYXkgd29yaywgdGhpcyBpcyB1bnN1cHBvcnRlZCBiZWNhdXNlIG9mIGEgbXVsdGl0dWRlIG9mIGJyb3dzZXIgaXNzdWVzXCIsZS50YWdOYW1lLG4sbCl9fSxzZXR1cDpmdW5jdGlvbihpKXtzJiZjb25zb2xlLmRlYnVnKFwiRWRpdG9yIGZvciBzZWxlY3RvclwiLGwsXCJpcyBub3cgaW4gdGhlIHNldHVwIHBoYXNlLlwiKTt2YXIgbj1mdW5jdGlvbigpezA9PShlLnRleHRDb250ZW50fHxlLmlubmVyVGV4dHx8XCJcIikudHJpbSgpLmxlbmd0aD9lLmNsYXNzTGlzdC5hZGQoa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuZW1wdHlDbGFzcyk6ZS5jbGFzc0xpc3QucmVtb3ZlKGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLmVtcHR5Q2xhc3MpfTtpLm9uKFwiY2hhbmdlIHJlZG8gdW5kb1wiLGZ1bmN0aW9uKCl7aWYoIWcpdHJ5e3U9ITAscihpLmdldENvbnRlbnQoa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuZ2V0Q29udGVudE9wdGlvbnMpKX1jYXRjaChlKXtjb25zb2xlLndhcm4oXCJVbmV4cGVjdGVkIGVycm9yIHNldHRpbmcgY29udGVudCB2YWx1ZSBmb3JcIixsLGUpfWZpbmFsbHl7dT0hMX1rby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5lbXB0eUNsYXNzJiZuKCl9KSxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5lbXB0eUNsYXNzJiZpLm9uKFwia2V5dXBcIixmdW5jdGlvbigpe24oKX0pLGkub24oXCJmb2N1c1wiLGZ1bmN0aW9uKCl7aS5ub2RlQ2hhbmdlZCgpLGkuZ2V0RWxlbWVudCgpLmNsaWNrKCl9KSxrby5iaW5kaW5nSGFuZGxlcnMud3lzaXd5Zy5yZW1vdmVTZWxlY3Rpb25PbkJsdXImJmkub24oXCJibHVyXCIsZnVuY3Rpb24oZSl7Z2xvYmFsLmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpfSksaS5vbihcIkJlZm9yZVNldENvbnRlbnRcIixmdW5jdGlvbihlKXtlLmluaXRpYWwmJihlLmZvcm1hdD1cInJhd1wiKX0pLHZvaWQgMD09PWkub3JpZ2luYWxGaXJlJiYoaS5vcmlnaW5hbEZpcmU9aS5maXJlLGkuZmlyZT1fY2F0Y2hpbmdGaXJlKSxhPWl9fTtyZXR1cm4ga28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcudXNlVGFyZ2V0P3cudGFyZ2V0PWU6dy5zZWxlY3Rvcj1cIiNcIitsLGtvLnV0aWxzLmV4dGVuZCh3LGtvLmJpbmRpbmdIYW5kbGVycy53eXNpd3lnLnN0YW5kYXJkT3B0aW9ucyksZCYma28udXRpbHMuZXh0ZW5kKHcsa28uYmluZGluZ0hhbmRsZXJzLnd5c2l3eWcuZnVsbE9wdGlvbnMpLGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cyYmY29uc29sZS5kZWJ1ZyhcIkVkaXRvciBmb3Igc2VsZWN0b3JcIixsLFwiaXMgYmVpbmcgaW5pemlhbGl6ZWQgLi4uXCIpO3ZhciBlPXRpbnltY2UuaW5pdCh3KTtzJiZjb25zb2xlLmRlYnVnKFwiRWRpdG9yIGZvciBzZWxlY3RvclwiLGwsXCJpbml0IGhhcyBqdXN0IGJlZW4gY2FsbGVkIHJldHVybmluZ1wiLGUpLGUudGhlbihmdW5jdGlvbigpe3MmJmNvbnNvbGUuZGVidWcoXCJFZGl0b3IgZm9yIHNlbGVjdG9yXCIsbCxcImluaXQgcHJvbWlzZSBoYXMgcmVzb2x2ZWQuXCIpfSxmdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIkVkaXRvciBmb3Igc2VsZWN0b3JcIixsLFwiaW5pdCBwcm9taXNlIGhhcyBmYWlsZWQuXCIsZSl9KX0pLGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCl7dmFyIG49a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpKCkpO2lmKCF1KXt0cnl7Zz0hMCx2b2lkIDAhPT1hP2Euc2V0Q29udGVudChuLHtmb3JtYXQ6XCJyYXdcIn0pOmtvLnV0aWxzLnNldEh0bWwoZSxuKX1jYXRjaChlKXtjb25zb2xlLndhcm4oXCJFeGNlcHRpb24gc2V0dGluZyBjb250ZW50IHRvIGVkaXRhYmxlIGVsZW1lbnRcIix0eXBlb2YgYSxlKX1nPSExfX0sbnVsbCx7ZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOmV9KSx7Y29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ITB9fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQ1YzJsM2VXZHpMbXB6SWwwc0ltNWhiV1Z6SWpwYkluUnBibmx0WTJVaUxDSjNhVzVrYjNjaUxDSm5iRzlpWVd3aUxDSWtJaXdpYWxGMVpYSjVJaXdpYTI4aUxDSmpiMjV6YjJ4bElpd2ljbVZ4ZFdseVpTSXNJbUpwYm1ScGJtZElZVzVrYkdWeWN5SXNJbmQ1YzJsM2VXZFBja2gwYld3aUxDSnBibWwwSWl3aVpXeGxiV1Z1ZENJc0luWmhiSFZsUVdOalpYTnpiM0lpTENKaGJHeENhVzVrYVc1bmMwRmpZMlZ6YzI5eUlpd2lkbWxsZDAxdlpHVnNJaXdpWW1sdVpHbHVaME52Ym5SbGVIUWlMQ0owWlcxd2JHRjBaVTF2WkdVaUxDSjJhWEowZFdGc1NIUnRiQ0lzSW5kNWMybDNlV2NpTENKMWNHUmhkR1VpTENKMmFYSjBkV0ZzUld4bGJXVnVkSE1pTENKaGJHeHZkMlZrUW1sdVpHbHVaM01pTENKM2VYTnBkM2xuU0hKbFppSXNJbTV2WkdWVWVYQmxJaXdpYzJWMFFYUjBjbWxpZFhSbElpd2ljbVZ0YjNabFFYUjBjbWxpZFhSbElpd2lhWE5PYjNSWGVYTnBkM2xuVFc5a1pTSXNJbUYwZEhKV1lXeDFaU0lzSW5WMGFXeHpJaXdpZFc1M2NtRndUMkp6WlhKMllXSnNaU0lzSW5SdlUzUnlhVzVuSWl3aWQzbHphWGQ1WjFOeVl5SXNJbU52Ym5abGNuUmxaRlZ5YkNJc0luTnlZeUlzSW0xbGRHaHZaQ0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpYVc1a1pYaFBaaUlzSW5Cc1lXTmxhRzlzWkdWeVZYSnNJaXdpY0d4M2FXUjBhQ0lzSW5Cc2FHVnBaMmgwSWl3aWNHeDBaWGgwSWl3aWRtRnNkV1VpTENKd2JHRmpaV2h2YkdSbGNsWmhiSFZsSWl3aWNHeGhZMlZvYjJ4a1pYSWlMQ0owWlhoMElpd2lkM2x6YVhkNVowbGtJaXdpZDNsemFYZDVaME5zYVdOcklpd2lZMnhwWTJzaUxDSjNlWE5wZDNsblEzTnpJaXdpWTNOeklpd2lkM2x6YVhkNVowbHRaeUlzSW0xaGEyVlVaVzF3YkdGMFpWWmhiSFZsUVdOalpYTnpiM0lpTENKcGMxZDVjMmwzZVdkTmIyUmxJaXdpYlc5a1pXeFdZV3gxWlNJc0luVnVkM0poY0hCbFpGWmhiSFZsSWl3aWNHVmxhMDlpYzJWeWRtRmliR1VpTENKdVlXMWxJaXdpWDJWa2FYUlVaVzF3YkdGMFpTSXNJbDkwWlcxd2JHRjBaU0lzSW5SbGJYQnNZWFJsUlc1bmFXNWxJaXdpYm1GMGFYWmxWR1Z0Y0d4aGRHVkZibWRwYm1VaUxDSnBibk4wWVc1alpTSXNJbUZzYkVKcGJtUnBibWR6SWl3aWRHVnRjR3hoZEdVaUxDSmxlSFJsYm1RaUxDSmZZMkYwWTJocGJtZEdhWEpsSWl3aVpYWmxiblFpTENKaGNtZHpJaXdpZEdocGN5SXNJbTl5YVdkcGJtRnNSbWx5WlNJc0ltRndjR3g1SWl3aVlYSm5kVzFsYm5Seklpd2laU0lzSW5kaGNtNGlMQ0prWldKMVp5SXNJbWRsZEVOdmJuUmxiblJQY0hScGIyNXpJaXdpWm05eWJXRjBJaXdpZFhObFZHRnlaMlYwSWl3aVkzVnljbVZ1ZEVsdVpHVjRJaXdpYzNSaGJtUmhjbVJQY0hScGIyNXpJaXdpYVc1cGRHbGhiR2w2YVc1blEyeGhjM01pTENKeVpXMXZkbVZUWld4bFkzUnBiMjVQYmtKc2RYSWlMQ0psYlhCMGVVTnNZWE56SWl3aVpuVnNiRTl3ZEdsdmJuTWlMQ0owYjI5c1ltRnlNU0lzSW5Cc2RXZHBibk1pTENKbWIyTjFjMkZpYkdVaUxDSnpaV3hsWTNSdmNrbGtJaXdpWkc5RVpXSjFaeUlzSW1kbGRFRjBkSEpwWW5WMFpTSXNJbU5zWVhOelRHbHpkQ0lzSW1Ga1pDSXNJbVJ2YlU1dlpHVkVhWE53YjNOaGJDSXNJbUZrWkVScGMzQnZjMlZEWVd4c1ltRmpheUlzSW5KbGJXOTJaU0lzSW1selQySnpaWEoyWVdKc1pTSXNJbWx1Ym1WeVNGUk5UQ0lzSW5Sb2FYTkZaR2wwYjNJaUxDSm1kV3hzUldScGRHOXlJaXdpZEdGblRtRnRaU0lzSW1selUzVmljMk55YVdKbGNrTm9ZVzVuWlNJc0ltbHpSV1JwZEc5eVEyaGhibWRsSWl3aWIzQjBhVzl1Y3lJc0ltbHViR2x1WlNJc0ltaHBaR1JsYmw5cGJuQjFkQ0lzSW5SdmIyeGlZWEl5SWl3aWNISmxkbWxsZDE5emRIbHNaWE1pTENKd1lYTjBaVjloYzE5MFpYaDBJaXdpYkdGdVozVmhaMlVpTENKelkyaGxiV0VpTENKbGVIUmxibVJsWkY5MllXeHBaRjlsYkdWdFpXNTBjeUlzSW0xbGJuVmlZWElpTENKemEybHVJaXdpWm05eVkyVmtYM0p2YjNSZllteHZZMnNpTENKcGJtbDBYMmx1YzNSaGJtTmxYMk5oYkd4aVlXTnJJaXdpWldScGRHOXlJaXdpWld4bGJXVnVkRk4wZVd4bElpd2lZM1Z5Y21WdWRGTjBlV3hsSWl3aVpHbHpjR3hoZVNJc0ltZGxkRU52YlhCMWRHVmtVM1I1YkdVaUxDSnpaWFIxY0NJc0ltVnRjSFI1UTJ4aGMzTklZVzVrYkdWeUlpd2lkR1Y0ZEVOdmJuUmxiblFpTENKcGJtNWxjbFJsZUhRaUxDSjBjbWx0SWl3aWJHVnVaM1JvSWl3aWIyNGlMQ0puWlhSRGIyNTBaVzUwSWl3aWJtOWtaVU5vWVc1blpXUWlMQ0puWlhSRmJHVnRaVzUwSWl3aVoyVjBVMlZzWldOMGFXOXVJaXdpY21WdGIzWmxRV3hzVW1GdVoyVnpJaXdpYVc1cGRHbGhiQ0lzSW1acGNtVWlMQ0owWVhKblpYUWlMQ0p6Wld4bFkzUnZjaUlzSW5ObGRGUnBiV1Z2ZFhRaUxDSnlaWE1pTENKMGFHVnVJaXdpWm1GcGJIVnlaU0lzSW14dlp5SXNJbU52YlhCMWRHVmtJaXdpWTI5dWRHVnVkQ0lzSW5ObGRFTnZiblJsYm5RaUxDSnpaWFJJZEcxc0lpd2laR2x6Y0c5elpWZG9aVzVPYjJSbFNYTlNaVzF2ZG1Wa0lpd2lZMjl1ZEhKdmJITkVaWE5qWlc1a1lXNTBRbWx1WkdsdVozTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUjBFc1NVRkJTVUVzVVVGQk5rSXNiMEpCUVZoRExFOUJRWGxDUVN4UFFVRm5Ra1FzVVVGQmMwSXNiMEpCUVZoRkxFOUJRWGxDUVN4UFFVRm5Ra1lzVVVGQlNTeExRVU51U0Vjc1JVRkJkVUlzYjBKQlFWaEdMRTlCUVhsQ1FTeFBRVUZsUnl4UFFVRnpRaXh2UWtGQldFWXNUMEZCZVVKQkxFOUJRV1ZGTEU5QlFVa3NTMEZETTBkRExFZEJRWGRDTEc5Q1FVRllTaXhQUVVGNVFrRXNUMEZCVjBrc1IwRkJjMElzYjBKQlFWaElMRTlCUVhsQ1FTeFBRVUZYUnl4SFFVRkpMRXRCUTNCSFF5eFJRVUZWUXl4UlFVRlJMSE5DUVVOMFFrRXNVVUZCVVN4clFrRkZVa1lzUjBGQlIwY3NaMEpCUVdkQ1F5eGxRVU5xUWtNc1MwRkJUU3hUUVVGVFF5eEZRVUZUUXl4RlFVRmxReXhGUVVGeFFrTXNSVUZCVjBNc1IwRkhja1VzV1VGQlFTeEpRVVlyUWtFc1JVRkJaVU1zWTBGQk9FUXNWMEZCTDBKRUxFVkJRV1ZETEdGQlIyNUdXQ3hIUVVGSFJ5eG5Ra0ZCTmtKVExGbEJRVVZRTEU5QlJXeERUQ3hIUVVGSFJ5eG5Ra0ZCWjBKVkxGRkJRVkZTTEV0QlFVdERMRVZCUVZORExFVkJRV1ZETEVWQlFYRkNReXhGUVVGWFF5eEpRVVZ1UjBrc1QwRkJVU3hUUVVGVFVpeEZRVUZUUXl4RlFVRmxReXhGUVVGeFFrTXNSVUZCVjBNc1IwRkZka1VzVVVGQlFTeEpRVVFyUWtFc1JVRkJaVU1zWTBGQk9FUXNWMEZCTDBKRUxFVkJRV1ZETEdGQlJURkdMRTlCUVU5WUxFZEJRVWRITEdkQ1FVRTJRbE1zV1VGQlJVVXNUMEZCVDFJc1JVRkJVME1zUlVGQlpVTXNSVUZCY1VKRExFVkJRVmRETEV0QlN6bEhWaXhIUVVGSFpTeG5Ra0ZCWjBKRExHZENRVUVyUWxvc1pVRkJRU3hGUVVWc1JFb3NSMEZCUjBjc1owSkJRV2RDWXl4aFFVTnFRbG9zUzBGQlRTeFRRVUZUUXl4RlFVRlRReXhGUVVGbFF5eEZRVUZ4UWtNc1JVRkJWME1zUjBGRE5VTXNTVUZCY2tKS0xFVkJRVkZaTEZkQlEwWllMRk5CU1ZJc1NVRkdLMEpITEVWQlFXVkRMR05CUVRoRUxGZEJRUzlDUkN4RlFVRmxReXhoUVVjeFJrd3NSVUZCVVdFc1lVRkJZU3hUUVVGVkxHRkJRVUVzU1VGUllsZ3NTVUZEUzBvc1kwRkRja0pGTEVWQlFWRmhMR0ZCUVdFc1QwRkJVU3gxUWtGRk4wSmlMRVZCUVZGakxHZENRVUZuUWl4UlFVTjRRbVFzUlVGQlVXRXNZVUZCWVN4bFFVRm5RaXhSUVVzM1Ewd3NUMEZCVVN4VFFVRlRVaXhGUVVGVFF5eEZRVUZsUXl4RlFVRnhRa01zUlVGQlYwTXNSMEZEZGtVc1IwRkJlVUlzU1VGQmNrSktMRVZCUVZGWkxGTkJRV2RDTEVOQlF6RkNMRWxCUVVsSExFOUJRVUZCTEVsQlFUSkNXQ3hGUVVGbFF5eGpRVUU0UkN4WFFVRXZRa1FzUlVGQlpVTXNZVUZGZUVaWExFVkJRVmwwUWl4SFFVRkhkVUlzVFVGQlRVTXNhVUpCUVdsQ2FrSXNTMEZEZEVOakxFdEJRVUZCTEVsQlEwZERMRWRCUVhWRExFOUJRV1JCTEZGQlFVRkJMRWxCUVhkQ1FTeEZRVU53UkdoQ0xFVkJRVkZqTEdkQ1FVRm5RaXhSUVVWNFFtUXNSVUZCVVdFc1lVRkJZU3hQUVVGUlJ5eEZRVUZWUnl4blFrRkxha1I2UWl4SFFVRkhaU3huUWtGQlowSkRMR2RDUVVFMlFrTXNZVUZCUVN4RlFVVm9SR3BDTEVkQlFVZEhMR2RDUVVGblFuVkNMRmxCUTJwQ1F5eGhRVUZqTEZOQlFWTkRMRVZCUVV0RExFVkJRVkZETEVWQlFVOURMRWRCUjNwRExFOUJSRlZJTEVsQlJIRkRMRWRCUVhKQ1FTeEZRVUZKU1N4UlFVRlJMRXRCUVdFc1NVRkJUU3hMUVVOdVFpeFZRVUZaU0N4RlFVRlRMRlZCUVZsRExFZEJRVzlDTEU5QlFWaERMRVZCUVd0Q0xGZEJRV0ZCTEVWQlFWTXNTMEZITVVoRkxHVkJRV2RDTEZOQlFWTkRMRVZCUVZORExFVkJRVlZETEV0QlRUVkRkRUlzVDBGQlVTeFRRVUZUVWl4RlFVRlRReXhGUVVGbFF5eEZRVUZ4UWtNc1JVRkJWME1zUjBGRGRrVXNTVUZCU1RKQ0xFVkJRVkZ5UXl4SFFVRkhkVUlzVFVGQlRVTXNhVUpCUVdsQ2FrSXNTMEZEYkVObExFVkJRVmwwUWl4SFFVRkhkVUlzVFVGQlRVTXNhVUpCUVdsQ1lTeEZRVUZOVkN4TFFVTTFRMVVzUlVGQmJVSjBReXhIUVVGSGRVSXNUVUZCVFVNc2FVSkJRV2xDWVN4RlFVRk5SU3hoUVVOdVJGUXNSVUZCVVRsQ0xFZEJRVWQxUWl4TlFVRk5ReXhwUWtGQmFVSmhMRVZCUVUxUUxFOUJRM2hEUXl4RlFVRlRMMElzUjBGQlIzVkNMRTFCUVUxRExHbENRVUZwUW1Fc1JVRkJUVTRzVVVGRE4wTXNTVUZCUVN4SlFVRkxWQ3hIUVVGMVF5eFBRVUZrUVN4UlFVRkJRU3hKUVVGM1FrRXNSMEZCTWtNc1MwRkJaRUVzUlVGRGJFUXNhVUpCUVhCQ1owSXNSMEZCY1VRc1QwRkJja0pCTEVWQlFUSkNhRU1zUlVGQlVXRXNZVUZCWVN4TlFVRlBia0lzUjBGQlIwY3NaMEpCUVdkQ2RVSXNWMEZCVjA4c1pVRkJaVXNzUlVGQmFVSlNMRTFCUVU5UkxFVkJRV2xDVUN4UFFVRlJUeXhGUVVGcFFrVXNUMEZETlUxc1F5eEZRVUZSWXl4blFrRkJaMElzVjBGRGVFSXNRMEZEVEN4SlFVRkpVeXhGUVVGVE4wSXNSMEZCUjNWQ0xFMUJRVTFETEdsQ1FVRnBRbUVzUlVGQlRWSXNVVUZEZUVOQkxFbEJRVkZCTEVWQlFWTkRMRVZCUVZFc1IwRkJTME1zUlVGQlV5eEZRVUZKTEZGQlFWVXNWVUZETVVRc1NVRkJTVWdzUlVGQlRUVkNMRWRCUVVkSExHZENRVUZuUW5WQ0xGZEJRVmRETEdGQlFXRk1MRVZCUVZWSExGZEJRVmxKTEVWQlFWRkRMRVZCUVU5RExFZEJRekZHZWtJc1JVRkJVV0VzWVVGQllTeE5RVUZQVXl4UlFVRkJRU3hKUVVWdVFrVXNSMEZCYlVNc1QwRkJWa0VzUlVGQlowSjRRaXhGUVVGUllTeGhRVUZoTEZGQlFWTlhMRWRCUXpkRmVFSXNSVUZCVVdNc1owSkJRV2RDTEdOQlFVRXNTVUZEYkVKWExFZEJRWEZETEU5QlFWaEJMRVZCUVdsQ2VrSXNSVUZCVVdFc1lVRkJZU3hUUVVGVldTeEhRVU5vUm5wQ0xFVkJRVkZqTEdkQ1FVRm5RaXhaUVVscVEzQkNMRWRCUVVkSExHZENRVUZuUW5ORExGZEJRMnBDY0VNc1MwRkJUU3hUUVVGVFF5eEZRVUZUUXl4RlFVRmxReXhGUVVGeFFrTXNSVUZCVjBNc1VVRkJRVUVzU1VGRGRFTkJMRVZCUVdWRExHTkJRVGhFTEZkQlFTOUNSQ3hGUVVGbFF5eGpRVVV4Umt3c1JVRkJVV0VzWVVGQllTeExRVUZOYmtJc1IwRkJSM1ZDTEUxQlFVMURMR2xDUVVGcFFtcENMRTlCUlhwRVR5eFBRVUZSTEZOQlFWTlNMRVZCUVZORExFVkJRV1ZETEVWQlFYRkNReXhGUVVGWFF5eFJRVUZCUVN4SlFVTjRRMEVzUlVGQlpVTXNZMEZCT0VRc1YwRkJMMEpFTEVWQlFXVkRMR05CUlRGR1RDeEZRVUZSWVN4aFFVRmhMRXRCUVUxdVFpeEhRVUZIZFVJc1RVRkJUVU1zYVVKQlFXbENha0lzVVVGSE0wUlFMRWRCUVVkbExHZENRVUZuUWtNc1owSkJRVEpDZVVJc1YwRkJRU3hGUVVjNVEzcERMRWRCUVVkSExHZENRVUZuUW5WRExHTkJRMnBDY2tNc1MwRkJUU3hUUVVGVFF5eEZRVUZUUXl4RlFVRmxReXhGUVVGeFFrTXNSVUZCVjBNc1VVRkJRVUVzU1VGRGRFTkJMRVZCUVdWRExHTkJRVGhFTEZkQlFTOUNSQ3hGUVVGbFF5eGpRVVV4Umxnc1IwRkJSMGNzWjBKQlFXZENkME1zVFVGQlRYUkRMRXRCUVV0RExFVkJRVk5ETEVWQlFXVkRMRVZCUVhGQ1F5eEZRVUZYUXl4TFFVYzFSbFlzUjBGQlIyVXNaMEpCUVdkQ1F5eG5Ra0ZCT0VJd1FpeGpRVUZCTEVWQlIycEVNVU1zUjBGQlIwY3NaMEpCUVdkQ2VVTXNXVUZEYWtJNVFpeFBRVUZSTEZOQlFWTlNMRVZCUVZORExFVkJRV1ZETEVWQlFYRkNReXhGUVVGWFF5eFJRVUZCUVN4SlFVTjRRMEVzUlVGQlpVTXNZMEZCT0VRc1YwRkJMMEpFTEVWQlFXVkRMR05CUlRGR1dDeEhRVUZIUnl4blFrRkJaMEl3UXl4SlFVRkpMMElzVDBGQlQxSXNSVUZCVTBNc1JVRkJaVU1zUlVGQmNVSkRMRVZCUVZkRExFdEJSelZHVml4SFFVRkhaU3huUWtGQlowSkRMR2RDUVVFMFFqUkNMRmxCUVVFc1JVRkZMME0xUXl4SFFVRkhSeXhuUWtGQlowSXlReXhaUVVOcVFrTXNNRUpCUVRKQ0xGTkJRVk40UXl4RlFVRmxSeXhIUVVOcVJDeFBRVUZQTEZkQlEwd3NTVUZCU1hORExFOUJRVUZCTEVsQlFYZENkRU1zUlVGQlpVTXNZMEZCT0VRc1YwRkJMMEpFTEVWQlFXVkRMR0ZCUlhKR2MwTXNSVUZCWVRGRExFbEJRMll5UXl4RlFVRnBRbXhFTEVkQlFVZDFRaXhOUVVGTk5FSXNaVUZCWlVZc1IwRkxNME1zVDBGR1FXcEVMRWRCUVVkMVFpeE5RVUZOUXl4cFFrRkJhVUo1UWl4SlFVZDRRa2NzUzBGQlVVb3NSVUZCWjBKRkxFVkJRVGhDUnl4alFVRkpTQ3hGUVVFd1Fra3NWVUZEY0VaRExHVkJRV3RDZGtRc1IwRkJSM2RFTEhGQ1FVRnhRa01zV1VGSmFFUndSQ3hMUVVGUkxGTkJRVk5ETEVWQlFWTkRMRVZCUVdWdFJDeEZRVUZoYWtRc1JVRkJWME1zUjBGREwwUXNUMEZCVDFZc1IwRkJSMGNzWjBKQlFUQkNkMFFzVTBGQlVYUkVMRXRCUVVWRExFVkJRVk5PTEVkQlFVZEhMR2RDUVVFMFFqSkRMRmRCUVVWRExEQkNRVUV3UW5oRExFVkJRV1ZITEV0QlJXNUpTU3hQUVVGVkxGTkJRVk5TTEVWQlFWTkRMRVZCUVdWdFJDeEZRVUZoYWtRc1JVRkJWME1zUjBGRmFrVXNUMEZFUVVFc1JVRkJhVUpCTEVWQlFYVkNhMFFzVDBGQlJYSkVMRXRCUTI1RFVDeEhRVUZIUnl4blFrRkJNRUozUkN4VFFVRlZOME1zVDBGQlJWSXNSVUZCVTA0c1IwRkJSMGNzWjBKQlFUUkNNa01zVjBGQlJVTXNNRUpCUVRCQ2VFTXNSVUZCWlVjc1IwRkJhVUpuUkN4RlFVRmhha1FzUlVGQlYwTXNTMEZIYUV4V0xFZEJRVWRsTEdkQ1FVRm5Ra01zWjBKQlFUUkNPRUlzV1VGQlFTeEZRVWN2UXl4SlFVRkpaU3hqUVVGblFpeFRRVUZUUXl4RlFVRlBReXhIUVVOc1F5eEpRVU5GTEU5QlFVOURMRXRCUVV0RExHRkJRV0ZETEUxQlFVMUdMRXRCUVUxSExGZEJRM0pETEUxQlFVOURMRWRCUTFCdVJTeFJRVUZSYjBVc1MwRkJTeXh4UkVGQmMwUlFMRVZCUVU5TkxFdEJVVGxGY0VVc1IwRkJSMGNzWjBKQlFXZENWU3hUUVVOcVFubEVMRTlCUVVGQkxFVkJRMEZETEcxQ1FVRnhRa01zVDBGQlVTeFBRVU0zUWtNc1YwRkJRVUVzUlVGRFFVTXNZVUZCWXl4RlFVTmtReXh0UWtGRlFVTXNhMEpCUVcxQ0xHdENRVU51UWtNc2RVSkJRVUZCTEVWQlIwRkRMR2RDUVVGQlFTeEZRVU5CUXl4aFFVTkZReXhUUVVGVkxEWkdRVWRXUXl4VFFVRlZMSFZEUVU5YU5VVXNTMEZCVFN4VFFVRlRReXhGUVVGVFF5eEZRVUZsUXl4RlFVRnhRa01zUlVGQlYwTXNSMEZGY2tWV0xFZEJRVWRITEdkQ1FVRm5RaXRGTEZWQlFWVTNSU3hMUVVGTFF5eEhRVWRzUXl4SlFVVkpOa1VzUlVGR1FVTXNSVUZCVlhCR0xFZEJRVWRITEdkQ1FVRm5RbFVzVVVGQlVYbEVMRTlCUVdsRExHMUNRVUZxUW5KRkxGRkJRVkZ4UlN4TlFVYzNSSFJGTEVkQlFVZEhMR2RDUVVGblFsVXNVVUZCVVRSRUxGVkJRemRDVlN4RlFVRmhMR05CUVdkQ2JrWXNSMEZCUjBjc1owSkJRWGxDVlN4UlFVRkZOa1FzWTBGRk0wUlRMRVZCUVdFM1JTeEZRVUZSSzBVc1lVRkJZU3hUUVVWb1EwWXNSVUZCWVN4alFVRm5RbTVHTEVkQlFVZEhMR2RDUVVGNVFsVXNVVUZCUlRaRUxHRkJRek5FY0VVc1JVRkJVV0VzWVVGQllTeExRVUZOWjBVc1NVRkpNMEp1Uml4SFFVRkhSeXhuUWtGQlowSlZMRkZCUVZFclJDeHRRa0ZETjBKMFJTeEZRVUZSWjBZc1ZVRkJWVU1zU1VGQlNYWkdMRWRCUVVkSExHZENRVUZuUWxVc1VVRkJVU3RFTEcxQ1FVZHVSRFZGTEVkQlFVZDFRaXhOUVVGTmFVVXNaMEpCUVdkQ1F5eHRRa0ZCYlVKdVJpeEZRVUZUTEZkQlF5OURPRVVzUjBGQlUyNUdMRkZCUVZGeFJTeE5RVUZOTEhOQ1FVRjFRbUVzUlVGQldTeDFRa0ZET1VSNFJpeFJRVUZSSzBZc1QwRkJUeXhKUVVGTmNFWXNSVUZCVVN0RkxHRkJRV0VzVDBGRGRFTkVMRWRCUVZOdVJpeFJRVUZSY1VVc1RVRkJUU3h6UWtGQmRVSmhMRVZCUVZrc2RVSkJSMmhGTEVsQlFVazVReXhGUVVGUk9VSXNTVUZGV2l4SlFVRkxVQ3hIUVVGSE1rWXNZVUZCWVhSRUxFZEJRVkVzUzBGQlRTdzJRMEZEYmtNc1IwRkJlVUlzU1VGQmNrSXZRaXhGUVVGUldTeFRRVUZuUWl4TFFVRk5MSFZFUVVGNVJGb3NSVUZCVVhOR0xGVkJSVzVITEVsQlJVbERMRVZCUmtGRExFVkJRV2RETEU5QlFXNUNlRVlzUlVGQlVYbEdMRk5CUVhWRExFMUJRVzVDZWtZc1JVRkJVWGxHTEZGQlEycEVReXhIUVVGQlFTeEZRVVZCUXl4SFFVRkJRU3hGUVVWQlF5eEhRVU5HUXl4UlFVRkJRU3hGUVVWQlF5eGpRVUZCUVN4RlFVTkJia0lzVTBGQlZTeFRRVU5XUkN4VFFVRlZMR05CUTFaeFFpeFRRVUZWTEVkQlJWWkRMR2RDUVVGQlFTeEZRVU5CUXl4bFFVRkJRU3hGUVVOQlF5eFRRVUZWTEV0QlExWkRMRTlCUVZFc1VVRkRVa01zZDBKQlFYbENMSEZDUVVONlFrTXNVMEZCUVVFc1JVRkRRVU1zUzBGQlRTeFpRVWxPUXl4clFrRkJiVUptTEVWQlFXRXNTVUZCVFN4SFFVTjBRMmRDTEhWQ1FVRjVRaXhUUVVGVFF5eEhRVk5vUXl4SFFWSkpNMElzUjBGQlUyNUdMRkZCUVZGeFJTeE5RVUZOTEhOQ1FVRjFRbUVzUlVGQldTeDFRa0ZETVVSdVJpeEhRVUZIUnl4blFrRkJaMEpWTEZGQlFWRXJSQ3h0UWtGRE4wSjBSU3hGUVVGUlowWXNWVUZCVlVrc1QwRkJUekZHTEVkQlFVZEhMR2RDUVVGblFsVXNVVUZCVVN0RUxHMUNRVTB4UWl4dFFrRkJha0l6UlN4UlFVRlJjVVVzVFVGQmNVSXNRMEZEZEVNc1NVRkJTVEJETEVWQlFXVXhSeXhGUVVGUk1rY3NZVUZCWlROSExFVkJRVkV5Unl4aFFVRmhReXhSUVVGVmNrZ3NUMEZCVDNOSUxHbENRVUZwUWpkSExFVkJRVk1zVFVGQlRUUkhMRkZCUXpWR0xGVkJRV2hDUml4SFFVTkdMMGNzVVVGQlVYRkZMRTFCUVUwc1owcEJRV2xLYUVVc1JVRkJVWGxHTEZGQlFWTnBRaXhGUVVGak4wSXNTMEZMY0UxcFF5eE5RVUZQTEZOQlFWTk1MRWRCUTFZelFpeEhRVUZUYmtZc1VVRkJVWEZGTEUxQlFVMHNjMEpCUVhWQ1lTeEZRVUZaTERoQ1FVVTVSQ3hKUVVGSmEwTXNSVUZCYjBJc1YwRkZTU3hKUVVSUUwwY3NSVUZCVVdkSUxHRkJRV1ZvU0N4RlFVRlJhVWdzVjBGQllTeEpRVUZKUXl4UFFVTnVSRU1zVDBGRFpHNUlMRVZCUVZGblJpeFZRVUZWUXl4SlFVRkpka1lzUjBGQlIwY3NaMEpCUVdkQ1ZTeFJRVUZSYVVVc1dVRkZha1I0UlN4RlFVRlJaMFlzVlVGQlZVa3NUMEZCVHpGR0xFZEJRVWRITEdkQ1FVRm5RbFVzVVVGQlVXbEZMR0ZCVFhoRWFVTXNSVUZCVDFjc1IwRkJSeXh0UWtGQmIwSXNWMEZETlVJc1NVRkJTekZDTEVWQlEwZ3NTVUZEUlVNc1IwRkJRVUVzUlVGVFFUVkVMRVZCUVUwd1JTeEZRVUZQV1N4WFFVRlhNMGdzUjBGQlIwY3NaMEpCUVdkQ1ZTeFJRVUZSTUVRc2IwSkJRMjVFTEUxQlFVOUlMRWRCUTFCdVJTeFJRVUZSYjBVc1MwRkJTeXcyUTBGQk9FTmpMRVZCUVZsbUxFZEJRM1pGTEZGQlEwRTJRaXhIUVVGQlFTeEZRVWRCYWtjc1IwRkJSMGNzWjBKQlFXZENWU3hSUVVGUmFVVXNXVUZCV1hWRExFMUJSM3BEY2tnc1IwRkJSMGNzWjBKQlFXZENWU3hSUVVGUmFVVXNXVUZETjBKcFF5eEZRVUZQVnl4SFFVRkhMRkZCUVZNc1YwRkRha0pNTEUxQlRVcE9MRVZCUVU5WExFZEJRVWNzVVVGQlV5eFhRVVZxUWxnc1JVRkJUMkVzWTBGRFVHSXNSVUZCVDJNc1lVRkJZV3hHTEZWQlMyeENNME1zUjBGQlIwY3NaMEpCUVdkQ1ZTeFJRVUZSWjBVc2RVSkJRemRDYTBNc1JVRkJUMWNzUjBGQlJ5eFBRVUZSTEZOQlFWTTFSQ3hIUVVONlFtcEZMRTlCUVU5cFNTeGxRVUZsUXl4dlFrRkxNVUpvUWl4RlFVRlBWeXhIUVVGSExHMUNRVUZ2UWl4VFFVRlRNMFFzUjBGRGFrTkJMRVZCUVV0cFJTeFZRVUZUYWtVc1JVRkJTMU1zVDBGQlV5eGpRVUZCTEVsQlpYWkNkVU1zUlVGQlR6bERMR1ZCUTJoQ09FTXNSVUZCVHpsRExHRkJRV1U0UXl4RlFVRlBhMElzUzBGRE4wSnNRaXhGUVVGUGEwSXNTMEZCVDNCRkxHVkJSMmhDWjBNc1JVRkJZV3RDTEVsQmJVUnFRaXhQUVRkRFNTOUhMRWRCUVVkSExHZENRVUZuUWxVc1VVRkJVVFJFTEZWQlF6ZENlVUlzUlVGQlVXZERMRTlCUVZNMVNDeEZRVVZxUWpSR0xFVkJRVkZwUXl4VFFVRlhMRWxCUVUxb1JDeEZRVWN6UW01R0xFZEJRVWQxUWl4TlFVRk5jVU1zVDBGQlQzTkRMRVZCUVZOc1J5eEhRVUZIUnl4blFrRkJaMEpWTEZGQlFWRTRSQ3hwUWtGRGFFUnRRaXhIUVVGWk9VWXNSMEZCUjNWQ0xFMUJRVTF4UXl4UFFVRlBjME1zUlVGQlUyeEhMRWRCUVVkSExHZENRVUZuUWxVc1VVRkJVV3RGTEdGQlMzQkZiRVlzVDBGQlQzVkpMRmRCUVZjc1YwRkRXbWhFTEVkQlFWTnVSaXhSUVVGUmNVVXNUVUZCVFN4elFrRkJkVUpoTEVWQlFWa3NORUpCUXpsRUxFbEJRVWxyUkN4RlFVRk5NVWtzVVVGQlVWVXNTMEZCU3paR0xFZEJRMjVDWkN4SFFVRlRia1lzVVVGQlVYRkZMRTFCUVUwc2MwSkJRWFZDWVN4RlFVRlpMSE5EUVVGMVEydEVMRWRCUTNKSFFTeEZRVUZKUXl4TFFVRkxMRmRCUTBoc1JDeEhRVUZUYmtZc1VVRkJVWEZGTEUxQlFVMHNjMEpCUVhWQ1lTeEZRVUZaTEN0Q1FVTTNSQ3hUUVVGVGIwUXNSMEZEVm5SSkxGRkJRVkYxU1N4SlFVRkpMSE5DUVVGMVFuSkVMRVZCUVZrc01rSkJRVFJDYjBRc1QwRkpMMFYyU1N4SFFVRkhlVWtzVTBGQlV5eFhRVU5XTEVsQlFVbERMRVZCUVZVeFNTeEhRVUZIZFVJc1RVRkJUVU1zYVVKQlFXbENha0lzUzBGRGVFTXNTVUZCU3pCR0xFVkJRV2RDTEVOQlEyNUNMRWxCUTBWRUxFZEJRVUZCTEU5QlFYRkNMRWxCUjFaSUxFVkJRMVJCTEVWQlFWYzRReXhYUVVGWFJDeEhRVUZYYkVVc1QwRkJVU3hSUVVWNlEzaEZMRWRCUVVkMVFpeE5RVUZOY1Vnc1VVRkJVWFJKTEVWQlFWTnZTU3hIUVVVMVFpeE5RVUZQZEVVc1IwRkRVRzVGTEZGQlFWRnZSU3hMUVVGTExIVkVRVUYzUkhkQ0xFVkJRVmw2UWl4SFFVVnVSalJDTEVkQlFVRkJMRWxCUlVRc1RVRkRSRFpETEhsQ1FVRXdRblpKTEV0QlN6RkNkMGtzTkVKQlFVRkJJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwzTnlZeTlxY3k5aWFXNWthVzVuY3k5M2VYTnBkM2xuY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGNoZWNrTW9kZWw9ZnVuY3Rpb24oZSxvLHQsbixsKXt2YXIgaSxmLHIsYT0wO2lmKHZvaWQgMD09PWwmJihsPSExKSx2b2lkIDAhPT1vJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLnNwbGljZSlmb3IoaT17fSxmPTA7ZjxvLmxlbmd0aDtmKyspaVtvW2ZdLnR5cGVdPW9bZl07ZWxzZSBpPW87Zm9yKHZhciBwIGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eShwKSlpZihyPXZvaWQgMCE9PW4/bitcIi5cIitwOnAsdC5oYXNPd25Qcm9wZXJ0eShwKSlpZih0eXBlb2YgdFtwXSE9dHlwZW9mIGVbcF0pbnVsbCE9PXRbcF0mJm51bGwhPT1lW3BdJiYoXCJzdHJpbmdcIj09dHlwZW9mIHRbcF0/U3RyaW5nKGVbcF0pIT1lW3BdJiYoY29uc29sZS5sb2coXCJUT0RPIERpZmZlcmVudCB0eXBlIDEgXCIscix0eXBlb2YgdFtwXSx0eXBlb2YgZVtwXSx0W3BdLGVbcF0pLGE9TWF0aC5tYXgoYSwyKSk6XCJudW1iZXJcIj09dHlwZW9mIHRbcF0/TnVtYmVyKGVbcF0pIT1lW3BdJiYoY29uc29sZS5sb2coXCJUT0RPIERpZmZlcmVudCB0eXBlIDIgXCIscix0eXBlb2YgdFtwXSx0eXBlb2YgZVtwXSx0W3BdLGVbcF0pLGE9TWF0aC5tYXgoYSwyKSk6KGNvbnNvbGUubG9nKFwiVE9ETyBEaWZmZXJlbnQgdHlwZSAzIFwiLHIsdHlwZW9mIHRbcF0sdHlwZW9mIGVbcF0sdFtwXSxlW3BdKSxhPU1hdGgubWF4KGEsMikpKTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlW3BdKWlmKG51bGwhPT1lW3BdKWlmKHZvaWQgMCE9PWVbcF0uc3BsaWNlKXtpZihlW3BdLmxlbmd0aD4wKWlmKHRbcF0ubGVuZ3RoPjApe3ZhciBjPTA7Zm9yKGY9MDtmPHRbcF0ubGVuZ3RoO2YrKylpZihcInN0cmluZ1wiPT10eXBlb2YgdFtwXVtmXS50eXBlKXtmb3IoO2M8ZVtwXS5sZW5ndGgmJmVbcF1bY10udHlwZSE9PXRbcF1bZl0udHlwZTspY29uc29sZS5sb2coXCJpZ25vcmluZyBcIixyLGVbcF1bY10udHlwZSxcIiBibG9jayB0eXBlIGluIHJlZmVyZW5jZSBub3QgZm91bmQgaW4gbW9kZWxcIiksYysrO2lmKGM+PWVbcF0ubGVuZ3RoKXtjb25zb2xlLmxvZyhcIldBUk4gY2Fubm90IGZpbmQgXCIscix0W3BdW2ZdLnR5cGUsXCIgYmxvY2sgaW4gcmVmZXJlbmNlXCIpLGE9TWF0aC5tYXgoYSwyKTticmVha31hPU1hdGgubWF4KGEsY2hlY2tNb2RlbChlW3BdW2NdLHZvaWQgMCx0W3BdW2ZdLHIrXCJbXCIrZitcIi5cIit0W3BdW2ZdLnR5cGUrXCJdXCIpKX19ZWxzZSBmb3IoZj0wO2Y8ZVtwXS5sZW5ndGg7ZisrKVwic3RyaW5nXCIhPXR5cGVvZiBlW3BdW2ZdLnR5cGU/KGNvbnNvbGUubG9nKFwiVE9ETyBmb3VuZCBhbiBvYmplY3Qgd2l0aCBubyB0eXBlXCIscixlW3BdW2ZdKSxhPU1hdGgubWF4KGEsMikpOmkuaGFzT3duUHJvcGVydHkoZVtwXVtmXS50eXBlKT9hPU1hdGgubWF4KGEsY2hlY2tNb2RlbChpW2VbcF1bZl0udHlwZV0saSxlW3BdW2ZdLHIrXCJbXCIrZitcIi5cIitlW3BdW2ZdLnR5cGUrXCJdXCIpKTooY29uc29sZS53YXJuKFwiVE9ETyB0aGUgbW9kZWwgdXNlcyBhIGJsb2NrIHR5cGUgbm90IGRlZmluZWQgYnkgdGhlIHRlbXBsYXRlLiBSRU1PVklORyBJVCEhXCIscixlW3BdW2ZdKSxlW3BdLnNwbGljZShmLDEpLGYtLSxhPU1hdGgubWF4KGEsMikpfWVsc2UgbnVsbD09PXRbcF0/bD8oY29uc29sZS5sb2coXCJXQVJOIE51bGwgb2JqZWN0IGluIG1vZGVsIFwiLHIsXCJpbnN0ZWFkIG9mXCIsZVtwXSxcImRlbGV0aW5nIGl0XCIpLGE9TWF0aC5tYXgoYSwyKSxkZWxldGUgZVtwXSk6KGNvbnNvbGUubG9nKFwiSU5GTyBOdWxsIG9iamVjdCBpbiBtb2RlbCBcIixyLFwiaW5zdGVhZCBvZlwiLGVbcF0sXCJjbG9uaW5nIGl0IGZyb20gdGhlIHJlZmVyZW5jZVwiKSxhPU1hdGgubWF4KGEsMSksdFtwXT1lW3BdKTphPU1hdGgubWF4KGEsY2hlY2tNb2RlbChlW3BdLGksdFtwXSxyLGwpKTtlbHNlIG51bGwhPT10W3BdJiYoY29uc29sZS5sb2coXCJUT0RPIE51bGwgaW4gcmVmZXJlbmNlIGJ1dCBub3QgbnVsbCBpbiBtb2RlbFwiLHIsdFtwXSksYT1NYXRoLm1heChhLDIpKTtlbHNlXCJzdHJpbmdcIiE9dHlwZW9mIGVbcF0mJlwiYm9vbGVhblwiIT10eXBlb2YgZVtwXSYmXCJudW1iZXJcIiE9dHlwZW9mIGVbcF0mJihjb25zb2xlLmxvZyhcIlRPRE8gdW5zdXBwb3J0ZWQgdHlwZVwiLHIsdHlwZW9mIGVbcF0pLGE9TWF0aC5tYXgoYSwyKSk7ZWxzZSBsPyhjb25zb2xlLndhcm4oXCJXQVJOIFByb3BlcnR5IFwiLHIsXCJmb3VuZCBpbiBtb2RlbCBpcyBub3QgZGVmaW5lZCBieSB0ZW1wbGF0ZTogcmVtb3ZpbmcgaXQhXCIpLGE9TWF0aC5tYXgoYSwyKSxkZWxldGUgZVtwXSk6KGNvbnNvbGUubG9nKFwiSU5GTyBQcm9wZXJ0eSBcIixyLFwibWlzc2luZyBpbiBtb2RlbCwgY2xvbmluZyBmcm9tIHJlZmVyZW5jZSFcIiksYT1NYXRoLm1heChhLDEpLHRbcF09ZVtwXSk7cmV0dXJuIGx8fChhPU1hdGgubWF4KGEsY2hlY2tNb2RlbCh0LG8sZSx2b2lkIDAhPT1uP24rXCIhUlwiOlwiIVJcIiwhMCkpKSxhfTttb2R1bGUuZXhwb3J0cz1jaGVja01vZGVsO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Ob1pXTnJiVzlrWld3dWFuTWlYU3dpYm1GdFpYTWlPbHNpWTI5dWMyOXNaU0lzSW5KbGNYVnBjbVVpTENKamFHVmphMDF2WkdWc0lpd2ljbVZtWlhKbGJtTmxJaXdpWW14dlkydEVaV1p6SWl3aWJXOWtaV3dpTENKdmNtbG5VSEpsWm1sNElpd2ljbVYyWlhKelpTSXNJbUpzYjJOclJHVm1jMDlpYWlJc0lta2lMQ0p3Y21WbWFYZ2lMQ0oyWVd4cFpDSXNJbk53YkdsalpTSXNJbXhsYm1kMGFDSXNJblI1Y0dVaUxDSndjbTl3SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKVGRISnBibWNpTENKc2IyY2lMQ0pOWVhSb0lpd2liV0Y0SWl3aVRuVnRZbVZ5SWl3aWFpSXNJbmRoY200aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYzBKQlIyeENReXhYUVVGaExGTkJRVk5ETEVWQlFWZERMRVZCUVZkRExFVkJRVTlETEVWQlFWbERMRWRCUTJwRkxFbEJRVWxETEVWQlFXTkRMRVZCUVVkRExFVkJRMnBDUXl4RlFVRlJMRVZCUlZvc1VVRkJRU3hKUVVSWFNpeEpRVUYzUWtFc1IwRkJRVUVzVVVGQlZTeEpRVU5zUTBnc1IwRkJkMFFzYlVKQlFYQkNRU3hGUVVGVlVTeFBRVVYyUkN4SlFVUkJTaXhMUVVOTFF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsTUxFVkJRVlZUTEU5QlFWRktMRWxCUVV0RUxFVkJRV0ZLTEVWQlFWVkxMRWRCUVVkTExFMUJRVkZXTEVWQlFWVkxMRkZCUlc1R1JDeEZRVUZsU2l4RlFVVnFRaXhKUVVGTExFbEJRVWxYTEV0QlFWRmFMRVZCUTJZc1IwRkJTVUVzUlVGQlZXRXNaVUZCWlVRc1IwRkZNMElzUjBGRVFVd3NUMEZCUVVFc1NVRkJaMEpLTEVWQlFUWkNRU3hGUVVGaExFbEJRVTFUTEVWQlFVOUJMRVZCUTJ4RlZpeEZRVUZOVnl4bFFVRmxSQ3hIUVZWdVFpeFZRVUZYVml4RlFVRk5WU3hYUVVGblFsb3NSVUZCVlZrc1IwRkZOVUlzVDBGQmFFSldMRVZCUVUxVkxFbEJRWE5ETEU5QlFYQkNXaXhGUVVGVldTeExRVU5XTEdsQ1FVRm1WaXhGUVVGTlZTeEhRVU5ZUlN4UFFVRlBaQ3hGUVVGVldTeExRVUZWV2l4RlFVRlZXU3hMUVVOMlEyWXNVVUZCVVd0Q0xFbEJRVWtzZVVKQlFUQkNVaXhUUVVGbFRDeEZRVUZOVlN4VlFVRmpXaXhGUVVGVldTeEhRVUZQVml4RlFVRk5WU3hIUVVGUFdpeEZRVUZWV1N4SlFVTnFTRW9zUlVGQlVWRXNTMEZCUzBNc1NVRkJTVlFzUlVGQlR5eEpRVVZMTEdsQ1FVRm1UaXhGUVVGTlZTeEhRVU5zUWswc1QwRkJUMnhDTEVWQlFWVlpMRXRCUVZWYUxFVkJRVlZaTEV0QlEzWkRaaXhSUVVGUmEwSXNTVUZCU1N4NVFrRkJNRUpTTEZOQlFXVk1MRVZCUVUxVkxGVkJRV05hTEVWQlFWVlpMRWRCUVU5V0xFVkJRVTFWTEVkQlFVOWFMRVZCUVZWWkxFbEJRMnBJU2l4RlFVRlJVU3hMUVVGTFF5eEpRVUZKVkN4RlFVRlBMRXRCUnpGQ1dDeFJRVUZSYTBJc1NVRkJTU3g1UWtGQk1FSlNMRk5CUVdWTUxFVkJRVTFWTEZWQlFXTmFMRVZCUVZWWkxFZEJRVTlXTEVWQlFVMVZMRWRCUVU5YUxFVkJRVlZaTEVsQlEycElTaXhGUVVGUlVTeExRVUZMUXl4SlFVRkpWQ3hGUVVGUExGVkJSM1pDTEVkQlFUaENMR2xDUVVGdVFsSXNSVUZCVlZrc1IwRkRNVUlzUjBGQmQwSXNUMEZCY0VKYUxFVkJRVlZaTEVkQlExb3NVVUZCUVN4SlFVRlhXaXhGUVVGVldTeEhRVUZOU0N4UlFVTjZRaXhIUVVGSlZDeEZRVUZWV1N4SFFVRk5SaXhQUVVGVExFVkJRek5DTEVkQlFVbFNMRVZCUVUxVkxFZEJRVTFHTEU5QlFWTXNSVUZCUnl4RFFVVXhRaXhKUVVGSlV5eEZRVUZKTEVWQlExSXNTVUZCUzJJc1JVRkJTU3hGUVVGSFFTeEZRVUZKU2l4RlFVRk5WU3hIUVVGTlJpeFBRVUZSU2l4SlFVTnNReXhIUVVGclF5eHBRa0ZCZGtKS0xFVkJRVTFWTEVkQlFVMU9MRWRCUVVkTExFdEJRV3RDTEVOQlF6RkRMRXRCUVU5UkxFVkJRVWx1UWl4RlFVRlZXU3hIUVVGTlJpeFJRVUZWVml4RlFVRlZXU3hIUVVGTlR5eEhRVUZIVWl4UFFVRlRWQ3hGUVVGTlZTeEhRVUZOVGl4SFFVRkhTeXhOUVVNNVJXUXNVVUZCVVd0Q0xFbEJRVWtzV1VGQllWSXNSVUZCVVZBc1JVRkJWVmtzUjBGQlRVOHNSMEZCUjFJc1MwRkJUU3dyUTBGRE1VUlJMRWxCUlVZc1IwRkJTVUVzUjBGQlMyNUNMRVZCUVZWWkxFZEJRVTFHTEU5QlFWRXNRMEZETDBKaUxGRkJRVkZyUWl4SlFVRkpMRzlDUVVGeFFsSXNSVUZCVVV3c1JVRkJUVlVzUjBGQlRVNHNSMEZCUjBzc1MwRkJUU3gxUWtGRE9VUklMRVZCUVZGUkxFdEJRVXRETEVsQlFVbFVMRVZCUVU4c1IwRkRlRUlzVFVGSFJrRXNSVUZCVVZFc1MwRkJTME1zU1VGQlNWUXNSVUZCVDFRc1YwRkJWME1zUlVGQlZWa3NSMEZCVFU4c1VVRkJRVUVzUlVGQlpXcENMRVZCUVUxVkxFZEJRVTFPTEVkQlFVbERMRVZCUVZNc1NVRkJUVVFzUlVGQlNTeEpRVUZOU2l4RlFVRk5WU3hIUVVGTlRpeEhRVUZIU3l4TFFVRlBMRmxCUzNKSkxFbEJRVXRNTEVWQlFVa3NSVUZCUjBFc1JVRkJTVTRzUlVGQlZWa3NSMEZCVFVZc1QwRkJVVW9zU1VGRFF5eHBRa0ZCTlVKT0xFVkJRVlZaTEVkQlFVMU9MRWRCUVVkTExFMUJRelZDWkN4UlFVRlJhMElzU1VGQlNTeHZRMEZCY1VOU0xFVkJRVkZRTEVWQlFWVlpMRWRCUVUxT0xFbEJRM3BGUlN4RlFVRlJVU3hMUVVGTFF5eEpRVUZKVkN4RlFVRlBMRWxCUTJSSUxFVkJRV0ZSTEdWQlFXVmlMRVZCUVZWWkxFZEJRVTFPTEVkQlFVZExMRTFCVFhwRVNDeEZRVUZSVVN4TFFVRkxReXhKUVVGSlZDeEZRVUZQVkN4WFFVRlhUU3hGUVVGaFRDeEZRVUZWV1N4SFFVRk5UaXhIUVVGSFN5eE5RVUZQVGl4RlFVRmpUQ3hGUVVGVldTeEhRVUZOVGl4SFFVRkpReXhGUVVGVExFbEJRVTFFTEVWQlFVa3NTVUZCVFU0c1JVRkJWVmtzUjBGQlRVNHNSMEZCUjBzc1MwRkJUeXhQUVV3dlNtUXNVVUZCVVhWQ0xFdEJRVXNzT0VWQlFTdEZZaXhGUVVGUlVDeEZRVUZWV1N4SFFVRk5UaXhKUVVOd1NFNHNSVUZCVlZrc1IwRkJUVWdzVDBGQlQwZ3NSVUZCUnl4SFFVTXhRa0VzU1VGRFFVVXNSVUZCVVZFc1MwRkJTME1zU1VGQlNWUXNSVUZCVHl4VFFWRmFMRTlCUVdoQ1RpeEZRVUZOVlN4SFFVTktVaXhIUVVOR1VDeFJRVUZSYTBJc1NVRkJTU3cyUWtGQk9FSlNMRVZCUVZFc1lVRkJZMUFzUlVGQlZWa3NSMEZCVHl4bFFVTnFSa29zUlVGQlVWRXNTMEZCUzBNc1NVRkJTVlFzUlVGQlR5eFZRVU5xUWxJc1JVRkJWVmtzUzBGRmFrSm1MRkZCUVZGclFpeEpRVUZKTERaQ1FVRTRRbElzUlVGQlVTeGhRVUZqVUN4RlFVRlZXU3hIUVVGUExHbERRVU5xUmtvc1JVRkJVVkVzUzBGQlMwTXNTVUZCU1ZRc1JVRkJUeXhIUVVONFFrNHNSVUZCVFZVc1IwRkJVVm9zUlVGQlZWa3NTVUZITVVKS0xFVkJRVkZSTEV0QlFVdERMRWxCUVVsVUxFVkJRVTlVTEZkQlFWZERMRVZCUVZWWkxFZEJRVTlRTEVWQlFXTklMRVZCUVUxVkxFZEJRVTlNTEVWQlFWRklMRk5CUjJ4RkxFOUJRV2hDUml4RlFVRk5WU3hMUVVObVppeFJRVUZSYTBJc1NVRkJTU3dyUTBGQlowUlNMRVZCUVZGTUxFVkJRVTFWTEVsQlF6RkZTaXhGUVVGUlVTeExRVUZMUXl4SlFVRkpWQ3hGUVVGUExGRkJSVlVzYVVKQlFYQkNVaXhGUVVGVldTeEpRVUZwUkN4clFrRkJjRUphTEVWQlFWVlpMRWxCUVd0RUxHbENRVUZ3UWxvc1JVRkJWVmtzUzBGRGVrZG1MRkZCUVZGclFpeEpRVUZKTEhkQ1FVRjVRbElzVTBGQlpWQXNSVUZCVlZrc1NVRkRPVVJLTEVWQlFWRlJMRXRCUVV0RExFbEJRVWxVTEVWQlFVOHNVMEYyUm5CQ1NpeEhRVU5HVUN4UlFVRlJkVUlzUzBGQlN5eHBRa0ZCYTBKaUxFVkJRVkVzTWtSQlEzWkRReXhGUVVGUlVTeExRVUZMUXl4SlFVRkpWQ3hGUVVGUExGVkJRMnBDVWl4RlFVRlZXU3hMUVVWcVFtWXNVVUZCVVd0Q0xFbEJRVWtzYVVKQlFXdENVaXhGUVVGUkxEWkRRVU4wUTBNc1JVRkJVVkVzUzBGQlMwTXNTVUZCU1ZRc1JVRkJUeXhIUVVONFFrNHNSVUZCVFZVc1IwRkJVVm9zUlVGQlZWa3NTVUZ4Um1oRExFOUJSRXRTTEVsQlFWTkpMRVZCUVZGUkxFdEJRVXRETEVsQlFVbFVMRVZCUVU5VUxGZEJRVmRITEVWQlFVOUVMRVZCUVZkRUxFOUJRVUZCTEVsQlFXdENSeXhGUVVFMlFrRXNSVUZCWVN4TFFVRlBMRTFCUVVFc1MwRkRMMGhMTEVkQlIxUmhMRTlCUVU5RExGRkJRVlYyUWlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl6Y21NdmFuTXZZMjl1ZG1WeWRHVnlMMk5vWldOcmJXOWtaV3d1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgY29udmVydGVyVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMuanNcIiksY3NzUGFyc2U9cmVxdWlyZShcIm1lbnNjaC9saWIvcGFyc2VyLmpzXCIpLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKSxkb211dGlscz1yZXF1aXJlKFwiLi9kb211dGlscy5qc1wiKSxfZGVjbGFyYXRpb25WYWx1ZUxvb2t1cD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBsPWUubGVuZ3RoLTE7bD49MDtsLS0paWYoXCJwcm9wZXJ0eVwiPT1lW2xdLnR5cGUmJmVbbF0ubmFtZT09dClyZXR1cm4gX2RlY2xhcmF0aW9uVmFsdWVVcmxQcmVmaXhlcihlW2xdLnZhbHVlLHIpO3JldHVybiBudWxsfSxfcHJvcFRvQ2FtZWxDYXNlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoLy0oW2Etel0pL2csZnVuY3Rpb24oZSx0LHIsbCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0pfSxfZGVjbGFyYXRpb25WYWx1ZVVybFByZWZpeGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubWF0Y2goL3VybFxcKC4qXFwpLyk/ZS5yZXBsYWNlKC8odXJsXFwoKShbXlxcKV0qKShcXCkpL2csZnVuY3Rpb24oZSxyLGwsaSl7dmFyIG49bC50cmltKCksbz1sLnRyaW0oKS5jaGFyQXQoMCk7XCInXCI9PW98fCdcIic9PW8/bj1uLnN1YnN0cigxLG4ubGVuZ3RoLTIpOm89XCJcIjt2YXIgYT10KG4pO3JldHVybiBudWxsIT09YT9yK28rYStvK2k6ZX0pOmV9LGVsYWJvcmF0ZURlY2xhcmF0aW9ucz1mdW5jdGlvbihlLHQscixsLGksbixvKXt2YXIgYT1cIm9iamVjdFwiPT10eXBlb2YgbiYmbnVsbCE9PW4/bjp7fSx1PW51bGwscz0wO3ZvaWQgMD09PXQmJih0PWNzc1BhcnNlKFwiI3tcXG5cIitlK1wifVwiLHtjb21tZW50czohMCxwb3NpdGlvbjohMH0pLnN0eWxlc2hlZXQucnVsZXNbMF0uZGVjbGFyYXRpb25zLHM9MSk7Zm9yKHZhciB2PXQubGVuZ3RoLTE7dj49MDt2LS0paWYoXCJwcm9wZXJ0eVwiPT10W3ZdLnR5cGUpaWYoITA9PT1vJiZcImRpc3BsYXlcIj09dFt2XS5uYW1lJiZcIm5vbmVcIj09dFt2XS52YWx1ZSludWxsPT09dSYmKHU9ZSksdT1jb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZSh1LHRbdl0ucG9zaXRpb24uc3RhcnQsdFt2XS5wb3NpdGlvbi5lbmQscywwLDAsXCJcIik7ZWxzZXt2YXIgZD10W3ZdLm5hbWUubWF0Y2goL14ta28tKGJpbmQtfGF0dHItKT8oW2EtejAtOS1dKj8pKC1pZnwtaWZub3QpPyQvKTtpZihudWxsIT09ZCl7bnVsbD09PXUmJnZvaWQgMCE9PWUmJih1PWUpO3ZhciBjLGYscCxtPVwiYXR0ci1cIj09ZFsxXSx5PVwiYmluZC1cIj09ZFsxXSxoPWRbMl0sYj1cIi1pZlwiPT1kWzNdfHxcIi1pZm5vdFwiPT1kWzNdO2lmKGIpe2lmKGM9dFt2XS5uYW1lLnN1YnN0cigwLHRbdl0ubmFtZS5sZW5ndGgtZFszXS5sZW5ndGgpLG51bGw9PT1fZGVjbGFyYXRpb25WYWx1ZUxvb2t1cCh0LGMscikpdGhyb3dcIlVuYWJsZSB0byBmaW5kIGRlY2xhcmF0aW9uIFwiK2MrXCIgZm9yIFwiK3Rbdl0ubmFtZX1lbHNle2lmKChtfHx5KSYmdm9pZCAwPT09aSYmdm9pZCAwIT09ZSl0aHJvd1wiQXR0cmlidXRlcyBhbmQgYmluZCBkZWNsYXJhdGlvbnMgYXJlIG9ubHkgYWxsb3dlZCBpbiBpbmxpbmUgc3R5bGVzIVwiO3ZhciBTLGc9ITA7aWYobT8ocD1kb211dGlscy5nZXRBdHRyaWJ1dGUoaSxoKSxnPSExLFM9XCJ2aXJ0dWFsQXR0clwiKTp5PyhTPW51bGwsXCJ0ZXh0XCI9PWg/dm9pZCAwIT09aT9wPWRvbXV0aWxzLmdldElubmVyVGV4dChpKTpnPSExOlwiaHRtbFwiPT1oJiZ2b2lkIDAhPT1pP3A9ZG9tdXRpbHMuZ2V0SW5uZXJIdG1sKGkpOmc9ITEpOigoZz12b2lkIDAhPT1lKSYmKHA9X2RlY2xhcmF0aW9uVmFsdWVMb29rdXAodCxoLHIpKSxTPVwidmlydHVhbFN0eWxlXCIpLGcmJm51bGw9PT1wKXRocm93IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgZmluZCBkZWZhdWx0IHZhbHVlIGZvclwiLHRbdl0ubmFtZSx0KSxcIkNhbm5vdCBmaW5kIGRlZmF1bHQgdmFsdWUgZm9yIFwiK3Rbdl0ubmFtZStcIjogXCIrdFt2XS52YWx1ZStcIiBpbiBcIitpK1wiIChcIit0eXBlb2YgZStcIi9cIitoK1wiKVwiO3ZhciB3PXAsVT15fHxtPy0xIT1oLmluZGV4T2YoXCItXCIpP1wiJ1wiK2grXCInXCI6aDpfcHJvcFRvQ2FtZWxDYXNlKGgpO3RyeXtmPWNvbnZlcnRlclV0aWxzLmV4cHJlc3Npb25CaW5kaW5nKHRbdl0udmFsdWUsbCx3KX1jYXRjaChlKXt0aHJvdyBjb25zb2xlLmVycm9yKFwiTW9kZWwgZW5zdXJlIHBhdGggZmFpbGVkXCIsZS5zdGFjayxcIm5hbWVcIix0W3ZdLm5hbWUsXCJ2YWx1ZVwiLHRbdl0udmFsdWUsXCJkZWZhdWx0XCIscCxcImVsZW1lbnRcIixpKSxlfW51bGwhPT1TJiZ2b2lkIDA9PT1hW1NdJiYoYVtTXT17fSksXCJ2aXJ0dWFsQXR0clwiPT1TJiZcImhyZWZcIj09VSYmKFM9bnVsbCxVPVwid3lzaXd5Z0hyZWZcIix2b2lkIDAhPT1pJiZudWxsIT09aSYmZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGksXCJocmVmXCIpKTt2YXIgeD1fZGVjbGFyYXRpb25WYWx1ZUxvb2t1cCh0LHRbdl0ubmFtZStcIi1pZlwiLHIpLF89ITE7aWYobnVsbD09PXgpeD1fZGVjbGFyYXRpb25WYWx1ZUxvb2t1cCh0LHRbdl0ubmFtZStcIi1pZm5vdFwiLHIpLF89ITA7ZWxzZSBpZihudWxsIT09X2RlY2xhcmF0aW9uVmFsdWVMb29rdXAodCx0W3ZdLm5hbWUrXCItaWZub3RcIixyKSl0aHJvd1wiVW5leHBlY3RlZCBlcnJvcjogY2Fubm90IHVzZSBib3RoIC1pZiBhbmQgLWlmbm90IHByb3BlcnR5IGNvbmRpdGlvbnNcIjtpZihudWxsIT09eCl0cnl7dmFyIEE9Y29udmVydGVyVXRpbHMuY29uZGl0aW9uQmluZGluZyh4LGwpO2Y9KF8/XCIhXCI6XCJcIikrXCIoXCIrQStcIikgPyBcIitmK1wiIDogbnVsbFwifWNhdGNoKGUpe3Rocm93IGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gZGVhbCB3aXRoIC1rbyBzdHlsZSBiaW5kaW5nIGNvbmRpdGlvblwiLHgsdFt2XS5uYW1lKSxlfW51bGwhPT1TP2FbU11bVV09ZjphW1VdPWZ9aWYobnVsbCE9PXUpdHJ5e2lmKHZvaWQgMCE9PWkmJm51bGwhPT1pKXU9Y29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUodSx0W3ZdLnBvc2l0aW9uLnN0YXJ0LHRbdl0ucG9zaXRpb24uZW5kLHMsMCwwLFwiXCIpO2Vsc2V7dmFyIGs9XCJcIjtifHwoaz1oK1wiOiBcXHgzYyEtLSBrbyB0ZXh0OiBcIitmK1wiIC0tXFx4M2VcIitwK1wiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIiksdT1jb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZSh1LHRbdl0ucG9zaXRpb24uc3RhcnQsdFt2XS5wb3NpdGlvbi5lbmQscywwLDAsayl9fWNhdGNoKGUpe3Rocm93IGNvbnNvbGUud2FybihcIlJlbW92ZSBzdHlsZSBmYWlsZWRcIixlLFwibmFtZVwiLHRbdl0pLGV9fWVsc2V7dmFyIEM9X2RlY2xhcmF0aW9uVmFsdWVVcmxQcmVmaXhlcih0W3ZdLnZhbHVlLHIpO2lmKEMhPXRbdl0udmFsdWUmJihudWxsPT09dSYmdm9pZCAwIT09ZSYmKHU9ZSksbnVsbCE9PXUpKXRyeXt1PWNvbnZlcnRlclV0aWxzLnJlbW92ZVN0eWxlKHUsdFt2XS5wb3NpdGlvbi5zdGFydCx0W3ZdLnBvc2l0aW9uLmVuZCxzLDAsMCx0W3ZdLm5hbWUrXCI6IFwiK0MpfWNhdGNoKGUpe3Rocm93IGNvbnNvbGUubG9nKFwiUmVtb3ZlIHN0eWxlIGZhaWxlZCByZXBsYWNpbmcgdXJsXCIsZSxcIm5hbWVcIix0W3ZdKSxlfXZhciBWPV9wcm9wVG9DYW1lbENhc2UodFt2XS5uYW1lKSxQPVwidmlydHVhbEF0dHJTdHlsZVwiLGo9dm9pZCAwIT09YS52aXJ0dWFsU3R5bGU/YS52aXJ0dWFsU3R5bGVbVl06dm9pZCAwLHo9XCIgXCI7dm9pZCAwPT09YVtQXSYmKGFbUF09XCInJ1wiLHo9XCJcIiksdm9pZCAwIT09aj8oYVtQXT1cIidcIit0W3ZdLm5hbWUrXCI6ICcrKFwiK2orXCIpKyc7XCIreitcIicrXCIrYVtQXSxkZWxldGUgYS52aXJ0dWFsU3R5bGVbVl0pOmFbUF09XCInXCIrdFt2XS5uYW1lK1wiOiBcIitjb252ZXJ0ZXJVdGlscy5hZGRTbGFzaGVzKEMpK1wiO1wiK3orXCInK1wiK2FbUF19fWlmKHZvaWQgMCE9PWkmJm51bGwhPT1pKXtmb3IodmFyIEwgaW4gYS52aXJ0dWFsU3R5bGUpaWYoYS52aXJ0dWFsU3R5bGUuaGFzT3duUHJvcGVydHkoTCkpdGhyb3cgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkIHZpcnR1YWxTdHlsZSBiaW5kaW5nIGFmdGVyIGNvbnZlcnNpb24gdG8gdmlydHVhbEF0dHIuc3R5bGVcIixMLGEudmlydHVhbFN0eWxlW0xdLGUpLFwiVW5leHBlY3RlZCB2aXJ0dWFsU3R5bGUgYmluZGluZyBhZnRlciBjb252ZXJzaW9uIHRvIHZpcnR1YWxBdHRyLnN0eWxlIGZvciBcIitMO2RlbGV0ZSBhLnZpcnR1YWxTdHlsZTt2YXIgcT1kb211dGlscy5nZXRBdHRyaWJ1dGUoaSxcImRhdGEtYmluZFwiKSxPPShudWxsIT09cT9xK1wiLCBcIjpcIlwiKStfYmluZGluZ1NlcmlhbGl6ZXIoYSk7ZG9tdXRpbHMuc2V0QXR0cmlidXRlKGksXCJkYXRhLWJpbmRcIixPKX1pZih2b2lkIDA9PT1lKXt2YXIgVD0hMTtmb3IodmFyIEIgaW4gYS52aXJ0dWFsU3R5bGUpaWYoYS52aXJ0dWFsU3R5bGUuaGFzT3duUHJvcGVydHkoQikpe1Q9ITA7YnJlYWt9aWYoVCl7aWYodm9pZCAwIT09YS52aXJ0dWFsQXR0clN0eWxlKXt2YXIgRD1hLnZpcnR1YWxBdHRyU3R5bGU7ZGVsZXRlIGEudmlydHVhbEF0dHJTdHlsZSxhLnZpcnR1YWxBdHRyU3R5bGU9RH19ZWxzZSBkZWxldGUgYS52aXJ0dWFsU3R5bGU7cmV0dXJuIF9iaW5kaW5nU2VyaWFsaXplcihhKX1yZXR1cm4gdX0sX2JpbmRpbmdTZXJpYWxpemVyPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKWUuaGFzT3duUHJvcGVydHkocikmJihcIm9iamVjdFwiPT10eXBlb2YgZVtyXT90LnB1c2gocitcIjogeyBcIitfYmluZGluZ1NlcmlhbGl6ZXIoZVtyXSkrXCIgfVwiKTp0LnB1c2gocitcIjogXCIrZVtyXSkpO3JldHVybiB0LnJldmVyc2UoKS5qb2luKFwiLCBcIil9O21vZHVsZS5leHBvcnRzPWVsYWJvcmF0ZURlY2xhcmF0aW9ucztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxZMnhoY21GMGFXOXVjeTVxY3lKZExDSnVZVzFsY3lJNld5SmpiMjUyWlhKMFpYSlZkR2xzY3lJc0luSmxjWFZwY21VaUxDSmpjM05RWVhKelpTSXNJbU52Ym5OdmJHVWlMQ0prYjIxMWRHbHNjeUlzSWw5a1pXTnNZWEpoZEdsdmJsWmhiSFZsVEc5dmEzVndJaXdpWkdWamJHRnlZWFJwYjI1eklpd2ljSEp2Y0dWeWRIbHVZVzFsSWl3aWRHVnRjR3hoZEdWVmNteERiMjUyWlhKMFpYSWlMQ0pwSWl3aWJHVnVaM1JvSWl3aWRIbHdaU0lzSW01aGJXVWlMQ0pmWkdWamJHRnlZWFJwYjI1V1lXeDFaVlZ5YkZCeVpXWnBlR1Z5SWl3aWRtRnNkV1VpTENKZmNISnZjRlJ2UTJGdFpXeERZWE5sSWl3aWNISnZjRTVoYldVaUxDSnlaWEJzWVdObElpd2liV0YwWTJnaUxDSmpiMjUwWlc1MGN5SXNJbTltWm5ObGRDSXNJbk1pTENKMGIxVndjR1Z5UTJGelpTSXNJbTFoZEdOb1pXUWlMQ0p3Y21WbWFYZ2lMQ0oxY213aUxDSndiM04wWm1sNElpd2lkSEpwYlcxbFpDSXNJblJ5YVcwaUxDSmhjR2xqWlNJc0ltTm9ZWEpCZENJc0luTjFZbk4wY2lJc0ltNWxkMVZ5YkNJc0ltVnNZV0p2Y21GMFpVUmxZMnhoY21GMGFXOXVjeUlzSW5OMGVXeGxJaXdpWW1sdVpHbHVaMUJ5YjNacFpHVnlJaXdpWld4bGJXVnVkQ0lzSW1KaGMybGpRbWx1WkdsdVozTWlMQ0p5WlcxdmRtVkVhWE53YkdGNVRtOXVaU0lzSW01bGQwSnBibVJwYm1keklpd2libVYzVTNSNWJHVWlMQ0p6YTJsd1RHbHVaWE1pTENKamIyMXRaVzUwY3lJc0luQnZjMmwwYVc5dUlpd2ljM1I1YkdWemFHVmxkQ0lzSW5KMWJHVnpJaXdpY21WdGIzWmxVM1I1YkdVaUxDSnpkR0Z5ZENJc0ltVnVaQ0lzSW1SbFkyd2lMQ0pqYjI1a1JHVmpiQ0lzSW1KcGJtUldZV3gxWlNJc0luQnliM0JFWldaaGRXeDBWbUZzZFdVaUxDSnBjMEYwZEhJaUxDSnBjMEpwYm1RaUxDSnBjMGxtSWl3aVltbHVaRlI1Y0dVaUxDSnVaV1ZrUkdWbVlYVnNkRlpoYkhWbElpd2laMlYwUVhSMGNtbGlkWFJsSWl3aVoyVjBTVzV1WlhKVVpYaDBJaXdpWjJWMFNXNXVaWEpJZEcxc0lpd2laWEp5YjNJaUxDSmlhVzVrUkdWbVlYVnNkRlpoYkhWbElpd2lZbWx1WkU1aGJXVWlMQ0pwYm1SbGVFOW1JaXdpWlhod2NtVnpjMmx2YmtKcGJtUnBibWNpTENKbElpd2ljM1JoWTJzaUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSmtaV05zWVhKaGRHbHZia052Ym1ScGRHbHZiaUlzSW01dmRDSXNJbUpwYm1ScGJtZERiMjVrSWl3aVkyOXVaR2wwYVc5dVFtbHVaR2x1WnlJc0luSmxjR3hoWTJWa1YybDBhQ0lzSW5kaGNtNGlMQ0p5WlhCc1lXTmxaRlpoYkhWbElpd2liRzluSWl3aVltbHVaRTVoYldVeUlpd2lZbWx1WkNJc0ltSnBibVJXWVd3eUlpd2lkbWx5ZEhWaGJGTjBlV3hsSWl3aVpHbHpkQ0lzSW1Ga1pGTnNZWE5vWlhNaUxDSndjbTl3SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKamRYSnlaVzUwUW1sdVpHbHVaM01pTENKa1lYUmhRbWx1WkNJc0lsOWlhVzVrYVc1blUyVnlhV0ZzYVhwbGNpSXNJbk5sZEVGMGRISnBZblYwWlNJc0ltaGhjMVpwY25SMVlXeFRkSGxzWlNJc0luQnliM0F4SWl3aWRtbHlkSFZoYkVGMGRISlRkSGxzWlNJc0luWnpJaXdpZG1Gc0lpd2ljbVZ6SWl3aWNIVnphQ0lzSW5KbGRtVnljMlVpTENKcWIybHVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGTlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeGpRVU42UWtNc1UwRkJWMFFzVVVGQlVTeDNRa0ZEYmtKRkxGRkJRVlZHTEZGQlFWRXNjMEpCUTJ4Q1J5eFRRVUZYU0N4UlFVRlJMR2xDUVVWdVFra3NkMEpCUVRCQ0xGTkJRVk5ETEVWQlFXTkRMRVZCUVdORExFZEJRMnBGTEVsQlFVc3NTVUZCU1VNc1JVRkJTVWdzUlVGQllVa3NUMEZCVXl4RlFVRkhSQ3hIUVVGTExFVkJRVWRCTEVsQlF6VkRMRWRCUVRSQ0xGbEJRWGhDU0N4RlFVRmhSeXhIUVVGSFJTeE5RVUZ6UWt3c1JVRkJZVWNzUjBGQlIwY3NUVUZCVVV3c1JVRkRhRVVzVDBGQlQwMHNOa0pCUVRaQ1VDeEZRVUZoUnl4SFFVRkhTeXhOUVVGUFRpeEhRVWN2UkN4UFFVRlBMRTFCUjB4UExHbENRVUZ0UWl4VFFVRlRReXhIUVVNNVFpeFBRVUZQUVN4RlFVRlRReXhSUVVGUkxGbEJRV0VzVTBGQlUwTXNSVUZCVDBNc1JVRkJWVU1zUlVGQlVVTXNSMEZEY2tVc1QwRkJUMFlzUlVGQlUwY3NhVUpCU1doQ1ZDdzJRa0ZCSzBJc1UwRkJVME1zUlVGQlQwNHNSMEZEYWtRc1QwRkJTVTBzUlVGQlRVa3NUVUZCVFN4aFFVTkRTaXhGUVVGTlJ5eFJRVUZSTEhWQ1FVRjNRaXhUUVVGVFRTeEZRVUZUUXl4RlFVRlJReXhGUVVGTFF5eEhRVU5zUml4SlFVRkpReXhGUVVGVlJpeEZRVUZKUnl4UFFVTmtReXhGUVVGUlNpeEZRVUZKUnl4UFFVRlBSU3hQUVVGUExFZEJRMnBDTEV0QlFWUkVMRWRCUVRCQ0xFdEJRVlJCTEVWQlEyNUNSaXhGUVVGVlFTeEZRVUZSU1N4UFFVRlBMRVZCUVVkS0xFVkJRVkZxUWl4UFFVRlRMRWRCUlRkRGJVSXNSVUZCVVN4SFFVVldMRWxCUVVsSExFVkJRVk40UWl4RlFVRnhRbTFDTEVkQlEyeERMRTlCUVdVc1QwRkJXRXNzUlVGRFMxSXNSVUZCVTBzc1JVRkJVVWNzUlVGQlUwZ3NSVUZCVVVnc1JVRkZiRU5JTEVsQlMwcFVMRWRCU1ZCdFFpeHpRa0ZCZDBJc1UwRkJVME1zUlVGQlR6VkNMRVZCUVdORkxFVkJRWE5DTWtJc1JVRkJhVUpETEVWQlFWTkRMRVZCUVdWRExFZEJRM1pJTEVsQlFVbERMRVZCUVhORExHbENRVUZxUWtZc1IwRkJLME1zVDBGQmJFSkJMRVZCUVhsQ1FTeExRVU16UlVjc1JVRkJWeXhMUVVOWVF5eEZRVUZaTEU5QlFVRXNTVUZEVEc1RExFbEJTMVJCTEVWQlNtbENTaXhUUVVGVExFOUJRVk5uUXl4RlFVRlJMRXRCUTNwRFVTeFZRVUZCUVN4RlFVTkJReXhWUVVGQlFTeEpRVVYzUWtNc1YwRkJWME1zVFVGQlRTeEhRVUZIZGtNc1lVRkRPVU50UXl4RlFVRlpMRWRCUldRc1NVRkJTeXhKUVVGSmFFTXNSVUZCU1Vnc1JVRkJZVWtzVDBGQlV5eEZRVUZIUkN4SFFVRkxMRVZCUVVkQkxFbEJRelZETEVkQlFUUkNMRmxCUVhoQ1NDeEZRVUZoUnl4SFFVRkhSU3hMUVVOc1FpeEpRVUZCTEVsQlFVa3lRaXhIUVVGelJDeFhRVUY0UW1oRExFVkJRV0ZITEVkQlFVZEhMRTFCUVRoRExGRkJRWHBDVGl4RlFVRmhSeXhIUVVGSFN5eE5RVU53UlN4UFFVRmlNRUlzU1VGQmJVSkJMRVZCUVZkT0xFZEJRMnhEVFN4RlFVRlhlRU1zWlVGQlpUaERMRmxCUVZsT0xFVkJRVlZzUXl4RlFVRmhSeXhIUVVGSGEwTXNVMEZCVTBrc1RVRkJUM3BETEVWQlFXRkhMRWRCUVVkclF5eFRRVUZUU3l4SlFVRkxVQ3hGUVVGWExFVkJRVWNzUlVGQlJ5eFJRVU14U0N4RFFVTk1MRWxCUVVsUkxFVkJRVTh6UXl4RlFVRmhSeXhIUVVGSFJ5eExRVUZMVFN4TlFVRk5MR3RFUVVOMFF5eEhRVUZoTEU5QlFWUXJRaXhGUVVGbExFTkJSVUVzVDBGQllsUXNVVUZCUVVFc1NVRkJORUpPTEVsQlFYTkNUU3hGUVVGWFRpeEhRVVZxUlN4SlFVdEpaMElzUlVGRFFVTXNSVUZEUVVNc1JVRlFRVU1zUlVGQmIwSXNVMEZCV0Vvc1JVRkJTeXhIUVVOa1N5eEZRVUZ2UWl4VFFVRllUQ3hGUVVGTExFZEJRMlJxUXl4RlFVRlhhVU1zUlVGQlN5eEhRVVZvUWswc1JVRkJhMElzVDBGQldFNHNSVUZCU3l4SlFVRXdRaXhWUVVGWVFTeEZRVUZMTEVkQlMzQkRMRWRCUVVsTkxFZEJSMFlzUjBGR1FVd3NSVUZCVnpWRExFVkJRV0ZITEVkQlFVZEhMRXRCUVV0dFFpeFBRVUZQTEVWQlFVZDZRaXhGUVVGaFJ5eEhRVUZIUnl4TFFVRkxSaXhQUVVGVGRVTXNSVUZCU3l4SFFVRkhka01zVVVGRmFrUXNUMEZFUmt3c2QwSkJRWGRDUXl4RlFVRmpORU1zUlVGQlZURkRMRWRCUTNoRExFdEJRVTBzT0VKQlFXZERNRU1zUlVGQlZ5eFJRVUZWTlVNc1JVRkJZVWNzUjBGQlIwY3NVMEZETTBjc1EwRkZUQ3hKUVVGTGVVTXNSMEZCVlVNc1UwRkJRVUVzU1VGQmJVSnNRaXhSUVVGQlFTeEpRVUZwUTBZc1JVRkJkVUlzUzBGQlRTeHpSVUZGYUVjc1NVRkRTWE5DTEVWQlJFRkRMRWRCUVVGQkxFVkJOa0pLTEVkQk0wSkpTaXhIUVVOR1JDeEZRVUZ0UW1oRUxGTkJRVk56UkN4aFFVRmhkRUlzUlVGQlUzQkNMRWRCUTJ4RWVVTXNSMEZCUVVFc1JVRkRRVVFzUlVGQlZ5eGxRVU5FUml4SFFVdFdSU3hGUVVGWExFdEJRMHNzVVVGQlduaERMRTlCUVVGQkxFbEJRMU52UWl4RlFVTlVaMElzUlVGQmJVSm9SQ3hUUVVGVGRVUXNZVUZCWVhaQ0xFZEJSWHBEY1VJc1IwRkJRVUVzUlVGRmJVSXNVVUZCV25wRExGRkJRVUZCTEVsQlEwVnZRaXhGUVVOVVowSXNSVUZCYlVKb1JDeFRRVUZUZDBRc1lVRkJZWGhDTEVkQlN6TkRjVUlzUjBGQlFVRXNTMEZzUWtaQkxFOUJRVUZCTEVsQlFUQkNka0lzUzBGRFNtdENMRVZCUVcxQ0wwTXNkMEpCUVhkQ1F5eEZRVUZqVlN4RlFVRlZVaXhKUVVONlJtZEVMRVZCUVZjc1owSkJiMEpVUXl4SFFVRjVReXhQUVVGeVFrd3NSVUZGZEVJc1RVRkVRV3BFTEZGQlFWRXdSQ3hOUVVGTkxHZERRVUZwUTNaRUxFVkJRV0ZITEVkQlFVZEhMRXRCUVUxT0xFZEJReTlFTEdsRFFVRnRRMEVzUlVGQllVY3NSMEZCUjBjc1MwRkJUeXhMUVVGUFRpeEZRVUZoUnl4SFFVRkhTeXhOUVVGUkxFOUJRVk56UWl4RlFVRlZMRmxCUVdOR0xFVkJRVkVzU1VGQlRXeENMRVZCUVZjc1NVRkZNMG9zU1VGQlNUaERMRVZCUVcxQ1ZpeEZRVVZ1UWxjc1JVRkJXVlFzUjBGQlYwUXNSMEZCYVVVc1IwRkJNVUp5UXl4RlFVRlRaMFFzVVVGQlVTeExRVUZoTEVsQlFVdG9SQ3hGUVVGVExFbEJRVTlCTEVWQlFXcEdSQ3hwUWtGQmFVSkRMRWRCUlhKRUxFbEJRMFZ0UXl4RlFVRlpia1FzWlVGQlpXbEZMR3RDUVVGclFqTkVMRVZCUVdGSExFZEJRVWRMTEUxQlFVOXhRaXhGUVVGcFFqSkNMRWRCUTNKR0xFMUJRVTlKTEVkQlJWQXNUVUZFUVM5RUxGRkJRVkV3UkN4TlFVRk5MREpDUVVFMFFrc3NSVUZCUlVNc1RVRkJUeXhQUVVGUk4wUXNSVUZCWVVjc1IwRkJSMGNzUzBGQlRTeFJRVUZUVGl4RlFVRmhSeXhIUVVGSFN5eE5RVUZQTEZWQlFWZHpReXhGUVVGclFpeFZRVUZYYUVJc1IwRkRia280UWl4RlFVZFRMRTlCUVdKV0xGRkJRVUZCTEVsQlFUUkNha0lzUlVGQldXbENMRXRCUVRCQ2FrSXNSVUZCV1dsQ0xFOUJTV3hGTEdWQlFWcEJMRWRCUVhsRExGRkJRVnBQTEVsQlF5OUNVQ3hGUVVGWExFdEJRMWhQTEVWQlFWY3NiVUpCUVVFc1NVRkZRVE5DTEVkQlFYTkRMRTlCUVZwQkxFZEJRMjVEYUVNc1UwRkJVMmRGTEdkQ1FVRm5RbWhETEVWQlFWTXNVMEZOZEVNc1NVRkJTV2xETEVWQlFYVkNhRVVzZDBKQlFYZENReXhGUVVGalFTeEZRVUZoUnl4SFFVRkhSeXhMUVVGUExFMUJRVTlLTEVkQlF6TkdPRVFzUjBGQlFVRXNSVUZEU2l4SFFVRTJRaXhQUVVGNlFrUXNSVUZEUmtFc1JVRkJkVUpvUlN4M1FrRkJkMEpETEVWQlFXTkJMRVZCUVdGSExFZEJRVWRITEV0QlFVOHNVMEZCVlVvc1IwRkRPVVk0UkN4SFFVRkJRU3hQUVVWQkxFZEJRWEZITEU5QlFXcEhha1VzZDBKQlFYZENReXhGUVVGalFTeEZRVUZoUnl4SFFVRkhSeXhMUVVGUExGTkJRVlZLTEVkQlEzcEZMRXRCUVUwc2RVVkJSMVlzUjBGQk5rSXNUMEZCZWtJMlJDeEZRVU5HTEVsQlEwVXNTVUZCU1VVc1JVRkJZM1pGTEdWQlFXVjNSU3hwUWtGQmFVSklMRVZCUVhOQ2JFTXNSMEZEZUVWblFpeEhRVUZoYlVJc1JVRkJUU3hKUVVGTkxFbEJRVTBzU1VGQlRVTXNSVUZCWXl4UFFVRlRjRUlzUlVGQldTeFZRVU40UlN4TlFVRlBaU3hIUVVWUUxFMUJSRUV2UkN4UlFVRlJNRVFzVFVGQlRTeHJSRUZCYlVSUkxFVkJRWE5DTDBRc1JVRkJZVWNzUjBGQlIwY3NUVUZEYWtkelJDeEZRVWxQTEU5QlFXSldMRVZCUVcxQ2FrSXNSVUZCV1dsQ0xFZEJRVlZQTEVkQlFWbGFMRVZCUTNCRVdpeEZRVUZaZDBJc1IwRkJXVm9zUlVGSkwwSXNSMEZCYVVJc1QwRkJZbGdzUlVGRlJpeEpRVVZGTEZGQlFVRXNTVUZCVjBvc1IwRkJjME1zVDBGQldrRXNSVUZEYmtOSkxFVkJRVmQ0UXl4bFFVRmxPRU1zV1VGQldVNHNSVUZCVld4RExFVkJRV0ZITEVkQlFVZHJReXhUUVVGVFNTeE5RVUZQZWtNc1JVRkJZVWNzUjBGQlIydERMRk5CUVZOTExFbEJRVXRRTEVWQlFWY3NSVUZCUnl4RlFVRkhMRkZCUXpGSUxFTkJSVXdzU1VGQlNXZERMRVZCUVdVc1IwRkZaR3hDTEVsQlFVMXJRaXhGUVVGbGVrUXNSVUZCVnl4elFrRkJjVUp0UXl4RlFVRlpMRlZCUVZORExFVkJRVzFDTEhOQ1FVTnNSMW9zUlVGQlYzaERMR1ZCUVdVNFF5eFpRVUZaVGl4RlFVRlZiRU1zUlVGQllVY3NSMEZCUjJ0RExGTkJRVk5KTEUxQlFVOTZReXhGUVVGaFJ5eEhRVUZIYTBNc1UwRkJVMHNzU1VGQlMxQXNSVUZCVnl4RlFVRkhMRVZCUVVkblF5eEpRVVZxU1N4TlFVRlBVQ3hIUVVWUUxFMUJSRUV2UkN4UlFVRlJkVVVzUzBGQlN5eHpRa0ZCZFVKU0xFVkJRVWNzVDBGQlVUVkVMRVZCUVdGSExFbEJRM1JFZVVRc1QwRkxUQ3hEUVVWTUxFbEJRVWxUTEVWQlFXZENPVVFzTmtKQlFUWkNVQ3hGUVVGaFJ5eEhRVUZIU3l4TlFVRlBUaXhIUVVONFJTeEhRVUZKYlVVc1IwRkJhVUp5UlN4RlFVRmhSeXhIUVVGSFN5eFJRVU5zUWl4UFFVRmlNRUlzVVVGQlFVRXNTVUZCTkVKT0xFbEJRWFZDVFN4RlFVRlhUaXhIUVVOcVJDeFBRVUZpVFN4SFFVTkdMRWxCUTBWQkxFVkJRVmQ0UXl4bFFVRmxPRU1zV1VGQldVNHNSVUZCVld4RExFVkJRV0ZITEVkQlFVZHJReXhUUVVGVFNTeE5RVUZQZWtNc1JVRkJZVWNzUjBGQlIydERMRk5CUVZOTExFbEJRVXRRTEVWQlFWY3NSVUZCUnl4RlFVRkhia01zUlVGQllVY3NSMEZCUjBjc1MwRkJUeXhMUVVGUEswUXNSMEZETjBvc1RVRkJUMVFzUjBGRlVDeE5RVVJCTDBRc1VVRkJVWGxGTEVsQlFVa3NiME5CUVhGRFZpeEZRVUZITEU5QlFWRTFSQ3hGUVVGaFJ5eEpRVU51UlhsRUxFVkJUVm9zU1VGQlNWY3NSVUZCV1RsRUxHbENRVUZwUWxRc1JVRkJZVWNzUjBGQlIwY3NUVUZETjBOclJTeEZRVUZQTEcxQ1FVTlFReXhQUVVGQlFTeEpRVUZyUW5oRExFVkJRVEJDZVVNc1lVRkJiMEo2UXl4RlFVRXdRbmxETEdGQlFVVklMRkZCUVVGQkxFVkJSVFZHU1N4RlFVRlBMRk5CUVVFc1NVRkRRVEZETEVWQlFWbDFReXhMUVVOeVFuWkRMRVZCUVZsMVF5eEhRVUZSTEV0QlEzQkNSeXhGUVVGUExGTkJRVUVzU1VGSFJVWXNSMEZEVkhoRExFVkJRVmwxUXl4SFFVRlJMRWxCUVUxNFJTeEZRVUZoUnl4SFFVRkhSeXhMUVVGUExGRkJRVlZ0UlN4RlFVRlhMRTlCUVZORkxFVkJRVThzUzBGQlR6RkRMRVZCUVZsMVF5eFZRVU5zUjNaRExFVkJRVEJDZVVNc1lVRkJSVWdzU1VGRmJrTjBReXhGUVVGWmRVTXNSMEZCVVN4SlFVRk5lRVVzUlVGQllVY3NSMEZCUjBjc1MwRkJUeXhMUVVGUFdpeGxRVUZsYTBZc1YwRkJWMUFzUjBGQmFVSXNTVUZCVFUwc1JVRkJUeXhMUVVGUE1VTXNSVUZCV1hWRExFbEJUemRKTEZGQlFVRXNTVUZCVnpGRExFZEJRWE5ETEU5QlFWcEJMRVZCUVd0Q0xFTkJRM0pFTEVsQlFVc3NTVUZCU1N0RExFdEJRVkUxUXl4RlFVRXdRbmxETEdGQlEzcERMRWRCUVVsNlF5eEZRVUV3UW5sRExHRkJRVVZKTEdWQlFXVkVMRWRCUlRkRExFMUJSRUZvUml4UlFVRlJlVVVzU1VGQlNTeDNSVUZCZVVWUExFVkJRVTAxUXl4RlFVRXdRbmxETEdGQlFVVkhMRWRCUVU5cVJDeEhRVU40U0N3MlJVRkJLMFZwUkN4VFFVVnNSalZETEVWQlFUQkNlVU1zWVVGRmFrTXNTVUZCU1Vzc1JVRkJhMEpxUml4VFFVRlRjMFFzWVVGQllYUkNMRVZCUVZNc1lVRkRha1JyUkN4SFFVRm5ReXhQUVVGd1FrUXNSVUZCTWtKQkxFVkJRV3RDTEV0QlFVOHNTVUZCVFVVc2JVSkJRVzFDYUVRc1IwRkROMFp1UXl4VFFVRlRiMFlzWVVGQllYQkVMRVZCUVZNc1dVRkJZV3RFTEVkQlNUbERMRkZCUVVFc1NVRkJWM0JFTEVWQlFYTkNMRU5CUlM5Q0xFbEJRVWwxUkN4SFFVRkJRU3hGUVVOS0xFbEJRVXNzU1VGQlNVTXNTMEZCVTI1RUxFVkJRVEJDZVVNc1lVRkRNVU1zUjBGQlNYcERMRVZCUVRCQ2VVTXNZVUZCUlVrc1pVRkJaVTBzUjBGQlVTeERRVU55UkVRc1IwRkJRVUVzUlVGRFFTeE5RVVZLTEVkQlFVdEJMRWRCUjBnc1VVRkJRU3hKUVVGWGJFUXNSVUZCT0VKdlJDeHBRa0ZCYlVJc1EwRkRNVVFzU1VGQlNVTXNSVUZCUzNKRUxFVkJRVGhDYjBRc2QwSkJRMmhEY0VRc1JVRkJPRUp2UkN4cFFrRkRja053UkN4RlFVRTRRbTlFTEdsQ1FVRkpReXhsUVU1VWNrUXNSVUZCTUVKNVF5eGhRVlYyUkN4UFFVRlBUeXh0UWtGQmJVSm9SQ3hIUVVjMVFpeFBRVUZQUXl4SFFVZE1LME1zYlVKQlFYRkNMRk5CUVZOTkxFZEJRMmhETEVsQlFVbERMRXRCUTBvc1NVRkJTeXhKUVVGSldDeExRVUZSVlN4RlFVTllRU3hGUVVGSlZDeGxRVUZsUkN4TFFVTkhMR2xDUVVGaVZTeEZRVUZKVml4SFFVRnRRbGNzUlVGQlNVTXNTMEZCUzFvc1JVRkJUeXhQUVVGalNTeHRRa0ZCYlVKTkxFVkJRVWxXTEVsQlFWTXNUVUZETTBaWExFVkJRVWxETEV0QlFVdGFMRVZCUVU4c1MwRkJUMVVzUlVGQlNWWXNTMEZGY0VNc1QwRkJUMWNzUlVGQlNVVXNWVUZCVlVNc1MwRkJTeXhQUVVjMVFrTXNUMEZCVDBNc1VVRkJWV3hGSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWpiMjUyWlhKMFpYSXZaR1ZqYkdGeVlYUnBiMjV6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGw7ZnVuY3Rpb24gX2V4dGVuZChlLHQpe2lmKHQpZm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09dFtuXSk7cmV0dXJuIGV9dmFyIG9iakV4dGVuZD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mICQuZXh0ZW5kPyQuZXh0ZW5kKCEwLGUsdCk6X2V4dGVuZChlLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodCkpKX0sZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7dmFyIG49JChlKS5hdHRyKHQpO3JldHVybiB2b2lkIDA9PT1uJiYobj1udWxsKSxufSxzZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0LG4peyQoZSkuYXR0cih0LG4pfSxyZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXskKGUpLnJlbW92ZUF0dHIodCl9LGdldElubmVyVGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gJChlKS50ZXh0KCl9LGdldElubmVySHRtbD1mdW5jdGlvbihlKXtyZXR1cm4gJChlKS5odG1sKCl9LGdldExvd2VyVGFnTmFtZT1mdW5jdGlvbihlKXtyZXR1cm5cIlwiPT09ZS50YWdOYW1lJiZcInN0cmluZ1wiPT10eXBlb2YgZS5uYW1lP2UubmFtZS50b0xvd2VyQ2FzZSgpOlwiXCIhPT1lLnRhZ05hbWU/ZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk6JChlKS5wcm9wKFwidGFnTmFtZVwiKS50b0xvd2VyQ2FzZSgpfSxzZXRDb250ZW50PWZ1bmN0aW9uKGUsdCl7JChlKS5odG1sKHQpfSxyZXBsYWNlSHRtbD1mdW5jdGlvbihlLHQpeyQoZSkucmVwbGFjZVdpdGgodCl9LHJlbW92ZUVsZW1lbnRzPWZ1bmN0aW9uKGUsdCl7dCYmdm9pZCAwIT09ZS5kZXRhY2gmJmUuZGV0YWNoKCksZS5yZW1vdmUoKX07bW9kdWxlLmV4cG9ydHM9e2dldEF0dHJpYnV0ZTpnZXRBdHRyaWJ1dGUsc2V0QXR0cmlidXRlOnNldEF0dHJpYnV0ZSxyZW1vdmVBdHRyaWJ1dGU6cmVtb3ZlQXR0cmlidXRlLGdldElubmVyVGV4dDpnZXRJbm5lclRleHQsZ2V0SW5uZXJIdG1sOmdldElubmVySHRtbCxnZXRMb3dlclRhZ05hbWU6Z2V0TG93ZXJUYWdOYW1lLHNldENvbnRlbnQ6c2V0Q29udGVudCxyZXBsYWNlSHRtbDpyZXBsYWNlSHRtbCxyZW1vdmVFbGVtZW50czpyZW1vdmVFbGVtZW50cyxvYmpFeHRlbmQ6b2JqRXh0ZW5kfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUnZiWFYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSWlRaUxDSjNhVzVrYjNjaUxDSnFVWFZsY25raUxDSm5iRzlpWVd3aUxDSmZaWGgwWlc1a0lpd2lkR0Z5WjJWMElpd2ljMjkxY21ObElpd2ljSEp2Y0NJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWIySnFSWGgwWlc1a0lpd2liMkpxSWl3aVpYaDBaVzVrWlhJaUxDSmxlSFJsYm1RaUxDSktVMDlPSWl3aWNHRnljMlVpTENKemRISnBibWRwWm5raUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKbGJHVnRaVzUwSWl3aVlYUjBjbWxpZFhSbElpd2ljbVZ6SWl3aVlYUjBjaUlzSW5ObGRFRjBkSEpwWW5WMFpTSXNJblpoYkhWbElpd2ljbVZ0YjNabFFYUjBjbWxpZFhSbElpd2ljbVZ0YjNabFFYUjBjaUlzSW1kbGRFbHVibVZ5VkdWNGRDSXNJblJsZUhRaUxDSm5aWFJKYm01bGNraDBiV3dpTENKb2RHMXNJaXdpWjJWMFRHOTNaWEpVWVdkT1lXMWxJaXdpZEdGblRtRnRaU0lzSW01aGJXVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0luTmxkRU52Ym5SbGJuUWlMQ0pqYjI1MFpXNTBJaXdpY21Wd2JHRmpaVWgwYld3aUxDSnlaWEJzWVdObFYybDBhQ0lzSW5KbGJXOTJaVVZzWlcxbGJuUnpJaXdpSkdWc1pXMWxiblJ6SWl3aWRISjVSR1YwWVdOb0lpd2laR1YwWVdOb0lpd2ljbVZ0YjNabElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZOUVN4SlFVRkpRU3hGUVVGMVFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkRMRTlCUVhOQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpVUXNUMEZCU1N4TFFVVXZSeXhUUVVGVFJTeFJRVUZSUXl4RlFVRlJReXhIUVVOMlFpeEhRVUZKUVN4RlFVTkdMRWxCUVVzc1NVRkJTVU1zUzBGQlVVUXNSVUZEV0VFc1JVRkJUMFVzWlVGQlpVUXNTMEZEZUVKR0xFVkJRVTlGTEVkQlFWRkVMRVZCUVU5RExFbEJTVFZDTEU5QlFVOUdMRVZCUjFRc1NVRkJTVWtzVlVGQldTeFRRVUZUUXl4RlFVRkxReXhIUVVNMVFpeE5RVUYxUWl4dFFrRkJXbGdzUlVGQlJWa3NUMEZEU2xvc1JVRkJSVmtzVVVGQlFVRXNSVUZCWVVZc1JVRkJTME1zUjBGRmNFSlFMRkZCUVZGTkxFVkJRVXRITEV0QlFVdERMRTFCUVUxRUxFdEJRVXRGTEZWQlFWVktMRTFCU1RsRFN5eGhRVUZsTEZOQlFWTkRMRVZCUVZORExFZEJRMjVETEVsQlFVbERMRVZCUVUxdVFpeEZRVUZGYVVJc1IwRkJVMGNzUzBGQlMwWXNSMEZGTVVJc1dVRkJRU3hKUVVSWFF5eEpRVUZ2UWtFc1JVRkJUU3hOUVVNNVFrRXNSMEZKVEVVc1lVRkJaU3hUUVVGVFNpeEZRVUZUUXl4RlFVRlhTU3hIUVVNNVEzUkNMRVZCUVVWcFFpeEhRVUZUUnl4TFFVRkxSaXhGUVVGWFNTeEpRVWw2UWtNc1owSkJRV3RDTEZOQlFWTk9MRVZCUVZORExFZEJRM1JEYkVJc1JVRkJSV2xDTEVkQlFWTlBMRmRCUVZkT0xFbEJTWEJDVHl4aFFVRmxMRk5CUVZOU0xFZEJRekZDTEU5QlFVOXFRaXhGUVVGRmFVSXNSMEZCVTFNc1VVRkxhRUpETEdGQlFXVXNVMEZCVTFZc1IwRkRNVUlzVDBGQlQycENMRVZCUVVWcFFpeEhRVUZUVnl4UlFVbG9Ra01zWjBKQlFXdENMRk5CUVZOYUxFZEJTVGRDTEUxQlFYZENMRXRCUVhCQ1FTeEZRVUZSWVN4VFFVRjVReXhwUWtGQmFFSmlMRVZCUVZGakxFdEJRWGxDWkN4RlFVRlJZeXhMUVVGTFF5eGpRVU16UkN4TFFVRndRbVlzUlVGQlVXRXNVVUZCZFVKaUxFVkJRVkZoTEZGQlFWRkZMR05CUXpWRGFFTXNSVUZCUldsQ0xFZEJRVk5XTEV0QlFVc3NWMEZCVjNsQ0xHVkJTV2hEUXl4WFFVRmhMRk5CUVZOb1FpeEZRVUZUYVVJc1IwRkRha05zUXl4RlFVRkZhVUlzUjBGQlUxY3NTMEZCUzAwc1NVRkpaRU1zV1VGQll5eFRRVUZUYkVJc1JVRkJVMWNzUjBGRGJFTTFRaXhGUVVGRmFVSXNSMEZCVTIxQ0xGbEJRVmxTTEVsQlNYSkNVeXhsUVVGcFFpeFRRVUZUUXl4RlFVRlhReXhIUVVOdVEwRXNVVUZCUVVFc1NVRkJiMEpFTEVWQlFWVkZMRkZCUVhkQ1JpeEZRVUZWUlN4VFFVVndSVVlzUlVGQlZVY3NWVUZIV2tNc1QwRkJUME1zVTBGRFRETkNMR0ZCUVdOQkxHRkJRMlJMTEdGQlFXTkJMR0ZCUTJSRkxHZENRVUZwUWtFc1owSkJRMnBDUlN4aFFVRmpRU3hoUVVOa1JTeGhRVUZqUVN4aFFVTmtSU3huUWtGQmFVSkJMR2RDUVVOcVFra3NWMEZCV1VFc1YwRkRXa1VzV1VGQllVRXNXVUZEWWtVc1pVRkJaMEpCTEdWQlEyaENOVUlzVlVGQlYwRWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmMzSmpMMnB6TDJOdmJuWmxjblJsY2k5a2IyMTFkR2xzY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGVsYWJvcmF0ZURlY2xhcmF0aW9ucz1yZXF1aXJlKFwiLi9kZWNsYXJhdGlvbnMuanNcIiksdXRpbHM9cmVxdWlyZShcIi4vdXRpbHMuanNcIiksbW9kZWxEZWY9cmVxdWlyZShcIi4vbW9kZWwuanNcIiksX2dldE9wdGlvbnNPYmplY3Q9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc3BsaXQoXCJ8XCIpLG89e30saT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbD10W2ldLnNwbGl0KFwiPVwiKTtvW2xbMF0udHJpbSgpXT1sLmxlbmd0aD4xP2xbMV0udHJpbSgpOmxbMF0udHJpbSgpfXJldHVybiBvfSxfZmlsdGVyUHJvcHM9ZnVuY3Rpb24oZSx0LG8pe3ZhciBpPVtdO2Zvcih2YXIgbCBpbiBlKWlmKCFsLm1hdGNoKC9eY3VzdG9tU3R5bGUkLykmJiFsLm1hdGNoKC9eXy8pJiZlLmhhc093blByb3BlcnR5KGwpKXt2YXIgYT1udWxsIT09ZVtsXSYmdm9pZCAwIT09ZVtsXS5fY2F0ZWdvcnkmJlwic3R5bGVcIj09ZVtsXS5fY2F0ZWdvcnk7XCJpZFwiPT1sfHxcInR5cGVcIj09bHx8bC5tYXRjaCgvQmxvY2tzJC8pfHwoXCJzdHlsZXJcIj09dD8oYXx8bz4wKSYmaS5wdXNoKGwpOlwiZWRpdFwiPT10P251bGwhPT1lW2xdJiZ2b2lkIDAhPT1lW2xdLl9jYXRlZ29yeSYmXCJjb250ZW50XCI9PWVbbF0uX2NhdGVnb3J5JiYodm9pZCAwPT09ZVtsXS5fY29udGV4dHx8XCJibG9ja1wiIT1lW2xdLl9jb250ZXh0KSYmaS5wdXNoKGwpOnZvaWQgMD09PXQmJmkucHVzaChsKSl9cmV0dXJuIGl9LF9wcm9wSW5wdXQ9ZnVuY3Rpb24oZSx0LG8saSxsKXt2YXIgYSxuPVwiXCI7aWYobnVsbCE9PWUmJnZvaWQgMCE9PWUuX3dpZGdldCYmKGE9ZS5fd2lkZ2V0KSx2b2lkIDA9PT1hKXRocm93XCJVbmtub3duIGRhdGEgdHlwZSBmb3IgXCIrdDt2YXIgcz1cImZvY3VzYWJsZTogdHJ1ZVwiO2lmKFwiZWRpdFwiPT1pJiYocys9XCIsIGV2ZW50OiB7IGZvY3VzOiBmdW5jdGlvbih1aSwgZXZlbnQpIHsgJCgkZWxlbWVudCkuY2xpY2soKTsgfSB9IFwiKSxuKz0nPGxhYmVsIGNsYXNzPVwiZGF0YS0nK2ErJ1wiJysoXCJib29sZWFuXCI9PWE/XCIgZGF0YS1iaW5kPVxcXCJldmVudDogeyBtb3VzZWRvd246IGZ1bmN0aW9uKHVpLCBldnQpIHsgaWYgKGV2dC5idXR0b24gPT0gMCkgeyB2YXIgaW5wdXQgPSAkKCRlbGVtZW50KS5maW5kKCdpbnB1dCcpOyB2YXIgY2ggPSBpbnB1dC5wcm9wKCdjaGVja2VkJyk7IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGlucHV0LmNsaWNrKCk7IGlucHV0LnByb3AoJ2NoZWNrZWQnLCAhY2gpOyBpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKTsgfSwgMCk7IH0gfSB9LCBjbGljazogZnVuY3Rpb24odWksIGV2dCkgeyBldnQucHJldmVudERlZmF1bHQoKTsgfSwgY2xpY2tCdWJibGU6IGZhbHNlXFxcIlwiOlwiXCIpK1wiPlwiLHZvaWQgMCE9PWwmJnZvaWQgMCE9PWxbYV0pe3ZhciBkPWxbYV0scj17fTtpZih2b2lkIDAhPT1kLnBhcmFtZXRlcnMpZm9yKHZhciBjIGluIGQucGFyYW1ldGVycylkLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoYykmJnZvaWQgMCE9PWVbXCJfXCIrY10mJihyW2NdPWVbXCJfXCIrY10pO24rPWQuaHRtbChvLHMscil9ZWxzZSBpZihcImJvb2xlYW5cIj09YSluKz0nPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwibm90aGluZ1wiIGRhdGEtYmluZD1cImNoZWNrZWQ6ICcrbytcIiwgXCIrcysnXCIgLz4nLG4rPSc8c3BhbiBjbGFzcz1cImNoZWNrYm94LXJlcGxhY2VyXCIgPjwvc3Bhbj4nO2Vsc2UgaWYoXCJjb2xvclwiPT1hKW4rPSc8aW5wdXQgc2l6ZT1cIjdcIiB0eXBlPVwidGV4dFwiIGRhdGEtYmluZD1cImNvbG9ycGlja2VyOiB7IGNvbG9yOiAnK28rXCIsIHN0cmluZ3M6ICRyb290LnQoJ1RoZW1lIENvbG9ycyxTdGFuZGFyZCBDb2xvcnMsV2ViIENvbG9ycyxUaGVtZSBDb2xvcnMsQmFjayB0byBQYWxldHRlLEhpc3RvcnksTm8gaGlzdG9yeSB5ZXQuJykgfSwgLCBcIitzKydcIiAvPic7ZWxzZSBpZihcInNlbGVjdFwiPT1hKXtpZih2b2lkIDAhPT1lLl9vcHRpb25zKXt2YXIgcD1fZ2V0T3B0aW9uc09iamVjdChlLl9vcHRpb25zKTtmb3IodmFyIHYgaW4gbis9JzxzZWxlY3QgZGF0YS1iaW5kPVwidmFsdWU6ICcrbytcIiwgXCIrcysnXCI+JyxwKXAuaGFzT3duUHJvcGVydHkodikmJihuKz0nPG9wdGlvbiB2YWx1ZT1cIicrditcIlxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiAkcm9vdC51dCgndGVtcGxhdGUnLCAnXCIrdXRpbHMuYWRkU2xhc2hlcyhwW3ZdKStcIicpXFxcIj5cIitwW3ZdK1wiPC9vcHRpb24+XCIpO24rPVwiPC9zZWxlY3Q+XCJ9fWVsc2UgaWYoXCJmb250XCI9PWEpbis9JzxzZWxlY3QgdHlwZT1cInRleHRcIiBkYXRhLWJpbmQ9XCJ2YWx1ZTogJytvK1wiLCBcIitzKydcIj4nLG4rPSc8b3B0Z3JvdXAgbGFiZWw9XCJTYW5zLVNlcmlmIEZvbnRzXCI+JyxuKz0nPG9wdGlvbiB2YWx1ZT1cIkFyaWFsLEhlbHZldGljYSxzYW5zLXNlcmlmXCI+QXJpYWw8L29wdGlvbj4nLG4rPVwiPG9wdGlvbiB2YWx1ZT1cXFwiJ0NvbWljIFNhbnMgTVMnLGN1cnNpdmUsc2Fucy1zZXJpZlxcXCI+Q29taWMgU2FucyBNUzwvb3B0aW9uPlwiLG4rPSc8b3B0aW9uIHZhbHVlPVwiSW1wYWN0LENoYXJjb2FsLHNhbnMtc2VyaWZcIj5JbXBhY3Q8L29wdGlvbj4nLG4rPVwiPG9wdGlvbiB2YWx1ZT1cXFwiJ1RyZWJ1Y2hldCBNUycsSGVsdmV0aWNhLHNhbnMtc2VyaWZcXFwiPlRyZWJ1Y2hldCBNUzwvb3B0aW9uPlwiLG4rPSc8b3B0aW9uIHZhbHVlPVwiVmVyZGFuYSxHZW5ldmEsc2Fucy1zZXJpZlwiPlZlcmRhbmE8L29wdGlvbj4nLG4rPVwiPC9vcHRncm91cD5cIixuKz0nPG9wdGdyb3VwIGxhYmVsPVwiU2VyaWYgRm9udHNcIj4nLG4rPSc8b3B0aW9uIHZhbHVlPVwiR2VvcmdpYSxzZXJpZlwiPkdlb3JnaWE8L29wdGlvbj4nLG4rPVwiPG9wdGlvbiB2YWx1ZT1cXFwiJ1RpbWVzIE5ldyBSb21hbicsVGltZXMsc2VyaWZcXFwiPlRpbWVzIE5ldyBSb21hbjwvb3B0aW9uPlwiLG4rPVwiPC9vcHRncm91cD5cIixuKz0nPG9wdGdyb3VwIGxhYmVsPVwiTW9ub3NwYWNlIEZvbnRzXCI+JyxuKz1cIjxvcHRpb24gdmFsdWU9XFxcIidDb3VyaWVyIE5ldycsQ291cmllcixtb25vc3BhY2VcXFwiPkNvdXJpZXIgTmV3PC9vcHRpb24+XCIsbis9XCI8L29wdGdyb3VwPlwiLG4rPVwiPC9zZWxlY3Q+XCI7ZWxzZSBpZihcInVybFwiPT1hKW4rPSc8ZGl2IGNsYXNzPVwidWktdGV4dGJ1dHRvblwiPicsbis9JzxpbnB1dCBjbGFzcz1cInVpLXRleHRidXR0b24taW5wdXRcIiBzaXplPVwiN1wiIHR5cGU9XCJ1cmxcIiBwYXR0ZXJuPVwiKG1haWx0bzouK0AuK3xodHRwcz86Ly8uK1xcXFwuLit8XFxcXFsuKlxcXFxdLiopXCIgdmFsdWU9XCJub3RoaW5nXCIgZGF0YS1iaW5kPVwiY3NzOiB7IHdpdGhCdXR0b246IHR5cGVvZiAkcm9vdC5saW5rRGlhbG9nICE9PSBcXCd1bmRlZmluZWRcXCcgfSwgdmFsaWRhdGVkVmFsdWU6ICcrbytcIiwgXCIrcysnXCIgLz4nLG4rPVwiPGEgY2xhc3M9XFxcInVpLXRleHRidXR0b24tYnV0dG9uXFxcIiBkYXRhLWJpbmQ9XFxcInZpc2libGU6IHR5cGVvZiAkcm9vdC5saW5rRGlhbG9nICE9PSAndW5kZWZpbmVkJywgY2xpY2s6IHR5cGVvZiAkcm9vdC5saW5rRGlhbG9nICE9PSAndW5kZWZpbmVkJyA/ICRyb290LmxpbmtEaWFsb2cuYmluZCgkZWxlbWVudC5wcmV2aW91c1NpYmxpbmcpIDogZmFsc2UsIGJ1dHRvbjogeyBpY29uczogeyBwcmltYXJ5OiAnZmEgZmEtZncgZmEtZWxsaXBzaXMtaCcgfSwgbGFiZWw6ICdPcHppb25pJywgdGV4dDogZmFsc2UgfVxcXCI+T3B6aW9uaTwvYT5cIixuKz1cIjwvZGl2PlwiO2Vsc2UgaWYoXCJpbnRlZ2VyXCI9PWEpe3ZhciB1PTAsYj0xZTM7bnVsbCE9PWUmJnZvaWQgMCE9PWUuX21heCYmKGI9ZS5fbWF4KSxudWxsIT09ZSYmdm9pZCAwIT09ZS5fbWluJiYodT1lLl9taW4pO3ZhciBoPWItdT49MTAwPzEwOjE7bis9JzxpbnB1dCBjbGFzcz1cIm51bWJlci1zcGlubmVyXCIgc2l6ZT1cIjdcIiBzdGVwPVwiJytoKydcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCItMVwiIGRhdGEtYmluZD1cInNwaW5uZXI6IHsgbWluOiAnK3UrXCIsIG1heDogXCIrYitcIiwgcGFnZTogXCIrNSpoK1wiLCB2YWx1ZTogXCIrbytcIiB9LCB2YWx1ZVVwZGF0ZTogWydjaGFuZ2UnLCAnc3BpbiddLCBcIitzKydcIiAvPid9ZWxzZSBuKz0nPGlucHV0IHNpemU9XCI3XCIgdHlwZT1cInRleHRcIiB2YWx1ZT1cIm5vdGhpbmdcIiBkYXRhLWJpbmQ9XCJ2YWx1ZTogJytvK1wiLCBcIitzKydcIiAvPic7cmV0dXJuIG4rXCI8L2xhYmVsPlwifSxfZ2V0R2xvYmFsU3R5bGVQcm9wPWZ1bmN0aW9uKGUsdCxvLGkpe3ZhciBsO3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dCYmdm9pZCAwPT09dC5fd2lkZ2V0fHx2b2lkIDAhPT1vJiZ2b2lkIDAhPT1pJiZpLmxlbmd0aD4wJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmdm9pZCAwIT09ZVtpXSYmKGw9ZVtpXSksbH0sX3Byb3BFZGl0b3I9ZnVuY3Rpb24oZSx0LG8saSxsLGEsbixzLGQscixjLHAsdix1LGIpe2lmKHZvaWQgMD09PWQmJihkPTApLHZvaWQgMCE9PW4mJlwib2JqZWN0XCI9PXR5cGVvZiBpJiZudWxsIT09aSYmdm9pZCAwPT09aS5fdXNlY291bnQpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5kZWJ1ZyYmY29uc29sZS5kZWJ1ZyhcIklnbm9yaW5nXCIsYSxcInByb3BlcnR5IGJlY2F1c2UgaXQgaXMgbm90IHVzZWQgYnkgdGhlIHRlbXBsYXRlXCIsXCJwcm9wOlwiLG4sXCJ0eXBlOlwiLHMsXCJsZXZlbDpcIixkLGUuX3RlbXBsYXRlTmFtZSksXCJcIjt2YXIgaCxmPXZvaWQgMCE9PXA/bitcIi5fZGVmYXVsdENvbXB1dGVkXCI6bixtPVwiXCIsZz1mLF89MSx5PTE7aWYoXCJvYmplY3RcIj09dHlwZW9mIGkmJm51bGwhPT1pJiZ2b2lkIDA9PT1pLl93aWRnZXR8fHZvaWQgMD09PXAmJihfKz0xKSx2b2lkIDA9PT1wJiZ2b2lkIDAhPT1yJiYoeSs9ciksdm9pZCAwIT09biYmdiYmKG0rPVwiXFx4M2MhLS0ga28gaWZTdWJzOiB7IGRhdGE6IFwiK2crXCIsIHRocmVzaG9sZDogXCIreStcIiwgZ3V0dGVyOiBcIitfK1wiIH0gLS1cXHgzZVwiKSx2b2lkIDA9PT1ufHxudWxsIT09aSYmdm9pZCAwIT09aS5fbmFtZXx8Y29uc29sZS5sb2coXCJNaXNzaW5nIGxhYmVsIGZvciBwcm9wZXJ0eSBcIixuKSx2b2lkIDA9PT1uJiZudWxsIT09aSYmdm9pZCAwPT09aS5fbmFtZSYmXCJ0aGVtZVwiIT09aS50eXBlJiZjb25zb2xlLmxvZyhcIk1pc3NpbmcgbGFiZWwgZm9yIG9iamVjdCBcIixpLnR5cGUpLFwib2JqZWN0XCI9PXR5cGVvZiBpJiZudWxsIT09aSYmdm9pZCAwPT09aS5fd2lkZ2V0KXt2YXIgaz1fZmlsdGVyUHJvcHMoaSxzLGQpLHg9XCJzdHlsZXJcIj09cyYmbnVsbCE9PWkmJnZvaWQgMCE9PWkuY3VzdG9tU3R5bGUmJnZvaWQgMCE9PXAsUz1cIlwiLHc9XCJcIjt2b2lkIDAhPT1uJiZcImVkaXRcIj09cyYmKFM9XCIsIGNsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RJdGVtKFwiK24rXCIsICRkYXRhKTsgcmV0dXJuIGZhbHNlIH0sIGNsaWNrQnViYmxlOiBmYWxzZSwgY3NzOiB7IHNlbGVjdGVkaXRlbTogJHJvb3QuaXNTZWxlY3RlZEl0ZW0oXCIrbitcIikgfSwgc2Nyb2xsSW50b1ZpZXc6ICRyb290LmlzU2VsZWN0ZWRJdGVtKFwiK24rXCIpLCBcIix3Kz1cIiBzZWxlY3RhYmxlXCIpLHgmJih3Kz1cIiBzdXBwb3J0c0N1c3RvbVN0eWxlc1wiKSxtKz0nPGRpdiBjbGFzcz1cIm9iakVkaXQgbGV2ZWwnK2QrdysnXCIgZGF0YS1iaW5kPVwidG9vbHRpcHM6IHt9JytTKydcIj4nO3ZhciAkLGosRCxCPW51bGwhPT1pJiZ2b2lkIDAhPT1pLl9uYW1lP2kuX25hbWU6dm9pZCAwIT09bj9cIltcIituK1wiXVwiOlwiXCI7aWYoeCl7dmFyIEU9XCJTdGlsZVwiO3ZvaWQgMCE9PWwmJm51bGwhPT1sJiZ2b2lkIDAhPT1sLl9uYW1lP0U9bC5fbmFtZTpjb25zb2xlLmxvZyhcIk1pc3NpbmcgbGFiZWwgZm9yIHRoZW1lIHNlY3Rpb24gXCIsbixudWxsIT09aT9pLnR5cGU6XCItXCIpLEI9XCI8c3BhbiBjbGFzcz1cXFwiYmxvY2tTZWxlY3Rpb25NZXRob2RcXFwiIGRhdGEtYmluZD1cXFwidGV4dDogY3VzdG9tU3R5bGUoKSA/ICRyb290LnV0KCd0ZW1wbGF0ZScsICdcIit1dGlscy5hZGRTbGFzaGVzKEIpK1wiJykgOiAkcm9vdC51dCgndGVtcGxhdGUnLCAnXCIrdXRpbHMuYWRkU2xhc2hlcyhFKStcIicpXFxcIj5CbG9jazwvc3Bhbj5cIn1lbHNlIEI9XCI8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRyb290LnV0KCd0ZW1wbGF0ZScsICdcIit1dGlscy5hZGRTbGFzaGVzKEIpK1wiJylcXFwiPlwiK0IrXCI8L3NwYW4+XCI7bSs9XCI8c3BhblwiKyhoPW51bGwhPT1pJiZ2b2lkIDAhPT1pLl9oZWxwPycgdGl0bGU9XCInK3V0aWxzLmFkZFNsYXNoZXMoaS5faGVscCkrXCJcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyB0aXRsZTogJHJvb3QudXQoJ3RlbXBsYXRlJywgJ1wiK3V0aWxzLmFkZFNsYXNoZXMoaS5faGVscCkrXCInKSB9XFxcIlwiOlwiXCIpKycgY2xhc3M9XCJvYmpMYWJlbCBsZXZlbCcrZCsnXCI+JytCK1wiPC9zcGFuPlwiLFwiZWRpdFwiPT1zJiZ2b2lkIDAhPT1pLl9ibG9ja0Rlc2NyaXB0aW9uJiYobSs9XCI8ZGl2IGNsYXNzPVxcXCJibG9ja0Rlc2NyaXB0aW9uXFxcIiBkYXRhLWJpbmQ9XFxcImh0bWw6ICRyb290LnV0KCd0ZW1wbGF0ZScsICdcIit1dGlscy5hZGRTbGFzaGVzKGkuX2Jsb2NrRGVzY3JpcHRpb24pK1wiJylcXFwiPlwiK2kuX2Jsb2NrRGVzY3JpcHRpb24rXCI8L2Rpdj5cIikseCYmKG0rPSc8bGFiZWwgY2xhc3M9XCJkYXRhLWJvb2xlYW4gYmxvY2tDaGVja1wiIGRhdGEtYmluZD1cInRvb2x0aXBzOiB7IH1cIj4nLG0rPSc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJub3RoaW5nXCIgZGF0YS1iaW5kPVwiZm9jdXNhYmxlOiB0cnVlLCBjaGVja2VkOiBjdXN0b21TdHlsZVwiIC8+JyxtKz0nPHNwYW4gdGl0bGU9XCJTd2l0Y2ggYmV0d2VlbiBnbG9iYWwgYW5kIGJsb2NrIGxldmVsIHN0eWxlcyBlZGl0aW5nXCIgZGF0YS1iaW5kPVwiYXR0cjogeyB0aXRsZTogJHJvb3QudChcXCdTd2l0Y2ggYmV0d2VlbiBnbG9iYWwgYW5kIGJsb2NrIGxldmVsIHN0eWxlcyBlZGl0aW5nXFwnKSB9XCIgY2xhc3M9XCJjaGVja2JveC1yZXBsYWNlciBjaGVja2JveC1yZXBsYWNlci1vbm9mZlwiPjwvc3Bhbj4nLG0rPVwiPC9sYWJlbD5cIixtKz1cIlxceDNjIS0tIGtvIHRlbXBsYXRlOiB7IG5hbWU6ICdjdXN0b21zdHlsZScsIGlmOiBjdXN0b21TdHlsZSB9IC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKSx2b2lkIDAhPT1uJiYobSs9XCJcXHgzYyEtLSBrbyB3aXRoOiBcIituK1wiIC0tXFx4M2VcIiwxPT1kJiZ2b2lkIDAhPT1uJiZ2b2lkIDAhPT1pLl9wcmV2aWV3QmluZGluZ3MmJnZvaWQgMCE9PWUmJih2b2lkIDAhPT11JiYobSs9J1xceDNjIS0tIGtvIHdpdGg6ICRyb290LmNvbnRlbnQoKSAtLVxceDNlPGRpdiBjbGFzcz1cIm9ialByZXZpZXdcIiBkYXRhLWJpbmQ9XCInK3UrJ1wiPjwvZGl2PlxceDNjIS0tIC9rbyAtLVxceDNlJyksdm9pZCAwIT09YiYmKG0rPSdcXHgzYyEtLSBrbyB3aXRoOiAkcGFyZW50IC0tXFx4M2U8ZGl2IGNsYXNzPVwib2JqUHJldmlld1wiIGRhdGEtYmluZD1cIicrYisnXCI+PC9kaXY+XFx4M2MhLS0gL2tvIC0tXFx4M2UnKSxtKz0nPGRpdiBjbGFzcz1cIm9ialByZXZpZXdcIj48ZGl2IGNsYXNzPVwib2JqUHJldmlld0lubmVyXCIgZGF0YS1iaW5kPVwiJytlbGFib3JhdGVEZWNsYXJhdGlvbnModm9pZCAwLGkuX3ByZXZpZXdCaW5kaW5ncyxvLGUuYmluZCh0aGlzLGErXCIuXCIpKSsnXCI+PC9kaXY+PC9kaXY+JykpLDA9PT1kJiZ2b2lkIDAhPT1pLl9wcmV2aWV3QmluZGluZ3MmJigkPWVsYWJvcmF0ZURlY2xhcmF0aW9ucyh2b2lkIDAsaS5fcHJldmlld0JpbmRpbmdzLG8sZS5iaW5kKHRoaXMsYS5sZW5ndGg+MD9hK1wiLlwiOlwiXCIpKSk7dmFyIEMsST1tLmxlbmd0aDtmb3Ioaj0wO2o8ay5sZW5ndGg7aisrKUQ9YS5sZW5ndGg+MD9hK1wiLlwiK2tbal06a1tqXSxcIm9iamVjdFwiPT10eXBlb2YgaVtrW2pdXSYmbnVsbCE9PWlba1tqXV0mJnZvaWQgMD09PWlba1tqXV0uX3dpZGdldHx8KEM9dm9pZCAwLDA9PT1kJiZcInRoZW1lXCI9PWtbal0/bSs9X3Byb3BFZGl0b3IoZSx0LG8saVtrW2pdXSx2b2lkIDAsRCxrW2pdLHMsMCxyLHZvaWQgMCx2b2lkIDAsdix1KTooQz1fZ2V0R2xvYmFsU3R5bGVQcm9wKGMsaVtrW2pdXSxrW2pdLEQpLG0rPV9wcm9wRWRpdG9yKGUsdCxvLGlba1tqXV0sdm9pZCAwLEQsa1tqXSxzLGQrMSxyLGMsQyx2LHUsJCkpKTtmb3Ioaj0wO2o8ay5sZW5ndGg7aisrKUQ9YS5sZW5ndGg+MD9hK1wiLlwiK2tbal06a1tqXSxcIm9iamVjdFwiPT10eXBlb2YgaVtrW2pdXSYmbnVsbCE9PWlba1tqXV0mJnZvaWQgMD09PWlba1tqXV0uX3dpZGdldCYmKEM9dm9pZCAwLDA9PT1kJiZcInRoZW1lXCI9PWtbal0/bSs9X3Byb3BFZGl0b3IoZSx0LG8saVtrW2pdXSx2b2lkIDAsRCxrW2pdLHMsMCxyLHZvaWQgMCx2b2lkIDAsdix1KTooQz1fZ2V0R2xvYmFsU3R5bGVQcm9wKGMsaVtrW2pdXSxrW2pdLEQpLG0rPV9wcm9wRWRpdG9yKGUsdCxvLGlba1tqXV0sdm9pZCAwLEQsa1tqXSxzLGQrMSxyLGMsQyx2LHUsJCkpKTtpZigwPT1tLmxlbmd0aC1JKXtpZihcIm9iamVjdFwiPT10eXBlb2YgaSYmbnVsbCE9PWkmJlwidGVtcGxhdGVcIj09aS5fY29udGV4dClyZXR1cm5cIlwiO20rPSc8ZGl2IGNsYXNzPVwib2JqRW1wdHlcIiBkYXRhLWJpbmQ9XCJodG1sOiAkcm9vdC50KFxcJ1NlbGVjdGVkIGVsZW1lbnQgaGFzIG5vIGVkaXRhYmxlIHByb3BlcnRpZXNcXCcpXCI+U2VsZWN0ZWQgZWxlbWVudCBoYXMgbm8gZWRpdGFibGUgcHJvcGVydGllczwvZGl2Pid9dm9pZCAwIT09biYmKG0rPVwiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIiksbSs9XCI8L2Rpdj5cIn1lbHNle3ZhciBQPSEwO2lmKHZvaWQgMD09PWMmJihQPSExKSxudWxsPT09aXx8XCJvYmplY3RcIiE9dHlwZW9mIGl8fHZvaWQgMCE9PWkuX3dpZGdldCl7dmFyIE09W107dm9pZCAwIT09cCYmTS5wdXNoKFwiY3NzOiB7IG5vdG51bGw6IFwiK24rXCIoKSAhPT0gbnVsbCB9XCIpLChoPW51bGwhPT1pJiZ2b2lkIDAhPT1pLl9oZWxwPycgdGl0bGU9XCInK3V0aWxzLmFkZFNsYXNoZXMoaS5faGVscCkrXCJcXFwiIGRhdGEtYmluZD1cXFwiYXR0cjogeyB0aXRsZTogJHJvb3QudXQoJ3RlbXBsYXRlJywgJ1wiK3V0aWxzLmFkZFNsYXNoZXMoaS5faGVscCkrXCInKSB9XFxcIlwiOlwiXCIpLmxlbmd0aD4wJiZNLnB1c2goXCJ0b29sdGlwczoge31cIik7dmFyIFQ9TS5sZW5ndGg+MD8nZGF0YS1iaW5kPVwiJyt1dGlscy5hZGRTbGFzaGVzKE0uam9pbigpKSsnXCInOlwiXCI7bSs9JzxkaXYgY2xhc3M9XCJwcm9wRWRpdG9yICcrKFA/XCJjaGVja2JveGVzXCI6XCJcIikrJ1wiJytUK1wiPlwiO3ZhciBPPW51bGwhPT1pJiZ2b2lkIDAhPT1pLl9uYW1lP2kuX25hbWU6dm9pZCAwIT09bj9cIltcIituK1wiXVwiOlwiXCI7bSs9XCI8c3BhblwiK2grJyBjbGFzcz1cInByb3BMYWJlbFwiPicrKE89XCI8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6ICRyb290LnV0KCd0ZW1wbGF0ZScsICdcIit1dGlscy5hZGRTbGFzaGVzKE8pK1wiJylcXFwiPlwiK08rXCI8L3NwYW4+XCIpK1wiPC9zcGFuPlwiLG0rPSc8ZGl2IGNsYXNzPVwicHJvcElucHV0ICcrKHZvaWQgMCE9PWM/XCJsb2NhbFwiOlwiXCIpKydcIiBkYXRhLWJpbmQ9XCJjc3M6IHsgZGVmYXVsdDogJytuKycoKSA9PT0gbnVsbCB9XCI+JyxtKz1fcHJvcElucHV0KGksbixmLHMsdCksbSs9XCI8L2Rpdj5cIix2b2lkIDAhPT1wJiYobSs9JzxkaXYgY2xhc3M9XCJwcm9wSW5wdXQgZ2xvYmFsXCIgZGF0YS1iaW5kPVwiY3NzOiB7IG92ZXJyaWRkZW46ICcrbisnKCkgIT09IG51bGwgfVwiPicsbSs9X3Byb3BJbnB1dChpLG4scCxzLHQpLG0rPVwiPC9kaXY+XCIsUCYmKG0rPSc8ZGl2IGNsYXNzPVwicHJvcENoZWNrXCI+PGxhYmVsIGRhdGEtYmluZD1cInRvb2x0aXBzOiB7fVwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBkYXRhLWJpbmQ9XCJmb2N1c2FibGU6IHRydWUsIGNsaWNrOiBmdW5jdGlvbihldnQsIG9iaikgeyAkcm9vdC5sb2NhbEdsb2JhbFN3aXRjaCgnK24rXCIsIFwiK3ArXCIpOyByZXR1cm4gdHJ1ZTsgfSwgY2hlY2tlZDogXCIrbisnKCkgIT09IG51bGxcIj4nLG0rPSc8c3BhbiBjbGFzcz1cImNoZWNrYm94LXJlcGxhY2VyXCIgZGF0YS1iaW5kPVwiY3NzOiB7IGNoZWNrZWQ6ICcrbitcIigpICE9PSBudWxsIH0sIGF0dHI6IHsgdGl0bGU6ICRyb290LnQoJ1RoaXMgc3R5bGUgaXMgc3BlY2lmaWMgZm9yIHRoaXMgYmxvY2s6IGNsaWNrIGhlcmUgdG8gcmVtb3ZlIHRoZSBjdXN0b20gc3R5bGUgYW5kIHJldmVydCB0byB0aGUgdGhlbWUgdmFsdWUnKSB9XFxcIj48L3NwYW4+XCIsbSs9XCI8L2xhYmVsPjwvZGl2PlwiKSksbSs9XCI8L2Rpdj5cIn1lbHNlIG0rPW51bGw9PT1pfHxcIm9iamVjdFwiIT10eXBlb2YgaT8nPGRpdiBjbGFzcz1cInByb3BFZGl0b3IgdW5rbm93blwiPltBfCcrbitcInxcIit0eXBlb2YgaStcIl08L2Rpdj5cIjonPGRpdiBjbGFzcz1cInByb3BFZGl0b3IgdW5rbm93blwiPltCfCcrbitcInxcIit0eXBlb2YgaStcIl08L2Rpdj5cIn1yZXR1cm4gdm9pZCAwIT09biYmdiYmKG0rPVwiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIixtKz1cIlxceDNjIS0tIGtvIGlmU3ViczogeyBub3Q6IHRydWUsIGRhdGE6IFwiK2crXCIsIHRocmVzaG9sZDogXCIreStcIiwgZ3V0dGVyOiAwIH0gLS1cXHgzZVwiLG0rPSc8c3BhbiBjbGFzcz1cImxhYmVsIG5vdHVzZWRcIj4oJytuK1wiKTwvc3Bhbj5cIixtKz1cIlxceDNjIS0tIC9rbyAtLVxceDNlXCIpLG19LGNyZWF0ZUJsb2NrRWRpdG9yPWZ1bmN0aW9uKGUsdCxvLGksbCxhLG4scyxkLHIsYyxwKXt2b2lkIDA9PT1jJiYoYz0hMCk7dmFyIHYsdT1tb2RlbERlZi5nZXREZWYoZSxhKSxiPW1vZGVsRGVmLmdldERlZihlLGwpO3ZvaWQgMCE9PWIuX3ByZXZpZXdCaW5kaW5ncyYmXCJ0aGFlbWVcIiE9YSYmXCJzdHlsZXJcIj09biYmKHY9ZWxhYm9yYXRlRGVjbGFyYXRpb25zKHZvaWQgMCxiLl9wcmV2aWV3QmluZGluZ3MsaSxtb2RlbERlZi5nZXRCaW5kVmFsdWUuYmluZCh2b2lkIDAsZSxvLGwsbCxcIlwiKSkpO3ZhciBoLGY9dm9pZCAwIT09ciYmcj9lW2FdLl9nbG9iYWxTdHlsZXM6dm9pZCAwLG09dm9pZCAwIT09ciYmcj9lW2FdLl9nbG9iYWxTdHlsZTp2b2lkIDA7dm9pZCAwIT09bSYmKGg9bW9kZWxEZWYuZ2V0RGVmKGUsXCJ0aGVtZVwiKVttLnJlcGxhY2UoL14oXFwkdGhlbWV8X3RoZW1lXylcXC4vLFwiXCIpXSk7dmFyIGc9bW9kZWxEZWYuZ2V0QmluZFZhbHVlLmJpbmQodm9pZCAwLGUsbyxsLGEpO2cuX3RlbXBsYXRlTmFtZT1hO3ZhciBfPSc8ZGl2IGNsYXNzPVwiZWRpdG9yXCI+JztfKz0nPGRpdiBjbGFzcz1cImJsb2NrVHlwZScrKHZvaWQgMCE9PWY/XCIgd2l0aGRlZmF1bHRzXCI6XCJcIikrJ1wiPicrdS50eXBlK1wiPC9kaXY+XCI7dmFyIHk9X3Byb3BFZGl0b3IoZyx0LGksdSxoLFwiXCIsdm9pZCAwLG4scCxkLGYsbSxjLHYpO3kubGVuZ3RoPjAmJihfKz15KSxzKF8rPVwiPC9kaXY+XCIsYSxuKX0sY3JlYXRlQmxvY2tFZGl0b3JzPWZ1bmN0aW9uKGUsdCxvLGksbCxhLG4scyl7Y3JlYXRlQmxvY2tFZGl0b3IoZSx0LG8saSxsLGEsXCJlZGl0XCIsbixzKSxjcmVhdGVCbG9ja0VkaXRvcihlLHQsbyxpLGwsYSxcInN0eWxlclwiLG4scywhMCl9LGdlbmVyYXRlRWRpdG9ycz1mdW5jdGlvbihlLHQsbyxpLGwpe3ZhciBhLG49ZS5fZGVmcyxzPWUudGVtcGxhdGVOYW1lLGQ9ZS5fYmxvY2tzLHI9W107Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyl2b2lkIDAhPT1kW2FdLmNvbnRhaW5lciYmci5wdXNoKG1vZGVsRGVmLmdlbmVyYXRlTW9kZWwobixkW2FdLmJsb2NrKSksY3JlYXRlQmxvY2tFZGl0b3JzKG4sdCx2b2lkIDAsbyxkW2FdLnJvb3QsZFthXS5ibG9jayxpLGwpO3JldHVybiB2b2lkIDAhPT1uLnRoZW1lJiZjcmVhdGVCbG9ja0VkaXRvcihuLHQsdm9pZCAwLG8scyxcInRoZW1lXCIsXCJzdHlsZXJcIixpLHZvaWQgMCwhMSwhMSwtMSkscn07bW9kdWxlLmV4cG9ydHM9Z2VuZXJhdGVFZGl0b3JzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wa2FYUnZjaTVxY3lKZExDSnVZVzFsY3lJNld5SmpiMjV6YjJ4bElpd2ljbVZ4ZFdseVpTSXNJbVZzWVdKdmNtRjBaVVJsWTJ4aGNtRjBhVzl1Y3lJc0luVjBhV3h6SWl3aWJXOWtaV3hFWldZaUxDSmZaMlYwVDNCMGFXOXVjMDlpYW1WamRDSXNJbTl3ZEdsdmJuTWlMQ0p2Y0hScGIyNXpRMjkxY0d4bGN5SXNJbk53YkdsMElpd2liM0IwY3lJc0lta2lMQ0pzWlc1bmRHZ2lMQ0p2Y0hRaUxDSjBjbWx0SWl3aVgyWnBiSFJsY2xCeWIzQnpJaXdpYlc5a1pXd2lMQ0psWkdsMFZIbHdaU0lzSW14bGRtVnNJaXdpY21Weklpd2ljSEp2Y0NJc0ltMWhkR05vSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKcGMxTjBlV3hsVUhKdmNDSXNJbDlqWVhSbFoyOXllU0lzSW5CMWMyZ2lMQ0pmWTI5dWRHVjRkQ0lzSWw5d2NtOXdTVzV3ZFhRaUxDSndjbTl3UVdOalpYTnpiM0lpTENKM2FXUm5aWFJ6SWl3aWQybGtaMlYwSWl3aWFIUnRiQ0lzSWw5M2FXUm5aWFFpTENKdmJtWnZZM1Z6WW1sdVpHbHVaeUlzSW5jaUxDSndZWEpoYldWMFpYSnpJaXdpY0NJc0lsOXZjSFJwYjI1eklpd2lZV1JrVTJ4aGMyaGxjeUlzSW0xcGJpSXNJbTFoZUNJc0lsOXRZWGdpTENKZmJXbHVJaXdpYzNSbGNDSXNJbDluWlhSSGJHOWlZV3hUZEhsc1pWQnliM0FpTENKbmJHOWlZV3hUZEhsc1pYTWlMQ0p3WVhSb0lpd2laMnh2WW1Gc1UzUjViR1ZRY205d0lpd2lYM0J5YjNCRlpHbDBiM0lpTENKM2FYUm9RbWx1WkdsdVoxQnliM1pwWkdWeUlpd2lkR1Z0Y0d4aGRHVlZjbXhEYjI1MlpYSjBaWElpTENKMGFHVnRaVTF2WkdWc0lpd2lZbUZ6WlZSb2NtVnphRzlzWkNJc0luUnlZV05yVlhOaFoyVWlMQ0p5YjI5MFVISmxkbWxsZDBKcGJtUnBibWNpTENKd2NtVjJhV1YzUW1GamEyZHliM1Z1WkNJc0lsOTFjMlZqYjNWdWRDSXNJbVJsWW5Wbklpd2lYM1JsYlhCc1lYUmxUbUZ0WlNJc0luUnBkR3hsSWl3aWFXWlRkV0p6VUhKdmNDSXNJbWxtVTNWaWMwZDFkSFJsY2lJc0ltbG1VM1ZpYzFSb2NtVnphRzlzWkNJc0lsOXVZVzFsSWl3aWJHOW5JaXdpZEhsd1pTSXNJbkJ5YjNCeklpd2lhR0Z6UTNWemRHOXRVM1I1YkdVaUxDSmpkWE4wYjIxVGRIbHNaU0lzSW5ObGJHVmpkR1ZrU1hSbGJVSnBibVJwYm1jaUxDSmhaR1JwZEdsdmJtRnNRMnhoYzNObGN5SXNJbkJ5WlhacFpYZENSeUlzSW01bGQxQmhkR2dpTENKdGIyUmxiRTVoYldVaUxDSjBhR1Z0WlZObFkzUnBiMjVPWVcxbElpd2lYMmhsYkhBaUxDSmZZbXh2WTJ0RVpYTmpjbWx3ZEdsdmJpSXNJbDl3Y21WMmFXVjNRbWx1WkdsdVozTWlMQ0ppYVc1a0lpd2lkR2hwY3lJc0ltNWxkMGRzYjJKaGJGTjBlV3hsVUhKdmNDSXNJbUpsWm05eVpTSXNJblZ1WkdWbWFXNWxaQ0lzSW1Ob1pXTnJZbTk0WlhNaUxDSmlhVzVrYVc1bmN5SXNJbXB2YVc0aUxDSnRiMlJsYkU1aGJXVXlJaXdpWTNKbFlYUmxRbXh2WTJ0RlpHbDBiM0lpTENKa1pXWnpJaXdpZEdobGJXVlZjR1JoZEdWeUlpd2ljbTl2ZEUxdlpHVnNUbUZ0WlNJc0luUmxiWEJzWVhSbFRtRnRaU0lzSW5SbGJYQnNZWFJsUTNKbFlYUnZjaUlzSW5SeVlXTnJSMnh2WW1Gc1UzUjViR1Z6SWl3aVpuSnZiVXhsZG1Wc0lpd2ljbTl2ZEZCeVpYWnBaWGRDYVc1a2FXNW5jeUlzSW1kbGRFUmxaaUlzSW5KdmIzUk5iMlJsYkNJc0ltZGxkRUpwYm1SV1lXeDFaU0lzSWw5bmJHOWlZV3hUZEhsc1pYTWlMQ0pmWjJ4dlltRnNVM1I1YkdVaUxDSnlaWEJzWVdObElpd2laV1JwZEc5eVEyOXVkR1Z1ZENJc0ltTnlaV0YwWlVKc2IyTnJSV1JwZEc5eWN5SXNJbWRsYm1WeVlYUmxSV1JwZEc5eWN5SXNJblJsYlhCc1lYUmxSR1ZtSWl3aWFXUjRJaXdpWDJSbFpuTWlMQ0ppYkc5amEzTWlMQ0pmWW14dlkydHpJaXdpWW14dlkydEVaV1p6SWl3aVkyOXVkR0ZwYm1WeUlpd2laMlZ1WlhKaGRHVk5iMlJsYkNJc0ltSnNiMk5ySWl3aWNtOXZkQ0lzSW5Sb1pXMWxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxITkNRVU5zUWtNc2MwSkJRWGRDUkN4UlFVRlJMSEZDUVVOb1EwVXNUVUZCVVVZc1VVRkJVU3hqUVVOb1FrY3NVMEZCVjBnc1VVRkJVU3hqUVVWdVFra3NhMEpCUVc5Q0xGTkJRVk5ETEVkQlJ5OUNMRWxCUmtFc1NVRkJTVU1zUlVGQmFVSkVMRVZCUVZGRkxFMUJRVTBzUzBGREwwSkRMRXRCUTB0RExFVkJRVWtzUlVGQlIwRXNSVUZCU1Vnc1JVRkJaVWtzVDBGQlVVUXNTVUZCU3l4RFFVTTVReXhKUVVGSlJTeEZRVUZOVEN4RlFVRmxSeXhIUVVGSFJpeE5RVUZOTEV0QlEyeERReXhGUVVGTFJ5eEZRVUZKTEVkQlFVZERMRkZCUVZWRUxFVkJRVWxFTEU5QlFWTXNSVUZCU1VNc1JVRkJTU3hIUVVGSFF5eFBRVUZUUkN4RlFVRkpMRWRCUVVkRExFOUJSV2hGTEU5QlFVOUtMRWRCVDB4TExHRkJRV1VzVTBGQlUwTXNSVUZCVDBNc1JVRkJWVU1zUjBGRE0wTXNTVUZCU1VNc1MwRkRTaXhKUVVGTExFbEJRVWxETEV0QlFWRktMRVZCUTJZc1NVRkJTMGtzUlVGQlMwTXNUVUZCVFN4dFFrRkJjVUpFTEVWQlFVdERMRTFCUVUwc1QwRkJVMHdzUlVGQlRVMHNaVUZCWlVZc1IwRkJUeXhEUVVOdVJpeEpRVUZKUnl4RlFVRTRRaXhQUVVGb1FsQXNSVUZCVFVrc1UwRkJRVUVzU1VGQmVVSktMRVZCUVUxSkxFZEJRVTFKTEZkQlFYRkVMRk5CUVhwQ1VpeEZRVUZOU1N4SFFVRk5TU3hWUVVONlJpeE5RVUZTU2l4SFFVRjNRaXhSUVVGU1FTeEhRVUZyUWtFc1JVRkJTME1zVFVGQlRTeGhRVUZ2UXl4VlFVRmFTaXhIUVVOdVJVMHNSMEZCWlV3c1JVRkJVU3hKUVVGSFF5eEZRVUZKVFN4TFFVRkxUQ3hIUVVOc1FpeFJRVUZhU0N4RlFVVXlRaXhQUVVGb1FrUXNSVUZCVFVrc1UwRkJRVUVzU1VGQmVVSktMRVZCUVUxSkxFZEJRVTFKTEZkQlFYRkVMRmRCUVhwQ1VpeEZRVUZOU1N4SFFVRk5TU3hwUWtGQlFVRXNTVUZETjBaU0xFVkJRVTFKTEVkQlFVMU5MRlZCUVcxRUxGTkJRWGhDVml4RlFVRk5TU3hIUVVGTlRTeFhRVU14UTFBc1JVRkJTVTBzUzBGQlMwd3NVVUZCUVVFc1NVRkRXa2dzUjBGRGFFSkZMRVZCUVVsTkxFdEJRVXRNTEVsQlIyWXNUMEZCVDBRc1IwRkhURkVzVjBGQllTeFRRVUZUV0N4RlFVRlBTU3hGUVVGTlVTeEZRVUZqV0N4RlFVRlZXU3hIUVVNM1JDeEpRVU5KUXl4RlFVUkJReXhGUVVGUExFZEJTVmdzUjBGR1l5eFBRVUZXWml4UlFVRkJRU3hKUVVGNVFrRXNSVUZCVFdkQ0xGVkJRWGRDUml4RlFVRlRaQ3hGUVVGTlowSXNZMEZCUVVFc1NVRkZMMFJHTEVWQlExUXNTMEZCVFN4NVFrRkJNa0pXTEVWQlNXNURMRWxCUVVsaExFVkJRV2xDTEd0Q1FVOXlRaXhIUVU1blFpeFJRVUZhYUVJc1NVRkRSbWRDTEVkQlFXdENMSEZGUVVkd1FrWXNSMEZCVVN4elFrRkJkMEpFTEVWQlFWTXNTMEZCYVVJc1YwRkJWa0VzUlVGQmMwSXNkMVZCUVdkV0xFbEJRVTBzVTBGQlFTeEpRVVZxV2tRc1VVRkJRVUVzU1VGQmEwTkJMRVZCUVZGRExFZEJRWGxDTEVOQlF6VkZMRWxCUVVsSkxFVkJRVWxNTEVWQlFWRkRMRWRCUTFwTExFdEJRMG9zVVVGQlFTeEpRVUZYUkN4RlFVRkZReXhYUVVOWUxFbEJRVXNzU1VGQlNVTXNTMEZCUzBZc1JVRkJSVU1zVjBGRFZrUXNSVUZCUlVNc1YwRkJWMklzWlVGQlpXTXNVMEZCUVVFc1NVRkJZWEJDTEVWQlFVMHNTVUZCU1c5Q0xFdEJRM0pFUkN4RlFVRlhReXhIUVVGTGNFSXNSVUZCVFN4SlFVRkpiMElzU1VGRGFFTk1MRWRCUVZGSExFVkJRVVZJTEV0QlFVdElMRVZCUVdOTExFVkJRV2RDUlN4UlFVTjRReXhIUVVGakxGZEJRVlpNTEVWQlExUkRMRWRCUVZFc09FUkJRV2RGU0N4RlFVRmxMRXRCUVU5TExFVkJRV2xDTEU5QlF5OUhSaXhIUVVGUkxHZEVRVU5JTEVkQlFXTXNVMEZCVmtRc1JVRkRWRU1zUjBGQlVTeG5SVUZCYTBWSUxFVkJRV1VzTWtoQlFXOUpTeXhGUVVGcFFpeFpRVU42VHl4SFFVRmpMRlZCUVZaSUxFZEJRMVFzVVVGQlFTeEpRVUZYWkN4RlFVRk5jVUlzVTBGQmVVSXNRMEZEZUVNc1NVRkJTVE5DTEVWQlFVOUtMR3RDUVVGclFsVXNSVUZCVFhGQ0xGVkJSMjVETEVsQlFVc3NTVUZCU1hoQ0xFdEJSRlJyUWl4SFFVRlJMRFpDUVVFclFrZ3NSVUZCWlN4TFFVRlBTeXhGUVVGcFFpeExRVU01UkhaQ0xFVkJRMVpCTEVWQlFVdFpMR1ZCUVdWVUxFdEJRM1JDYTBJc1IwRkJVU3hyUWtGQmIwSnNRaXhGUVVGTkxEaERRVUZwUkZRc1RVRkJUV3RETEZkQlFWYzFRaXhGUVVGTFJ5eEpRVUZSTEZGQlFWVklMRVZCUVV0SExFZEJRVThzWVVGRk0wbHJRaXhIUVVGUkxHdENRVVZNTEVkQlFXTXNVVUZCVmtRc1JVRkRWRU1zUjBGQlVTeDVRMEZCTWtOSUxFVkJRV1VzUzBGQlQwc3NSVUZCYVVJc1MwRkRNVVpHTEVkQlFWRXNjME5CUTFKQkxFZEJRVkVzTkVSQlExSkJMRWRCUVZFc09FVkJRMUpCTEVkQlFWRXNOa1JCUTFKQkxFZEJRVkVzT0VWQlExSkJMRWRCUVZFc05rUkJRMUpCTEVkQlFWRXNZMEZEVWtFc1IwRkJVU3hwUTBGRFVrRXNSMEZCVVN4cFJFRkRVa0VzUjBGQlVTd3lSVUZEVWtFc1IwRkJVU3hqUVVOU1FTeEhRVUZSTEhGRFFVTlNRU3hIUVVGUkxIbEZRVU5TUVN4SFFVRlJMR05CUTFKQkxFZEJRVkVzYVVKQlEwZ3NSMEZCWXl4UFFVRldSQ3hGUVVOVVF5eEhRVUZSTERoQ1FVVlNRU3hIUVVGUkxEQk9RVUUwVGtnc1JVRkJaU3hMUVVGUFN5eEZRVUZwUWl4UFFVTXpVVVlzUjBGQlVTeHJWRUZEVWtFc1IwRkJVU3hqUVVOSUxFZEJRV01zVjBGQlZrUXNSVUZCY1VJc1EwRkhPVUlzU1VGQlNWTXNSVUZCVFN4RlFVTk9ReXhGUVVGTkxFbEJRMGtzVDBGQlZuaENMRkZCUVVGQkxFbEJRWGxDUVN4RlFVRk5lVUlzVDBGQmMwSkVMRVZCUVUxNFFpeEZRVUZOZVVJc1RVRkRka1FzVDBGQlZucENMRkZCUVVGQkxFbEJRWGxDUVN4RlFVRk5NRUlzVDBGQmMwSklMRVZCUVUxMlFpeEZRVUZOTUVJc1RVRkRja1VzU1VGQlNVTXNSVUZCVVVnc1JVRkJUVVFzUjBGQlVTeEpRVUZOTEVkQlFVc3NSVUZGY2tOU0xFZEJRVkVzWjBSQlFXdEVXU3hGUVVGUExIbEVRVUV5UkVvc1JVRkJUU3hWUVVGWlF5eEZRVUZOTEZkQlJHeEpMRVZCUVZCSExFVkJRelpLTEZsQlFXTm1MRVZCUVdVc2QwTkJRVzFFU3l4RlFVRnBRaXhaUVVWNlVVWXNSMEZCVVN4cFJVRkJiVVZJTEVWQlFXVXNTMEZCVDBzc1JVRkJhVUlzVDBGTGNFZ3NUMEZHUVVZc1JVRkJVU3haUVV0T1lTeHZRa0ZCYzBJc1UwRkJVME1zUlVGQll6ZENMRVZCUVU5SkxFVkJRVTB3UWl4SFFVTTFSQ3hKUVVGSlF5eEZRVTFLTEUxQlRIRkNMR2xDUVVGV0wwSXNSMEZCWjBNc1QwRkJWa0VzVVVGQlFVRXNTVUZCZVVKQkxFVkJRVTFuUWl4alFVRkJRU3hKUVVOdVJGb3NVVUZCUVVFc1NVRkJLMEl3UWl4SFFVRjNRa0VzUlVGQlMyeERMRTlCUVZNc1IwRkJORUlzYVVKQlFXaENhVU1zVVVGQlFVRXNTVUZCYlVOQkxFVkJRV0ZETEV0QlF6RkpReXhGUVVGclFrWXNSVUZCWVVNc1NVRkhOVUpETEVkQlIweERMRmxCUVdNc1UwRkJVME1zUlVGQmNVSndRaXhGUVVGVGNVSXNSVUZCYzBKc1F5eEZRVUZQYlVNc1JVRkJXVXdzUlVGQlRURkNMRVZCUVUxSUxFVkJRVlZETEVWQlFVOXJReXhGUVVGbFVDeEZRVUZqUlN4RlFVRnBRazBzUlVGQldVTXNSVUZCYjBKRExFZEJSek5OTEZGQlFVRXNTVUZHVjNKRExFbEJRWE5DUVN4RlFVRlJMRkZCUVVFc1NVRkZPVUpGTEVkQlFYZERMR2xDUVVGVVNpeEhRVUVyUWl4UFFVRldRU3hSUVVGQlFTeEpRVUY1UWtFc1JVRkJUWGRETEZWQlJUVkdMRTFCUkRSQ0xHMUNRVUZxUW5aRUxGRkJRVkYzUkN4UFFVRnhRbmhFTEZGQlFWRjNSQ3hOUVVGTkxGZEJRVmxZTEVWQlFVMHNhMFJCUVcxRUxGRkJRVk14UWl4RlFVRk5MRkZCUVZOSUxFVkJRVlVzVTBGQlZVTXNSVUZCVHl0Q0xFVkJRVzlDVXl4bFFVTXpUQ3hIUVVkVUxFbEJSMGxETEVWQlNFRXZRaXhQUVVGQlFTeEpRVUZ6UW0xQ0xFVkJRV2xETTBJc1JVRkJUeXh2UWtGQmMwSkJMRVZCUlhCR1Z5eEZRVUZQTEVkQlJWQTJRaXhGUVVGaGFFTXNSVUZEWW1sRExFVkJRV1VzUlVGRlprTXNSVUZCYTBJc1JVRnRRM1JDTEVkQk1VSnZRaXhwUWtGQlZEbERMRWRCUVN0Q0xFOUJRVlpCTEZGQlFVRkJMRWxCUVhsQ1FTeEZRVUZOWjBJc1kwRkJRVUVzU1VGSGJFUmxMRWxCUTFSakxFZEJRV2RDTEZGQlFVRXNTVUZSVkdRc1VVRkJRVUVzU1VGQmVVTkxMRWxCUVN0Q1ZTeEhRVUZ0UWxZc1VVRkJRVUVzU1VGRk0wWm9ReXhIUVVGNVFtbERMRWxCUTJ4RGRFSXNSMEZCVVN3NFFrRkJOa0kyUWl4RlFVRmhMR2RDUVVGclFrVXNSVUZCYTBJc1lVRkJaVVFzUlVGQlpTeHJRa0ZCUVN4SlFVY3pSM3BETEVkQlFXdERMRTlCUVZaS0xGRkJRVUZCTEVsQlFYbENRU3hGUVVGTkswTXNUMEZGYUVVNVJDeFJRVUZSSzBRc1NVRkJTU3c0UWtGQkswSTFReXhSUVVGQlFTeEpRVVZzUTBFc1IwRkJhVU1zVDBGQlZrb3NVVUZCUVVFc1NVRkJlVUpCTEVWQlFVMHJReXhQUVVGMVF5eFZRVUZtTDBNc1JVRkJUV2xFTEUxQlF6ZEdhRVVzVVVGQlVTdEVMRWxCUVVrc05FSkJRVFpDYUVRc1JVRkJUV2xFTEUxQlJ6ZENMR2xDUVVGVWFrUXNSMEZCSzBJc1QwRkJWa0VzVVVGQlFVRXNTVUZCZVVKQkxFVkJRVTFuUWl4UlFVRjNRaXhEUVVOeVJpeEpRVUZKYTBNc1JVRkJVVzVFTEdGQlFXRkRMRVZCUVU5RExFVkJRVlZETEVkQlJYUkRhVVFzUlVGQk5rSXNWVUZCV214RUxFZEJRV3RETEU5QlFWWkVMRkZCUVVGQkxFbEJRWGxDUVN4RlFVRk5iMFFzYTBKQlFVRkJMRWxCUVhORGNrSXNSVUZET1VkelFpeEZRVUZ6UWl4SFFVTjBRa01zUlVGQmIwSXNVVUZCUVN4SlFVTmliRVFzUjBGQmIwTXNVVUZCV2tnc1NVRkRha052UkN4RlFVRnpRaXhyUkVGQmIwUnFSQ3hGUVVGUExESkdRVUUyUmtFc1JVRkJUeXcyUTBGQkswTkJMRVZCUVU4c1RVRkRNMDlyUkN4SFFVRnhRaXhsUVVWdVFrZ3NTVUZEUmtjc1IwRkJjVUlzZVVKQlJYWkNka01zUjBGQlVTdzBRa0ZCT0VKaUxFVkJRVkZ2UkN4RlFVRnZRaXcwUWtGQk9FSkVMRVZCUVhOQ0xFdEJRM1JJTEVsQk5FTkpSU3hGUVU5Qk5VUXNSVUZCUnpaRUxFVkJia1JJUXl4RlFVRjFRaXhQUVVGV2VrUXNVVUZCUVVFc1NVRkJlVUpCTEVWQlFVMHJReXhOUVVGMVFpOURMRVZCUVUwclF5eFhRVUZCUVN4SlFVRm5Rak5ETEVWQlFYVkNMRWxCUVUxQkxFVkJRVThzU1VGQlRTeEhRVU4yU1N4SFFVRkpLME1zUlVGQlowSXNRMEZEYkVJc1NVRkJTVThzUlVGQmJVSXNZVUZCUVN4SlFVTmFka0lzUjBGQk5rTXNUMEZCWmtFc1VVRkJRVUVzU1VGQk9FSkJMRVZCUVZkWkxFMUJRMmhHVnl4RlFVRnRRblpDTEVWQlFWZFpMRTFCUlRsQ09VUXNVVUZCVVN0RUxFbEJRVWtzYlVOQlFXOUROVU1zUlVGQlowSXNUMEZCVmtvc1JVRkJhVUpCTEVWQlFVMXBSQ3hMUVVGUExFdEJSM1JHVVN4RlFVRlpMR2RIUVVGclIzSkZMRTFCUVUxclF5eFhRVUZYYlVNc1IwRkJZU3c0UWtGQmIwTnlSU3hOUVVGTmEwTXNWMEZCVjI5RExFZEJRVzlDTEhsQ1FVVnlUa1FzUlVGQldTeHBSRUZCY1VSeVJTeE5RVUZOYTBNc1YwRkJWMjFETEVkQlFXRXNVVUZCVlVFc1JVRkJXU3hWUVVkMlNERkRMRWRCUVZFc1UwRkVValJDTEVWQlFXdENMRTlCUVZZelF5eFJRVUZCUVN4SlFVRjVRa0VzUlVGQlRUSkVMRTFCUVhkQ0xGZEJRV0YyUlN4TlFVRk5hME1zVjBGQlYzUkNMRVZCUVUweVJDeFBRVUZUTEhWRVFVRXdSSFpGTEUxQlFVMXJReXhYUVVGWGRFSXNSVUZCVFRKRUxFOUJRVk1zVTBGQlZ5eEpRVU4yVEN4NVFrRkJNa0o2UkN4RlFVRlJMRXRCUVU5MVJDeEZRVUZaTEZWQlJXaEZMRkZCUVZwNFJDeFJRVUZCUVN4SlFVRTJRa1FzUlVGQlRUUkVMRzlDUVVOeVF6ZERMRWRCUVZFc01rVkJRVFpGTTBJc1RVRkJUV3RETEZkQlFWZDBRaXhGUVVGTk5FUXNiVUpCUVhGQ0xGRkJRVlUxUkN4RlFVRk5ORVFzYTBKQlFXOUNMRlZCU1c1TFZDeEpRVU5HY0VNc1IwRkJVU3h2UlVGRFVrRXNSMEZCVVN3NFJrRkRVa0VzUjBGQlVTdzRUa0ZEVWtFc1IwRkJVU3hYUVVOU1FTeEhRVUZSTEN0R1FVRkJMRWxCUjBOWUxFbEJRMVJYTEVkQlFWRXNiMEpCUVcxQ1dDeEZRVUZQTEZWQlIzSkNMRWRCUVZSR0xGRkJRVUZCTEVsQlFYRkNSU3hSUVVOMlFpeEpRVUZYU2l4RlFVRk5Oa1FzZFVKQlFVRkJMRWxCUVRCRE5VSXNVMEZCUVVFc1NVRkRPVU5MTEVsQlFXMURka0lzUjBGQlVTdzJSVUZCZVVWMVFpeEZRVUZ4UWl4dFEwRkJRU3hKUVVONlNVTXNTVUZCYTBONFFpeEhRVUZSTEhGRlFVRnBSWGRDTEVWQlFXOUNMRGhDUVVVeFNYaENMRWRCUVZFc2JVVkJSR00xUWl3eVFrRkJRVUVzUlVGQmFVTmhMRVZCUVUwMlJDeHBRa0ZCYTBJelFpeEZRVUZ6UWtRc1JVRkJiMEkyUWl4TFFVRkxReXhMUVVGTmFrTXNSVUZCVHl4TlFVTTFReXh0UWtGUGRrWXNTVUZCVmpWQ0xGRkJRVUZCTEVsQlExTkdMRVZCUVUwMlJDeHRRa0ZEWms0c1JVRkJXWEJGTERKQ1FVRkJRU3hGUVVGcFEyRXNSVUZCVFRaRUxHbENRVUZyUWpOQ0xFVkJRWE5DUkN4RlFVRnZRalpDTEV0QlFVdERMRXRCUVUxcVF5eEZRVUZMYkVNc1QwRkJVeXhGUVVGSmEwTXNSVUZCVHl4SlFVRk5MRTFCVFRkS0xFbEJSMGxyUXl4RlFVaEJReXhGUVVGVGJFUXNSVUZCUzI1Q0xFOUJTMnhDTEVsQlFVdEVMRVZCUVVrc1JVRkJSMEVzUlVGQlNYVkVMRVZCUVUxMFJDeFBRVUZSUkN4SlFVTTFRalpFTEVWQlFWVXhRaXhGUVVGTGJFTXNUMEZCVXl4RlFVRkphME1zUlVGQlR5eEpRVUZOYjBJc1JVRkJUWFpFTEVkQlFVdDFSQ3hGUVVGTmRrUXNSMEZETlVJc2FVSkJRVzVDU3l4RlFVRk5hMFFzUlVGQlRYWkVMRXRCUVhWRExFOUJRWEJDU3l4RlFVRk5hMFFzUlVGQlRYWkVMRlZCUVVGQkxFbEJRWFZDU3l4RlFVRk5hMFFzUlVGQlRYWkVMRWxCUVVseFFpeFZRVU16Um1kRUxFOUJRVUZCTEVWQlEyTXNTVUZCVmpsRUxFZEJRVEpDTEZOQlFWcG5SQ3hGUVVGTmRrUXNSMEZEZGtKdlFpeEhRVUZSYVVJc1dVRkJXVU1zUlVGQmNVSndRaXhGUVVGVGNVSXNSVUZCYzBKc1F5eEZRVUZOYTBRc1JVRkJUWFpFTEZOQlFVRkJMRVZCUVc5Q05rUXNSVUZCVTA0c1JVRkJUWFpFTEVkQlFVbE5MRVZCUVZVc1JVRkJSMjFETEU5QlFVRkJMRTlCUVdVNFFpeEZRVUZ6UWpkQ0xFVkJRVmxETEVsQlJYcE1NRUlzUlVGQmNVSndReXh2UWtGQmIwSkRMRVZCUVdNM1FpeEZRVUZOYTBRc1JVRkJUWFpFTEVsQlFVdDFSQ3hGUVVGTmRrUXNSMEZCU1RaRUxFZEJRMnhHZWtNc1IwRkJVV2xDTEZsQlFWbERMRVZCUVhGQ2NFSXNSVUZCVTNGQ0xFVkJRWE5DYkVNc1JVRkJUV3RFTEVWQlFVMTJSQ3hUUVVGQlFTeEZRVUZ2UWpaRUxFVkJRVk5PTEVWQlFVMTJSQ3hIUVVGSlRTeEZRVUZWUXl4RlFVRlJMRVZCUVVkclF5eEZRVUZsVUN4RlFVRmpiVU1zUlVGQmIwSXpRaXhGUVVGWlF5eEZRVUZ2UW1sQ0xFdEJTWFpQTEVsQlFVczFSQ3hGUVVGSkxFVkJRVWRCTEVWQlFVbDFSQ3hGUVVGTmRFUXNUMEZCVVVRc1NVRkROVUkyUkN4RlFVRlZNVUlzUlVGQlMyeERMRTlCUVZNc1JVRkJTV3RETEVWQlFVOHNTVUZCVFc5Q0xFVkJRVTEyUkN4SFFVRkxkVVFzUlVGQlRYWkVMRWRCUXpGQ0xHbENRVUZ1UWtzc1JVRkJUV3RFTEVWQlFVMTJSQ3hMUVVGMVF5eFBRVUZ3UWtzc1JVRkJUV3RFTEVWQlFVMTJSQ3hWUVVGQlFTeEpRVUYxUWtzc1JVRkJUV3RFTEVWQlFVMTJSQ3hKUVVGSmNVSXNWVUZETjBablJDeFBRVUZCUVN4RlFVTmpMRWxCUVZZNVJDeEhRVUV5UWl4VFFVRmFaMFFzUlVGQlRYWkVMRWRCUTNaQ2IwSXNSMEZCVVdsQ0xGbEJRVmxETEVWQlFYRkNjRUlzUlVGQlUzRkNMRVZCUVhOQ2JFTXNSVUZCVFd0RUxFVkJRVTEyUkN4VFFVRkJRU3hGUVVGdlFqWkVMRVZCUVZOT0xFVkJRVTEyUkN4SFFVRkpUU3hGUVVGVkxFVkJRVWR0UXl4UFFVRkJRU3hQUVVGbE9FSXNSVUZCYzBJM1FpeEZRVUZaUXl4SlFVVjZUREJDTEVWQlFYRkNjRU1zYjBKQlFXOUNReXhGUVVGak4wSXNSVUZCVFd0RUxFVkJRVTEyUkN4SlFVRkxkVVFzUlVGQlRYWkVMRWRCUVVrMlJDeEhRVU5zUm5wRExFZEJRVkZwUWl4WlFVRlpReXhGUVVGeFFuQkNMRVZCUVZOeFFpeEZRVUZ6UW14RExFVkJRVTFyUkN4RlFVRk5ka1FzVTBGQlFVRXNSVUZCYjBJMlJDeEZRVUZUVGl4RlFVRk5ka1FzUjBGQlNVMHNSVUZCVlVNc1JVRkJVU3hGUVVGSGEwTXNSVUZCWlZBc1JVRkJZMjFETEVWQlFXOUNNMElzUlVGQldVTXNSVUZCYjBKcFFpeExRVTEyVHl4SFFVRmpMRWRCUkVaNFF5eEZRVUZMYmtJc1QwRkJVM0ZGTEVWQlExUXNRMEZGWml4SFFVRnZRaXhwUWtGQlZHcEZMRWRCUVN0Q0xFOUJRVlpCTEVkQlFXOURMRmxCUVd4Q1FTeEZRVUZOVlN4VFFVTjBSQ3hOUVVGUExFZEJSMUJMTEVkQlFWRXNNRXBCUVVFc1NVRkpSRmdzU1VGRFZGY3NSMEZCVVN4elFrRkZWa0VzUjBGQlVTeGhRVVZJTEVOQlEwd3NTVUZCU1c5RUxFZEJRVUZCTEVWQlNVb3NVVUZCUVN4SlFVWlhkRU1zU1VGQk5rSnpReXhIUVVGQlFTeEhRVVV4UWl4UFFVRldia1VzUjBGQmEwTXNhVUpCUVZSQkxGRkJRVUZCTEVsQlFUUkNRU3hGUVVGTlowSXNVVUZCZDBJc1EwRkRja1lzU1VGQlNXOUVMRlZCUVVGQkxFbEJSVTl5UXl4SFFVRm5RM0ZETEVWQlFWTXpSQ3hMUVVGTExHMUNRVUZ4UWt3c1JVRkJUeXhyUWtGRGNrWjFReXhGUVVGclFpeFBRVUZXTTBNc1VVRkJRVUVzU1VGQmVVSkJMRVZCUVUweVJDeE5RVUYzUWl4WFFVRmhka1VzVFVGQlRXdERMRmRCUVZkMFFpeEZRVUZOTWtRc1QwRkJVeXgxUkVGQk1FUjJSU3hOUVVGTmEwTXNWMEZCVjNSQ0xFVkJRVTB5UkN4UFFVRlRMRk5CUVZjc1NVRkRkazB2UkN4UFFVRlRMRWRCUVVkM1JTeEZRVUZUTTBRc1MwRkJTeXhuUWtGRGNFTXNTVUZCU1hGRUxFVkJRVTlOTEVWQlFWTjRSU3hQUVVGVExFVkJRVWtzWTBGQlowSlNMRTFCUVUxclF5eFhRVUZYT0VNc1JVRkJVME1zVVVGQlZTeEpRVUZOTEVkQlF6TkdkRVFzUjBGQlVTd3lRa0ZCTmtKdlJDeEZRVUZoTEdGQlFXVXNTVUZCVFN4SlFVRk5UQ3hGUVVGUExFbEJSWEJHTEVsQlFVbFJMRVZCUVhkQ0xFOUJRVlowUlN4UlFVRkJRU3hKUVVGNVFrRXNSVUZCVFN0RExFMUJRWFZDTDBNc1JVRkJUU3RETEZkQlFVRkJMRWxCUVdkQ00wTXNSVUZCZFVJc1NVRkJUVUVzUlVGQlR5eEpRVUZOTEVkQlJYaEpWeXhIUVVGUkxGRkJRVlUwUWl4RlFVRlJMSFZDUVVReFFqSkNMRVZCUVdFc2FVUkJRWEZFYkVZc1RVRkJUV3RETEZkQlFWZG5SQ3hIUVVGakxGRkJRVlZCTEVWQlFXRXNWMEZEZWtRc1ZVRkRMMFIyUkN4SFFVRlJMQ3RDUVVGQkxFbEJRVzFEWXl4RlFVRTRRaXhSUVVGVkxFbEJRVTBzWjBOQlFXdERla0lzUlVGQlR5eHJRa0ZEYkVsWExFZEJRVkZLTEZkQlFWZFlMRVZCUVU5SkxFVkJRVTFSTEVWQlFXTllMRVZCUVZWWkxFZEJRM2hFUlN4SFFVRlJMR05CUVVFc1NVRkRSMmRDTEVsQlExUm9RaXhIUVVGUkxDdEVRVUZwUlZnc1JVRkJUeXhyUWtGRGFFWlhMRWRCUVZGS0xGZEJRVmRZTEVWQlFVOUpMRVZCUVUweVFpeEZRVUZwUWpsQ0xFVkJRVlZaTEVkQlF6TkVSU3hIUVVGUkxGTkJSVXB2UkN4SlFVTkdjRVFzUjBGQlVTeHBTMEZCYlV0WUxFVkJRVThzUzBGQlR6SkNMRVZCUVd0Q0xDdENRVUZwUXpOQ0xFVkJRVThzWjBKQlEyNVFWeXhIUVVGUkxEaEVRVUZuUlZnc1JVRkJUeXhyUzBGREwwVlhMRWRCUVZFc2JVSkJSMXBCTEVkQlFWRXNZMEZIVWtFc1IwRkdiVUlzVDBGQlZtWXNSMEZCYTBNc2FVSkJRVlJCTEVWQlJURkNMSE5EUVVGM1Ewa3NSVUZCVHl4WFFVRmhTaXhGUVVGUkxGVkJSM0JGTEhORFFVRjNRMGtzUlVGQlR5eFhRVUZoU2l4RlFVRlJMRlZCWVdoR0xGbEJRVUVzU1VGUVYwa3NSMEZCZVVKcFF5eEpRVU5zUTNSQ0xFZEJRVkVzY1VKQlExSkJMRWRCUVZFc2VVTkJRWGRETmtJc1JVRkJZU3huUWtGQmEwSkZMRVZCUVd0Q0xIVkNRVU5xUnk5Q0xFZEJRVkVzWjBOQlFXdERXQ3hGUVVGUExGZEJRMnBFVnl4SFFVRlJMSE5DUVVkSVFTeEhRVWxNZDBRc2EwSkJRVzlDTEZOQlFWTkRMRVZCUVUwelJDeEZRVUZUTkVRc1JVRkJZM1pETEVWQlFYTkNkME1zUlVGQlpVTXNSVUZCWXpGRkxFVkJRVlV5UlN4RlFVRnBRbmhETEVWQlFXVjVReXhGUVVGdFFuaERMRVZCUVZsNVF5eFJRVUZCUVN4SlFVTTNTM3BETEVsQlFUSkNRU3hIUVVGQlFTeEhRVU4wUXl4SlFVZEpNRU1zUlVGSVFTOUZMRVZCUVZGWUxGTkJRVk15Uml4UFFVRlBVaXhGUVVGTlJ5eEhRVVU1UWswc1JVRkJXVFZHTEZOQlFWTXlSaXhQUVVGUFVpeEZRVUZOUlN4UlFVRkJRU3hKUVVVelFrOHNSVUZCVlhCQ0xHdENRVUZ0UkN4VlFVRm9RbU1zUjBGQmQwTXNWVUZCV2pGRkxFbEJRMnhHT0VVc1JVRkJjMEkxUml3eVFrRkJRVUVzUlVGQmFVTTRSaXhGUVVGVmNFSXNhVUpCUVd0Q00wSXNSVUZCYzBJM1F5eFRRVUZUTmtZc1lVRkJZWEJDTEZWQlFVRkJMRVZCUVdkQ1ZTeEZRVUZOUXl4RlFVRmpReXhGUVVGbFFTeEZRVUZsTEUxQlIyNU5MRWxCU1VsMlF5eEZRVXBCVGl4UFFVRkJRU3hKUVVGelFtZEVMRWRCUVc5RFFTeEZRVUZ2UWt3c1JVRkJTMGNzUjBGQlkxRXNiVUpCUVVGQkxFVkJRMnBIY0VRc1QwRkJRVUVzU1VGQmVVSTRReXhIUVVGdlEwRXNSVUZCYjBKTUxFVkJRVXRITEVkQlFXTlRMR3RDUVVGQlFTeFBRVUZsYkVJc1NVRkpOVWR1UXl4SlFVZFVTU3hGUVVaVE9VTXNVMEZCVXpKR0xFOUJRVTlTTEVWQlFVMHNVMEZGWm5wRExFVkJRV2RDYzBRc1VVRkJVU3gxUWtGQmQwSXNUVUZKYkVVc1NVRkJTWEJFTEVWQlFYTkNOVU1zVTBGQlV6WkdMR0ZCUVdGd1FpeFZRVUZCUVN4RlFVRm5RbFVzUlVGQlRVTXNSVUZCWTBNc1JVRkJaVU1zUjBGRGJrY3hReXhGUVVGdlFsTXNZMEZCWjBKcFF5eEZRVVZ3UXl4SlFVRkpOVVFzUlVGQlR5eDFRa0ZEV0VFc1IwRkJVU3c0UWtGQlFTeEpRVUZ0UTJNc1JVRkJPRUlzWjBKQlFXdENMRWxCUVUwc1MwRkJVVGRDTEVWQlFVMXBSQ3hMUVVGUExGTkJSWFJJTEVsQlFVbHhReXhGUVVGblFuUkVMRmxCUVZsRExFVkJRWEZDY0VJc1JVRkJVM0ZDTEVWQlFYTkNiRU1zUlVGQlQyMURMRVZCUVZrc1VVRkJRU3hGUVVGbGJFTXNSVUZCVlRaRkxFVkJRVmN4UXl4RlFVRmxVQ3hGUVVGalJTeEZRVUZwUWswc1JVRkJXVEJETEVkQlEycE5UeXhGUVVGak1VWXNUMEZCVXl4SlFVTjZRbTFDTEVkQlFWRjFSU3hIUVV0V1ZpeEZRVVpCTjBRc1IwRkJVU3hUUVVWak5FUXNSVUZCWXpGRkxFbEJSMnhEYzBZc2JVSkJRWEZDTEZOQlFWTm1MRVZCUVUwelJDeEZRVUZUTkVRc1JVRkJZM1pETEVWQlFYTkNkME1zUlVGQlpVTXNSVUZCWTBNc1JVRkJhVUo0UXl4SFFVTnFTVzFETEd0Q1FVRnJRa01zUlVGQlRUTkVMRVZCUVZNMFJDeEZRVUZqZGtNc1JVRkJjMEozUXl4RlFVRmxReXhGUVVGakxFOUJRVkZETEVWQlFXbENlRU1zUjBGRE0waHRReXhyUWtGQmEwSkRMRVZCUVUwelJDeEZRVUZUTkVRc1JVRkJZM1pETEVWQlFYTkNkME1zUlVGQlpVTXNSVUZCWXl4VFFVRlZReXhGUVVGcFFuaERMRWRCUVVGQkxFbEJSek5JYjBRc1owSkJRV3RDTEZOQlFWTkRMRVZCUVdFMVJTeEZRVUZUY1VJc1JVRkJjMEl3UXl4RlFVRnBRbmhETEVkQlF6RkdMRWxCUjBselJDeEZRVWhCYkVJc1JVRkJUMmxDTEVWQlFWbEZMRTFCUTI1Q2FFSXNSVUZCWldNc1JVRkJXV1FzWVVGRE0wSnBRaXhGUVVGVFNDeEZRVUZaU1N4UlFVVnlRa01zUzBGRFNpeEpRVUZMU2l4RlFVRk5MRVZCUVVkQkxFVkJRVTFGTEVWQlFVOW9SeXhQUVVGUk9FWXNVMEZCUVVFc1NVRkRkRUpGTEVWQlFVOUdMRWRCUVV0TExGZEJRM0pDUkN4RlFVRlZja1lzUzBGQlMzQkNMRk5CUVZNeVJ5eGpRVUZqZUVJc1JVRkJUVzlDTEVWQlFVOUdMRWRCUVV0UExGRkJSVEZFVml4dFFrRkJiVUptTEVWQlFVMHpSQ3hQUVVGQlFTeEZRVUZ2UW5GQ0xFVkJRWE5DTUVRc1JVRkJUMFlzUjBGQlMxRXNTMEZCVFU0c1JVRkJUMFlzUjBGQlMwOHNUVUZCVDNKQ0xFVkJRV2xDZUVNc1IwRkpNMGdzV1VGQlFTeEpRVVJYYjBNc1JVRkJXVEpDTEU5QlFXdENOVUlzYTBKQlFXdENReXhGUVVGTk0wUXNUMEZCUVVFc1JVRkJiMEp4UWl4RlFVRnpRbmxETEVWQlFXTXNVVUZCVXl4VFFVRlZReXhQUVVGQlFTeEhRVUZwUWxZc1IwRkJWeXhIUVVGbExFZEJRMmhNTkVJc1IwRkhWRTBzVDBGQlQwTXNVVUZCVldJaUxDSm1hV3hsSWpvaUwzWmhjaTkzZDNjdmJXOXpZV2xqYnkxdFlYTjBaWEl2YzNKakwycHpMMk52Ym5abGNuUmxjaTlsWkdsMGIzSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBtb2RlbERlZj1yZXF1aXJlKFwiLi9tb2RlbC5qc1wiKSx3cmFwcGVkUmVzdWx0TW9kZWw9ZnVuY3Rpb24oZSl7dmFyIHI9ZS5fZGVmcyx0PWUudGVtcGxhdGVOYW1lLGw9bW9kZWxEZWYuZ2V0RGVmKHIsdCksYT1tb2RlbERlZi5nZW5lcmF0ZVJlc3VsdE1vZGVsKGUpO3JldHVybiByZXF1aXJlKFwiLi93cmFwcGVyLmpzXCIpKGEsbCxyKX0sdHJhbnNsYXRlVGVtcGxhdGU9ZnVuY3Rpb24oKXt2YXIgZT1yZXF1aXJlKFwiLi9wYXJzZXIuanNcIik7cmV0dXJuIGUuYXBwbHkoZSxhcmd1bWVudHMpfSxnZW5lcmF0ZUVkaXRvcnM9ZnVuY3Rpb24oKXt2YXIgZT1yZXF1aXJlKFwiLi9lZGl0b3IuanNcIik7cmV0dXJuIGUuYXBwbHkoZSxhcmd1bWVudHMpfSxjaGVja01vZGVsPWZ1bmN0aW9uKCl7dmFyIGU9cmVxdWlyZShcIi4vY2hlY2ttb2RlbC5qc1wiKTtyZXR1cm4gZS5hcHBseShlLGFyZ3VtZW50cyl9O21vZHVsZS5leHBvcnRzPXt0cmFuc2xhdGVUZW1wbGF0ZTp0cmFuc2xhdGVUZW1wbGF0ZSx3cmFwcGVkUmVzdWx0TW9kZWw6d3JhcHBlZFJlc3VsdE1vZGVsLGdlbmVyYXRlUmVzdWx0TW9kZWw6bW9kZWxEZWYuZ2VuZXJhdGVSZXN1bHRNb2RlbCxnZW5lcmF0ZUVkaXRvcnM6Z2VuZXJhdGVFZGl0b3JzLGNoZWNrTW9kZWw6Y2hlY2tNb2RlbH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTFoYVc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a1pXeEVaV1lpTENKeVpYRjFhWEpsSWl3aWQzSmhjSEJsWkZKbGMzVnNkRTF2WkdWc0lpd2lkR1Z0Y0d4aGRHVkVaV1lpTENKa1pXWnpJaXdpWDJSbFpuTWlMQ0owWlcxd2JHRjBaVTVoYldVaUxDSm1hVzVoYkUxdlpHVnNRMjl1ZEdWdWRFUmxaaUlzSW1kbGRFUmxaaUlzSW1acGJtRnNUVzlrWld4RGIyNTBaVzUwSWl3aVoyVnVaWEpoZEdWU1pYTjFiSFJOYjJSbGJDSXNJblJ5WVc1emJHRjBaVlJsYlhCc1lYUmxJaXdpZEhRaUxDSmhjSEJzZVNJc0ltRnlaM1Z0Wlc1MGN5SXNJbWRsYm1WeVlYUmxSV1JwZEc5eWN5SXNJbWRsSWl3aVkyaGxZMnROYjJSbGJDSXNJbU50SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkhRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR05CUlc1Q1F5eHRRa0ZCY1VJc1UwRkJVME1zUjBGRGFFTXNTVUZCU1VNc1JVRkJUMFFzUlVGQldVVXNUVUZEYmtKRExFVkJRV1ZJTEVWQlFWbEhMR0ZCUXpOQ1F5eEZRVUYxUWxBc1UwRkJVMUVzVDBGQlQwb3NSVUZCVFVVc1IwRkZOME5ITEVWQlFXOUNWQ3hUUVVGVFZTeHZRa0ZCYjBKUUxFZEJTM0pFTEU5QlNHTkdMRkZCUVZFc1pVRkJVa0VzUTBGRFNWRXNSVUZCYlVKR0xFVkJRWE5DU0N4SlFVMTZSRThzYTBKQlFXOUNMRmRCUTNSQ0xFbEJRVWxETEVWQlFVdFlMRkZCUVZFc1pVRkRha0lzVDBGQlQxY3NSVUZCUjBNc1RVRkJUVVFzUlVGQlNVVXNXVUZKYkVKRExHZENRVUZyUWl4WFFVTndRaXhKUVVGSlF5eEZRVUZMWml4UlFVRlJMR1ZCUTJwQ0xFOUJRVTlsTEVWQlFVZElMRTFCUVUxSExFVkJRVWxHTEZsQlIyeENSeXhYUVVGaExGZEJRMllzU1VGQlNVTXNSVUZCUzJwQ0xGRkJRVkVzYlVKQlEycENMRTlCUVU5cFFpeEZRVUZIVEN4TlFVRk5TeXhGUVVGSlNpeFpRVWQwUWtzc1QwRkJUME1zVTBGRFRGUXNhMEpCUVcxQ1FTeHJRa0ZEYmtKVUxHMUNRVUZ2UWtFc2JVSkJRM0JDVVN4dlFrRkJjVUpXTEZOQlFWTlZMRzlDUVVNNVFrc3NaMEpCUVdsQ1FTeG5Ra0ZEYWtKRkxGZEJRVmxCSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWpiMjUyWlhKMFpYSXZiV0ZwYmk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgb2JqRXh0ZW5kPXJlcXVpcmUoXCIuL2RvbXV0aWxzLmpzXCIpLm9iakV4dGVuZCxjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksX3ZhbHVlU2V0PWZ1bmN0aW9uKGUsdCxvLGwpe3ZhciByPW8uaW5kZXhPZihcIi5cIik7aWYoLTE9PXIpaWYodm9pZCAwPT09dFtvXSljb25zb2xlLmxvZyhcIlVuZGVmaW5lZCBwcm9wIFwiK28rXCIgd2hpbGUgc2V0dGluZyB2YWx1ZSBcIitsK1wiIGluIG1vZGVsLl92YWx1ZVNldFwiKTtlbHNlIGlmKG51bGw9PT10W29dKVwib2JqZWN0XCI9PXR5cGVvZiBsJiZudWxsIT09bCYmdm9pZCAwPT09bC5wdXNoJiZjb25zb2xlLmxvZyhcIm51bGxwcm9wb2JqZWN0dmFsdWVcIixvLGwpLHRbb109bDtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiB0W29dJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W29dLnB1c2gpe3ZhciBuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBsKXt2YXIgaT1sLm1hdGNoKC9eXFxbKC4qKVxcXSQvKTtpZihudWxsPT09aSl0aHJvd1wiVW5leHBlY3RlZCBkZWZhdWx0IHZhbHVlIGZvciBhcnJheSBwcm9wZXJ0eSBcIitvK1wiOiBcIitsO249aVsxXS5zcGxpdChcIixcIil9ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgbHx8dm9pZCAwPT09bC5wdXNoKXRocm93XCJVbmV4cGVjdGVkIGRlZmF1bHQgdmFsdWUgZm9yIGFycmF5IHByb3BlcnR5IFwiK28rXCI6IFwiK2wrXCIgdHlwZW9mIFwiK3R5cGVvZiBsO249bH1mb3IodmFyIGE9W10sZD0wO2Q8bi5sZW5ndGg7ZCsrKVwiQFwiPT1uW2RdLnN1YnN0cigwLDEpP2EucHVzaChfZ2VuZXJhdGVNb2RlbChlLG5bZF0uc3Vic3RyKDEpKSk6bltkXS5sZW5ndGg+MCYmYS5wdXNoKG5bZF0pO3Rbb109YX1lbHNlXCJzdHJpbmdcIj09dHlwZW9mIHRbb118fFwiYm9vbGVhblwiPT10eXBlb2YgdFtvXT90W29dPWw6XCJvYmplY3RcIj09dHlwZW9mIHRbb10mJm51bGwhPT10W29dJiZ2b2lkIDAhPT10W29dLl93aWRnZXQ/KFwib2JqZWN0XCI9PXR5cGVvZiBsJiZudWxsIT09bCYmY29uc29sZS5sb2coXCJvYmplY3R2YWx1ZVwiLG8sdFtvXS5fd2lkZ2V0LGwpLHRbb109bCk6Y29uc29sZS5sb2coXCJzZXR0aW5nXCIsdHlwZW9mIHRbb10sdFtvXSxvLGwpO2Vsc2V7dmFyIGY9by5zdWJzdHIoMCxyKTtfdmFsdWVTZXQoZSx0W2ZdLG8uc3Vic3RyKHIrMSksbCl9fSxfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmPWZ1bmN0aW9uKGUsdCxvLGwpe2lmKHZvaWQgMCE9PWVbdF0mJmVbdF0uX2luaXRpYWxpemVkJiYhZVt0XS5fd3JpdGVhYmxlKXRocm93IGNvbnNvbGUubG9nKFwiX21vZGVsQ3JlYXRlT3JVcGRhdGVCbG9ja0RlZlwiLGUsdCxvLGwpLFwiVHJ5aW5nIHRvIGFsdGVyIG5vbiB3cml0ZWFibGUgbW9kZWw6IFwiK3QrXCIgLyBcIitvO2lmKHZvaWQgMD09PWVbdF0mJihlW3RdPXtfd3JpdGVhYmxlOiEwfSx2b2lkIDA9PT1sJiYobD17fSksdm9pZCAwPT09bC5jYXRlZ29yeSYmdm9pZCAwPT09ZVt0XS5fY2F0ZWdvcnkmJih0Lm1hdGNoKC8oXnR8LlQpaGVtZSQvKXx8dC5tYXRjaCgvKF5zfC5TKXR5bGUkLyl8fHQubWF0Y2goLyheY3wuQylvbG9yJC8pfHx0Lm1hdGNoKC8oXnJ8LlIpYWRpdXMkLyk/bC5jYXRlZ29yeT1cInN0eWxlXCI6bC5jYXRlZ29yeT1cImNvbnRlbnRcIikpLHZvaWQgMCE9PWwpe2lmKHZvaWQgMCE9PWwubmFtZSYmKGVbdF0uX25hbWU9bC5uYW1lKSx2b2lkIDAhPT1sLnRoZW1lT3ZlcnJpZGUmJihlW3RdLl90aGVtZU92ZXJyaWRlPWwudGhlbWVPdmVycmlkZSksdm9pZCAwIT09bC5nbG9iYWxTdHlsZSl7ZVt0XS5fZ2xvYmFsU3R5bGU9bC5nbG9iYWxTdHlsZTt2YXIgcj1sLmdsb2JhbFN0eWxlLnJlcGxhY2UoL14oXFwkdGhlbWV8X3RoZW1lXylcXC4vLFwiXCIpLG49ci5pbmRleE9mKFwiLlwiKSxpPS0xIT1uP3Iuc3Vic3RyKDAsbik6cjtfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmKGUsXCJ0aGVtZVwiLGkpLCh2b2lkIDA9PT1lW3RdLl90aGVtZU92ZXJyaWRlfHxlW3RdLl90aGVtZU92ZXJyaWRlKSYmX21vZGVsQ3JlYXRlT3JVcGRhdGVCbG9ja0RlZihlLHQsXCJjdXN0b21TdHlsZT1mYWxzZVwiKX12b2lkIDAhPT1sLmNvbnRleHROYW1lJiYoZVt0XS5fY29udGV4dD1sLmNvbnRleHROYW1lLFwiYmxvY2tcIj09bC5jb250ZXh0TmFtZSYmdm9pZCAwPT09ZVt0XS5fZ2xvYmFsU3R5bGUmJihlW3RdLl9nbG9iYWxTdHlsZT1cIl90aGVtZV8uYm9keVRoZW1lXCIsX21vZGVsQ3JlYXRlT3JVcGRhdGVCbG9ja0RlZihlLFwidGhlbWVcIixcImJvZHlUaGVtZVwiKSwodm9pZCAwPT09ZVt0XS5fdGhlbWVPdmVycmlkZXx8ZVt0XS5fdGhlbWVPdmVycmlkZSkmJl9tb2RlbENyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoZSx0LFwiY3VzdG9tU3R5bGU9ZmFsc2VcIikpKSx2b2lkIDAhPT1sLmV4dGVuZCYmKGVbdF0udHlwZT1sLmV4dGVuZCl9Zm9yKHZhciBhIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShhKSYmdm9pZCAwIT09bFthXSYmLTE9PVtcIm5hbWVcIixcImV4dGVuZFwiLFwiY29udGV4dE5hbWVcIixcImdsb2JhbFN0eWxlXCIsXCJ0aGVtZU92ZXJyaWRlXCJdLmluZGV4T2YoYSkmJihlW3RdW1wiX1wiK2FdPWxbYV0pO3ZvaWQgMCE9PW8mJm8ubGVuZ3RoPjAmJihlW3RdLl9wcm9wcz12b2lkIDAhPT1lW3RdLl9wcm9wcyYmZVt0XS5fcHJvcHMubGVuZ3RoPjA/ZVt0XS5fcHJvcHMrXCIgXCIrbzpvKX0sX3JlbW92ZVByZWZpeD1mdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKC9eW15BLVpdKyhbQS1aXSkoLiopJC8pO3JldHVybiBudWxsIT09dD90WzFdLnRvTG93ZXJDYXNlKCkrdFsyXTpudWxsfSxfZ2VuZXJhdGVNb2RlbEZyb21EZWY9ZnVuY3Rpb24oZSx0KXt2YXIgbz17fTtmb3IodmFyIGwgaW4gZSlpZighbC5tYXRjaCgvXl8uKi8pJiZlLmhhc093blByb3BlcnR5KGwpKXt2YXIgcj1lW2xdO2lmKFwib2JqZWN0XCI9PXR5cGVvZiByJiZudWxsIT09ciYmdm9pZCAwIT09ci5fY29tcGxleCYmci5fY29tcGxleClvW2xdPV9nZW5lcmF0ZU1vZGVsRnJvbURlZihyLHQpO2Vsc2UgaWYoXCJ0eXBlXCI9PWwpb1tsXT1yO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgbW9kZWwgZGVmXCIsbCxyLGUpLFwiVW5leHBlY3RlZCBtb2RlbCBkZWYgW1wiK2wrXCJdPVwiK3I7b1tsXT1udWxsfX1pZih2b2lkIDAhPT1lLl9kZWZhdWx0VmFsdWVzKXt2YXIgbj1lLl9kZWZhdWx0VmFsdWVzO2Zvcih2YXIgaSBpbiBuKW4uaGFzT3duUHJvcGVydHkoaSkmJl92YWx1ZVNldCh0LG8saSxuW2ldKX1yZXR1cm4gb30sX2dlbmVyYXRlTW9kZWw9ZnVuY3Rpb24oZSx0KXt2YXIgbz1fZ2V0TW9kZWxEZWYoZSx0LCExLCEwKTtyZXR1cm4gX2dlbmVyYXRlTW9kZWxGcm9tRGVmKG8sZSl9LF9nZXREZWY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gX2dldE1vZGVsRGVmKGUsdCwhMSwhMCl9LF9nZXRNb2RlbERlZj1mdW5jdGlvbihlLHQsbyxsKXtpZih2b2lkIDA9PT1lW3RdKXtpZigtMSE9dC5pbmRleE9mKFwiIFwiKSlyZXR1cm4gbnVsbDt2YXIgcj1fcmVtb3ZlUHJlZml4KHQpO3JldHVybiBudWxsIT09cj9fZ2V0TW9kZWxEZWYoZSxyLG8sbCk6bnVsbH12YXIgbj1lW3RdO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBuKXRocm93XCJCbG9jayBkZWZpbml0aW9uIG11c3QgYmUgYW4gb2JqZWN0OiBmb3VuZCBcIituK1wiIGZvciBcIit0O2lmKHZvaWQgMD09PW4uX2luaXRpYWxpemVkKXtpZih2b2lkIDA9PT1uLnR5cGUmJigtMT09dC5pbmRleE9mKFwiIFwiKT9uLnR5cGU9dDpuLnR5cGU9dC5zdWJzdHIodC5pbmRleE9mKFwiIFwiKSsxKSksbi50eXBlIT10JiZ2b2lkIDA9PT1uLl93aWRnZXQpe3ZhciBpPV9nZXRNb2RlbERlZihlLG4udHlwZSwhMCk7bj1vYmpFeHRlbmQoaSxuKSxlW3RdPW59ZWxzZSB2b2lkIDA9PT1uLl93aWRnZXQmJnZvaWQgMD09PW4uX3Byb3BzJiZuLl9jb21wbGV4O24uX3dyaXRlYWJsZT0hMCxuLl9pbml0aWFsaXplZD0hMH1pZih2b2lkIDAhPT1uLl9wcm9wcyl7dmFyIGE9bi5fcHJvcHM7aWYoKGE9YS5zcGxpdChcIiBcIikpLmxlbmd0aD4wJiZ2b2lkIDA9PT1uLl93cml0ZWFibGUpdGhyb3cgY29uc29sZS5lcnJvcihcIkFsdGVyaW5nIGEgbm9uIHdyaXRhYmxlIG9iamVjdCBcIix0LGEsbiksXCJBbHRlcmluZyBhIG5vbiB3cml0YWJsZSBvYmplY3Q6IFwiK3QrXCIgZGVmOiBcIithO3ZvaWQgMD09PW4uX3Byb2Nlc3NlZERlZnMmJihuLl9wcm9jZXNzZWREZWZzPXt9KSx2b2lkIDA9PT1uLl9nbG9iYWxTdHlsZXMmJihuLl9nbG9iYWxTdHlsZXM9e30pLHZvaWQgMD09PW4uX2RlZmF1bHRWYWx1ZXMmJihuLl9kZWZhdWx0VmFsdWVzPXt9KTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGY9YVtkXTtpZigwIT09Zi5sZW5ndGgpe3ZhciBzPWYsdT1udWxsLGM9Zi5tYXRjaCgvXihbXj1cXFtcXF1dKykoXFxbXFxdKT8oPT8pKC4qKSQvKTtpZihudWxsIT09YyYmKGY9Y1sxXSxcIltdXCI9PWNbMl0mJih2b2lkIDA9PT1uW2ZdJiYobltmXT1bXSksdT1bXSksXCI9XCI9PWNbM10mJih1PWYubWF0Y2goLyhednxWKWlzaWJsZSQvKT9cInRydWVcIj09U3RyaW5nKGNbNF0pLnRvTG93ZXJDYXNlKCk6Zi5tYXRjaCgvXmN1c3RvbVN0eWxlJC8pP1widHJ1ZVwiPT1TdHJpbmcoY1s0XSkudG9Mb3dlckNhc2UoKTpjWzRdKSksbnVsbCE9PXUmJnZvaWQgMD09PW4uX2RlZmF1bHRWYWx1ZXNbZl0mJihuLl9kZWZhdWx0VmFsdWVzW2ZdPXUpLHZvaWQgMD09PW5bZl0pe3ZhciBfPV9nZXRNb2RlbERlZihlLHQrXCIgXCIrZiwhMCk7bnVsbD09PV8mJihfPV9nZXRNb2RlbERlZihlLGYsITApKSxuW2ZdPV99bi5fcHJvY2Vzc2VkRGVmc1tmXT1zLG4uX2NvbXBsZXg9ITB9fWRlbGV0ZSBuLl9wcm9wc31pZihvKXJldHVybiBuLl93cml0ZWFibGU9ITEsb2JqRXh0ZW5kKHt9LG4pO2lmKGwpcmV0dXJuIG4uX3dyaXRlYWJsZT0hMSxuO2lmKHZvaWQgMD09PW4uX3dyaXRlYWJsZXx8ITE9PT1uLl93cml0ZWFibGUpdGhyb3dcIlJldHJpZXZpbmcgbm9uIHdyaXRlYWJsZSBvYmplY3QgZGVmaW5pdGlvbjogXCIrdDtyZXR1cm4gbn0sX2luY3JlYXNlVXNlQ291bnQ9ZnVuY3Rpb24oZSx0KXtpZihlKXtpZih2b2lkIDA9PT10Ll91c2Vjb3VudCl0aHJvdyBjb25zb2xlLmVycm9yKFwiRVJST1IgdHJ5aW5nIHRvIGJpbmQgYW4gdW51c2VkIHByb3BlcnR5IHdoaWxlIHJlYWRvbmx5XCIsdCksXCJFUlJPUiB0cnlpbmcgdG8gYmluZCBhbiB1bnVzZWQgcHJvcGVydHlcIn1lbHNlIHZvaWQgMD09PXQuX3VzZWNvdW50JiYodC5fdXNlY291bnQ9MCksdC5fdXNlY291bnQrK30sZW5zdXJlR2xvYmFsU3R5bGU9ZnVuY3Rpb24oZSx0LG8sbCxyLG4saSxhKXt2YXIgZD1vKG4saSxhKTtpZih2b2lkIDA9PT1lW2xdLl9nbG9iYWxTdHlsZXNbcl0pe2lmKHQpdGhyb3dcIkNhbm5vdCBmaW5kIF9nbG9iYWxTdHlsZSBmb3IgXCIrcitcIiBpbiBcIitsK1wiIVwiOygtMSE9ci5pbmRleE9mKFwiLlwiKXx8XCJvYmplY3RcIj09dHlwZW9mIGVbbF1bcl0mJnZvaWQgMCE9PWVbbF1bcl0uX3dpZGdldCkmJihlW2xdLl9nbG9iYWxTdHlsZXNbcl09ZCl9ZWxzZSBpZihlW2xdLl9nbG9iYWxTdHlsZXNbcl0hPWQpdGhyb3dcIlVuZXhwZWN0ZWQgY29uZmxpY3RpbmcgZ2xvYmFsU3R5bGUgWzJdIGZvciBcIitsK1wiL1wiK3IrXCI6IG9sZD1cIitlW2xdLl9nbG9iYWxTdHlsZXNbcl0rXCIgbmV3PVwiK2R9LG1vZGVsRW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZT1mdW5jdGlvbihlLHQsbyxsLHIsbixpLGEsZCxmKXt2YXIgcyx1LGM7aWYoXCIkXCI9PWkuc3Vic3RyKDAsMSkpe2NvbnNvbGUud2FybihcIkRFUFJFQ0FURUQgJCBpbiBiaW5kaW5nUHJvdmlkZXI6IFwiLGkscik7dmFyIF89aS5pbmRleE9mKFwiLlwiKTtpZigtMT09Xyl0aHJvd1wiVW5leHBlY3RlZCBmdWxsUGF0aDogXCIraStcIi9cIituK1wiL1wiK3IrXCIvXCIrYStcIi9cIitkO2lmKHM9aS5zdWJzdHIoMSxfLTEpLGM9aS5zdWJzdHIoXysxKSxcInRoZW1lXCIhPXMpdGhyb3dcIlVuZXhwZWN0ZWQgJCBzZXF1ZW5jZTogXCIrcytcIiBpbiBcIitpO3ZhciB2PWMuaW5kZXhPZihcIi5cIik7dT1cIiRyb290LmNvbnRlbnQoKS50aGVtZSgpLlwiKyhzPWMuc3Vic3RyKDAsdikpK1wiKCkuXCIrKGM9Yy5zdWJzdHIodisxKSkucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXC5cIixcImdcIiksXCIoKS5cIil9ZWxzZSBpZihcIiNcIj09aS5zdWJzdHIoMCwxKSljb25zb2xlLndhcm4oXCJERVBSRUNBVEVEICMgaW4gYmluZGluZ1Byb3ZpZGVyOiBcIixpLHIpLHM9bCx1PVwiJHJvb3QuY29udGVudCgpLlwiKyhjPWkuc3Vic3RyKDEpKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcLlwiLFwiZ1wiKSxcIigpLlwiKTtlbHNlIGlmKFwiX3RoZW1lXy5cIj09aS5zdWJzdHIoMCw4KSl7dmFyIHA9aS5pbmRleE9mKFwiLlwiLDgpO3U9XCIkcm9vdC5jb250ZW50KCkudGhlbWUoKS5cIisocz1pLnN1YnN0cig4LHAtOCkpK1wiKCkuXCIrKGM9aS5zdWJzdHIocCsxKSkucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXC5cIixcImdcIiksXCIoKS5cIil9ZWxzZVwiX3Jvb3RfLlwiPT1pLnN1YnN0cigwLDcpPyhzPWwsdT1cIiRyb290LmNvbnRlbnQoKS5cIisoYz1pLnN1YnN0cig3KSkucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXC5cIixcImdcIiksXCIoKS5cIikpOihzPXIsYz1uK2ksdT1pLnJlcGxhY2UobmV3IFJlZ0V4cChcIlxcXFwuXCIsXCJnXCIpLFwiKCkuXCIpKTtpZih2b2lkIDA9PT10W3NdKXRocm93XCJDYW5ub3QgZmluZCBtb2RlbCBkZWYgZm9yIFtcIitzK1wiXVwiO3ZhciBnLGI9Yy5pbmRleE9mKFwiLlwiKSxoPS0xPT1iP2M6Yy5zdWJzdHIoMCxiKTtpZigtMSE9cy5pbmRleE9mKFwiLVwiKSl0aHJvdyBjb25zb2xlLmVycm9yKFwiRVJST1IgY2Fubm90IHVzZSAtIGZvciBibG9jayBuYW1lc1wiLHMpLFwiRVJST1IgdW5leHBlY3RlZCBjaGFyIGluIGJsb2NrIG5hbWU6IFwiK3M7aWYoLTEhPWguaW5kZXhPZihcIi1cIikpdGhyb3cgY29uc29sZS5lcnJvcihcIkVSUk9SIGNhbm5vdCB1c2UgLSBmb3IgcHJvcGVydHkgbmFtZXNcIixoKSxcIkVSUk9SIHVuZXhwZWN0ZWQgY2hhciBpbiBwcm9wZXJ0eSBuYW1lOiBcIitzO2lmKGUpcmV0dXJuIHZvaWQgMCE9PXRbc10uX2dsb2JhbFN0eWxlJiZ2b2lkIDAhPT10W3NdW2hdJiZcInN0eWxlXCI9PXRbc11baF0uX2NhdGVnb3J5JiYodSs9XCIuX2RlZmF1bHRDb21wdXRlZFwiKSx1O2lmKGUpe2lmKHZvaWQgMCE9PWEpdGhyb3dcIkNhbm5vdCB1c2UgZGVmYXVsdFZhbHVlIGluIHJlYWRvbmx5IG1vZGUhXCI7aWYoZCl0aHJvd1wiQ2Fubm90IHVzZSBvdmVycmlkZURlZmF1bHQgaW4gcmVhZG9ubHkgbW9kZSBmb3IgXCIrcytcIi9cIitjK1wiL1wiK2QrXCIhXCI7aWYodm9pZCAwIT09Zil0aHJvd1wiQ2Fubm90IHNldCBjYXRlZ29yeSBmb3IgXCIrcytcIi9cIitjK1wiL1wiK2YrXCIgaW4gcmVhZG9ubHkgbW9kZSFcIjtnPV9nZXRNb2RlbERlZih0LHMsITEsITApfWVsc2UhMT09PXRbc10uX3dyaXRlYWJsZSYmY29uc29sZS5sb2coXCJUT0RPIGRlYnVnIHVzZSBjYXNlcyBmb3IgdGhpcyBjb25kaXRpb25cIixzLGMpLGc9X2dldE1vZGVsRGVmKHQscywhMT09PXRbc10uX3dyaXRlYWJsZSk7aWYobnVsbD09PWcpdGhyb3dcIlVuZXhwZWN0ZWQgbW9kZWwgZm9yIFtcIitzK1wiXVwiO2lmKHZvaWQgMD09PWdbaF0pe2lmKGUpdGhyb3dcIkNhbm5vdCBmaW5kIHBhdGggXCIraCtcIiBmb3IgXCIrcytcIiFcIjtfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmKHQscyxoKSxnPV9nZXRNb2RlbERlZih0LHMsITEpfXZvaWQgMCE9PXRbc10uX2dsb2JhbFN0eWxlJiZ2b2lkIDAhPT10W3NdW2hdJiZudWxsIT09dFtzXVtoXSYmXCJzdHlsZVwiPT10W3NdW2hdLl9jYXRlZ29yeSYmKHUrPVwiLl9kZWZhdWx0Q29tcHV0ZWRcIik7dmFyIHk9Zzt0cnl7aWYoX2luY3JlYXNlVXNlQ291bnQoZSx5KSwtMSE9Yil7dmFyIG09Yztkb3t2YXIgdz1tLnN1YnN0cigwLGIpO2lmKHZvaWQgMD09PXlbd10pdGhyb3dcIkZvdW5kIGFuIHVuZXhwZWN0ZWQgcHJvcCBcIit3K1wiIGZvciBtb2RlbCBcIitzK1wiIGZvciBcIitjO3k9eVt3XSxfaW5jcmVhc2VVc2VDb3VudChlLHkpLGI9KG09bS5zdWJzdHIoYisxKSkuaW5kZXhPZihcIi5cIil9d2hpbGUoLTEhPWIpO2lmKHZvaWQgMD09PXlbbV18fG51bGw9PT15W21dKXRocm93XCJGb3VuZCBhbiB1bmV4cGVjdGVkIHBhdGggdGVybWluYXRpb24gXCIrbStcIiBmb3IgbW9kZWwgXCIrcytcIiBmb3IgXCIrYzt5PXlbbV19ZWxzZSB5PXlbY107aWYodm9pZCAwPT09eXx8bnVsbD09PXkpdGhyb3dcIlVuZXhwZWN0ZWQgbnVsbCBtb2RlbCBmb3IgXCIrcytcIi9cIituK1wiL1wiK2k7dm9pZCAwIT09ZiYmKHkuX2NhdGVnb3J5PWYpLF9pbmNyZWFzZVVzZUNvdW50KGUseSl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihcIlRPRE8gRVJST1IgUHJvcGVydHkgbG9va3VwIGV4Y2VwdGlvblwiLGUscyxjLHIsaSx0KSxlfWlmKHZvaWQgMCE9PXRbc10uX2dsb2JhbFN0eWxlJiZcIm9iamVjdFwiPT10eXBlb2YgdFtzXVtoXSYmbnVsbCE9PXRbc11baF0mJnZvaWQgMCE9PXRbc11baF0uX2NhdGVnb3J5JiZcInN0eWxlXCI9PXRbc11baF0uX2NhdGVnb3J5KXt2YXIgeD1tb2RlbEVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUuYmluZCh2b2lkIDAsZSx0LG8sbCxyLFwiXCIpLE89LTEhPWMuaW5kZXhPZihcIi5cIik/Yy5zdWJzdHIoYy5pbmRleE9mKFwiLlwiKSk6XCJcIjtpZigtMSE9Ty5pbmRleE9mKFwiLlwiLDEpKXRocm93XCJUT0RPIHVuc3VwcG9ydGVkIG9iamVjdCBuZXN0aW5nISBcIitjO3ZhciBEPXRbc10uX2dsb2JhbFN0eWxlK1wiLlwiK2g7XCJvYmplY3RcIj09dHlwZW9mIHRbc11baF0mJm51bGwhPT10W3NdW2hdJiZ2b2lkIDAhPT10W3NdW2hdLl9nbG9iYWxTdHlsZSYmKEQ9dFtzXVtoXS5fZ2xvYmFsU3R5bGUpLGVuc3VyZUdsb2JhbFN0eWxlKHQsZSx4LHMsaCxELHZvaWQgMCwhMSk7dmFyIFM9RCtPO2lmKHZvaWQgMD09PWEmJm51bGwhPT10W3NdLl9kZWZhdWx0VmFsdWVzW2NdJiYoYT10W3NdLl9kZWZhdWx0VmFsdWVzW2NdKSxlbnN1cmVHbG9iYWxTdHlsZSh0LGUseCxzLGMsUyxhLGQpLHZvaWQgMCE9PWEpe2lmKGUpdGhyb3cgY29uc29sZS5lcnJvcihcIkNhbm5vdCBzZXQgYSBuZXcgdGhlbWUgZGVmYXVsdCB2YWx1ZVwiLFMuc3Vic3RyKDcpLGEsXCJ3aGlsZSBpbiByZWFkb25seSBtb2RlXCIpLFwiQ2Fubm90IHNldCBhIG5ldyB0aGVtZSBkZWZhdWx0IHZhbHVlIChcIithK1wiKSBmb3IgXCIrUy5zdWJzdHIoNykrXCIgd2hpbGUgaW4gcmVhZG9ubHkgbW9kZSFcIjtvKFwiZGVmYXVsdFwiLFMuc3Vic3RyKDcpLGEpfWE9bnVsbH1pZih2b2lkIDAhPT1hKWlmKHZvaWQgMD09PXRbc10uX2RlZmF1bHRWYWx1ZXNbY118fHZvaWQgMCE9PWQmJmQpe2lmKGUpdGhyb3dcIkNhbm5vdCBzZXQgbmV3IF9kZWZhdWx0VmFsdWVzIFsxXSBmb3IgXCIrYytcIiBpbiBcIitzK1wiIVwiO3Rbc10uX2RlZmF1bHRWYWx1ZXNbY109YX1lbHNlIGlmKG51bGw9PT1hKXtpZihlJiZudWxsIT09dFtzXS5fZGVmYXVsdFZhbHVlc1tjXSl0aHJvd1wiQ2Fubm90IHNldCBuZXcgX2RlZmF1bHRWYWx1ZXMgWzJdIGZvciBcIitjK1wiIGluIFwiK3MrXCIhXCI7dFtzXS5fZGVmYXVsdFZhbHVlc1tjXT1udWxsfWVsc2UgaWYodFtzXS5fZGVmYXVsdFZhbHVlc1tjXSE9YSl0aHJvdyBjb25zb2xlLmVycm9yKFwiVE9ETyBlcnJvciEhISBUcnlpbmcgdG8gc2V0IGEgbmV3IGRlZmF1bHQgdmFsdWUgZm9yIFwiK3MrXCIgXCIrYytcIiB3aGlsZSBpdCBhbHJlYWR5IGV4aXN0cyAoY3VycmVudDogXCIrdFtzXS5fZGVmYXVsdFZhbHVlc1tjXStcIiwgbmV3OiBcIithK1wiKVwiKSxcIlRyeWluZyB0byBzZXQgYSBuZXcgZGVmYXVsdCB2YWx1ZSBmb3IgXCIrcytcIiBcIitjK1wiIHdoaWxlIGl0IGFscmVhZHkgZXhpc3RzIChjdXJyZW50OiBcIit0W3NdLmRlZmF1bHRWYWx1ZXNbY10rXCIsIG5ldzogXCIrYStcIilcIjtyZXR1cm4gdX0sZ2VuZXJhdGVSZXN1bHRNb2RlbD1mdW5jdGlvbihlKXt2YXIgdD1lLl9kZWZzLG89ZS50ZW1wbGF0ZU5hbWUsbD1fZ2VuZXJhdGVNb2RlbCh0LG8pO3JldHVybiB2b2lkIDAhPT10LnRoZW1lJiYobC50aGVtZT1fZ2VuZXJhdGVNb2RlbCh0LFwidGhlbWVcIikpLGx9O21vZHVsZS5leHBvcnRzPXtlbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlOm1vZGVsRW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZS5iaW5kKHZvaWQgMCwhMSksZ2V0QmluZFZhbHVlOm1vZGVsRW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZS5iaW5kKHZvaWQgMCwhMCksZ2VuZXJhdGVNb2RlbDpfZ2VuZXJhdGVNb2RlbCxnZW5lcmF0ZVJlc3VsdE1vZGVsOmdlbmVyYXRlUmVzdWx0TW9kZWwsZ2V0RGVmOl9nZXREZWYsY3JlYXRlT3JVcGRhdGVCbG9ja0RlZjpfbW9kZWxDcmVhdGVPclVwZGF0ZUJsb2NrRGVmfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMXZaR1ZzTG1weklsMHNJbTVoYldWeklqcGJJbTlpYWtWNGRHVnVaQ0lzSW5KbGNYVnBjbVVpTENKamIyNXpiMnhsSWl3aVgzWmhiSFZsVTJWMElpd2laR1ZtY3lJc0ltMXZaR1ZzSWl3aWNISnZjQ0lzSW5aaGJIVmxJaXdpWkc5MFVHOXpJaXdpYVc1a1pYaFBaaUlzSW14dlp5SXNJbkIxYzJnaUxDSjJZV3gxWlhNaUxDSjJZV3gxWlhOVGRISnBibWNpTENKdFlYUmphQ0lzSW5Od2JHbDBJaXdpY21Weklpd2lhU0lzSW14bGJtZDBhQ0lzSW5OMVluTjBjaUlzSWw5blpXNWxjbUYwWlUxdlpHVnNJaXdpWDNkcFpHZGxkQ0lzSW5CeWIzQk9ZVzFsSWl3aVgyMXZaR1ZzUTNKbFlYUmxUM0pWY0dSaGRHVkNiRzlqYTBSbFppSXNJblJsYlhCc1lYUmxUbUZ0WlNJc0luQnliM0JsY25ScFpYTWlMQ0p1WVcxbFpGQnliM0JsY25ScFpYTWlMQ0pmYVc1cGRHbGhiR2w2WldRaUxDSmZkM0pwZEdWaFlteGxJaXdpWTJGMFpXZHZjbmtpTENKZlkyRjBaV2R2Y25raUxDSnVZVzFsSWl3aVgyNWhiV1VpTENKMGFHVnRaVTkyWlhKeWFXUmxJaXdpWDNSb1pXMWxUM1psY25KcFpHVWlMQ0puYkc5aVlXeFRkSGxzWlNJc0lsOW5iRzlpWVd4VGRIbHNaU0lzSW1kc2IySmhiRk4wZVd4bFUzVmlJaXdpY21Wd2JHRmpaU0lzSW5BaUxDSm5jeUlzSW1OdmJuUmxlSFJPWVcxbElpd2lYMk52Ym5SbGVIUWlMQ0psZUhSbGJtUWlMQ0owZVhCbElpd2libkFpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSWw5d2NtOXdjeUlzSWw5eVpXMXZkbVZRY21WbWFYZ2lMQ0p6ZEhJaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSWw5blpXNWxjbUYwWlUxdlpHVnNSbkp2YlVSbFppSXNJbTF2WkdWc1JHVm1JaXdpWDJOdmJYQnNaWGdpTENKbGNuSnZjaUlzSWw5a1pXWmhkV3gwVm1Gc2RXVnpJaXdpWkdWbVlYVnNkSE1pTENKd2NtOXdNaUlzSWw5blpYUk5iMlJsYkVSbFppSXNJbDluWlhSRVpXWWlMQ0p5WlhSMWNtNURiRzl1WlNJc0luSmxZV1J2Ym14NUlpd2laR1ZtVDJKcUlpd2lkSGx3WlVSbFppSXNJbVJsWmlJc0lsOXdjbTlqWlhOelpXUkVaV1p6SWl3aVgyZHNiMkpoYkZOMGVXeGxjeUlzSW05eWFXZFFjbTl3SWl3aVpHVm1WbUZzZFdVaUxDSndjbTl3UkdWbUlpd2lVM1J5YVc1bklpd2lkbUZzSWl3aVgybHVZM0psWVhObFZYTmxRMjkxYm5RaUxDSmZkWE5sWTI5MWJuUWlMQ0psYm5OMWNtVkhiRzlpWVd4VGRIbHNaU0lzSW1kelFtbHVaR2x1WjFCeWIzWnBaR1Z5SWl3aWJXOWtaV3hPWVcxbElpd2ljR0YwYUNJc0ltZHpSblZzYkZCaGRHZ2lMQ0prWldaaGRXeDBWbUZzZFdVaUxDSnZkbVZ5Y21sa1pVUmxabUYxYkhRaUxDSm5iRzlpWVd4VGRIbHNaVUpwYm1ScGJtZENhVzVrVm1Gc2RXVWlMQ0p0YjJSbGJFVnVjM1Z5WlZCaGRHaEJibVJIWlhSQ2FXNWtWbUZzZFdVaUxDSjBhR1Z0WlZWd1pHRjBaWElpTENKeWIyOTBUVzlrWld4T1lXMWxJaXdpZDJsMGFHbHVJaXdpWm5Wc2JGQmhkR2dpTENKelpYUmpZWFJsWjI5eWVTSXNJbmRoY200aUxDSndNaUlzSWxKbFowVjRjQ0lzSW5Beklpd2ljSEp2Y0ZCdmN5SXNJbU5vYVd4a1RXOWtaV3dpTENKdGVYQmhkR2dpTENKbElpd2lZbWx1WkNJc0luTjFZbEJoZEdnaUxDSm5jMUJoZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0prWldaaGRXeDBWbUZzZFdWeklpd2laMlZ1WlhKaGRHVlNaWE4xYkhSTmIyUmxiQ0lzSW5SbGJYQnNZWFJsUkdWbUlpd2lYMlJsWm5NaUxDSm1hVzVoYkUxdlpHVnNRMjl1ZEdWdWRDSXNJblJvWlcxbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbVZ1YzNWeVpWQmhkR2hCYm1SSFpYUkNhVzVrVm1Gc2RXVWlMQ0puWlhSQ2FXNWtWbUZzZFdVaUxDSm5aVzVsY21GMFpVMXZaR1ZzSWl3aVoyVjBSR1ZtSWl3aVkzSmxZWFJsVDNKVmNHUmhkR1ZDYkc5amEwUmxaaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVUZwUWtRc1ZVRkRja05GTEZGQlFWVkVMRkZCUVZFc2MwSkJSV3hDUlN4VlFVRlpMRk5CUVZORExFVkJRVTFETEVWQlFVOURMRVZCUVUxRExFZEJRekZETEVsQlFVbERMRVZCUVZOR0xFVkJRVXRITEZGQlFWRXNTMEZETVVJc1NVRkJaU3hIUVVGWVJDeEZRVU5HTEZGQlFVRXNTVUZCVjBnc1JVRkJUVU1zUjBGRFprb3NVVUZCVVZFc1NVRkJTU3hyUWtGQmIwSktMRVZCUVU4c2QwSkJRVEJDUXl4RlFVRlJMRFJDUVVOd1JTeEhRVUZ2UWl4UFFVRm9Ra1lzUlVGQlRVTXNSMEZEU3l4cFFrRkJWRU1zUjBGQkswSXNUMEZCVmtFc1VVRkJRVUVzU1VGQmVVSkJMRVZCUVUxSkxFMUJRWEZDVkN4UlFVRlJVU3hKUVVGSkxITkNRVUYxUWtvc1JVRkJUVU1zUjBGRE4waEdMRVZCUVUxRExFZEJRVkZETEU5QlExUXNSMEZCTUVJc2FVSkJRV1pHTEVWQlFVMURMRWxCUVdkRUxHMUNRVUZ3UWtRc1JVRkJUVU1zUjBGQlRVc3NTMEZCYjBJc1EwRkRiRVlzU1VGQlNVTXNSVUZEU2l4SFFVRnhRaXhwUWtGQlZrd3NSVUZCYjBJc1EwRkROMElzU1VGQlNVMHNSVUZCWlU0c1JVRkJUVThzVFVGQlRTeGpRVU12UWl4SFFVRnhRaXhQUVVGcVFrUXNSVUZIUml4TFFVRk5MQ3REUVVGcFJGQXNSVUZCVHl4TFFVRlBReXhGUVVaeVJVc3NSVUZCVTBNc1JVRkJZU3hIUVVGSFJTeE5RVUZOTEZOQlNUVkNMRU5CUVVFc1IwRkJjVUlzYVVKQlFWWlNMRkZCUVVGQkxFbEJRVFpDUVN4RlFVRk5TU3hMUVVkdVJDeExRVUZOTEN0RFFVRnBSRXdzUlVGQlR5eExRVUZQUXl4RlFVRlJMR3RDUVVGeFFrRXNSVUZHYkVkTExFVkJRVk5NTEVWQlMxZ3NTVUZFUVN4SlFVRkpVeXhMUVVOTFF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsTUxFVkJRVTlOTEU5QlFWRkVMRWxCUTBnc1MwRkJNVUpNTEVWQlFVOUxMRWRCUVVkRkxFOUJRVThzUlVGQlJ5eEhRVVYwUWtnc1JVRkJTVXdzUzBGQlMxTXNaVUZCWldoQ0xFVkJRVTFSTEVWQlFVOUxMRWRCUVVkRkxFOUJRVThzUzBGRGRFTlFMRVZCUVU5TExFZEJRVWRETEU5QlFWTXNSMEZETlVKR0xFVkJRVWxNTEV0QlFVdERMRVZCUVU5TExFbEJSM0JDV2l4RlFVRk5ReXhIUVVGUlZTeE5RVU5wUWl4cFFrRkJabGdzUlVGQlRVTXNTVUZCTWtNc2EwSkJRV1pFTEVWQlFVMURMRWRCUlhoRVJDeEZRVUZOUXl4SFFVRlJReXhGUVVOcFFpeHBRa0ZCWmtZc1JVRkJUVU1zU1VGQmNVTXNUMEZCYUVKRUxFVkJRVTFETEZOQlFVRkJMRWxCUVhsQ1JDeEZRVUZOUXl4SFFVRk5aU3hUUVVOc1JTeHBRa0ZCVkdRc1IwRkJLMElzVDBGQlZrRXNSMEZCWjBKTUxGRkJRVkZSTEVsQlFVa3NZMEZCWlVvc1JVRkJUVVFzUlVGQlRVTXNSMEZCVFdVc1VVRkJVMlFzUjBGRmRFZEdMRVZCUVUxRExFZEJRVkZETEVkQlJXUk1MRkZCUVZGUkxFbEJRVWtzYVVKQlFXdENUQ3hGUVVGTlF5eEhRVUZQUkN4RlFVRk5ReXhIUVVGUFFTeEZRVUZOUXl4UFFVVXpSQ3hEUVVOTUxFbEJRVWxsTEVWQlFWZG9RaXhGUVVGTFlTeFBRVUZQTEVWQlFVZFlMRWRCUXpsQ1RDeFZRVUZWUXl4RlFVRk5ReXhGUVVGTmFVSXNSMEZCVjJoQ0xFVkJRVXRoTEU5QlFVOVlMRVZCUVZNc1IwRkJTVVFzUzBGSk1VUm5RaXcyUWtGQkswSXNVMEZCVTI1Q0xFVkJRVTF2UWl4RlFVRmpReXhGUVVGWlF5eEhRVU14UlN4UlFVRkJMRWxCUVZkMFFpeEZRVUZMYjBJc1NVRkJhVU53UWl4RlFVRkxiMElzUjBGQlkwY3NaVUZCYVVKMlFpeEZRVUZMYjBJc1IwRkJZMGtzVjBGRmRFY3NUVUZFUVRGQ0xGRkJRVkZSTEVsQlFVa3NLMEpCUVdkRFRpeEZRVUZOYjBJc1JVRkJZME1zUlVGQldVTXNSMEZEZEVVc2QwTkJRVEJEUml4RlFVRmxMRTFCUVZGRExFVkJiMEo2UlN4UlFVRkJMRWxCYWtKWGNrSXNSVUZCUzI5Q0xFdEJRMlJ3UWl4RlFVRkxiMElzU1VGRFNFa3NXVUZCUVVFc1VVRkJXU3hKUVVsSVJpeEpRVUZuUTBFc1YwRkJRVUVzU1VGRGFFTkJMRVZCUVdkQ1J5eGxRVUZCUVN4SlFVRnJRM3BDTEVWQlFVdHZRaXhIUVVGalRTeFpRVU14UlU0c1JVRkJZVllzVFVGQlRTeHBRa0ZCYlVKVkxFVkJRV0ZXTEUxQlFVMHNhVUpCUVcxQ1ZTeEZRVUZoVml4TlFVRk5MR2xDUVVGdFFsVXNSVUZCWVZZc1RVRkJUU3hwUWtGRGRrbFpMRVZCUVdkQ1J5eFRRVUZYTEZGQlJUTkNTQ3hGUVVGblFrY3NVMEZCVnl4cFFrRkJRU3hKUVUxMFFrZ3NSVUZCYVVNc1EwRlBNVU1zVVVGQlFTeEpRVXhYUVN4RlFVRm5Ra3NzVDBGQmNVSXpRaXhGUVVGTGIwSXNSMEZCWTFFc1RVRkJVVTRzUlVGQlowSkxMRmRCUVVGQkxFbEJSV2hHVEN4RlFVRm5RazhzWjBKQlEzcENOMElzUlVGQlMyOUNMRWRCUVdOVkxHVkJRV2xDVWl4RlFVRm5RazhzYjBKQlFVRkJMRWxCUlRORFVDeEZRVUZuUWxNc1dVRkJORUlzUTBGRGNrUXZRaXhGUVVGTGIwSXNSMEZCWTFrc1lVRkJaVllzUlVGQlowSlRMRmxCUld4RUxFbEJRVWxGTEVWQlFXbENXQ3hGUVVGblFsTXNXVUZCV1Vjc1VVRkJVU3gxUWtGQmQwSXNTVUZETjBWRExFVkJRVWxHTEVWQlFXVTFRaXhSUVVGUkxFdEJRek5DSzBJc1IwRkJWeXhIUVVGT1JDeEZRVUZWUml4RlFVRmxiRUlzVDBGQlR5eEZRVUZIYjBJc1IwRkJTMFlzUlVGRGFrUmtMRFpDUVVFMlFtNUNMRVZCUVUwc1VVRkJVMjlETEZOQlFVRkJMRWxCUldwRGNFTXNSVUZCUzI5Q0xFZEJRV05WTEdkQ1FVRnZRemxDTEVWQlFVdHZRaXhIUVVGalZTeHBRa0ZEYmtaWUxEWkNRVUUyUW01Q0xFVkJRVTF2UWl4RlFVRmpMREJDUVVGQkxFbEJSekZEUlN4RlFVRm5RbVVzWTBGRGVrSnlReXhGUVVGTGIwSXNSMEZCWTJ0Q0xGTkJRVmRvUWl4RlFVRm5RbVVzV1VGSldDeFRRVUV2UW1Zc1JVRkJaMEpsTEd0Q1FVRkJRU3hKUVVGcFEzSkRMRVZCUVV0dlFpeEhRVUZqV1N4bFFVTjBSV2hETEVWQlFVdHZRaXhIUVVGaldTeGhRVUZsTEc5Q1FVTnNRMklzTmtKQlFUWkNia0lzUlVGQlRTeFJRVUZUTEcxQ1FVRkJMRWxCUldwRFFTeEZRVUZMYjBJc1IwRkJZMVVzWjBKQlFXbERPVUlzUlVGQlMyOUNMRWRCUVdOVkxHbENRVU5vUmxnc05rSkJRVFpDYmtJc1JVRkJUVzlDTEVWQlFXTXNORUpCUVVFc1NVRkpOVU5GTEVWQlFXZENhVUlzVTBGQmRVSjJReXhGUVVGTGIwSXNSMEZCWTI5Q0xFdEJRVTlzUWl4RlFVRm5RbWxDTEZGQlJ6bEdMRWxCUVVzc1NVRkJTVVVzUzBGQlRXNUNMRVZCUVhGQ1FTeEZRVUZuUW05Q0xHVkJRV1ZFTEZOQlFVRkJMRWxCUVdOdVFpeEZRVUZuUW0xQ0xFdEJRWGRITEVsQlFXaEdMRTlCUVZFc1UwRkJWU3hqUVVGbExHTkJRV01zYVVKQlFXbENjRU1zVVVGQlVXOURMRXRCUXk5TWVrTXNSVUZCUzI5Q0xFZEJRV01zU1VGQlNYRkNMRWRCUVUxdVFpeEZRVUZuUW0xQ0xGTkJRVUZCTEVsQlIzQkRjRUlzUjBGQk5rSkJMRVZCUVZkUUxFOUJRVk1zU1VGRE1VUmtMRVZCUVV0dlFpeEhRVUZqZFVJc1dVRkJRVUVzU1VGQlowSXpReXhGUVVGTGIwSXNSMEZCWTNWQ0xGRkJRWGxDTTBNc1JVRkJTMjlDTEVkQlFXTjFRaXhQUVVGUE4wSXNUMEZCVXl4RlFVRkpaQ3hGUVVGTGIwSXNSMEZCWTNWQ0xFOUJRVk1zU1VGQlRYUkNMRVZCUVdGQkxFbEJTM0pMZFVJc1kwRkJaMElzVTBGQlUwTXNSMEZETTBJc1NVRkJTV3BETEVWQlFVMXBReXhGUVVGSmJrTXNUVUZCVFN4M1FrRkRjRUlzVDBGQlpTeFBRVUZTUlN4RlFVRmxRU3hGUVVGSkxFZEJRVWRyUXl4alFVRm5RbXhETEVWQlFVa3NSMEZCU3l4TlFVbHdSRzFETEhOQ1FVRjNRaXhUUVVGVFF5eEZRVUZWYUVRc1IwRkROME1zU1VGQlNWa3NTMEZGU2l4SlFVRkxMRWxCUVVsV0xFdEJRVkU0UXl4RlFVTm1MRWxCUVVzNVF5eEZRVUZMVVN4TlFVRk5MRk5CUVZkelF5eEZRVUZUVGl4bFFVRmxlRU1zUjBGQlR5eERRVU40UkN4SlFVRkpReXhGUVVGUk5rTXNSVUZCVXpsRExFZEJRM0pDTEVkQlFXOUNMR2xDUVVGVVF5eEhRVUVyUWl4UFFVRldRU3hSUVVGQlFTeEpRVUY1UWtFc1JVRkJUVGhETEZWQlFUSkNPVU1zUlVGQlRUaERMRk5CUXpsR2NrTXNSVUZCU1ZZc1IwRkJVVFpETEhOQ1FVRnpRalZETEVWQlFVOUlMRkZCUTNCRExFZEJRVmtzVVVGQlVrVXNSVUZEVkZVc1JVRkJTVllzUjBGQlVVTXNUVUZEVUN4RFFVRkJMRWRCUVc5Q0xHbENRVUZVUVN4RlFVMW9RaXhOUVVSQlRDeFJRVUZSYjBRc1RVRkJUU3gxUWtGQmQwSm9SQ3hGUVVGTlF5eEZRVUZQTmtNc1IwRkROME1zZVVKQlFUSkNPVU1zUlVGQlR5eExRVUZQUXl4RlFVb3ZRMU1zUlVGQlNWWXNSMEZCVVN4TlFWRnNRaXhSUVVGQkxFbEJRVmM0UXl4RlFVRlRSeXhsUVVFclFpeERRVU5xUkN4SlFVRkpReXhGUVVGWFNpeEZRVUZUUnl4bFFVTjRRaXhKUVVGTExFbEJRVWxGTEV0QlFWTkVMRVZCUTFwQkxFVkJRVk5XTEdWQlFXVlhMRWxCUXpGQ2RFUXNWVUZCVlVNc1JVRkJUVmtzUlVGQlMzbERMRVZCUVU5RUxFVkJRVk5ETEVsQlNUTkRMRTlCUVU5NlF5eEhRVWRNU1N4bFFVRnBRaXhUUVVGVGFFSXNSVUZCVFRKQ0xFZEJRMnhETEVsQlFVbHhRaXhGUVVGWFRTeGhRVUZoZEVRc1JVRkJUVEpDTEVkQlFVRkJMRWRCUVUwc1IwRkRlRU1zVDBGQlQyOUNMSE5DUVVGelFrTXNSVUZCVldoRUxFbEJSM0pEZFVRc1VVRkJWU3hUUVVGVGRrUXNSVUZCVFRKQ0xFZEJRek5DTEU5QlFVOHlRaXhoUVVGaGRFUXNSVUZCVFRKQ0xFZEJRVUZCTEVkQlFVMHNTVUZIT1VJeVFpeGhRVUZsTEZOQlFWTjBSQ3hGUVVGTk1rSXNSVUZCVFRaQ0xFVkJRV0ZETEVkQlJXNUVMRkZCUVVFc1NVRkJWM3BFTEVWQlFVc3lRaXhIUVVGelFpeERRVVZ3UXl4SlFVRXdRaXhIUVVGMFFrRXNSVUZCUzNSQ0xGRkJRVkVzUzBGQldTeFBRVUZQTEV0QlJYQkRMRWxCUVVsUExFVkJRVTFuUXl4alFVRmpha0lzUjBGRGVFSXNUMEZCV1N4UFFVRlNaaXhGUVVWTE1FTXNZVUZCWVhSRUxFVkJRVTFaTEVWQlFVczBReXhGUVVGaFF5eEhRVWwyUXl4TFFVZFFMRWxCUVVsRExFVkJRVk14UkN4RlFVRkxNa0lzUjBGRGJFSXNSMEZCY1VJc2FVSkJRVllyUWl4RlFVRnZRaXhMUVVGTkxEWkRRVUVyUTBFc1JVRkJVeXhSUVVGVkwwSXNSVUZGZGtjc1VVRkJRU3hKUVVGWEswSXNSVUZCVDI1RExHRkJRVFpDTEVOQlZ6ZERMRkZCUVVFc1NVRlVWMjFETEVWQlFVOXNRaXhSUVVOVkxFZEJRWFJDWWl4RlFVRkxkRUlzVVVGQlVTeExRVU5tY1VRc1JVRkJUMnhDTEV0QlFVOWlMRVZCUldRclFpeEZRVUZQYkVJc1MwRkJUMklzUlVGQlMxb3NUMEZCVDFrc1JVRkJTM1JDTEZGQlFWRXNTMEZCVHl4SlFVczVRM0ZFTEVWQlFVOXNRaXhOUVVGUllpeFJRVUZCUVN4SlFVRmxLMElzUlVGQlQzcERMRkZCUVhkQ0xFTkJReTlFTEVsQlFVa3dReXhGUVVGVlRDeGhRVUZoZEVRc1JVRkJUVEJFTEVWQlFVOXNRaXhOUVVGQlFTeEhRVVY0UTJ0Q0xFVkJSR1U1UkN4VlFVRlZLMFFzUlVGQlUwUXNSMEZGYkVNeFJDeEZRVUZMTWtJc1IwRkJVU3RDTEZsQlFVRkJMRWxCUTBkQkxFVkJRVTk2UXl4alFVRkJRU3hKUVVGcFEzbERMRVZCUVU5bUxGRkJRV2REWlN4RlFVRlBWQ3hUUVdWNFIxTXNSVUZCVDJ4RExGbEJRVUZCTEVWQlExQnJReXhGUVVGUGJrTXNZMEZCUVVFc1JVRkhWQ3hSUVVGQkxFbEJRVmR0UXl4RlFVRlBaaXhQUVVGMVFpeERRVU4yUXl4SlFVRkphVUlzUlVGQlRVWXNSVUZCVDJZc1QwRkhha0lzU1VGR1FXbENMRVZCUVUxQkxFVkJRVWxxUkN4TlFVRk5MRTFCUlZKSExFOUJRVk1zVVVGQlFTeEpRVUZaTkVNc1JVRkJUMnhETEZkQlJXeERMRTFCUkVFeFFpeFJRVUZSYjBRc1RVRkJUU3hyUTBGQmJVTjJRaXhGUVVGTmFVTXNSVUZCUzBZc1IwRkRkRVFzYlVOQlFYRkRMMElzUlVGQlR5eFRRVUZYYVVNc1QwRkJRVUVzU1VGSGNFUkdMRVZCUVU5SExHbENRVU5vUWtnc1JVRkJUMGNzZDBKQlFVRkJMRWxCUjBWSUxFVkJRVTlKTEdkQ1FVTm9Ra29zUlVGQlQwa3NkVUpCUVVGQkxFbEJSMFZLTEVWQlFVOVFMR2xDUVVOb1FrOHNSVUZCVDFBc2JVSkJSMVFzU1VGQlN5eEpRVUZKZEVNc1JVRkJTU3hGUVVGSFFTeEZRVUZKSzBNc1JVRkJTVGxETEU5QlFWRkVMRWxCUVVzc1EwRkRia01zU1VGQlNWZ3NSVUZCVHpCRUxFVkJRVWt2UXl4SFFVTm1MRWRCUVc5Q0xFbEJRV2hDV0N4RlFVRkxXU3hQUVVGVUxFTkJRMEVzU1VGQlNXbEVMRVZCUVZjM1JDeEZRVU5ZT0VRc1JVRkJWeXhMUVVWWVF5eEZRVUZWTDBRc1JVRkJTMUVzVFVGQlRTeG5RMEV3UW5wQ0xFZEJla0puUWl4UFFVRmFkVVFzU1VGRFJpOUVMRVZCUVU4clJDeEZRVUZSTEVkQlJVY3NUVUZCWkVFc1JVRkJVU3hWUVVGQkxFbEJSVU5RTEVWQlFVOTRSQ3hMUVVGelFuZEVMRVZCUVU5NFJDeFBRVU12UXpoRUxFMUJSV2RDTEV0QlFXUkRMRVZCUVZFc1MwRkZkVUpFTEVWQlFUZENPVVFzUlVGQlMxRXNUVUZCVFN4cFFrRkJhVVVzVVVGQmNFTjNSQ3hQUVVGUFJDeEZRVUZSTEVsQlFVbHVRaXhqUVVOMFJEVkRMRVZCUVV0UkxFMUJRVTBzYVVKQlF6WkNMRkZCUVhCRGQwUXNUMEZCVDBRc1JVRkJVU3hKUVVGSmJrSXNZMEZEWkcxQ0xFVkJRVkVzUzBGTFlpeFBRVUZpUkN4UlFVRkJRU3hKUVVOVFRpeEZRVUZQVUN4bFFVRmxha1FzUzBGRkwwSjNSQ3hGUVVGUFVDeGxRVUZsYWtRc1IwRkJVVGhFTEZGQlFVRkJMRWxCU1haQ1RpeEZRVUZQZUVRc1IwRkJjMElzUTBGRGRFTXNTVUZCU1dsRkxFVkJRVTFpTEdGQlFXRjBSQ3hGUVVGTk1rSXNSVUZCVHl4SlFVRk5la0lzUjBGQlFVRXNSMEZET1VJc1QwRkJVbWxGTEVsQlEwWkJMRVZCUVUxaUxHRkJRV0YwUkN4RlFVRk5SU3hIUVVGQlFTeEpRVVV6UW5kRUxFVkJRVTk0UkN4SFFVRlJhVVVzUlVGSGFrSlVMRVZCUVU5SExHVkJRV1V6UkN4SFFVRlJOa1FzUlVGRE9VSk1MRVZCUVU5VUxGVkJRVUZCTEZWQlIwWlRMRVZCUVU5bUxFOUJSMmhDTEVkQlFVbGhMRVZCUjBZc1QwRkdRVVVzUlVGQlQyeERMRmxCUVVGQkxFVkJRMDAxUWl4aFFVRmpPRVFzUjBGRmRFSXNSMEZCU1VRc1JVRkZWQ3hQUVVSQlF5eEZRVUZQYkVNc1dVRkJRVUVzUlVGRFFXdERMRVZCUlZBc1VVRkJRU3hKUVVGWFFTeEZRVUZQYkVNc1lVRkJRVUVzU1VGQk5rSnJReXhGUVVGUGJFTXNWMEZCYzBJc1MwRkJUU3dyUTBGQmFVUkhMRVZCUTI1SkxFOUJRVThyUWl4SFFVdFVWU3hyUWtGQmIwSXNVMEZCVTFnc1JVRkJWWGhFTEVkQlEzcERMRWRCUVV0M1JDeEhRVWRGTEZGQlFVRXNTVUZCVjNoRUxFVkJRVTF2UlN4VlFVVjBRaXhOUVVSQmRrVXNVVUZCVVc5RUxFMUJRVTBzZVVSQlFUQkVha1FzUjBGRGJFVXNiMFJCUVVFc1NVRktTMEVzUlVGQlRXOUZMRmxCUVRCQ2NFVXNSVUZCVFc5RkxGVkJRVmtzUjBGRE4wUndSU3hGUVVGTmIwVXNZVUZQVGtNc2EwSkJRVzlDTEZOQlFWTjBSU3hGUVVGTmVVUXNSVUZCVldNc1JVRkJiVUpETEVWQlFWZERMRVZCUVUxRExFVkJRVmxETEVWQlFXTkRMRWRCUlRkSExFbEJRVWxETEVWQlFUaENUaXhGUVVGclFrY3NSVUZCV1VNc1JVRkJZME1zUjBGRk9VVXNVVUZCUVN4SlFVRlhOVVVzUlVGQlMzZEZMRWRCUVZkV0xHTkJRV05YTEVkQlFYTkNMRU5CUXpkRUxFZEJRVWxvUWl4RlFVRlZMRXRCUVUwc1owTkJRV3REWjBJc1JVRkJUeXhQUVVGVFJDeEZRVUZaTEUxQlEzaEVMRWRCUVhSQ1F5eEZRVUZMY0VVc1VVRkJVU3hOUVVFclF5eHBRa0ZCZWtKTUxFVkJRVXQzUlN4SFFVRlhReXhUUVVGQlFTeEpRVUUwUW5wRkxFVkJRVXQzUlN4SFFVRlhReXhIUVVGTmVFUXNWMEZEZGtkcVFpeEZRVUZMZDBVc1IwRkJWMVlzWTBGQlkxY3NSMEZCVVVrc1VVRkZia01zUjBGQlNUZEZMRVZCUVV0M1JTeEhRVUZYVml4alFVRmpWeXhKUVVGVFNTeEZRVUUyUWl4TFFVRk5MRGhEUVVGblJFd3NSVUZCV1N4SlFVRk5ReXhGUVVGUExGTkJRVmQ2UlN4RlFVRkxkMFVzUjBGQlYxWXNZMEZCWTFjc1IwRkJVU3hSUVVGVlNTeEhRVWwyVGtNc0swSkJRV2xETEZOQlFWTnlRaXhGUVVGVmVrUXNSVUZCVFN0RkxFVkJRV05ETEVWQlFXVTFSQ3hGUVVGak5rUXNSVUZCVVVNc1JVRkJWVkFzUlVGQlkwTXNSVUZCYVVKUExFZEJRM2hLTEVsQlFVbFlMRVZCUTBFMVJDeEZRVU5CTmtRc1JVRkZTaXhIUVVFMlFpeExRVUY2UWxNc1JVRkJVMjVGTEU5QlFVOHNSVUZCUnl4SFFVRlhMRU5CUTJoRGFrSXNVVUZCVVhOR0xFdEJRVXNzYjBOQlFYRkRSaXhGUVVGVk9VUXNSMEZETlVRc1NVRkJTV1VzUlVGQlNTdERMRVZCUVZNM1JTeFJRVUZSTEV0QlEzcENMRWxCUVZVc1IwRkJUamhDTEVWQlEwWXNTMEZCVFN4M1FrRkJNRUlyUXl4RlFVRlhMRWxCUVUxRUxFVkJRVk1zU1VGQlRUZEVMRVZCUVdVc1NVRkJUWFZFTEVWQlFXVXNTVUZCVFVNc1JVRkxNVWNzUjBGSVFVb3NSVUZCV1ZVc1JVRkJVMjVGTEU5QlFVOHNSVUZCUjI5Q0xFVkJRVWtzUjBGRGJrTnpReXhGUVVGUFV5eEZRVUZUYmtVc1QwRkJUMjlDTEVWQlFVa3NSMEZGVml4VFFVRmljVU1zUlVGTFJpeExRVUZOTERCQ1FVRTBRa0VzUlVGQldTeFBRVUZUVlN4RlFVcDJSQ3hKUVVGSlJ5eEZRVUZMV2l4RlFVRkxjRVVzVVVGQlVTeExRVTE0UWs4c1JVRkJUU3cwUWtGTVNqUkVMRVZCUVZsRExFVkJRVXN4UkN4UFFVRlBMRVZCUVVkelJTeEpRVXRyUWl4UFFVbzNRMW9zUlVGQlQwRXNSVUZCU3pGRUxFOUJRVTl6UlN4RlFVRkxMRWxCU1d0RGJrUXNVVUZCVVN4SlFVRkpiMFFzVDBGQlR5eE5RVUZQTEV0QlFVMHNXVUZGZWtZc1IwRkJOa0lzUzBGQmVrSktMRVZCUVZOdVJTeFBRVUZQTEVWQlFVY3NSMEZETlVKcVFpeFJRVUZSYzBZc1MwRkJTeXh2UTBGQmNVTkdMRVZCUVZVNVJDeEhRVU0xUkc5RUxFVkJRVmxSTEVWQlJWcHdSU3hGUVVGTkxHOUNRVVJPTmtRc1JVRkJUMU1zUlVGQlUyNUZMRTlCUVU4c1NVRkRVMjFDTEZGQlFWRXNTVUZCU1c5RUxFOUJRVThzVFVGQlR5eExRVUZOTEZsQlF6TkVMRWRCUVRaQ0xGbEJRWHBDU2l4RlFVRlRia1VzVDBGQlR5eEZRVUZITEVkQlFXdENMRU5CUXpsRExFbEJRVWwzUlN4RlFVRkxUQ3hGUVVGVE4wVXNVVUZCVVN4SlFVRkxMRWRCUnk5Q1R5eEZRVUZOTERSQ1FVWk9ORVFzUlVGQldWVXNSVUZCVTI1RkxFOUJRVThzUlVGQlIzZEZMRVZCUVVzc1NVRkZWeXhQUVVRdlEyUXNSVUZCVDFNc1JVRkJVMjVGTEU5QlFVOTNSU3hGUVVGTExFbEJRMmREY2tRc1VVRkJVU3hKUVVGSmIwUXNUMEZCVHl4TlFVRlBMRXRCUVUwc1YwRkRNVVFzVjBGQmVrSktMRVZCUVZOdVJTeFBRVUZQTEVWQlFVY3NTVUZETlVKNVJDeEZRVUZaVVN4RlFVVmFjRVVzUlVGQlRTeHZRa0ZFVGpaRUxFVkJRVTlUTEVWQlFWTnVSU3hQUVVGUExFbEJRMU50UWl4UlFVRlJMRWxCUVVsdlJDeFBRVUZQTEUxQlFVOHNTMEZCVFN4VFFVVm9SV1FzUlVGQldYQkVMRVZCUTFweFJDeEZRVUZQVVN4RlFVRlRReXhGUVVOb1FuUkZMRVZCUVUxelJTeEZRVUZUYUVRc1VVRkJVU3hKUVVGSmIwUXNUMEZCVHl4TlFVRlBMRXRCUVUwc1VVRkhha1FzVVVGQlFTeEpRVUZYZEVZc1JVRkJTM2RGTEVkQlFUUkNMRXRCUVUwc09FSkJRV2REUVN4RlFVRlpMRWxCUlRsR0xFbEJjVUpKZGtVc1JVRnlRa0YxUml4RlFVRlZaaXhGUVVGTGNFVXNVVUZCVVN4TFFVTjJRbUVzUjBGQmRVSXNSMEZCV25ORkxFVkJRV2RDWml4RlFVRlBRU3hGUVVGTE1VUXNUMEZCVHl4RlFVRkhlVVVzUjBGRmNrUXNTVUZCSzBJc1IwRkJNMEpvUWl4RlFVRlZia1VzVVVGQlVTeExRVVZ3UWl4TlFVUkJVQ3hSUVVGUmIwUXNUVUZCVFN4eFEwRkJjME56UWl4SFFVTTVReXgzUTBGQk1FTkJMRVZCUld4RUxFbEJRVGhDTEVkQlFURkNkRVFzUlVGQlUySXNVVUZCVVN4TFFVVnVRaXhOUVVSQlVDeFJRVUZSYjBRc1RVRkJUU3gzUTBGQmVVTm9ReXhIUVVOcVJDd3lRMEZCTmtOelJDeEZRVWx5UkN4SFFVRkpaaXhGUVVsR0xGbEJRVUVzU1VGSVYzcEVMRVZCUVV0M1JTeEhRVUZYZUVNc2JVSkJRVUZCTEVsQlFYVkRhRU1zUlVGQlMzZEZMRWRCUVZkMFJDeEpRVUZ2UlN4VFFVRjJRMnhDTEVWQlFVdDNSU3hIUVVGWGRFUXNSMEZCVlZFc1dVRkRka2xrTEVkQlFVOHNjVUpCUlVaQkxFVkJTMVFzUjBGQlNUWkRMRVZCUVZVc1EwRkRXaXhSUVVGQkxFbEJRVmRyUWl4RlFVRTRRaXhMUVVGTkxEUkRRVU12UXl4SFFVRkpReXhGUVVGcFFpeExRVUZOTEcxRVFVRnhSRW9zUlVGQldTeEpRVUZOUXl4RlFVRlBMRWxCUVUxSExFVkJRV3RDTEVsQlEycEpMRkZCUVVFc1NVRkJWMDhzUlVGQk5rSXNTMEZCVFN3eVFrRkJOa0pZTEVWQlFWa3NTVUZCVFVNc1JVRkJUeXhKUVVGTlZTeEZRVUZqTEhGQ1FVTjRTR3hHTEVWQlFWRnhSQ3hoUVVGaGRFUXNSVUZCVFhkRkxFZEJRVUZCTEVkQlFWY3NVVUZCVHl4SlFVVjZRM2hGTEVWQlFVdDNSU3hIUVVGWGFFUXNXVUZCYzBJeFFpeFJRVUZSVVN4SlFVRkpMREJEUVVFeVEydEZMRVZCUVZkRExFZEJRelZIZUVVc1JVRkJVWEZFTEdGQlFXRjBSQ3hGUVVGTmQwVXNSMEZCUVVFc1NVRkJWM2hGTEVWQlFVdDNSU3hIUVVGWGFFUXNXVUZIZUVRc1IwRkJZeXhQUVVGV2RrSXNSVUZCWjBJc1MwRkJUU3g1UWtGQk1rSjFSU3hGUVVGWkxFbEJSMnBGTEZGQlFVRXNTVUZCVjNaRkxFVkJRVTFwUWl4SFFVRXdRaXhEUVVWNlF5eEhRVUZKZFVNc1JVRkJWU3hMUVVGTkxHOUNRVUZ6UW5aRExFVkJRVmNzVVVGQlZYTkVMRVZCUVZrc1NVRkRNMFZ5UkN3MlFrRkJOa0p1UWl4RlFVRk5kMFVzUlVGQlYzUkVMRWRCUXpsRGFrSXNSVUZCVVhGRUxHRkJRV0YwUkN4RlFVRk5kMFVzUjBGQlFVRXNVVUZCVnl4SlFVazNRbmhGTEVWQlFVdDNSU3hIUVVGWGVFTXNiVUpCUVVGQkxFbEJRWFZEYUVNc1JVRkJTM2RGTEVkQlFWZDBSQ3hKUVVFeVJDeFBRVUU1UW14Q0xFVkJRVXQzUlN4SFFVRlhkRVFzU1VGQk5rUXNVMEZCZGtOc1FpeEZRVUZMZDBVc1IwRkJWM1JFTEVkQlFWVlJMRmxCUXpkTFpDeEhRVUZQTEhGQ1FVZFVMRWxCUVVrMlJTeEZRVUZoZUVZc1JVRkRha0lzU1VGRlJTeEhRVVJCYlVVc2EwSkJRV3RDV0N4RlFVRlZaME1zU1VGRFdpeEhRVUZhUkN4RlFVRmxMRU5CUTJwQ0xFbEJRVWxGTEVWQlFWTnFRaXhGUVVOaUxFVkJRVWNzUTBGRFJDeEpRVUZKZGtVc1JVRkJUM2RHTEVWQlFVOHpSU3hQUVVGUExFVkJRVWQ1UlN4SFFVTTFRaXhSUVVGQkxFbEJRVmRETEVWQlFWZDJSaXhIUVVOd1FpeExRVUZOTERSQ1FVRTRRa0VzUlVGQlR5eGpRVUZuUW5ORkxFVkJRVmtzVVVGQlZVTXNSVUZIYmtablFpeEZRVUZoUVN4RlFVRlhka1lzUjBGRGVFSnJSU3hyUWtGQmEwSllMRVZCUVZWblF5eEhRVVUxUWtRc1IwRkVRVVVzUlVGQlUwRXNSVUZCVHpORkxFOUJRVTk1UlN4RlFVRlZMRWxCUTJoQ2JrWXNVVUZCVVN4WlFVTk9MRWRCUVZwdFJpeEhRVVZVTEZGQlFVRXNTVUZCVjBNc1JVRkJWME1zU1VGQmFVUXNUMEZCZGtKRUxFVkJRVmRETEVkQlEzcEVMRXRCUVUwc2QwTkJRVEJEUVN4RlFVRlRMR05CUVdkQ2JFSXNSVUZCV1N4UlFVRlZReXhGUVVWcVIyZENMRVZCUVdGQkxFVkJRVmRETEZGQlJYaENSQ3hGUVVGaFFTeEZRVUZYYUVJc1IwRkhNVUlzVVVGQlFTeEpRVUZYWjBJc1IwRkJOa01zVDBGQlprRXNSVUZCY1VJc1MwRkJUU3cyUWtGQkswSnFRaXhGUVVGWkxFbEJRVTFUTEVWQlFWTXNTVUZCVFVNc1QwRkJRVUVzU1VGRmVraERMRWxCUTFSTkxFVkJRVmN2UkN4VlFVRlplVVFzUjBGSGVrSm1MR3RDUVVGclFsZ3NSVUZCVldkRExFZEJRelZDTEUxQlFVOUZMRWRCUlZBc1RVRkVRVGRHTEZGQlFWRnZSQ3hOUVVGTkxIVkRRVUYzUTNsRExFVkJRVWR1UWl4RlFVRlhReXhGUVVGTmNrUXNSVUZCWXpoRUxFVkJRVlZzUml4SFFVTTFSakpHTEVWQlIxSXNVVUZCUVN4SlFVRlhNMFlzUlVGQlMzZEZMRWRCUVZkNFF5eGpRVUZ2UlN4cFFrRkJOMEpvUXl4RlFVRkxkMFVzUjBGQlYzUkVMRWxCUVhWRUxFOUJRVGxDYkVJc1JVRkJTM2RGTEVkQlFWZDBSQ3hUUVVGQlFTeEpRVUUyUW14Q0xFVkJRVXQzUlN4SFFVRlhkRVFzUjBGQlZWRXNWMEZCYlVVc1UwRkJka014UWl4RlFVRkxkMFVzUjBGQlYzUkVMRWRCUVZWUkxGVkJRWE5DTEVOQlJUVlFMRWxCUVVrMlF5eEZRVUZ2UWs4c0swSkJRU3RDWXl4VlFVRkJRU3hGUVVGblFtNURMRVZCUVZWNlJDeEZRVUZOSzBVc1JVRkJZME1zUlVGQlpUVkVMRVZCUVdNc1NVRkZPVWg1UlN4SFFVRm5ReXhIUVVGMFFuQkNMRVZCUVV0d1JTeFJRVUZSTEV0QlFXRnZSU3hGUVVGTE1VUXNUMEZCVHpCRUxFVkJRVXR3UlN4UlFVRlJMRTFCUVZFc1IwRkhla1VzU1VGQlowTXNSMEZCTlVKM1JpeEZRVUZSZUVZc1VVRkJVU3hKUVVGTExFZEJRVlVzUzBGQlRTeHZRMEZCYzBOdlJTeEZRVVV2UlN4SlFVRkpjVUlzUlVGQlV6bEdMRVZCUVV0M1JTeEhRVUZYZUVNc1lVRkJaU3hKUVVGTlpDeEZRVU5XTEdsQ1FVRTNRbXhDTEVWQlFVdDNSU3hIUVVGWGRFUXNTVUZCZFVRc1QwRkJPVUpzUWl4RlFVRkxkMFVzUjBGQlYzUkVMRk5CUVVGQkxFbEJRVFpDYkVJc1JVRkJTM2RGTEVkQlFWZDBSQ3hIUVVGVll5eGxRVU42U0RoRUxFVkJRVk01Uml4RlFVRkxkMFVzUjBGQlYzUkVMRWRCUVZWakxHTkJSM0pEYzBNc2EwSkJRV3RDZEVVc1JVRkJUWGxFTEVWQlFWVmpMRVZCUVcxQ1F5eEZRVUZYZEVRc1JVRkJWVFJGTEU5QlFVRkJMRWRCUVZGRExFZEJSV3hHTEVsQlFVbHlRaXhGUVVGaGIwSXNSVUZCVTBRc1JVRk5NVUlzVVVGQlFTeEpRVXBYYkVJc1IwRkJkMFVzVDBGQmVrTXpSU3hGUVVGTGQwVXNSMEZCVjNKQ0xHVkJRV1Z6UWl4TFFVRm5Ra1VzUlVGQlpUTkZMRVZCUVV0M1JTeEhRVUZYY2tJc1pVRkJaWE5DTEVsQlJYWkpTQ3hyUWtGQmEwSjBSU3hGUVVGTmVVUXNSVUZCVldNc1JVRkJiVUpETEVWQlFWZERMRVZCUVUxRExFVkJRVmxETEVWQlFXTkRMRkZCUVVGQkxFbEJSWEpHUkN4RlFVRTRRaXhEUVVOMlF5eEhRVUZKYkVJc1JVRkZSaXhOUVVSQk0wUXNVVUZCVVc5RUxFMUJRVTBzZFVOQlFYZERkMElzUlVGQlZ6TkVMRTlCUVU4c1IwRkJTVFJFTEVWQlFXTXNNRUpCUTNCR0xIbERRVUV5UTBFc1JVRkJaU3hUUVVGWFJDeEZRVUZYTTBRc1QwRkJUeXhIUVVGTExESkNRVVZ3UjJkRkxFVkJRV0VzVlVGQlYwd3NSVUZCVnpORUxFOUJRVThzUjBGQlNUUkVMRWRCU1doRVFTeEZRVUZsTEV0QlNXcENMRkZCUVVFc1NVRkJWMEVzUlVGRFZDeFJRVUZCTEVsQlFWY3pSU3hGUVVGTGQwVXNSMEZCVjNKQ0xHVkJRV1Z6UWl4VFFVRkJRU3hKUVVGblEwY3NSMEZCYTBOQkxFVkJRV3RDTEVOQlF6VklMRWRCUVVsdVFpeEZRVUZWTEV0QlFVMHNlVU5CUVRKRFowSXNSVUZCVHl4UFFVRlRSQ3hGUVVGWkxFbEJRek5HZUVVc1JVRkJTM2RGTEVkQlFWZHlRaXhsUVVGbGMwSXNSMEZCVVVVc1QwRkZka01zUjBGQmNVSXNUMEZCYWtKQkxFVkJRWFZDTEVOQlEzcENMRWRCUVVsc1FpeEhRVUZ4UkN4UFFVRjZRM3BFTEVWQlFVdDNSU3hIUVVGWGNrSXNaVUZCWlhOQ0xFZEJRemRETEV0QlFVMHNlVU5CUVRKRFFTeEZRVUZQTEU5QlFWTkVMRVZCUVZrc1NVRkhMMFY0UlN4RlFVRkxkMFVzUjBGQlYzSkNMR1ZCUVdWelFpeEhRVUZSTEZWQlEyeERMRWRCUVVsNlJTeEZRVUZMZDBVc1IwRkJWM0pDTEdWQlFXVnpRaXhKUVVGVFJTeEZRVVZxUkN4TlFVUkJOMFVzVVVGQlVXOUVMRTFCUVUwc2RVUkJRWGxFYzBJc1JVRkJXU3hKUVVGTlF5eEZRVUZQTEhORFFVRjNRM3BGTEVWQlFVdDNSU3hIUVVGWGNrSXNaVUZCWlhOQ0xFZEJRVkVzVlVGQldVVXNSVUZCWlN4TFFVTndUU3g1UTBGQk1rTklMRVZCUVZrc1NVRkJUVU1zUlVGQlR5eHpRMEZCZDBONlJTeEZRVUZMZDBVc1IwRkJWM2RDTEdOQlFXTjJRaXhIUVVGUkxGVkJRVmxGTEVWQlFXVXNTVUZMZWt3c1QwRkJUeTlFTEVkQlIweHhSaXh2UWtGQmMwSXNVMEZCVTBNc1IwRkRha01zU1VGQlNXeEhMRVZCUVU5clJ5eEZRVUZaUXl4TlFVTnVRaTlGTEVWQlFXVTRSU3hGUVVGWk9VVXNZVUZGTTBKblJpeEZRVUZ2UW5CR0xHVkJRV1ZvUWl4RlFVRk5iMElzUjBGUE4wTXNXVUZCUVN4SlFVcFhjRUlzUlVGQldYRkhMRkZCUTNKQ1JDeEZRVUZyUWtNc1RVRkJVWEpHTEdWQlFXVm9RaXhGUVVGTkxGVkJSekZEYjBjc1IwRkhWRVVzVDBGQlQwTXNVMEZGVEVNc01FSkJRVEpDTVVJc0swSkJRU3RDWXl4VlFVRkJRU3hIUVVGTFJ5eEhRVVV2UkZVc1lVRkJZek5DTEN0Q1FVRXJRbU1zVlVGQlFVRXNSMEZCUzBjc1IwRkRiRVJYTEdOQlFXVXhSaXhsUVVObWFVWXNiMEpCUVhGQ1FTeHZRa0ZEY2tKVkxFOUJRVkZ3UkN4UlFVTlNjVVFzZFVKQlFYZENla1lpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwyTnZiblpsY25SbGNpOXRiMlJsYkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGNvbnZlcnRlclV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpLGVsYWJvcmF0ZURlY2xhcmF0aW9ucz1yZXF1aXJlKFwiLi9kZWNsYXJhdGlvbnMuanNcIikscHJvY2Vzc1N0eWxlc2hlZXRSdWxlcz1yZXF1aXJlKFwiLi9zdHlsZXNoZWV0LmpzXCIpLG1vZGVsRGVmPXJlcXVpcmUoXCIuL21vZGVsLmpzXCIpLGRvbXV0aWxzPXJlcXVpcmUoXCIuL2RvbXV0aWxzLmpzXCIpLHdyYXBFbGVtZW50V2l0aENvbmRpdGlvbj1mdW5jdGlvbihlLHQsbyl7dmFyIGE9ZG9tdXRpbHMuZ2V0QXR0cmlidXRlKHQsZSk7dHJ5e3ZhciBpPWNvbnZlcnRlclV0aWxzLmNvbmRpdGlvbkJpbmRpbmcoYSxvKTskKHQpLmJlZm9yZShcIlxceDNjIS0tIGtvIGlmOiBcIitpK1wiIC0tXFx4M2VcIiksJCh0KS5hZnRlcihcIlxceDNjIS0tIC9rbyAtLVxceDNlXCIpLGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZSh0LGUpfWNhdGNoKG8pe3Rocm93IGNvbnNvbGUud2FybihcIk1vZGVsIGVuc3VyZSBwYXRoIGZhaWxlZCBpbiBpZi92YXJpYW50XCIsdCxhLGUpLG99fSxyZXBsYWNlZEF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSx0KXtkb211dGlscy5zZXRBdHRyaWJ1dGUoZSx0LGRvbXV0aWxzLmdldEF0dHJpYnV0ZShlLFwicmVwbGFjZWRcIit0KSl9LHByb2Nlc3NTdHlsZT1mdW5jdGlvbihlLHQsbyxhKXt2YXIgaSxyPWRvbXV0aWxzLmdldEF0dHJpYnV0ZShlLFwicmVwbGFjZWRzdHlsZVwiKSxsPW51bGw7YSYmKGk9e3VuaXF1ZUlkOlwiJGRhdGFcIixhdHRyOntpZDpcImlkXCJ9fSk7dmFyIGQ9bnVsbCE9PWRvbXV0aWxzLmdldEF0dHJpYnV0ZShlLFwiZGF0YS1rby1kaXNwbGF5XCIpO251bGw9PT0obD1lbGFib3JhdGVEZWNsYXJhdGlvbnMocix2b2lkIDAsdCxvLGUsaSxkKSk/bD1yOmRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZShlLFwicmVwbGFjZWRzdHlsZVwiKSxudWxsIT09bCYmKGwudHJpbSgpLmxlbmd0aD4wP2RvbXV0aWxzLnNldEF0dHJpYnV0ZShlLFwic3R5bGVcIixsKTpkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUoZSxcInN0eWxlXCIpKX0sX2ZpeFJlbGF0aXZlUGF0aD1mdW5jdGlvbihlLHQsbyxhKXt2YXIgaT10KGRvbXV0aWxzLmdldEF0dHJpYnV0ZShhLGUpKTtudWxsIT09aSYmZG9tdXRpbHMuc2V0QXR0cmlidXRlKGEsZSxpKX0scHJvY2Vzc0Jsb2NrPWZ1bmN0aW9uKGUsdCxvLGEsaSxyLGwsZCxzLGMpe3RyeXt2YXIgbjtpZihcImJsb2NrXCI9PXIpbj1kb211dGlscy5nZXRBdHRyaWJ1dGUoZSxcImRhdGEta28tYmxvY2tcIiksZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKGUsXCJkYXRhLWtvLWJsb2NrXCIpO2Vsc2V7aWYoXCJ0ZW1wbGF0ZVwiIT1yKXRocm93XCJVbmV4cGVjdGVkIGNvbnRleHQgbmFtZSB3aGlsZSBwcm9jZXNzaW5nIGJsb2NrOiBcIityO249bH0kKFwiW2RhdGEta28tcmVtb3ZlXVwiLGUpLnJlbW92ZSgpO2Zvcih2YXIgdT0kKFwiW2RhdGEta28tYmxvY2tdXCIsZSkucmVwbGFjZVdpdGgoXCI8cmVwbGFjZWRibG9jaz5cIiksbT1bXCJocmVmXCIsXCJzcmNcIixcImRhdGEta28tcGxhY2Vob2xkZXItc3JjXCIsXCJiYWNrZ3JvdW5kXCJdLGg9MDtoPG0ubGVuZ3RoO2grKyl7dmFyIHA9X2ZpeFJlbGF0aXZlUGF0aC5iaW5kKHZvaWQgMCxtW2hdLGkpOyQoXCJbXCIrbVtoXStcIl1cIixlKS5lYWNoKHApfXZhciBiPWRvbXV0aWxzLmdldEF0dHJpYnV0ZShlLFwiZGF0YS1rby1wcm9wZXJ0aWVzXCIpO251bGw9PT1iJiYoYj1cIlwiKSwkKFwiW2RhdGEta28tcHJvcGVydGllc11cIixlKS5lYWNoKGZ1bmN0aW9uKGUsdCl7Yi5sZW5ndGg+MCYmKGIrPVwiIFwiKSxiKz1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImRhdGEta28tcHJvcGVydGllc1wiKSxkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcImRhdGEta28tcHJvcGVydGllc1wiKX0pLG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYodCxuLGIse2NvbnRleHROYW1lOnJ9KTt2YXIgdj1tb2RlbERlZi5lbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlLmJpbmQodm9pZCAwLHQsbyxsLG4sXCJcIik7XCJibG9ja1wiPT1yJiZ2KFwiaWRcIixcIlwiKSwkKFwic3R5bGVcIixlKS5lYWNoKGZ1bmN0aW9uKGUsYSl7dmFyIHI9ZG9tdXRpbHMuZ2V0SW5uZXJIdG1sKGEpLGQ9bW9kZWxEZWYuY3JlYXRlT3JVcGRhdGVCbG9ja0RlZi5iaW5kKHZvaWQgMCx0KSxzPW1vZGVsRGVmLmVuc3VyZVBhdGhBbmRHZXRCaW5kVmFsdWUuYmluZCh2b2lkIDAsdCxvLGwpLHU9cHJvY2Vzc1N0eWxlc2hlZXRSdWxlcyhyLHZvaWQgMCxzLGQsbyxpLGwsbik7aWYodSE9cilpZihcIlwiIT09dS50cmltKCkpe3ZhciBtPWModSk7ZG9tdXRpbHMuc2V0QXR0cmlidXRlKGEsXCJkYXRhLWJpbmRcIixcInRlbXBsYXRlOiB7IG5hbWU6ICdcIittK1wiJyB9XCIpLGRvbXV0aWxzLnNldENvbnRlbnQoYSxcIlwiKX1lbHNlIGRvbXV0aWxzLnJlbW92ZUVsZW1lbnRzKCQoYSkpfSkscHJvY2Vzc1N0eWxlKGUsaSx2LHMpO2Zvcih2YXIgZj1bXCJkYXRhLWtvLWRpc3BsYXlcIixcImRhdGEta28tZWRpdGFibGVcIixcImRhdGEta28td3JhcFwiLFwiaHJlZlwiXSxrPTA7azxmLmxlbmd0aDtrKyspaWYoZG9tdXRpbHMuZ2V0QXR0cmlidXRlKGUsZltrXSkpdGhyb3cgY29uc29sZS53YXJuKFwiRVJST1I6IFVuc3VwcG9ydGVkIFwiK2Zba10rXCIgdXNlZCB0b2dldGhlciB3aXRoIGRhdGEta28tYmxvY2tcIixlKSxcIkVSUk9SOiBVbnN1cHBvcnRlZCBcIitmW2tdK1wiIHVzZWQgdG9nZXRoZXIgd2l0aCBkYXRhLWtvLWJsb2NrXCI7cmV0dXJuICQoXCJbZGF0YS1rby1saW5rXVwiLGUpLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbz1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImRhdGEta28tbGlua1wiKSxhPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwicmVwbGFjZWRzdHlsZVwiKTt2b2lkIDAhPT1hJiZudWxsIT09YXx8KGE9XCJcIiksYT1cIlwiIT09YT9cIi1rby1hdHRyLWhyZWY6IEBcIitvK1wiOyBcIithOlwiLWtvLWF0dHItaHJlZjogQFwiK28sZG9tdXRpbHMuc2V0QXR0cmlidXRlKHQsXCJyZXBsYWNlZHN0eWxlXCIsYSksZG9tdXRpbHMuc2V0QXR0cmlidXRlKHQsXCJkYXRhLWtvLXdyYXBcIixvKSxkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcImRhdGEta28tbGlua1wiKX0pLCQoXCJbcmVwbGFjZWRzdHlsZV1cIixlKS5lYWNoKGZ1bmN0aW9uKGUsdCl7cHJvY2Vzc1N0eWxlKHQsaSx2LCExKX0pLCQoXCJbcmVwbGFjZWRodHRwLWVxdWl2XVwiLGUpLmVhY2goZnVuY3Rpb24oZSx0KXtyZXBsYWNlZEF0dHJpYnV0ZXModCxcImh0dHAtZXF1aXZcIil9KSwkKFwiW2RhdGEta28tZGlzcGxheV1cIixlKS5lYWNoKGZ1bmN0aW9uKGUsdCl7d3JhcEVsZW1lbnRXaXRoQ29uZGl0aW9uKFwiZGF0YS1rby1kaXNwbGF5XCIsdCx2KX0pLCQoXCJbZGF0YS1rby1lZGl0YWJsZV1cIixlKS5lYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIG8sYSxpLHIsbCxkLHM9ZG9tdXRpbHMuZ2V0QXR0cmlidXRlKHQsXCJkYXRhLWtvLWVkaXRhYmxlXCIpO2lmKHMubGFzdEluZGV4T2YoXCIuXCIpPjApe3ZhciBuPXMuc3Vic3RyKDAscy5sYXN0SW5kZXhPZihcIi5cIikpO2w9dihuKX1lbHNlIGw9dihzKTtpZihkPVwid3lzaXd5Z0NsaWNrOiBmdW5jdGlvbihvYmosIGV2dCkgeyAkcm9vdC5zZWxlY3RJdGVtKFwiK2wrXCIsICRkYXRhKTsgcmV0dXJuIGZhbHNlIH0sIGNsaWNrQnViYmxlOiBmYWxzZSwgd3lzaXd5Z0NzczogeyBzZWxlY3RlZGl0ZW06ICRyb290LmlzU2VsZWN0ZWRJdGVtKFwiK2wrXCIpIH0sIHNjcm9sbEludG9WaWV3OiAkcm9vdC5pc1NlbGVjdGVkSXRlbShcIitsK1wiKVwiLFwiaW1nXCIhPWRvbXV0aWxzLmdldExvd2VyVGFnTmFtZSh0KSl7YT1kb211dGlscy5nZXRJbm5lckh0bWwodCk7dmFyIHU9dihzLGEsITAsXCJ3eXNpd3lnXCIpO2lmKG89XCJcIixkb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImlkXCIpfHwobys9XCJ3eXNpd3lnSWQ6IGlkKCkrJ19cIitzLnJlcGxhY2UoXCIuXCIsXCJfXCIpK1wiJywgXCIpLHZvaWQgMCE9PWQmJihvKz1kK1wiLCBcIiksbys9XCJ3eXNpd3lnT3JIdG1sOiBcIit1LFwidGRcIj09ZG9tdXRpbHMuZ2V0TG93ZXJUYWdOYW1lKHQpKXt2YXIgbT0kKCc8ZGl2IGRhdGEta28td3JhcD1cImZhbHNlXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlXCI+PC9kaXY+JylbMF07ZG9tdXRpbHMuc2V0QXR0cmlidXRlKG0sXCJkYXRhLWJpbmRcIixvKTt2YXIgaD1kb211dGlscy5nZXRJbm5lckh0bWwoJChcIjxkaXY+PC9kaXY+XCIpLmFwcGVuZChtKSk7ZG9tdXRpbHMuc2V0Q29udGVudCh0LGgpfWVsc2Ugcj0obnVsbCE9PShpPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1iaW5kXCIpKT9pK1wiLCBcIjpcIlwiKStvLGRvbXV0aWxzLnNldEF0dHJpYnV0ZSh0LFwiZGF0YS1iaW5kXCIsciksZG9tdXRpbHMuc2V0Q29udGVudCh0LFwiXCIpO2RvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZSh0LFwiZGF0YS1rby1lZGl0YWJsZVwiKX1lbHNle3ZhciBwPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwid2lkdGhcIik7aWYoXCJcIj09PXAmJihwPW51bGwpLG51bGw9PT1wKXRocm93IGNvbnNvbGUuZXJyb3IoXCJFUlJPUjogZGF0YS1rby1lZGl0YWJsZSBpbWFnZXMgbXVzdCBkZWNsYXJlIGEgV0lEVEggYXR0cmlidXRlIVwiLHQpLFwiRVJST1I6IGRhdGEta28tZWRpdGFibGUgaW1hZ2VzIG11c3QgZGVjbGFyZSBhIFdJRFRIIGF0dHJpYnV0ZSFcIjt2YXIgYj1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImhlaWdodFwiKTtcIlwiPT09YiYmKGI9bnVsbCk7dmFyIGY9ZG9tdXRpbHMuZ2V0QXR0cmlidXRlKHQsXCJhbGlnblwiKSxrPShpPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1iaW5kXCIpKSYmaS5tYXRjaCgvdmlydHVhbEF0dHI6IHtbXn1dKiBoZWlnaHQ6IChbXix9XSopWyx9XS8pO2smJihiPWtbMV0pO3ZhciBnPWkmJmkubWF0Y2goL3ZpcnR1YWxBdHRyOiB7W159XSogd2lkdGg6IChbXix9XSopWyx9XS8pO2cmJihwPWdbMV0pO3ZhciB3LEEseT1cIlwiOyhhPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1rby1wbGFjZWhvbGRlci1zcmNcIikpP3k9ZG9tdXRpbHMuZ2V0QXR0cmlidXRlKHQsXCJzcmNcIik6YT1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcInNyY1wiKSxwJiZiP3c9cCtcIisneCcrXCIrYjpiP3B8fCh3PVwiJ2gnK1wiK2IrXCIrJydcIik6dz1cIid3JytcIitwK1wiKycnXCI7dmFyIHg9Ynx8ZG9tdXRpbHMuZ2V0QXR0cmlidXRlKHQsXCJkYXRhLWtvLXBsYWNlaG9sZGVyLWhlaWdodFwiKSxfPXB8fGRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1rby1wbGFjZWhvbGRlci13aWR0aFwiKTtpZihkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcInNyY1wiKSxkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcImRhdGEta28tZWRpdGFibGVcIiksZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKHQsXCJkYXRhLWtvLXBsYWNlaG9sZGVyLWhlaWdodFwiKSxkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcImRhdGEta28tcGxhY2Vob2xkZXItd2lkdGhcIiksZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKHQsXCJkYXRhLWtvLXBsYWNlaG9sZGVyLXNyY1wiKSxhJiYoQT1cInsgd2lkdGg6IFwiK18rXCIsIGhlaWdodDogXCIreCtcIiwgdGV4dDogXCIrdytcIn1cIiksIV98fCF4KXRocm93IGNvbnNvbGUuZXJyb3IoXCJJTUcgZGF0YS1rby1lZGl0YWJsZSBtdXN0IGRlY2xhcmUgd2lkdGggYW5kIGhlaWdodCBhdHRyaWJ1dGVzLCBvciB0aGVpciBwbGFjZWhvbGRlciBjb3VudGVycGFydHMgZGF0YS1rby1wbGFjZWhvbGRlci13aWR0aC9kYXRhLWtvLXBsYWNlaG9sZGVyLWhlaWdodFwiLHQpLFwiRVJST1I6IElNRyBkYXRhLWtvLWVkaXRhYmxlIE1VU1QgZGVjbGFyZSB3aWR0aCBhbmQgaGVpZ2h0IGF0dHJpYnV0ZXMsIG9yIHRoZWlyIHBsYWNlaG9sZGVyIGNvdW50ZXJwYXJ0cyBkYXRhLWtvLXBsYWNlaG9sZGVyLXdpZHRoL2RhdGEta28tcGxhY2Vob2xkZXItaGVpZ2h0XCI7dmFyIEQ9dihzLHksITEsXCJ3eXNpd3lnXCIpO289XCJ3eXNpd3lnU3JjOiB7IHdpZHRoOiBcIitwK1wiLCBoZWlnaHQ6IFwiK2IrXCIsIHNyYzogXCIrRCtcIiwgcGxhY2Vob2xkZXI6IFwiK0ErXCIgfVwiLHI9KG51bGwhPT1pP2krXCIsIFwiOlwiXCIpK28sZG9tdXRpbHMuc2V0QXR0cmlidXRlKHQsXCJkYXRhLWJpbmRcIixyKTt2YXIgST1jKHQpLFI9XCJ7IHdpZHRoOiBcIitwO1wibGVmdFwiPT1mP1IrPVwiLCBmbG9hdDogJ2xlZnQnXCI6XCJyaWdodFwiPT1mP1IrPVwiLCBmbG9hdDogJ3JpZ2h0J1wiOlwiY2VudGVyXCI9PWYmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmRlYnVnP2NvbnNvbGUuZGVidWcoXCJJZ25vcmluZyBhbGlnbj1jZW50ZXIgb24gYW4gaW1nIHRhZzogd2UgZG9uJ3Qga25vdyBob3cgdG8gZW11bGF0ZSB0aGlzIGFsaWdubWVudCBpbiB0aGUgZWRpdG9yIVwiKTpcInRvcFwiPT1mP1IrPVwiLCB2ZXJ0aWNhbEFsaWduOiAndG9wJ1wiOlwibWlkZGxlXCI9PWY/Uis9XCIsIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXCI6XCJib3R0b21cIj09ZiYmKFIrPVwiLCB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJ1wiKSksUis9XCJ9XCIsJCh0KS5iZWZvcmUoXCJcXHgzYyEtLSBrbyB3eXNpd3lnSW1nOiB7IF9kYXRhOiAkZGF0YSwgX2l0ZW06IFwiK2wrXCIsIF90ZW1wbGF0ZTogJ1wiK0krXCInLCBfZWRpdFRlbXBsYXRlOiAnaW1nLXd5c2l3eWcnLCBfc3JjOiBcIitEK1wiLCBfd2lkdGg6IFwiK3ArXCIsIF9oZWlnaHQ6IFwiK2IrXCIsIF9hbGlnbjogXCIrKG51bGw9PT1mP3ZvaWQgMDpcIidcIitmK1wiJ1wiKStcIiwgX3NpemU6IFwiK3crXCIsIF9tZXRob2Q6IFwiK3ZvaWQgMCtcIiwgX3BsYWNlaG9sZGVyc3JjOiBcIitBK1wiLCBfc3R5bGViaW5kOiBcIitSK1wiIH0gLS1cXHgzZVwiKSwkKHQpLmFmdGVyKFwiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIil9fSksJChcIltocmVmXVwiLGUpLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbz1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImhyZWZcIiksYT1cInd5c2l3eWdIcmVmOiAnXCIrY29udmVydGVyVXRpbHMuYWRkU2xhc2hlcyhvKStcIidcIixpPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1iaW5kXCIpLHI9KG51bGwhPT1pP2krXCIsIFwiOlwiXCIpK2E7ZG9tdXRpbHMuc2V0QXR0cmlidXRlKHQsXCJkYXRhLWJpbmRcIixyKX0pLCQoXCJyZXBsYWNlZGJsb2NrXCIsZSkuZWFjaChmdW5jdGlvbihlLHIpe3ZhciBzPXVbZV0sbT1wcm9jZXNzQmxvY2socyx0LG8sYSxpLFwiYmxvY2tcIixuLGQsITAsYyksaD1tb2RlbERlZi5lbnN1cmVQYXRoQW5kR2V0QmluZFZhbHVlKHQsbyxsLG4sXCJcIixtKTskKHIpLmJlZm9yZShcIlxceDNjIS0tIGtvIGJsb2NrOiB7IGRhdGE6IFwiK2NvbnZlcnRlclV0aWxzLmFkZFNsYXNoZXMoaCkrXCIsIHRlbXBsYXRlOiAnYmxvY2snIH0gLS1cXHgzZVwiKSwkKHIpLmFmdGVyKFwiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIiksJChyKS5yZW1vdmUoKX0pLCQoJChcIltkYXRhLWtvLXdyYXBdXCIsZSkuZ2V0KCkucmV2ZXJzZSgpLGUpLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbz1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImRhdGEta28td3JhcFwiKTtpZih2b2lkIDA9PT1vfHxcIlwiPT09b3x8XCJ0cnVlXCI9PT1vKXRocm93XCJVbnN1cHBvcnRlZCBlbXB0eSB2YWx1ZSBmb3IgZGF0YS1rby13cmFwOiB1c2UgZmFsc2UgdmFsdWUgaWYgeW91IHdhbnQgdG8gYWx3YXlzIHJlbW92ZSB0aGUgdGFnXCI7dmFyIGEsaSxyPWNvbnZlcnRlclV0aWxzLmNvbmRpdGlvbkJpbmRpbmcobyx2KSxsPWRvbXV0aWxzLmdldEF0dHJpYnV0ZSh0LFwiZGF0YS1iaW5kXCIpO2lmKFwiXCIhPT1sJiZudWxsIT09bCYmbC5tYXRjaCgvKGJsb2NrfHd5c2l3eWdPckh0bWwpOi8pKXt2YXIgZD1cIlxceDNjIS0tIGtvIFwiK2wrXCIgLS1cXHgzZVwiK2RvbXV0aWxzLmdldElubmVySHRtbCh0KStcIlxceDNjIS0tIC9rbyAtLVxceDNlXCI7YT1jKGQpLGRvbXV0aWxzLnJlbW92ZUF0dHJpYnV0ZSh0LFwiZGF0YS1rby13cmFwXCIpLGk9Yyh0KSxkb211dGlscy5yZXBsYWNlSHRtbCh0LFwiXFx4M2MhLS0ga28gdGVtcGxhdGU6IC8qIHNwZWNpYWwgKi8gKHR5cGVvZiB0ZW1wbGF0ZU1vZGUgIT0gJ3VuZGVmaW5lZCcgJiYgdGVtcGxhdGVNb2RlID09ICd3eXNpd3lnJykgfHwgXCIrcitcIiA/ICdcIitpK1wiJyA6ICdcIithK1wiJyAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2VcIil9ZWxzZSBhPWMoZG9tdXRpbHMuZ2V0SW5uZXJIdG1sKHQpKSxkb211dGlscy5yZW1vdmVBdHRyaWJ1dGUodCxcImRhdGEta28td3JhcFwiKSxkb211dGlscy5zZXRDb250ZW50KHQsXCJcXHgzYyEtLSBrbyB0ZW1wbGF0ZTogJ1wiK2ErXCInIC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKSxpPWModCksZG9tdXRpbHMucmVwbGFjZUh0bWwodCxcIlxceDNjIS0tIGtvIHRlbXBsYXRlOiAodHlwZW9mIHRlbXBsYXRlTW9kZSAhPSAndW5kZWZpbmVkJyAmJiB0ZW1wbGF0ZU1vZGUgPT0gJ3d5c2l3eWcnKSB8fCBcIityK1wiID8gJ1wiK2krXCInIDogJ1wiK2ErXCInIC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKX0pLGMoZSxuLFwic2hvd1wiKSxhKGwsbixyLGQpLG59Y2F0Y2godCl7dGhyb3cgY29uc29sZS5lcnJvcihcIkV4Y2VwdGlvbiB3aGlsZSBwYXJzaW5nIHRoZSB0ZW1wbGF0ZVwiLHQsZSksdH19O2Z1bmN0aW9uIGNvbmRpdGlvbmFsX3JlcGxhY2UoZSl7cmV0dXJuIGUucmVwbGFjZSgvPCEtLVxcW2lmIChbXlxcXV0qKVxcXT4oKD86KD8hLS0pW1xcc1xcU10pKj8pPCFcXFtlbmRpZlxcXS0tPi9nLGZ1bmN0aW9uKGUsdCxvKXt2YXIgYT1cIlxceDNjIS0tIGNjOnN0YXJ0IC0tXFx4M2VcIjthKz1vLnJlcGxhY2UoLzwoW0EtWmEtejpdKykvZyxcIlxceDNjIS0tIGNjOmJvOiQxIC0tXFx4M2U8Y2NcIikucmVwbGFjZSgvPFxcLyhbQS1aYS16Ol0rKT4vZyxcIlxceDNjIS0tIGNjOmJjOiQxIC0tXFx4M2U8L2NjPlxceDNjIS0tIGNjOmFjOiQxIC0tXFx4M2VcIikucmVwbGFjZSgvXFwvPi9nLFwiLz5cXHgzYyEtLSBjYzpzYyAtLVxceDNlXCIpLGErPVwiXFx4M2MhLS0gY2M6ZW5kIC0tXFx4M2VcIjt2YXIgaT0nPHJlcGxhY2VkY2MgY29uZGl0aW9uPVwiJyt0KydcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj4nO3JldHVybihpKz0kKFwiPGRpdj5cIikuYXBwZW5kKCQoYSkpLmh0bWwoKS5yZXBsYWNlKC9ePCEtLSBjYzpzdGFydCAtLT4vLFwiXCIpLnJlcGxhY2UoLzwhLS0gY2M6ZW5kIC0tPiQvLFwiXCIpKStcIjwvcmVwbGFjZWRjYz5cIn0pfXZhciB0cmFuc2xhdGVUZW1wbGF0ZT1mdW5jdGlvbihlLHQsbyxhKXt2YXIgaT17fSxyPWNvbmRpdGlvbmFsX3JlcGxhY2UodC5yZXBsYWNlKC8oPFtePl0rXFxzKShzdHlsZXxodHRwLWVxdWl2KSg9XCJbXlwiXSpcIltePl0qPikvZ2ksZnVuY3Rpb24oZSx0LG8sYSl7cmV0dXJuIHQrXCJyZXBsYWNlZFwiK28rYX0pKSxsPVwiZnVuY3Rpb25cIj09dHlwZW9mICQucGFyc2VIVE1MPyQoJC5wYXJzZUhUTUwociwhMSkpOiQociksZD1sWzBdLHM9W10sYz1mdW5jdGlvbihlLHQsbyxhKXtzLnB1c2goe3Jvb3Q6ZSxibG9jazp0LGNvbnRleHQ6byxjb250YWluZXI6YX0pfSxuPWZ1bmN0aW9uKGUsdCxvKXtpZih2b2lkIDA9PT1pLnRoZW1lcyYmKGkudGhlbWVzPXt9KSx2b2lkIDA9PT1pLnRoZW1lc1tlXSYmKGkudGhlbWVzW2VdPXt9KSx2b2lkIDA9PT1pLnRoZW1lc1tlXVt0XXx8bnVsbD09PWkudGhlbWVzW2VdW3RdKWkudGhlbWVzW2VdW3RdPW87ZWxzZSBpZih2b2lkIDAhPT1vJiZudWxsIT09byl7dmFyIGE9aS50aGVtZXNbZV1bdF07YSE9byYmY29uc29sZS5sb2coXCJFcnJvciBzZXR0aW5nIGEgbmV3IGRlZmF1bHQgZm9yIHByb3BlcnR5IFwiK3QrXCIgaW4gdGhlbWUgXCIrZStcIi4gb2xkOlwiK2ErXCIgbmV3OlwiK28rXCIhXCIpfX0sdT17fTskKFwiW2RhdGEta28tY29udGFpbmVyXVwiLGwpLmVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbz1kb211dGlscy5nZXRBdHRyaWJ1dGUodCxcImRhdGEta28tY29udGFpbmVyXCIpK1wiQmxvY2tzXCI7ZG9tdXRpbHMucmVtb3ZlQXR0cmlidXRlKHQsXCJkYXRhLWtvLWNvbnRhaW5lclwiKSxkb211dGlscy5zZXRBdHRyaWJ1dGUodCxcImRhdGEtYmluZFwiLFwiYmxvY2s6IFwiK28pO3ZhciBhPSQoXCI+IFtkYXRhLWtvLWJsb2NrXVwiLHQpO2RvbXV0aWxzLnJlbW92ZUVsZW1lbnRzKGEsITApLHVbb109YX0pLG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoaSxcImlkXCIpLG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoaSxcImJvZHlUaGVtZVwiKSxtb2RlbERlZi5jcmVhdGVPclVwZGF0ZUJsb2NrRGVmKGksXCJibG9ja3NcIixcImJsb2Nrc1tdXCIpLG1vZGVsRGVmLmNyZWF0ZU9yVXBkYXRlQmxvY2tEZWYoaSxcInRleHRcIikscHJvY2Vzc0Jsb2NrKGQsaSxuLGMsbyxcInRlbXBsYXRlXCIsZSx2b2lkIDAsITEsYSk7dmFyIG09ZnVuY3Rpb24odCxyLGwpe3Byb2Nlc3NCbG9jayhsLGksbixjLG8sXCJibG9ja1wiLGUsdCwhMCxhKX07Zm9yKHZhciBoIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIHA9dVtoXSxiPWg7bW9kZWxEZWYuZW5zdXJlUGF0aEFuZEdldEJpbmRWYWx1ZShpLG4sZSxlLFwiXCIsYitcIi5ibG9ja3NcIixcIltdXCIpLHAuZWFjaChtLmJpbmQodm9pZCAwLGIpKX12YXIgdj17X2RlZnM6aSx0ZW1wbGF0ZU5hbWU6ZSxfYmxvY2tzOnN9O3JldHVybiB2b2lkIDAhPT1pW2VdLl92ZXJzaW9uJiYodi52ZXJzaW9uPWlbZV0uX3ZlcnNpb24pLHZ9O21vZHVsZS5leHBvcnRzPXRyYW5zbGF0ZVRlbXBsYXRlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CaGNuTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtJaXdpZDJsdVpHOTNJaXdpYWxGMVpYSjVJaXdpWjJ4dlltRnNJaXdpWTI5dWMyOXNaU0lzSW5KbGNYVnBjbVVpTENKamIyNTJaWEowWlhKVmRHbHNjeUlzSW1Wc1lXSnZjbUYwWlVSbFkyeGhjbUYwYVc5dWN5SXNJbkJ5YjJObGMzTlRkSGxzWlhOb1pXVjBVblZzWlhNaUxDSnRiMlJsYkVSbFppSXNJbVJ2YlhWMGFXeHpJaXdpZDNKaGNFVnNaVzFsYm5SWGFYUm9RMjl1WkdsMGFXOXVJaXdpWVhSMGNtbGlkWFJsSWl3aVpXeGxiV1Z1ZENJc0ltSnBibVJwYm1kUWNtOTJhV1JsY2lJc0ltTnZibVFpTENKblpYUkJkSFJ5YVdKMWRHVWlMQ0ppYVc1a2FXNW5JaXdpWTI5dVpHbDBhVzl1UW1sdVpHbHVaeUlzSW1KbFptOXlaU0lzSW1GbWRHVnlJaXdpY21WdGIzWmxRWFIwY21saWRYUmxJaXdpWlNJc0luZGhjbTRpTENKeVpYQnNZV05sWkVGMGRISnBZblYwWlhNaUxDSmhkSFJ5YVdKMWRHVk9ZVzFsSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpY0hKdlkyVnpjMU4wZVd4bElpd2lkR1Z0Y0d4aGRHVlZjbXhEYjI1MlpYSjBaWElpTENKaFpHUlZibWx4ZFdWSlpDSXNJbTVsZDBKcGJtUnBibWR6SWl3aWMzUjViR1VpTENKdVpYZFRkSGxzWlNJc0luVnVhWEYxWlVsa0lpd2lZWFIwY2lJc0ltbGtJaXdpY21WdGIzWmxSR2x6Y0d4aGVVNXZibVVpTENKMGNtbHRJaXdpYkdWdVozUm9JaXdpWDJacGVGSmxiR0YwYVhabFVHRjBhQ0lzSW1sdVpHVjRJaXdpYm1WM1ZYSnNJaXdpY0hKdlkyVnpjMEpzYjJOcklpd2laR1ZtY3lJc0luUm9aVzFsVlhCa1lYUmxjaUlzSW1Kc2IyTnJVSFZ6YUdWeUlpd2lZMjl1ZEdWNGRFNWhiV1VpTENKeWIyOTBUVzlrWld4T1lXMWxJaXdpWTI5dWRHRnBibVZ5VG1GdFpTSXNJbWRsYm1WeVlYUmxWVzVwY1hWbFNXUWlMQ0owWlcxd2JHRjBaVU55WldGMGIzSWlMQ0owWlcxd2JHRjBaVTVoYldVaUxDSnlaVzF2ZG1VaUxDSm1hWGhsWkVKc2IyTnJjeUlzSW5KbGNHeGhZMlZYYVhSb0lpd2lkWEpzWVhSMGNuTWlMQ0pwSWl3aVpuVnVZeUlzSW1KcGJtUWlMQ0psWVdOb0lpd2laR0YwWVVSbFpuTWlMQ0pqY21WaGRHVlBjbFZ3WkdGMFpVSnNiMk5yUkdWbUlpd2laVzV6ZFhKbFVHRjBhRUZ1WkVkbGRFSnBibVJXWVd4MVpTSXNJbWRsZEVsdWJtVnlTSFJ0YkNJc0ltSnNiMk5yUkdWbWMxVndaR0YwWlhJaUxDSnNiMk5oYkZkcGRHaENhVzVrYVc1blVISnZkbWxrWlhJaUxDSjBiWEJPWVcxbElpd2ljMlYwUTI5dWRHVnVkQ0lzSW5KbGJXOTJaVVZzWlcxbGJuUnpJaXdpYm05MGMzVndjRzl5ZEdWa0lpd2lhaUlzSW5WeWJGWmhjaUlzSW5KbGNGTjBlV3hsSWl3aWJtVjNRbWx1WkdsdVp5SXNJbVJsWm1GMWJIUldZV3gxWlNJc0ltTjFjbkpsYm5SQ2FXNWthVzVuY3lJc0ltUmhkR0ZDYVc1a0lpd2lhWFJsYlVKcGJtUldZV3gxWlNJc0luTmxiR1ZqZEVKcGJtUnBibWNpTENKa1lYUmhSV1JwZEdGaWJHVWlMQ0pzWVhOMFNXNWtaWGhQWmlJc0luTjFZbk1pTENKemRXSnpkSElpTENKblpYUk1iM2RsY2xSaFowNWhiV1VpTENKdGIyUmxiRUpwYm1SV1lXeDFaU0lzSW5KbGNHeGhZMlVpTENKM2NtRndjR2x1WjBScGRpSXNJbTVsZDBOdmJuUmxiblFpTENKaGNIQmxibVFpTENKM2FXUjBhQ0lzSW1WeWNtOXlJaXdpYUdWcFoyaDBJaXdpWVd4cFoyNGlMQ0prZVc1SVpXbG5hSFFpTENKdFlYUmphQ0lzSW1SNWJsZHBaSFJvSWl3aWMybDZaU0lzSW5Cc1lXTmxhRzlzWkdWeWMzSmpJaXdpZG1Gc2RXVWlMQ0p3YkdobGFXZG9kQ0lzSW5Cc2QybGtkR2dpTENKaWFXNWthVzVuVm1Gc2RXVWlMQ0owYlhCc1RtRnRaU0lzSW1OdmJuUmhhVzVsY2tKcGJtUWlMQ0prWldKMVp5SXNJbUYwZEhKV1lXeDFaU0lzSW1Ga1pGTnNZWE5vWlhNaUxDSmliRzlqYTBWc1pXMWxiblFpTENKaWJHOWphMDVoYldVaUxDSm5aWFFpTENKeVpYWmxjbk5sSWl3aWFXNXVaWEpVYlhCc1RtRnRaU0lzSW05MWRHVnlWRzF3YkU1aGJXVWlMQ0pqYjI1a1FtbHVaR2x1WnlJc0ltbHVibVZ5Vkcxd2JFTnZiblJsYm5RaUxDSnlaWEJzWVdObFNIUnRiQ0lzSW1OdmJtUnBkR2x2Ym1Gc1gzSmxjR3hoWTJVaUxDSm9kRzFzSWl3aVkyOXVaR2wwYVc5dUlpd2lZbTlrZVNJc0ltUmtJaXdpYjNWMGNIVjBJaXdpZEhKaGJuTnNZWFJsVkdWdGNHeGhkR1VpTENKeVpYQnNZV05sWkVoMGJXd2lMQ0p3TVNJc0luQXlJaXdpY0RNaUxDSmpiMjUwWlc1MElpd2ljR0Z5YzJWSVZFMU1JaXdpWW14dlkydHpJaXdpWDJKc2IyTnJVSFZ6YUdWeUlpd2ljbTl2ZEU1aGJXVWlMQ0p3ZFhOb0lpd2ljbTl2ZENJc0ltSnNiMk5ySWl3aVkyOXVkR1Y0ZENJc0ltTnZiblJoYVc1bGNpSXNJbTVoYldVaUxDSnJaWGtpTENKMllXd2lMQ0owYUdWdFpYTWlMQ0p3Y21WalZtRnNJaXdpYkc5bklpd2lZMjl1ZEdGcGJtVnljMFJ2YlNJc0ltTnZiblJoYVc1bGNrSnNiMk5yY3lJc0luVnVaR1ZtYVc1bFpDSXNJbUpzYjJOclVISnZZMlZ6Y3lJc0luQnliM0FpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW5SbGJYQnNZWFJsUkdWbUlpd2lYMlJsWm5NaUxDSmZZbXh2WTJ0eklpd2lYM1psY25OcGIyNGlMQ0oyWlhKemFXOXVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGSFFTeEpRVUZKUVN4RlFVRjFRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRV1ZETEU5QlFYTkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJaVVFzVDBGQlNTeExRVU16UjBVc1VVRkJWVU1zVVVGQlVTeHpRa0ZEYkVKRExHVkJRV2xDUkN4UlFVRlJMR05CUTNwQ1JTeHpRa0ZCZDBKR0xGRkJRVkVzY1VKQlEyaERSeXgxUWtGQmVVSklMRkZCUVZFc2JVSkJRMnBEU1N4VFFVRlhTaXhSUVVGUkxHTkJRMjVDU3l4VFFVRlhUQ3hSUVVGUkxHbENRVVZ1UWswc2VVSkJRVEpDTEZOQlFWTkRMRVZCUVZkRExFVkJRVk5ETEVkQlF6RkVMRWxCUVVsRExFVkJRVTlNTEZOQlFWTk5MR0ZCUVdGSUxFVkJRVk5FTEVkQlJURkRMRWxCUTBVc1NVRkJTVXNzUlVGQlZWZ3NaVUZCWlZrc2FVSkJRV2xDU0N4RlFVRk5SQ3hIUVVOd1JHUXNSVUZCUldFc1IwRkJVMDBzVDBGQlR5eHJRa0ZCYVVKR0xFVkJRVlVzVjBGRE4wTnFRaXhGUVVGRllTeEhRVUZUVHl4TlFVRk5MSE5DUVVOcVFsWXNVMEZCVTFjc1owSkJRV2RDVWl4RlFVRlRSQ3hIUVVOc1F5eE5RVUZQVlN4SFFVVlFMRTFCUkVGc1FpeFJRVUZSYlVJc1MwRkJTeXg1UTBGQk1FTldMRVZCUVZORkxFVkJRVTFJTEVkQlEyaEZWU3hKUVV0T1JTeHRRa0ZCY1VJc1UwRkJVMWdzUlVGQlUxa3NSMEZEZWtObUxGTkJRVk5uUWl4aFFVRmhZaXhGUVVGVFdTeEZRVUZsWml4VFFVRlRUU3hoUVVGaFNDeEZRVUZUTEZkQlFXRlpMRXRCUjNoR1JTeGhRVUZsTEZOQlFWTmtMRVZCUVZObExFVkJRWE5DWkN4RlFVRnBRbVVzUjBGRE1VVXNTVUZGU1VNc1JVRkdRVU1zUlVGQlVYSkNMRk5CUVZOTkxHRkJRV0ZJTEVWQlFWTXNhVUpCUTNaRGJVSXNSVUZCVnl4TFFVVllTQ3hKUVVGaFF5eEhRVU5tUnl4VFFVRlZMRkZCUTFaRExFMUJRMFZETEVkQlFVa3NVVUZKVWl4SlFVRkpReXhGUVVFd1JTeFBRVUYwUkRGQ0xGTkJRVk5OTEdGQlFXRklMRVZCUVZNc2JVSkJTM1JETEZGQlNHcENiVUlzUlVGQlYzcENMSE5DUVVGelFuZENMRTlCUVVGQkxFVkJRV3RDU0N4RlFVRnpRbVFzUlVGQmFVSkVMRVZCUVZOcFFpeEZRVUZoVFN4SlFVazVSMG9zUlVGQlYwUXNSVUZOV0hKQ0xGTkJRVk5YTEdkQ1FVRm5RbElzUlVGQlV5eHBRa0ZIYmtJc1QwRkJZbTFDTEVsQlEwVkJMRVZCUVZOTExFOUJRVTlETEU5QlFWTXNSVUZETTBJMVFpeFRRVUZUWjBJc1lVRkJZV0lzUlVGQlV5eFJRVUZUYlVJc1IwRkRia04wUWl4VFFVRlRWeXhuUWtGQlowSlNMRVZCUVZNc1YwRk5la013UWl4cFFrRkJiVUlzVTBGQlV6TkNMRVZCUVZkblFpeEZRVUZ6UWxrc1JVRkJUek5DTEVkQlEzUkZMRWxCUTBrMFFpeEZRVUZUWWl4RlFVUkliRUlzVTBGQlUwMHNZVUZCWVVnc1JVRkJVMFFzU1VGRk1VSXNUMEZCV0RaQ0xFZEJRMFl2UWl4VFFVRlRaMElzWVVGQllXSXNSVUZCVTBRc1JVRkJWelpDTEVsQlN6RkRReXhoUVVGbExGTkJRVk0zUWl4RlFVRlRPRUlzUlVGQlRVTXNSVUZCWTBNc1JVRkJZV3BDTEVWQlFYTkNhMElzUlVGQllVTXNSVUZCWlVNc1JVRkJaVU1zUlVGQmEwSkRMRWRCUlhaS0xFbEJSVUVzU1VGQlNVTXNSVUZIU2l4SFFVRnRRaXhUUVVGbVRDeEZRVU5HU3l4RlFVRmxla01zVTBGQlUwMHNZVUZCWVVnc1JVRkJVeXhwUWtGRE9VTklMRk5CUVZOWExHZENRVUZuUWxJc1JVRkJVeXh4UWtGRE4wSXNRMEZCUVN4SFFVRnRRaXhaUVVGbWFVTXNSVUZIVkN4TFFVRk5MRzFFUVVGeFJFRXNSVUZHTTBSTExFVkJRV1ZLTEVWQlVXcENMME1zUlVGQlJTeHRRa0ZCYjBKaExFZEJRVk4xUXl4VFFVMHZRaXhKUVVwQkxFbEJRVWxETEVWQlFXTnlSQ3hGUVVGRkxHdENRVUZ0UW1Fc1IwRkJVM2xETEZsQlFWa3NiVUpCUjNoRVF5eEhRVUZaTEU5QlFWRXNUVUZCVHl3d1FrRkJNa0lzWTBGRGFrUkRMRVZCUVVrc1JVRkJSMEVzUlVGQlNVUXNSVUZCVTJwQ0xFOUJRVkZyUWl4SlFVRkxMRU5CUlhoRExFbEJRVWxETEVWQlFVOXNRaXhwUWtGQmFVSnRRaXhWUVVGQlFTeEZRVUZuUWtnc1JVRkJVME1zUjBGQlNUVkNMRWRCUTNwRU5VSXNSVUZCUlN4SlFVRk5kVVFzUlVGQlUwTXNSMEZCU3l4SlFVRkxNME1zUjBGQlV6aERMRXRCUVV0R0xFZEJSek5ETEVsQlFVbEhMRVZCUVZkc1JDeFRRVUZUVFN4aFFVRmhTQ3hGUVVGVExITkNRVU0zUWl4UFFVRmlLME1zU1VGQmJVSkJMRVZCUVZjc1NVRkRiRU0xUkN4RlFVRkZMSFZDUVVGM1FtRXNSMEZCVXpoRExFdEJRVXNzVTBGQlUyNUNMRVZCUVU4elFpeEhRVU5zUkN0RExFVkJRVk4wUWl4UFFVRlRMRWxCUVVkelFpeEhRVUZ6UWl4TFFVTXZRMEVzUjBGQmMwSnNSQ3hUUVVGVFRTeGhRVUZoU0N4RlFVRlRMSE5DUVVOeVJFZ3NVMEZCVTFjc1owSkJRV2RDVWl4RlFVRlRMSGRDUVVkd1Ewb3NVMEZCVTI5RUxIVkNRVUYxUW14Q0xFVkJRVTFSTEVWQlFXTlRMRWRCUVZsa0xGbEJRV0ZCTEVsQlJUZEZMRWxCUVVsb1F5eEZRVUZyUWt3c1UwRkJVM0ZFTERCQ1FVRXdRa29zVlVGQlFVRXNSVUZCWjBKbUxFVkJRVTFETEVWQlFXTkhMRVZCUVdWSkxFVkJRV01zU1VGRGRrY3NVMEZCWmt3c1IwRkJkMEpvUXl4RlFVRm5RaXhMUVVGTkxFbEJSV3hFWkN4RlFVRkZMRkZCUVZOaExFZEJRVk00UXl4TFFVRkxMRk5CUVZOdVFpeEZRVUZQTTBJc1IwRkRka01zU1VGQlNXdENMRVZCUVZGeVFpeFRRVUZUY1VRc1lVRkJZV3hFTEVkQlJUbENiVVFzUlVGQmJVSjJSQ3hUUVVGVGIwUXNkVUpCUVhWQ1NDeFZRVUZCUVN4RlFVRm5RbVlzUjBGRGJrVnpRaXhGUVVFeVFuaEVMRk5CUVZOeFJDd3dRa0ZCTUVKS0xGVkJRVUZCTEVWQlFXZENaaXhGUVVGTlF5eEZRVUZqUnl4SFFVTnNSMllzUlVGQlYzaENMSFZDUVVGMVFuVkNMRTlCUVVGQkxFVkJRV3RDYTBNc1JVRkJNRUpFTEVWQlFXdENjRUlzUlVGQlkyaENMRVZCUVhOQ2JVSXNSVUZCWlVrc1IwRkZka29zUjBGQlNXNUNMRWRCUVZsRUxFVkJRMlFzUjBGQmQwSXNTMEZCY0VKRExFVkJRVk5MTEU5QlFXVXNRMEZETVVJc1NVRkJTVFpDTEVWQlFWVm9RaXhGUVVGblFteENMRWRCUXpsQ2RFSXNVMEZCVTJkQ0xHRkJRV0ZpTEVWQlFWTXNXVUZCWVN4elFrRkJlVUp4UkN4RlFVRlZMRTlCUlM5RmVFUXNVMEZCVTNsRUxGZEJRVmQwUkN4RlFVRlRMRk5CUnpkQ1NDeFRRVUZUTUVRc1pVRkJaWEJGTEVWQlFVVmhMRTFCUzJoRFl5eGhRVUZoWkN4RlFVRlRaU3hGUVVGelFtUXNSVUZCYVVKdFF5eEhRVWszUkN4SlFVUkJMRWxCUVVsdlFpeEhRVUZuUWl4clFrRkJiVUlzYlVKQlFXOUNMR1ZCUVdkQ0xGRkJRMnhGUXl4RlFVRkpMRVZCUVVkQkxFVkJRVWxFTEVWQlFXRXZRaXhQUVVGUlowTXNTVUZGZGtNc1IwRkVWelZFTEZOQlFWTk5MR0ZCUVdGSUxFVkJRVk4zUkN4RlFVRmhReXhKUVVkeVJDeE5RVVJCYkVVc1VVRkJVVzFDTEV0QlFVc3NjMEpCUVhkQ09FTXNSVUZCWVVNc1IwRkJTeXh2UTBGQmNVTjZSQ3hIUVVOMFJpeHpRa0ZCZDBKM1JDeEZRVUZoUXl4SFFVRkxMRzlEUVc5UGNFUXNUMEV2VGtGMFJTeEZRVUZGTEdsQ1FVRnJRbUVzUjBGQlV6aERMRXRCUVVzc1UwRkJVMjVDTEVWQlFVOHpRaXhIUVVOb1JDeEpRVUZKTUVRc1JVRkJVemRFTEZOQlFWTk5MR0ZCUVdGSUxFVkJRVk1zWjBKQlEzaERNa1FzUlVGQlZ6bEVMRk5CUVZOTkxHRkJRV0ZJTEVWQlFWTXNjMEpCUVVFc1NVRkRia015UkN4SFFVRjNReXhQUVVGaVFTeEpRVUZ0UWtFc1JVRkJWeXhKUVVNdlEwRXNSVUZCU2l4TFFVRmlRU3hGUVVFMFFpeHRRa0ZCY1VKRUxFVkJRVk1zUzBGQlQwTXNSVUZEY2tRc2JVSkJRWEZDUkN4RlFVTnlRemRFTEZOQlFWTm5RaXhoUVVGaFlpeEZRVUZUTEdkQ1FVRnBRakpFTEVkQlEyaEVPVVFzVTBGQlUyZENMR0ZCUVdGaUxFVkJRVk1zWlVGQlowSXdSQ3hIUVVNdlF6ZEVMRk5CUVZOWExHZENRVUZuUWxJc1JVRkJVeXhyUWtGSGNFTmlMRVZCUVVVc2EwSkJRVzFDWVN4SFFVRlRPRU1zUzBGQlN5eFRRVUZUYmtJc1JVRkJUek5DTEVkQlEycEVZeXhoUVVGaFpDeEZRVUZUWlN4RlFVRnpRbVFzUjBGQlFVRXNTMEZIT1VOa0xFVkJRVVVzZFVKQlFYZENZU3hIUVVGVE9FTXNTMEZCU3l4VFFVRlRia0lzUlVGQlR6TkNMRWRCUTNSRVZ5eHRRa0ZCYlVKWUxFVkJRVk1zWjBKQlJ6bENZaXhGUVVGRkxHOUNRVUZ4UW1Fc1IwRkJVemhETEV0QlFVc3NVMEZCVTI1Q0xFVkJRVTh6UWl4SFFVTnVSRVlzZVVKQlFYbENMR3RDUVVGdFFrVXNSVUZCVTBNc1MwRkhka1JrTEVWQlFVVXNjVUpCUVhOQ1lTeEhRVUZUT0VNc1MwRkJTeXhUUVVGVGJrSXNSVUZCVHpOQ0xFZEJRM0JFTEVsQlFVazBSQ3hGUVVGWlF5eEZRVUZ4UWtNc1JVRkJhVUpETEVWQlQyeEVReXhGUVVOQlF5eEZRVXhCUXl4RlFVRmxja1VzVTBGQlUwMHNZVUZCWVVnc1JVRkJVeXh2UWtGTmJFUXNSMEZCU1d0RkxFVkJRV0ZETEZsQlFWa3NTMEZCVHl4RlFVRkhMRU5CUTNKRExFbEJRVWxETEVWQlFVOUdMRVZCUVdGSExFOUJRVThzUlVGQlIwZ3NSVUZCWVVNc1dVRkJXU3hOUVVNelJFZ3NSVUZCWjBJdlJDeEZRVUZuUW0xRkxGRkJSV2hEU2l4RlFVRm5RaTlFTEVWQlFXZENhVVVzUjBGSmJFTXNSMEZHUVVRc1JVRkJaMElzZFVSQlFYbEVSQ3hGUVVGblFpeHJSMEZCYjBkQkxFVkJRV2RDTERaRFFVRXJRMEVzUlVGQlowSXNTVUZGYms4c1QwRkJja051UlN4VFFVRlRlVVVzWjBKQlFXZENkRVVzUjBGQmJVSXNRMEZIT1VNMlJDeEZRVUZsYUVVc1UwRkJVM0ZFTEdGQlFXRnNSQ3hIUVVOeVF5eEpRVUZKZFVVc1JVRkJhVUowUlN4RlFVRm5RbWxGTEVWQlFXTk1MRWRCUVVGQkxFVkJRVzlDTEZkQllYWkZMRWRCV2tGRUxFVkJRV0VzUjBGRlVpOUVMRk5CUVZOTkxHRkJRV0ZJTEVWQlFWTXNVVUZEYkVNMFJDeEhRVUZqTEhGQ1FVRjFRazBzUlVGQllVMHNVVUZCVVN4SlFVRkxMRXRCUVU4c1dVRkJRU3hKUVVjM1JGQXNTVUZEVkV3c1IwRkJZMHNzUlVGQlowSXNUVUZIYUVOTUxFZEJRV01zYTBKQlFXOUNWeXhGUVVWUExFMUJRWEpETVVVc1UwRkJVM2xGTEdkQ1FVRm5RblJGTEVkQlFXdENMRU5CUXpkRExFbEJRVWw1UlN4RlFVRmpkRVlzUlVGQlJTeHpSVUZCYzBVc1IwRkRNVVpWTEZOQlFWTm5RaXhoUVVGaE5FUXNSVUZCWVN4WlFVRmhZaXhIUVVOb1JDeEpRVUZKWXl4RlFVRmhOMFVzVTBGQlUzRkVMR0ZCUVdFdlJDeEZRVUZGTEdWQlFXVjNSaXhQUVVGUFJpeEpRVU12UkRWRkxGTkJRVk41UkN4WFFVRlhkRVFzUlVGQlV6QkZMRkZCUnpkQ1dDeEhRVUZuUXl4UlFVUm9RMFFzUlVGQmEwSnFSU3hUUVVGVFRTeGhRVUZoU0N4RlFVRlRMR05CUTFZNFJDeEZRVUZyUWl4TFFVRlBMRWxCUVUxR0xFVkJRM1JGTDBRc1UwRkJVMmRDTEdGQlFXRmlMRVZCUVZNc1dVRkJZU3RFTEVkQlF6VkRiRVVzVTBGQlUzbEVMRmRCUVZkMFJDeEZRVUZUTEVsQlJTOUNTQ3hUUVVGVFZ5eG5Ra0ZCWjBKU0xFVkJRVk1zZDBKQlF6ZENMRU5CUTB3c1NVRkJTVFJGTEVWQlFWRXZSU3hUUVVGVFRTeGhRVUZoU0N4RlFVRlRMRk5CUlRORExFZEJSR01zUzBGQlZqUkZMRWxCUVdOQkxFVkJRVkVzVFVGRFdpeFBRVUZXUVN4RlFVVkdMRTFCUkVGeVJpeFJRVUZSYzBZc1RVRkJUU3hwUlVGQmEwVTNSU3hIUVVNeFJTeHBSVUZGVWl4SlFVRkpPRVVzUlVGQlUycEdMRk5CUVZOTkxHRkJRV0ZJTEVWQlFWTXNWVUZETjBJc1MwRkJXRGhGTEVsQlFXVkJMRVZCUVZNc1RVRkZOVUlzU1VGQlNVTXNSVUZCVVd4R0xGTkJRVk5OTEdGQlFXRklMRVZCUVZNc1UwRkxka05uUml4SFFVaEtiRUlzUlVGQmEwSnFSU3hUUVVGVFRTeGhRVUZoU0N4RlFVRlRMR1ZCUjJRNFJDeEZRVUZuUW0xQ0xFMUJRVTBzTkVOQlEzSkVSQ3hKUVVGWFJpeEZRVUZUUlN4RlFVRlZMRWxCUTJ4RExFbEJRVWxGTEVWQlFWZHdRaXhIUVVGdFFrRXNSVUZCWjBKdFFpeE5RVUZOTERKRFFVTndSRU1zU1VGQlZVNHNSVUZCVVUwc1JVRkJVeXhKUVUwdlFpeEpRVTlKUXl4RlFWRkJReXhGUVdaQlF5eEZRVUZSTEVsQlJscDRRaXhGUVVGbGFFVXNVMEZCVTAwc1lVRkJZVWdzUlVGQlV5dzBRa0ZKTlVOeFJpeEZRVUZSZUVZc1UwRkJVMDBzWVVGQllVZ3NSVUZCVXl4UFFVVjJRelpFTEVWQlFXVm9SU3hUUVVGVFRTeGhRVUZoU0N4RlFVRlRMRTlCU1RWRE5FVXNSMEZCVTBVc1JVRkRXRXNzUlVGQlQxQXNSVUZCVVN4UlFVRlZSU3hGUVVObVFTeEZRVVZCUml4SlFVTldUeXhGUVVGUExFOUJRVk5NTEVWQlFWTXNUMEZHZWtKTExFVkJRVThzVDBGQlUxQXNSVUZCVVN4TlFVc3hRaXhKUVVGSlZTeEZRVUZYVWl4SFFVRlZha1lzVTBGQlUwMHNZVUZCWVVnc1JVRkJVeXc0UWtGRGNFUjFSaXhGUVVGVldDeEhRVUZUTDBVc1UwRkJVMDBzWVVGQllVZ3NSVUZCVXl3MlFrRlpkRVFzUjBGV1FVZ3NVMEZCVTFjc1owSkJRV2RDVWl4RlFVRlRMRTlCUTJ4RFNDeFRRVUZUVnl4blFrRkJaMEpTTEVWQlFWTXNiMEpCUTJ4RFNDeFRRVUZUVnl4blFrRkJaMEpTTEVWQlFWTXNPRUpCUTJ4RFNDeFRRVUZUVnl4blFrRkJaMEpTTEVWQlFWTXNOa0pCUTJ4RFNDeFRRVUZUVnl4blFrRkJaMEpTTEVWQlFWTXNNa0pCUlRsQ05rUXNTVUZEUm5WQ0xFVkJRV2xDTEZsQlFXTkhMRVZCUVZVc1lVRkJaVVFzUlVGQlZ5eFhRVUZoU0N4RlFVRlBMRTFCUjNCR1NTeEpRVUZaUkN4RlFVZG1MRTFCUkVFdlJpeFJRVUZSYzBZc1RVRkJUU3gzU2tGQmVVbzNSU3hIUVVOcVN5d3JTa0ZIVWl4SlFVRkpkMFlzUlVGQlpYWkdMRVZCUVdkQ2FVVXNSVUZCWTIxQ0xFZEJRVUZCTEVWQlFXTXNWMEZETDBSNlFpeEZRVUZoTEhkQ1FVRXdRbWRDTEVWQlFWRXNZVUZCWlVVc1JVRkJVeXhWUVVGWlZTeEZRVUZsTEd0Q1FVRnZRa29zUlVGQmFVSXNTMEZEZGtseVFpeEhRVUZuUXl4UFFVRndRa1FzUlVGQk1rSkJMRVZCUVd0Q0xFdEJRVThzU1VGQlRVWXNSVUZEZEVVdlJDeFRRVUZUWjBJc1lVRkJZV0lzUlVGQlV5eFpRVUZoSzBRc1IwRkZOVU1zU1VGQlNUQkNMRVZCUVZkd1JDeEZRVUZuUW5KRExFZEJSVE5DTUVZc1JVRkJaMElzV1VGQlkyUXNSVUZEY2tJc1VVRkJWRWNzUlVGQmFVSlhMRWRCUVdsQ0xHdENRVU53UWl4VFFVRlVXQ3hGUVVGclFsY3NSMEZCYVVJc2JVSkJRekZDTEZWQlFWUllMRWxCUVN0RExHMUNRVUZxUW5oR0xGRkJRVkZ2Unl4TlFVRnhRbkJITEZGQlFWRnZSeXhOUVVGTkxHMUhRVU5vUlN4UFFVRlVXaXhGUVVGblFsY3NSMEZCYVVJc2VVSkJRM2hDTEZWQlFWUllMRVZCUVcxQ1Z5eEhRVUZwUWl3MFFrRkRNMElzVlVGQlZGZ3NTVUZCYlVKWExFZEJRV2xDTERoQ1FVTTNRMEVzUjBGQmFVSXNTVUZGYWtKMlJ5eEZRVUZGWVN4SFFVRlRUU3hQUVVGUExHbEVRVUZuUkRCRUxFVkJRV2RDTEdsQ1FVRnZRbmxDTEVWQlFWY3NNRU5CUVN0RFJDeEZRVUZsTEdGQlFXVmFMRVZCUVZFc1kwRkJaMEpGTEVWQlFWTXNZMEZCTUVJc1QwRkJWa01zVDBGQlFVRXNSVUZCTmtJc1NVRkJUMEVzUlVGQlVTeExRVUZSTEZsQlFXTkpMRVZCUVU4c2JVSkJRVUVzUlVGQmVVSXNjMEpCUVhkQ1F5eEZRVUZwUWl4cFFrRkJiVUpOTEVWQlFXZENMR0ZCUXpkYWRrY3NSVUZCUldFc1IwRkJVMDhzVFVGQlRTeDVRa0ZOY2tKd1FpeEZRVUZGTEZOQlFWVmhMRWRCUVZNNFF5eExRVUZMTEZOQlFWTnVRaXhGUVVGUE0wSXNSMEZEZUVNc1NVRkJTVFJHTEVWQlFWa3ZSaXhUUVVGVFRTeGhRVUZoU0N4RlFVRlRMRkZCUXpORE5FUXNSVUZCWVN4cFFrRkJiMEp1UlN4bFFVRmxiMGNzVjBGQlYwUXNSMEZCWVN4SlFVTjRSVGxDTEVWQlFXdENha1VzVTBGQlUwMHNZVUZCWVVnc1JVRkJVeXhoUVVOcVJDdEVMRWRCUVdkRExFOUJRWEJDUkN4RlFVRXlRa0VzUlVGQmEwSXNTMEZCVHl4SlFVRk5SaXhGUVVNeFJTOUVMRk5CUVZOblFpeGhRVUZoWWl4RlFVRlRMRmxCUVdFclJDeExRVWM1UXpWRkxFVkJRVVVzWjBKQlFXbENZU3hIUVVGVE9FTXNTMEZCU3l4VFFVRlRia0lzUlVGQlR6TkNMRWRCUXk5RExFbEJRVWs0Uml4RlFVRmxkRVFzUlVGQldXSXNSMEZGTTBKdlJTeEZRVUZaYkVVc1lVRkJZV2xGTEVWQlFXTm9SU3hGUVVGTlF5eEZRVUZqUXl4RlFVRmhha0lzUlVGQmMwSXNVVUZCVTNWQ0xFVkJRV05JTEVkQlFVRkJMRVZCUVhGQ1JTeEhRVVV4U1d0RExFVkJRV2xDTTBVc1UwRkJVM0ZFTERCQ1FVRXdRbTVDTEVWQlFVMURMRVZCUVdOSExFVkJRV1ZKTEVWQlFXTXNSMEZCU1hsRUxFZEJSemRITlVjc1JVRkJSV0VzUjBGQlUwMHNUMEZCVHl3MlFrRkJORUppTEdWQlFXVnZSeXhYUVVGWGRFSXNSMEZCYTBJc1owTkJRekZHY0VZc1JVRkJSV0VzUjBGQlUwOHNUVUZCVFN4elFrRkRha0p3UWl4RlFVRkZZU3hIUVVGVGRVTXNWMEZOWW5CRUxFVkJRVVZCTEVWQlFVVXNhVUpCUVd0Q1lTeEhRVUZUWjBjc1RVRkJUVU1zVlVGQlYycEhMRWRCUVZNNFF5eExRVUZMTEZOQlFWTnVRaXhGUVVGUE0wSXNSMEZETlVVc1NVRkJTVVVzUlVGQlQwd3NVMEZCVTAwc1lVRkJZVWdzUlVGQlV5eG5Ra0ZETVVNc1VVRkJRU3hKUVVGWFJTeEhRVUZwUXl4TFFVRlVRU3hIUVVGM1FpeFRRVUZVUVN4RlFVTm9SQ3hMUVVGTkxHbEhRVWRTTEVsQmFVSkpaMGNzUlVGQlpVTXNSVUZxUW1aRExFVkJRV016Unl4bFFVRmxXU3hwUWtGQmFVSklMRVZCUVUxRUxFZEJaWEJFT0VRc1JVRkJWMnhGTEZOQlFWTk5MR0ZCUVdGSUxFVkJRVk1zWVVGSk9VTXNSMEZCYVVJc1MwRkJZaXRFTEVkQlFXZERMRTlCUVdKQkxFZEJRWEZDUVN4RlFVRlRhMElzVFVGQlRTd3dRa0ZCTWtJc1EwRkZjRVlzU1VGQlNXOUNMRVZCUVcxQ0xHTkJRV0YwUXl4RlFVRlhMRlZCUVZOc1JTeFRRVUZUY1VRc1lVRkJZV3hFTEVkQlFWY3NjVUpCUTNwR2EwY3NSVUZCWjBJM1JDeEZRVUZuUW1kRkxFZEJRMmhEZUVjc1UwRkJVMWNzWjBKQlFXZENVaXhGUVVGVExHZENRVU5zUTIxSExFVkJRV2RDT1VRc1JVRkJaMEp5UXl4SFFVTm9RMGdzVTBGQlUzbEhMRmxCUVZsMFJ5eEZRVUZUTERKSFFVRTRSMjlITEVWQlFXTXNUMEZCVlVRc1JVRkJaMElzVVVGQldVUXNSVUZCWjBJc2JVTkJSMmhPUVN4RlFVRm5RamRFTEVWQlFXZENlRU1zVTBGQlUzRkVMR0ZCUVdGc1JDeEpRVU4wUkVnc1UwRkJVMWNzWjBKQlFXZENVaXhGUVVGVExHZENRVU5zUTBnc1UwRkJVM2xFTEZkQlFWZDBSQ3hGUVVGVExIbENRVUY1UW10SExFVkJRV2RDTERoQ1FVTjBSVU1zUlVGQlowSTVSQ3hGUVVGblFuSkRMRWRCUTJoRFNDeFRRVUZUZVVjc1dVRkJXWFJITEVWQlFWTXNOa1pCUVdkSGIwY3NSVUZCWXl4UFFVRlZSQ3hGUVVGblFpeFJRVUZaUkN4RlFVRm5RaXhuUTBGTGRFMDNSQ3hGUVVGblFuSkRMRVZCUVZOelF5eEZRVUZqTEZGQlJYWkRUaXhGUVVGWlJTeEZRVUZsU1N4RlFVRmpUQ3hGUVVGaFJTeEhRVVV2UTBjc1JVRkZUQ3hOUVVGUE4wSXNSMEZGVUN4TlFVUkJiRUlzVVVGQlVYTkdMRTFCUVUwc2RVTkJRWGREY0VVc1JVRkJSMVFzUjBGRGJrUlRMRWxCUzFZc1UwRkJVemhHTEc5Q1FVRnZRa01zUjBGRE0wSXNUMEZCVDBFc1JVRkJTMmhETEZGQlFWRXNNRVJCUVRKRUxGTkJRVk5UTEVWQlFVOTNRaXhGUVVGWFF5eEhRVU40Unl4SlFVRkpReXhGUVVGTExEQkNRVU5VUVN4SFFVRk5SQ3hGUVVGTGJFTXNVVUZCVVN4cFFrRkJhMElzT0VKQlF6ZENRU3hSUVVGUkxHOUNRVUZ2UWl4MVJFRkROVUpCTEZGQlFWRXNUMEZCVHl3d1FrRkRka0p0UXl4SFFVRk5MSGRDUVVOT0xFbEJRVWxETEVWQlFWTXNNRUpCUVRCQ1NDeEZRVUZWTERKQ1FVdHFSQ3hQUVVwQlJ5eEhRVUZWZWtnc1JVRkJSU3hUUVVGVGQwWXNUMEZCVDNoR0xFVkJRVVYzU0N4SlFVRkxTQ3hQUVVOb1EyaERMRkZCUVZFc2NVSkJRWE5DTEVsQlF6bENRU3hSUVVGUkxHMUNRVUZ2UWl4TFFVTnlRaXhyUWtGTlpDeEpRVUZKY1VNc2EwSkJRVzlDTEZOQlFWTjJSU3hGUVVGamEwVXNSVUZCVFhwR0xFVkJRWE5DYzBJc1IwRkRla1VzU1VGQlNWQXNTMEZEUVdkR0xFVkJRV1ZRTEc5Q1FVRnZRa01zUlVGQlMyaERMRkZCUVZFc2FVUkJRV3RFTEZOQlFWTlRMRVZCUVU4NFFpeEZRVUZKUXl4RlFVRkpReXhIUVVNMVNDeFBRVUZQUml4RlFVRkxMRmRCUVdGRExFVkJRVXRETEV0QlNUVkNReXhGUVVGblF5eHRRa0ZCWmk5SUxFVkJRVVZuU1N4VlFVRXdRbWhKTEVWQlFVVkJMRVZCUVVWblNTeFZRVUZWVEN4SFFVRkJRU3hKUVVGM1FqTklMRVZCUVVVeVNDeEhRVU55UmpsSExFVkJRVlZyU0N4RlFVRlJMRWRCUld4Q1JTeExRVU5CUXl4RlFVRmxMRk5CUVZORExFVkJRVlYyUWl4RlFVRlhPVVFzUlVGQllVVXNSMEZETlVScFJpeEZRVUZQUnl4TlFVTk1ReXhMUVVGTlJpeEZRVU5PUnl4TlFVRlBNVUlzUlVGRFVESkNMRkZCUVZONlJpeEZRVU5VTUVZc1ZVRkJWM2hHTEV0QlMxaEtMRVZCUVdVc1UwRkJVelpHTEVWQlFVMURMRVZCUVV0RExFZEJSM0pETEZGQlFVRXNTVUZHVjJoSExFVkJRV0ZwUnl4VFFVRnRRbXBITEVWQlFXRnBSeXhuUWtGQlFTeEpRVU0zUTJwSExFVkJRV0ZwUnl4UFFVRkZTQ3hMUVVGMVFqbEdMRVZCUVdGcFJ5eFBRVUZGU0N4WlFVRkJRU3hKUVVOeVJEbEdMRVZCUVdGcFJ5eFBRVUZGU0N4SFFVRk5ReXhKUVVGelJDeFBRVUU1UWk5R0xFVkJRV0ZwUnl4UFFVRkZTQ3hIUVVGTlF5eEhRVUZsTDBZc1JVRkJZV2xITEU5QlFVVklMRWRCUVUxRExFZEJRVTlETEU5QlEyNUlMRkZCUVVFc1NVRkJWMEVzUjBGQkswSXNUMEZCVWtFc1JVRkJZeXhEUVVOdVJDeEpRVUZKUlN4RlFVRlZiRWNzUlVGQllXbEhMRTlCUVVWSUxFZEJRVTFETEVkQlF5OUNSeXhIUVVGWFJpeEhRVUZMZGtrc1VVRkJVVEJKTEVsQlFVa3NORU5CUVRoRFNpeEZRVUZOTEdGQlFXVkVMRVZCUVU4c1UwRkJWMGtzUlVGQlZTeFJRVUZWUml4RlFVRk5MRTlCU3k5SlNTeExRVVJoTDBrc1JVRkJSU3h6UWtGQmRVSXJTQ3hIUVVVdlFuQkZMRXRCUVVzc1UwRkJVMjVDTEVWQlFVOHpRaXhIUVVNNVFpeEpRVUZKYlVNc1JVRkJaMEowUXl4VFFVRlRUU3hoUVVGaFNDeEZRVUZUTEhGQ1FVRjFRaXhUUVVVeFJVZ3NVMEZCVTFjc1owSkJRV2RDVWl4RlFVRlRMSEZDUVVOc1EwZ3NVMEZCVTJkQ0xHRkJRV0ZpTEVWQlFWTXNXVUZCWVN4VlFVRlpiVU1zUjBGRmVFUXNTVUZCU1dkSExFVkJRV3RDYUVvc1JVRkJSU3h2UWtGQmNVSmhMRWRCUXpkRFNDeFRRVUZUTUVRc1pVRkJaVFJGTEVkQlFVRkJMRWRCUlhoQ1JDeEZRVUZqTDBZc1IwRkJhVUpuUnl4SlFVdHFRM1pKTEZOQlFWTnZSQ3gxUWtGQmRVSnNRaXhGUVVGTkxFMUJSWFJEYkVNc1UwRkJVMjlFTEhWQ1FVRjFRbXhDTEVWQlFVMHNZVUZGZEVOc1F5eFRRVUZUYjBRc2RVSkJRWFZDYkVJc1JVRkJUU3hUUVVGVkxGbEJSMmhFYkVNc1UwRkJVMjlFTEhWQ1FVRjFRbXhDTEVWQlFVMHNVVUZGZEVORUxHRkJRV0UzUWl4RlFVRlRPRUlzUlVGQlRVTXNSVUZCWTNOR0xFVkJRV04wUnl4RlFVRnpRaXhYUVVGWmRVSXNUMEZCUVVFc1IwRkJZemhHTEVWQlFXdENMMFlzUjBGRk1VZ3NTVUZCU1dkSExFVkJRV1VzVTBGQlUyeEhMRVZCUVdWU0xFVkJRVTh6UWl4SFFVTm9SRFpDTEdGQlFXRTNRaXhGUVVGVE9FSXNSVUZCVFVNc1JVRkJZM05HTEVWQlFXTjBSeXhGUVVGelFpeFJRVUZUZFVJc1JVRkJZMGdzUjBGQlFVRXNSVUZCY1VKRkxFbEJSelZJTEVsQlFVc3NTVUZCU1dsSExFdEJRVkZLTEVWQlEyWXNSMEZCU1VFc1JVRkJZMHNzWlVGQlpVUXNSMEZCVHl4RFFVTjBReXhKUVVGSlNDeEZRVUZyUWtRc1JVRkJZMGtzUjBGRGFFTnVSeXhGUVVGblFtMUhMRVZCUlhCQ01Va3NVMEZCVTNGRUxEQkNRVUV3UW01Q0xFVkJRVTFETEVWQlFXTlBMRVZCUVdOQkxFVkJRV01zUjBGQlNVZ3NSVUZCWjBJc1ZVRkJWeXhOUVVWc1NHZEhMRVZCUVdkQ2NrWXNTMEZCUzNWR0xFVkJRV0Y0Uml4VlFVRkJRU3hGUVVGblFsWXNTVUZIZEVRc1NVRkJTWEZITEVkQlEwWkRMRTFCUVU4elJ5eEZRVU5RVVN4aFFVRmpRU3hGUVVOa2IwY3NVVUZCVTNSQ0xFZEJUMWdzV1VGQlFTeEpRVXBYZEVZc1JVRkJTMUVzUjBGQlkzRkhMRmRCUXpWQ1NDeEZRVUZaU1N4UlFVRlZPVWNzUlVGQlMxRXNSMEZCWTNGSExGVkJSM0JEU0N4SFFVbFVTeXhQUVVGUFF5eFJRVUZWYWtNaUxDSm1hV3hsSWpvaUwzWmhjaTkzZDNjdmJXOXpZV2xqYnkxdFlYTjBaWEl2YzNKakwycHpMMk52Ym5abGNuUmxjaTl3WVhKelpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBjc3NQYXJzZT1yZXF1aXJlKFwibWVuc2NoL2xpYi9wYXJzZXIuanNcIiksY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGNvbnZlcnRlclV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpLGVsYWJvcmF0ZURlY2xhcmF0aW9ucz1yZXF1aXJlKFwiLi9kZWNsYXJhdGlvbnMuanNcIiksX3JlbW92ZU9wdGlvbmFsUXVvdGVzPWZ1bmN0aW9uKGUpe3JldHVyblwiJ1wiIT1lWzBdJiYnXCInIT1lWzBdfHxlW2UubGVuZ3RoLTFdIT1lWzBdP2U6ZS5zdWJzdHIoMSxlLmxlbmd0aC0yKS5yZXBsYWNlKC9cXFxcKFtcXHNcXFNdKS9nbSxcIiQxXCIpfSxfcHJvY2Vzc1N0eWxlU2hlZXRSdWxlc19wcm9jZXNzQmxvY2tEZWY9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG8scyxyLGw9MDtsPHQubGVuZ3RoO2wrKylpZihcInJ1bGVcIj09dFtsXS50eXBlKXtmb3IodmFyIG49dFtsXS5zZWxlY3RvcnMsaT0hMSxhPSExLGM9MDtjPG4ubGVuZ3RoO2MrKyluW2NdLm1hdGNoKC86cHJldmlldyQvKT9hPSEwOmk9ITA7aWYoYSYmaSl0aHJvdyBjb25zb2xlLmxvZyhcImNhbm5vdCBtaXggc2VsZWN0b3JzIHR5cGUgKDpwcmV2aWV3IGFuZCBkZWNsYXJhdGlvbnMpIGluIEBzdXBwb3J0cyAta28tYmxvY2tkZWZzIFwiLG4pLFwiQ2Fubm90IG1peCBzZWxlY3RvcnMgdHlwZSAoOnByZXZpZXcgYW5kIGRlY2xhcmF0aW9ucykgaW4gQHN1cHBvcnRzIC1rby1ibG9ja2RlZnNcIjtpZighYSYmIWkpdGhyb3cgY29uc29sZS5sb2coXCJjYW5ub3QgZmluZCBrbm93biBzZWxlY3RvcnMgaW4gQHN1cHBvcnRzIC1rby1ibG9ja2RlZnMgXCIsbiksXCJDYW5ub3QgZmluZCBrbm93biBzZWxlY3RvcnMgaW4gQHN1cHBvcnRzIC1rby1ibG9ja2RlZnNcIjtpZihpKXtvPVwiXCIscz17fSxyPXRbbF0uZGVjbGFyYXRpb25zO2Zvcih2YXIgcCx1PTA7dTxyLmxlbmd0aDt1KyspXCJwcm9wZXJ0eVwiPT1yW3VdLnR5cGUmJihwPV9yZW1vdmVPcHRpb25hbFF1b3RlcyhyW3VdLnZhbHVlKSxcImxhYmVsXCI9PXJbdV0ubmFtZT9zLm5hbWU9cDpcImNvbnRleHRcIj09clt1XS5uYW1lP3MuY29udGV4dE5hbWU9cDpcInByb3BlcnRpZXNcIj09clt1XS5uYW1lP289cDpcInRoZW1lXCI9PXJbdV0ubmFtZT9zLmdsb2JhbFN0eWxlPVwiX3RoZW1lXy5cIitwOlwidGhlbWVPdmVycmlkZVwiPT1yW3VdLm5hbWU/cy50aGVtZU92ZXJyaWRlPVwidHJ1ZVwiPT1TdHJpbmcocCkudG9Mb3dlckNhc2UoKTpzW3JbdV0ubmFtZV09cCk7Zm9yKHZhciBkPTA7ZDxuLmxlbmd0aDtkKyspZShuW2RdLG8scyl9aWYoYSlmb3IodmFyIGY9MDtmPG4ubGVuZ3RoO2YrKyllKG5bZl0uc3Vic3RyKDAsbltmXS5pbmRleE9mKFwiOlwiKSksdm9pZCAwLHtwcmV2aWV3QmluZGluZ3M6dFtsXS5kZWNsYXJhdGlvbnN9KX19LHByb2Nlc3NTdHlsZXNoZWV0UnVsZXM9ZnVuY3Rpb24oZSx0LG8scyxyLGwsbixpKXt2YXIgYSxjPWUscD1udWxsO2lmKHZvaWQgMD09PXQpe3ZhciB1PWNzc1BhcnNlKGUse2NvbW1lbnRzOiEwLHBvc2l0aW9uOiEwfSk7aWYoXCJzdHlsZXNoZWV0XCIhPXUudHlwZXx8dm9pZCAwPT09dS5zdHlsZXNoZWV0KXRocm93IGNvbnNvbGUubG9nKFwidW5hYmxlIHRvIHByb2Nlc3Mgc3R5bGVTaGVldFwiLHUpLFwiVW5hYmxlIHRvIHBhcnNlIHN0eWxlc2hlZXRcIjt0PXUuc3R5bGVzaGVldC5ydWxlc31mb3IodmFyIGQ9dC5sZW5ndGgtMTtkPj0wO2QtLSl7aWYoXCJzdXBwb3J0c1wiPT10W2RdLnR5cGUmJlwiLWtvLWJsb2NrZGVmc1wiPT10W2RdLm5hbWUpX3Byb2Nlc3NTdHlsZVNoZWV0UnVsZXNfcHJvY2Vzc0Jsb2NrRGVmKHMsdFtkXS5ydWxlcyksYz1jb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZShjLHRbZF0ucG9zaXRpb24uc3RhcnQscCwwLDAsMCxcIlwiKTtlbHNlIGlmKFwibWVkaWFcIj09dFtkXS50eXBlfHxcInN1cHBvcnRzXCI9PXRbZF0udHlwZSljPXByb2Nlc3NTdHlsZXNoZWV0UnVsZXMoYyx0W2RdLnJ1bGVzLG8scyxyLGwsbixpKTtlbHNlIGlmKFwiY29tbWVudFwiPT10W2RdLnR5cGUpO2Vsc2UgaWYoXCJydWxlXCI9PXRbZF0udHlwZSl7Zm9yKHZhciBmPXRbZF0uc2VsZWN0b3JzLGg9XCJcIixtPW51bGwsdj0wO3Y8Zi5sZW5ndGg7disrKXtoLmxlbmd0aD4wJiYoaCs9XCIsIFwiKTt2YXIgeT1mW3ZdLm1hdGNoKC9cXFtkYXRhLWtvLWJsb2NrPShbXiBdKilcXF0vKTtpZihudWxsIT09eSl7aWYobnVsbCE9PW0mJm0hPXlbMV0pdGhyb3dcIkZvdW5kIG11bHRpcGxlIGJsb2NrLW1hdGNoIGF0dHJpYnV0ZSBzZWxlY3RvcnM6IGNhbm5vdCB0cmFuc2xhdGUgaXQgKFwiK20rXCIgdnMgXCIreVsxXStcIilcIjttPXlbMV19aCs9XCJcXHgzYyEtLSBrbyB0ZXh0OiB0ZW1wbGF0ZU1vZGUgPT0nd3lzaXd5ZycgPyAnI21haW4td3lzaXd5Zy1hcmVhICcgOiAnJyAtLVxceDNlXFx4M2MhLS0gL2tvIC0tXFx4M2VcIitmW3ZdfWlmKG0pe3ZhciBrPVwiXFx4M2MhLS0ga28gZm9yZWFjaDogJHJvb3QuZmluZE9iamVjdHNPZlR5cGUoJGRhdGEsICdcIittK1wiJykgLS1cXHgzZVwiLHg9cCxnPVwiIFwiO3RbZF0uZGVjbGFyYXRpb25zLmxlbmd0aD4wJiYodFtkXS5kZWNsYXJhdGlvbnNbMF0ucG9zaXRpb24uc3RhcnQubGluZSE9dFtkXS5wb3NpdGlvbi5lbmQubGluZSYmKGc9XCJcXG5cIituZXcgQXJyYXkodFtkXS5wb3NpdGlvbi5zdGFydC5jb2wpLmpvaW4oXCIgXCIpKSx4PXRbZF0uZGVjbGFyYXRpb25zW3RbZF0uZGVjbGFyYXRpb25zLmxlbmd0aC0xXS5wb3NpdGlvbi5lbmQpLG51bGw9PT14P2MrPWcrXCJcXHgzYyEtLSAva28gLS1cXHgzZVwiOmM9eD09cD9jb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZShjLHgscCwwLDAsMCxnK1wiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIik6Y29udmVydGVyVXRpbHMucmVtb3ZlU3R5bGUoYyx4LHAsMCwwLDAsZytcIn1cIitnK1wiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIiksaD1rK2craC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcW2RhdGEta28tYmxvY2s9XCIrbStcIlxcXFxdXCIsXCJnXCIpLFwiXFx4M2MhLS0ga28gdGV4dDogJyMnK2lkKCkgLS1cXHgzZVwiK20rXCJcXHgzYyEtLSAva28gLS1cXHgzZVwiKSxzKG0sXCJcIix7Y29udGV4dE5hbWU6XCJibG9ja1wifSl9dmFyIGI9bXx8aTthPW8uYmluZCh0aGlzLGIsXCJcIik7dmFyIHc9ZWxhYm9yYXRlRGVjbGFyYXRpb25zKGMsdFtkXS5kZWNsYXJhdGlvbnMsbCxhKTtudWxsIT09dyYmKGM9dyksYz1jb252ZXJ0ZXJVdGlscy5yZW1vdmVTdHlsZShjLHRbZF0ucG9zaXRpb24uc3RhcnQsdFtkXS5wb3NpdGlvbi5lbmQsMCwwLDAsaCl9ZWxzZSBjb25zb2xlLmxvZyhcIlVua25vd24gcnVsZSB0eXBlXCIsdFtkXS50eXBlLFwid2hpbGUgcGFyc2luZyA8c3R5bGU+IHJ1bGVzXCIpO3A9dFtkXS5wb3NpdGlvbi5zdGFydH1yZXR1cm4gY307bW9kdWxlLmV4cG9ydHM9cHJvY2Vzc1N0eWxlc2hlZXRSdWxlcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTjBlV3hsYzJobFpYUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVkzTnpVR0Z5YzJVaUxDSnlaWEYxYVhKbElpd2lZMjl1YzI5c1pTSXNJbU52Ym5abGNuUmxjbFYwYVd4eklpd2laV3hoWW05eVlYUmxSR1ZqYkdGeVlYUnBiMjV6SWl3aVgzSmxiVzkyWlU5d2RHbHZibUZzVVhWdmRHVnpJaXdpYzNSeUlpd2liR1Z1WjNSb0lpd2ljM1ZpYzNSeUlpd2ljbVZ3YkdGalpTSXNJbDl3Y205alpYTnpVM1I1YkdWVGFHVmxkRkoxYkdWelgzQnliMk5sYzNOQ2JHOWphMFJsWmlJc0ltSnNiMk5yUkdWbWMxVndaR0YwWlhJaUxDSnlkV3hsY3lJc0luQnliM0JsY25ScFpYTWlMQ0p1WVcxbFpGQnliM0J6SWl3aVpHVmpiSE1pTENKcElpd2lkSGx3WlNJc0luTmxiSE1pTENKelpXeGxZM1J2Y25NaUxDSm9ZWE5FWldOc1lYSmhkR2x2Ym5NaUxDSm9ZWE5RY21WMmFXVjNjeUlzSW1vaUxDSnRZWFJqYUNJc0lteHZaeUlzSW1SbFkyeGhjbUYwYVc5dWN5SXNJblpoYkNJc0ltc2lMQ0oyWVd4MVpTSXNJbTVoYldVaUxDSmpiMjUwWlhoMFRtRnRaU0lzSW1kc2IySmhiRk4wZVd4bElpd2lkR2hsYldWUGRtVnljbWxrWlNJc0lsTjBjbWx1WnlJc0luUnZURzkzWlhKRFlYTmxJaXdpYkNJc0ltMGlMQ0pwYm1SbGVFOW1JaXdpY0hKbGRtbGxkMEpwYm1ScGJtZHpJaXdpY0hKdlkyVnpjMU4wZVd4bGMyaGxaWFJTZFd4bGN5SXNJbk4wZVd4bElpd2liRzlqWVd4WGFYUm9RbWx1WkdsdVoxQnliM1pwWkdWeUlpd2lkR2hsYldWVmNHUmhkR1Z5SWl3aWRHVnRjR3hoZEdWVmNteERiMjUyWlhKMFpYSWlMQ0p5YjI5MFRXOWtaV3hPWVcxbElpd2lkR1Z0Y0d4aGRHVk9ZVzFsSWl3aVltbHVaR2x1WjFCeWIzWnBaR1Z5SWl3aWJtVjNVM1I1YkdVaUxDSnNZWE4wVTNSaGNuUWlMQ0p6ZEhsc1pWTm9aV1YwSWl3aVkyOXRiV1Z1ZEhNaUxDSndiM05wZEdsdmJpSXNJbk4wZVd4bGMyaGxaWFFpTENKeVpXMXZkbVZUZEhsc1pTSXNJbk4wWVhKMElpd2libVYzVTJWc0lpd2labTkxYm1SQ2JHOWphMDFoZEdOb0lpd2liRzl2Y0ZCeVpXWnBlQ0lzSW1WdVpDSXNJbk53WVdOcGJtY2lMQ0pzYVc1bElpd2lRWEp5WVhraUxDSmpiMndpTENKcWIybHVJaXdpVW1WblJYaHdJaXdpYkc5allXeENiRzlqYTA1aGJXVWlMQ0ppYVc1a0lpd2lkR2hwY3lJc0ltVnNZV0p2Y21GMFpXUlRkSGxzWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJUMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3gzUWtGRGJrSkRMRkZCUVZWRUxGRkJRVkVzYzBKQlEyeENSU3hsUVVGcFFrWXNVVUZCVVN4alFVTjZRa2NzYzBKQlFYZENTQ3hSUVVGUkxIRkNRWGRDYUVOSkxITkNRVUYzUWl4VFFVRlRReXhIUVVOdVF5eE5RVUZsTEV0QlFWWkJMRVZCUVVrc1NVRkJkVUlzUzBGQlZrRXNSVUZCU1N4SlFVRmpRU3hGUVVGSlFTeEZRVUZKUXl4UFFVRlBMRWxCUVUxRUxFVkJRVWtzUjBGTE1VUkJMRVZCU0V0QkxFVkJRVWxGTEU5QlFVOHNSVUZCUjBZc1JVRkJTVU1zVDBGQlR5eEhRVUZIUlN4UlFVRlJMR1ZCUVdkQ0xFOUJUVGxFUXl4M1EwRkJNRU1zVTBGQlUwTXNSVUZCYTBKRExFZEJSM1pGTEVsQlJrRXNTVUZCU1VNc1JVRkJXVU1zUlVGQldVTXNSVUZGYmtKRExFVkJRVWtzUlVGQlIwRXNSVUZCU1Vvc1JVRkJUVXdzVDBGQlVWTXNTVUZEYUVNc1IwRkJjVUlzVVVGQmFrSktMRVZCUVUxSkxFZEJRVWRETEV0QlFXZENMRU5CU1ROQ0xFbEJTRUVzU1VGQlNVTXNSVUZCVDA0c1JVRkJUVWtzUjBGQlIwY3NWVUZEYUVKRExFZEJRVUZCTEVWQlEwRkRMRWRCUVVGQkxFVkJRMHRETEVWQlFVa3NSVUZCUjBFc1JVRkJTVW9zUlVGQlMxZ3NUMEZCVVdVc1NVRkRNMEpLTEVWQlFVdEpMRWRCUVVkRExFMUJRVTBzWVVGRGFFSkdMRWRCUVVGQkxFVkJSVUZFTEVkQlFVRkJMRVZCUjBvc1IwRkJTVU1zUjBGQlpVUXNSVUZGYWtJc1RVRkVRV3hDTEZGQlFWRnpRaXhKUVVGSkxHOUdRVUZ4Ums0c1IwRkRNMFlzYlVaQlJWSXNTVUZCUzBjc1NVRkJaMEpFTEVWQlJXNUNMRTFCUkVGc1FpeFJRVUZSYzBJc1NVRkJTU3d3UkVGQk1rUk9MRWRCUTJwRkxIbEVRVVZTTEVkQlFVbEZMRVZCUVdsQ0xFTkJRMjVDVUN4RlFVRmhMRWRCUTJKRExFdEJSVUZETEVWQlFWRklMRVZCUVUxSkxFZEJRVWRUTEdGQlEycENMRWxCUVVzc1NVRkJWME1zUlVGQlVFTXNSVUZCU1N4RlFVRlJRU3hGUVVGSldpeEZRVUZOVWl4UFFVRlJiMElzU1VGQk1FSXNXVUZCYWtKYUxFVkJRVTFaTEVkQlFVZFdMRTlCUTNaRVV5eEZRVUZOY2tJc2MwSkJRWE5DVlN4RlFVRk5XU3hIUVVGSFF5eFBRVU5vUWl4VFFVRnFRbUlzUlVGQlRWa3NSMEZCUjBVc1MwRkJhVUptTEVWQlFWZGxMRXRCUVU5SUxFVkJRM1JDTEZkQlFXcENXQ3hGUVVGTldTeEhRVUZIUlN4TFFVRnRRbVlzUlVGQlYyZENMRmxCUVdOS0xFVkJRM0JETEdOQlFXcENXQ3hGUVVGTldTeEhRVUZIUlN4TFFVRnpRbWhDTEVWQlFXRmhMRVZCUXpOQ0xGTkJRV3BDV0N4RlFVRk5XU3hIUVVGSFJTeExRVUZwUW1Zc1JVRkJWMmxDTEZsQlFXTXNWMEZCWVV3c1JVRkRMME1zYVVKQlFXcENXQ3hGUVVGTldTeEhRVUZIUlN4TFFVRjVRbVlzUlVGQlYydENMR05CUVRaRExGRkJRVGRDUXl4UFFVRlBVQ3hIUVVGTFVTeGpRVU0zUlhCQ0xFVkJRVmRETEVWQlFVMVpMRWRCUVVkRkxFMUJRVkZJTEVkQlRXNURMRWxCUVVzc1NVRkJTVk1zUlVGQlNTeEZRVUZIUVN4RlFVRkpha0lzUlVGQlMxZ3NUMEZCVVRSQ0xFbEJReTlDZUVJc1JVRkJhVUpQTEVWQlFVdHBRaXhIUVVGSmRFSXNSVUZCV1VNc1IwRkhNVU1zUjBGQlNVOHNSVUZEUml4SlFVRkxMRWxCUVVsbExFVkJRVWtzUlVGQlIwRXNSVUZCU1d4Q0xFVkJRVXRZTEU5QlFWRTJRaXhKUVVjdlFucENMRVZCUm5GQ1R5eEZRVUZMYTBJc1IwRkJSelZDTEU5QlFVOHNSVUZCUjFVc1JVRkJTMnRDTEVkQlFVZERMRkZCUVZFc1YwRkJRU3hIUVVWVVF5eG5Ra0ZFZUVJeFFpeEZRVUZOU1N4SFFVRkhVeXhwUWtGWGNrTmpMSFZDUVVGNVFpeFRRVUZUUXl4RlFVRlBOVUlzUlVGQlR6WkNMRVZCUVRCQ09VSXNSVUZCYTBJclFpeEZRVUZqUXl4RlFVRnpRa01zUlVGQlpVTXNSMEZEYWtvc1NVRnRRa2xETEVWQmJrSkJReXhGUVVGWFVDeEZRVU5ZVVN4RlFVRlpMRXRCUldoQ0xGRkJRVUVzU1VGQlYzQkRMRVZCUVhOQ0xFTkJReTlDTEVsQlFVbHhReXhGUVVGaGFrUXNVMEZCVTNkRExFZEJRM2hDVlN4VlFVRkJRU3hGUVVOQlF5eFZRVUZCUVN4SlFVVkdMRWRCUVhWQ0xHTkJRVzVDUml4RlFVRlhhRU1zVjBGQlFVRXNTVUZCSzBKblF5eEZRVUZYUnl4WFFVVjJSQ3hOUVVSQmJFUXNVVUZCVVhOQ0xFbEJRVWtzSzBKQlFXZERlVUlzUjBGRGRFTXNOa0pCUlZKeVF5eEZRVUZSY1VNc1JVRkJWMGNzVjBGQlYzaERMRTFCVTJoRExFbEJRVXNzU1VGQlNVa3NSVUZCU1Vvc1JVRkJUVXdzVDBGQlV5eEZRVUZIVXl4SFFVRkxMRVZCUVVkQkxFbEJRVXNzUTBGRE1VTXNSMEZCY1VJc1dVRkJha0pLTEVWQlFVMUpMRWRCUVVkRExFMUJRWFZETEdsQ1FVRnFRa3dzUlVGQlRVa3NSMEZCUjJFc1MwRkRNVU51UWl4M1EwRkJkME5ETEVWQlFXdENReXhGUVVGTlNTeEhRVUZIU2l4UFFVTnVSVzFETEVWQlFWYzFReXhsUVVGbGEwUXNXVUZCV1U0c1JVRkJWVzVETEVWQlFVMUpMRWRCUVVkdFF5eFRRVUZUUnl4TlFVRlBUaXhGUVVGWExFVkJRVWNzUlVGQlJ5eEZRVUZITEZOQlQzaEdMRWRCUVhGQ0xGTkJRV3BDY0VNc1JVRkJUVWtzUjBGQlIwTXNUVUZCYjBNc1dVRkJha0pNTEVWQlFVMUpMRWRCUVVkRExFdEJRemxET0VJc1JVRkJWMUlzZFVKQlFYVkNVU3hGUVVGVmJrTXNSVUZCVFVrc1IwRkJSMG9zVFVGQlR6WkNMRVZCUVRCQ09VSXNSVUZCYTBJclFpeEZRVUZqUXl4RlFVRnpRa01zUlVGQlpVTXNVVUZEZEVvc1IwRkJjVUlzVjBGQmFrSnFReXhGUVVGTlNTeEhRVUZIUXl4WFFVVmlMRWRCUVhGQ0xGRkJRV3BDVEN4RlFVRk5TU3hIUVVGSFF5eExRVUZuUWl4RFFVbHNReXhKUVVoQkxFbEJRVWxETEVWQlFVOU9MRVZCUVUxSkxFZEJRVWRITEZWQlEyaENiME1zUlVGQlV5eEhRVU5VUXl4RlFVRnJRaXhMUVVOaWJFTXNSVUZCU1N4RlFVRkhRU3hGUVVGSlNpeEZRVUZMV0N4UFFVRlJaU3hKUVVGTExFTkJRMmhEYVVNc1JVRkJUMmhFTEU5QlFWTXNTVUZCUjJkRUxFZEJRVlVzVFVGRGFrTXNTVUZCU1doRExFVkJRVkZNTEVWQlFVdEpMRWRCUVVkRExFMUJRVTBzTmtKQlF6RkNMRWRCUVdNc1QwRkJWa0VzUlVGQlowSXNRMEZEYkVJc1IwRkJkMElzVDBGQmNFSnBReXhIUVVFMFFrRXNSMEZCYlVKcVF5eEZRVUZOTEVkQlFVa3NTMEZCVFN4M1JVRkJNRVZwUXl4RlFVRnJRaXhQUVVGVGFrTXNSVUZCVFN4SFFVRkxMRWxCUTI1TWFVTXNSVUZCYTBKcVF5eEZRVUZOTEVkQlJURkNaME1zUjBGQlZTeHJSMEZCT0VaeVF5eEZRVUZMU1N4SFFVVXZSeXhIUVVGSmEwTXNSVUZCYVVJc1EwRkRia0lzU1VGQlNVTXNSVUZCWVN4MVJFRkJkVVJFTEVWQlFXdENMRmxCUlhSR1JTeEZRVUZOVml4RlFVTk9WeXhGUVVGVkxFbEJRMVl2UXl4RlFVRk5TU3hIUVVGSFV5eGhRVUZoYkVJc1QwRkJVeXhKUVVNM1Frc3NSVUZCVFVrc1IwRkJSMU1zWVVGQllTeEhRVUZITUVJc1UwRkJVMGNzVFVGQlRVMHNUVUZCVVdoRUxFVkJRVTFKTEVkQlFVZHRReXhUUVVGVFR5eEpRVUZKUlN4UFFVTjRSVVFzUlVGQlZTeExRVUZQTEVsQlFVdEZMRTFCUVUxcVJDeEZRVUZOU1N4SFFVRkhiVU1zVTBGQlUwY3NUVUZCVFZFc1MwRkJUVU1zUzBGQlN5eE5RVVZxUlV3c1JVRkJUVGxETEVWQlFVMUpMRWRCUVVkVExHRkJRV0ZpTEVWQlFVMUpMRWRCUVVkVExHRkJRV0ZzUWl4UFFVRlRMRWRCUVVjMFF5eFRRVUZUVHl4TFFVVTNSQ3hQUVVGU1FTeEZRVUZqV0N4SFFVRlpXU3hGUVZSYUxIRkNRVlZUV2l4RlFVRnNRbGNzUjBGQlQxWXNSVUZCYzBJM1F5eGxRVUZsYTBRc1dVRkJXVTRzUlVGQlZWY3NSVUZCUzFZc1JVRkJWeXhGUVVGSExFVkJRVWNzUlVGQlIxY3NSVUZXYkVZc2MwSkJWMFo0UkN4bFFVRmxhMFFzV1VGQldVNHNSVUZCVlZjc1JVRkJTMVlzUlVGQlZ5eEZRVUZITEVWQlFVY3NSVUZCUjFjc1JVRkJWU3hKUVVGTlFTeEZRVmcxUlN4elFrRlpiRUpLTEVWQlFWTkZMRVZCUVdGRkxFVkJRVlZLTEVWQlFVODVReXhSUVVGUkxFbEJRVWwxUkN4UFFVRlBMRzlDUVVGelFsSXNSVUZCYTBJc1RVRkJUeXhMUVVGTkxHMURRVUZwUTBFc1JVRkJhMElzYzBKQlJXeExOME1zUlVGQmFVSTJReXhGUVVGcFFpeEpRVUZOTVVJc1dVRkJZU3hWUVVsMlJDeEpRVUZKYlVNc1JVRkJhVUpVTEVkQlFXOURXQ3hGUVVONlJFTXNSVUZCYTBKTUxFVkJRWGxDZVVJc1MwRkJTME1zUzBGQlRVWXNSVUZCWjBJc1NVRkRkRVVzU1VGQlNVY3NSVUZCYTBKb1JTeHpRa0ZCYzBJeVF5eEZRVUZWYmtNc1JVRkJUVWtzUjBGQlIxTXNZVUZCWTJ0Q0xFVkJRWE5DUnl4SFFVTXpSU3hQUVVGd1FuTkNMRWxCUVRCQ2NrSXNSVUZCVjNGQ0xFZEJSWHBEY2tJc1JVRkJWelZETEdWQlFXVnJSQ3haUVVGWlRpeEZRVUZWYmtNc1JVRkJUVWtzUjBGQlIyMURMRk5CUVZOSExFMUJRVTh4UXl4RlFVRk5TU3hIUVVGSGJVTXNVMEZCVTA4c1NVRkJTeXhGUVVGSExFVkJRVWNzUlVGQlIwZ3NVVUZGZWtkeVJDeFJRVUZSYzBJc1NVRkJTU3h2UWtGQmNVSmFMRVZCUVUxSkxFZEJRVWRETEV0QlFVMHNLMEpCUld4RUswSXNSVUZCV1hCRExFVkJRVTFKTEVkQlFVZHRReXhUUVVGVFJ5eE5RVVZvUXl4UFFVRlBVQ3hIUVVkVWMwSXNUMEZCVDBNc1VVRkJWUzlDSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWpiMjUyWlhKMFpYSXZjM1I1YkdWemFHVmxkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksanNlcD1yZXF1aXJlKFwianNlcFwiKTtqc2VwLmFkZEJpbmFyeU9wKFwib3JcIiwxKSxqc2VwLmFkZEJpbmFyeU9wKFwiYW5kXCIsMiksanNlcC5hZGRCaW5hcnlPcChcImVxXCIsNiksanNlcC5hZGRCaW5hcnlPcChcIm5lcVwiLDYpLGpzZXAuYWRkQmluYXJ5T3AoXCJsdFwiLDcpLGpzZXAuYWRkQmluYXJ5T3AoXCJsdGVcIiw3KSxqc2VwLmFkZEJpbmFyeU9wKFwiZ3RcIiw3KSxqc2VwLmFkZEJpbmFyeU9wKFwiZ3RlXCIsNyk7dmFyIGFkZFNsYXNoZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvW1xcXFxcIidcXHJcXG5cXHRcXHZcXGZcXGJdL2csXCJcXFxcJCZcIikucmVwbGFjZSgvXFx1MDAwMC9nLFwiXFxcXDBcIil9LHJlbW92ZVN0eWxlPWZ1bmN0aW9uKGUscixuLHQsbyxpLGEpe2Zvcih2YXIgcz1lLnNwbGl0KFwiXFxuXCIpLHA9byxsPWksdT0xK3Q7dTxyLmxpbmU7dSsrKXArPXNbdS0xLXRdLmxlbmd0aCsxO2lmKHArPXIuY29sLG51bGwhPT1uKXtmb3IodmFyIGQ9MSt0O2Q8bi5saW5lO2QrKylsKz1zW2QtMS10XS5sZW5ndGgrMTtsKz1uLmNvbH1lbHNlIGwrPWUubGVuZ3RoKzE7cmV0dXJuIGUuc3Vic3RyKDAscC0xKSthK2Uuc3Vic3RyKGwtMSl9LGV4cHJlc3Npb25HZW5lcmF0b3I9ZnVuY3Rpb24oZSxyLG4pe3JldHVybiBmdW5jdGlvbiBlKHIsbix0LG8pe2lmKHZvaWQgMD09PXQmJih0PSEwKSx2b2lkIDAhPT1vJiZcIklkZW50aWZpZXJcIiE9PXIudHlwZSYmXCJNZW1iZXJFeHByZXNzaW9uXCIhPT1yLnR5cGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUuZGVidWcmJmNvbnNvbGUuZGVidWcoXCJDYW5ub3QgYXBwbHkgZGVmYXVsdCB2YWx1ZSB0byB2YXJpYWJsZSB3aGVuIHVzaW5nIGV4cHJlc3Npb25zXCIpLFwiQmluYXJ5RXhwcmVzc2lvblwiPT09ci50eXBlfHxcIkxvZ2ljYWxFeHByZXNzaW9uXCI9PT1yLnR5cGUpcmV0dXJuXCIoXCIrZShyLmxlZnQsbix0KStcIiBcIitmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwib3JcIjpyZXR1cm5cInx8XCI7Y2FzZVwiYW5kXCI6cmV0dXJuXCImJlwiO2Nhc2VcImx0XCI6cmV0dXJuXCI8XCI7Y2FzZVwibHRlXCI6cmV0dXJuXCI8PVwiO2Nhc2VcImd0XCI6cmV0dXJuXCI+XCI7Y2FzZVwiZ3RlXCI6cmV0dXJuXCI+PVwiO2Nhc2VcImVxXCI6cmV0dXJuXCI9PVwiO2Nhc2VcIm5lcVwiOnJldHVyblwiIT1cIjtkZWZhdWx0OnJldHVybiBlfX0oci5vcGVyYXRvcikrXCIgXCIrZShyLnJpZ2h0LG4sdCkrXCIpXCI7aWYoXCJDYWxsRXhwcmVzc2lvblwiPT09ci50eXBlKXt2YXIgaT1yLmFyZ3VtZW50cy5tYXAoZnVuY3Rpb24ocil7cmV0dXJuIGUocixuLHQpfSk7cmV0dXJuIGUoci5jYWxsZWUsbix0KStcIihcIitpLmpvaW4oXCIsIFwiKStcIilcIn1pZihcIlVuYXJ5RXhwcmVzc2lvblwiPT09ci50eXBlKXJldHVybiByLm9wZXJhdG9yK2Uoci5hcmd1bWVudCxuLHQpO2lmKFwiTWVtYmVyRXhwcmVzc2lvblwiPT1yLnR5cGUmJnIuY29tcHV0ZWQpdGhyb3dcIlVuZXhwZWN0ZWQgY29tcHV0ZWQgbWVtYmVyIGV4cHJlc3Npb25cIjtpZihcIk1lbWJlckV4cHJlc3Npb25cIiE9ci50eXBlfHxyLmNvbXB1dGVkKXtpZihcIkxpdGVyYWxcIj09PXIudHlwZSlyZXR1cm4gci5yYXc7aWYoXCJJZGVudGlmaWVyXCI9PT1yLnR5cGUpe3ZhciBhPXIubmFtZTtyZXR1cm4gdD9uKGEsbykrXCIoKVwiOmF9aWYoXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIj09PXIudHlwZSlyZXR1cm5cIihcIitlKHIudGVzdCxuLHQpK1wiID8gXCIrZShyLmNvbnNlcXVlbnQsbix0KStcIiA6IFwiK2Uoci5hbHRlcm5hdGUsbix0KStcIilcIjt0aHJvd1wiQ29tcG91bmRcIj09PXIudHlwZT9cIlN5bnRheCBlcnJvciBpbiBleHByZXNzaW9uOiBvcGVyYXRvciBleHBlY3RlZCBhZnRlciBcIitlKHIuYm9keVswXSxuLCExKTpcIkZvdW5kIGFuIHVuc3VwcG9ydGVkIGV4cHJlc3Npb24gdHlwZTogXCIrci50eXBlfXZhciBzPWUoci5vYmplY3QsbiwhMSkrXCIuXCIrZShyLnByb3BlcnR5LG4sITEpO3JldHVybiB0JiZcIk1hdGhcIiE9PXIub2JqZWN0Lm5hbWUmJlwiQ29sb3JcIiE9PXIub2JqZWN0Lm5hbWUmJlwiVXRpbFwiIT09ci5vYmplY3QubmFtZT9uKHMsbykrXCIoKVwiOnN9KGUscix2b2lkIDAsbil9LGV4cHJlc3Npb25CaW5kaW5nPWZ1bmN0aW9uKGUscixuKXt2YXIgdDtpZih2b2lkIDAhPT1uJiZudWxsIT09bil7dmFyIG89ZS50cmltKCkucmVwbGFjZSgvQFxcWyhbXlxcXV0rKVxcXXxAKFthLXpBLVowLTlcXC5fXSspXFxiL2csXCIjIyN2YXIjIyNcIik7aWYoXCIjIyN2YXIjIyNcIj09KG89by5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZyxcIlxcXFwkJlwiKSkpdD1bbnVsbCxuXTtlbHNlIGlmKG89XCJeXCIrby5yZXBsYWNlKC8jIyN2YXIjIyMvZyxcIiguKylcIikrXCIkXCIsISh0PW4udHJpbSgpLm1hdGNoKG5ldyBSZWdFeHAobykpKSl0aHJvdyBjb25zb2xlLmxvZyhcIkNhbm5vdCBmaW5kIG1hdGNoZXNcIix0LFwiZm9yXCIsbixlLG8sZSksXCJDYW5ub3QgZmluZCBkZWZhdWx0IHZhbHVlIGZvciBcIitlK1wiIGluIFwiK259dHJ5e3ZhciBpPTAsYT1cIidcIitlLnJlcGxhY2UoL0BcXFsoW15cXF1dKylcXF18QChbYS16QS1aMC05XFwuX10rKVxcYnwoJykvZyxmdW5jdGlvbihlLG4sbyxhKXtpZihhKXJldHVyblwiXFxcXFwiK2E7aSsrO3ZhciBzLHA9bnx8bztpZih0JiYodm9pZCAwIT09dFtpXT9zPXRbaV0udHJpbSgpOmNvbnNvbGUubG9nKFwiQUJaWlogQ2Fubm90IGZpbmQgZGVmYXVsdCB2YWx1ZSBmb3JcIixwLFwiaW5cIix0LFwiYXNcIixpKSksbil7dmFyIGw9anNlcChuKTtyZXR1cm5cIicrXCIrZXhwcmVzc2lvbkdlbmVyYXRvcihsLHIscykrXCIrJ1wifXJldHVyblwiJytcIityKHAscykrXCIoKSsnXCJ9KStcIidcIjtyZXR1cm4gYT1hLnJlcGxhY2UoLyhefFteXFxcXF0pJydcXCsvZyxcIiQxXCIpLnJlcGxhY2UoL1xcKycnL2csXCJcIiksMD09PWkmJlwiZmFsc2VcIiE9PWEmJlwidHJ1ZVwiIT09YSYmY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgZXhwcmVzc2lvbiB3aXRoIG5vIHZhbGlkIEB2YXJpYWJsZSByZWZlcmVuY2VzXCIsZSksYX1jYXRjaChyKXt0aHJvd1wiRXhjZXB0aW9uIHBhcnNpbmcgZXhwcmVzc2lvbiBcIitlK1wiIFwiK3J9fSxjb25kaXRpb25CaW5kaW5nPWZ1bmN0aW9uKGUscil7dmFyIG49anNlcChlKTtyZXR1cm4gZXhwcmVzc2lvbkdlbmVyYXRvcihuLHIpfTttb2R1bGUuZXhwb3J0cz17YWRkU2xhc2hlczphZGRTbGFzaGVzLHJlbW92ZVN0eWxlOnJlbW92ZVN0eWxlLGNvbmRpdGlvbkJpbmRpbmc6Y29uZGl0aW9uQmluZGluZyxleHByZXNzaW9uQmluZGluZzpleHByZXNzaW9uQmluZGluZ307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSW1OdmJuTnZiR1VpTENKeVpYRjFhWEpsSWl3aWFuTmxjQ0lzSW1Ga1pFSnBibUZ5ZVU5d0lpd2lZV1JrVTJ4aGMyaGxjeUlzSW5OMGNpSXNJbkpsY0d4aFkyVWlMQ0p5WlcxdmRtVlRkSGxzWlNJc0luTjBlV3hsSWl3aWMzUmhjblJRYjNNaUxDSmxibVJRYjNNaUxDSnphMmx3VW05M2N5SXNJbk4wWVhKMFQyWm1jMlYwSWl3aVpXNWtUMlptYzJWMElpd2lhVzV6WlhKMElpd2ljM1I1YkdWU2IzZHpJaXdpYzNCc2FYUWlMQ0p6ZEdGeWRDSXNJbVZ1WkNJc0luSWlMQ0pzYVc1bElpd2liR1Z1WjNSb0lpd2lZMjlzSWl3aWNqSWlMQ0p6ZFdKemRISWlMQ0psZUhCeVpYTnphVzl1UjJWdVpYSmhkRzl5SWl3aWJtOWtaU0lzSW1KcGJtUnBibWRRY205MmFXUmxjaUlzSW1SbFpsWmhiQ0lzSW1kbGJpSXNJbXh2YjJ0MWNHMWxiV0psY2lJc0luUjVjR1VpTENKa1pXSjFaeUlzSW14bFpuUWlMQ0p2Y0NJc0ltOXdaWEpoZEc5eUlpd2ljbWxuYUhRaUxDSmhjbWR6SWl3aVlYSm5kVzFsYm5Seklpd2liV0Z3SWl3aWJpSXNJbU5oYkd4bFpTSXNJbXB2YVc0aUxDSmhjbWQxYldWdWRDSXNJbU52YlhCMWRHVmtJaXdpY21GM0lpd2lhV1FpTENKdVlXMWxJaXdpZEdWemRDSXNJbU52Ym5ObGNYVmxiblFpTENKaGJIUmxjbTVoZEdVaUxDSmliMlI1SWl3aWJXVWlMQ0p2WW1wbFkzUWlMQ0p3Y205d1pYSjBlU0lzSW1WNGNISmxjM05wYjI1Q2FXNWthVzVuSWl3aVpYaHdjbVZ6YzJsdmJpSXNJbVJsWm1GMWJIUldZV3gxWlNJc0ltMWhkR05vWlhNaUxDSmphR1ZqYXlJc0luUnlhVzBpTENKdFlYUmphQ0lzSWxKbFowVjRjQ0lzSW14dlp5SXNJblpoY25NaUxDSnlaWE4xYkhRaUxDSndNU0lzSW5BeUlpd2ljRE1pTENKMllYSk9ZVzFsSWl3aWNHRnljMlYwY21WbElpd2laWEp5YjNJaUxDSmxJaXdpWTI5dVpHbDBhVzl1UW1sdVpHbHVaeUlzSW1OdmJtUnBkR2x2YmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3h6UWtGRGJFSkRMRXRCUVU5RUxGRkJRVkVzVVVGRmJrSkRMRXRCUVV0RExGbEJRVmtzUzBGQlRTeEhRVU4yUWtRc1MwRkJTME1zV1VGQldTeE5RVUZQTEVkQlEzaENSQ3hMUVVGTFF5eFpRVUZaTEV0QlFVMHNSMEZEZGtKRUxFdEJRVXRETEZsQlFWa3NUVUZCVHl4SFFVTjRRa1FzUzBGQlMwTXNXVUZCV1N4TFFVRk5MRWRCUTNaQ1JDeExRVUZMUXl4WlFVRlpMRTFCUVU4c1IwRkRlRUpFTEV0QlFVdERMRmxCUVZrc1MwRkJUU3hIUVVOMlFrUXNTMEZCUzBNc1dVRkJXU3hOUVVGUExFZEJSWGhDTEVsQlFVbERMRmRCUVdFc1UwRkJVME1zUjBGRGVFSXNUMEZCVDBFc1JVRkJTVU1zVVVGQlVTeHpRa0ZCZFVJc1VVRkJVVUVzVVVGQlVTeFZRVUZYTEZGQlIyNUZReXhaUVVGakxGTkJRVk5ETEVWQlFVOURMRVZCUVZWRExFVkJRVkZETEVWQlFWVkRMRVZCUVdGRExFVkJRVmRETEVkQlNYQkdMRWxCU0VFc1NVRkJTVU1zUlVGQldWQXNSVUZCVFZFc1RVRkJUU3hOUVVONFFrTXNSVUZCVVV3c1JVRkRVazBzUlVGQlRVd3NSVUZEUkUwc1JVRkJTU3hGUVVGSlVpeEZRVUZWVVN4RlFVRkpWaXhGUVVGVFZ5eExRVUZOUkN4SlFVRkxSaXhIUVVGVFJpeEZRVUZWU1N4RlFVRkpMRVZCUVVsU0xFZEJRVlZWTEU5QlFWTXNSVUZGYWtjc1IwRkVRVW9zUjBGQlUxSXNSVUZCVTJFc1NVRkRTQ3hQUVVGWVdpeEZRVUZwUWl4RFFVTnVRaXhKUVVGTExFbEJRVWxoTEVWQlFVc3NSVUZCU1Zvc1JVRkJWVmtzUlVGQlMySXNSVUZCVDFVc1MwRkJUVWNzU1VGQlRVd3NSMEZCVDBnc1JVRkJWVkVzUlVGQlN5eEZRVUZKV2l4SFFVRlZWU3hQUVVGVExFVkJRMnBIU0N4SFFVRlBVaXhGUVVGUFdTeFRRVU5VU2l4SFFVRlBWaXhGUVVGTllTeFBRVUZUTEVWQlJUZENMRTlCUkdWaUxFVkJRVTFuUWl4UFFVRlBMRVZCUVVkUUxFVkJRVkVzUjBGQlMwZ3NSVUZCVTA0c1JVRkJUV2RDTEU5QlFVOU9MRVZCUVUwc1NVRkpkRVZQTEc5Q1FVRnpRaXhUUVVGVFF5eEZRVUZOUXl4RlFVRnBRa01zUjBFMFJIaEVMRTlCY0VOQkxGTkJRVk5ETEVWQlFVbElMRVZCUVUxRExFVkJRV2xDUnl4RlFVRmpSaXhIUVV0b1JDeFJRVUZCTEVsQlNsZEZMRWxCUVRaQ1FTeEhRVUZCUVN4UlFVRmxMRWxCUlRWRFJpeEhRVUYzUXl4bFFVRmtSaXhGUVVGTFN5eE5RVUYxUXl4eFFrRkJaRXdzUlVGQlMwc3NUVUZCZVVRc2JVSkJRV3BDTDBJc1VVRkJVV2RETEU5QlFYRkNhRU1zVVVGQlVXZERMRTFCUVUwc2FVVkJSWHBKTEhGQ1FVRmtUaXhGUVVGTFN5eE5RVUUyUXl4elFrRkJaRXdzUlVGQlMwc3NTMEZETTBNc1RVRkJUeXhKUVVGTlJpeEZRVUZKU0N4RlFVRkxUeXhMUVVGTlRpeEZRVUZwUWtjc1IwRkJaMElzU1VFM1FtcEZMRk5CUVhGQ1NTeEhRVU51UWl4UFFVRlJRU3hIUVVOT0xFbEJRVXNzUzBGRFNDeE5RVUZQTEV0QlExUXNTVUZCU3l4TlFVTklMRTFCUVU4c1MwRkRWQ3hKUVVGTExFdEJRMGdzVFVGQlR5eEpRVU5VTEVsQlFVc3NUVUZEU0N4TlFVRlBMRXRCUTFRc1NVRkJTeXhMUVVOSUxFMUJRVThzU1VGRFZDeEpRVUZMTEUxQlEwZ3NUVUZCVHl4TFFVTlVMRWxCUVVzc1MwRkRTQ3hOUVVGUExFdEJRMVFzU1VGQlN5eE5RVU5JTEUxQlFVOHNTMEZEVkN4UlFVTkZMRTlCUVU5QkxFZEJia0ppTEVOQk5rSnRSbElzUlVGQlMxTXNWVUZCV1N4SlFVRk5UaXhGUVVGSlNDeEZRVUZMVlN4TlFVRlBWQ3hGUVVGcFFrY3NSMEZCWjBJc1NVRkRiRW9zUjBGQmEwSXNiVUpCUVdSS0xFVkJRVXRMTEV0QlFUSkNMRU5CUTNwRExFbEJRVWxOTEVWQlFVOVlMRVZCUVV0WkxGVkJRVlZETEVsQlFVa3NVMEZCVTBNc1IwRkRja01zVDBGQlQxZ3NSVUZCU1Zjc1JVRkJSMklzUlVGQmFVSkhMRXRCUldwRExFOUJRVTlFTEVWQlFVbElMRVZCUVV0bExFOUJRVkZrTEVWQlFXbENSeXhIUVVGblFpeEpRVUZOVHl4RlFVRkxTeXhMUVVGTExFMUJRVkVzU1VGRE5VVXNSMEZCYTBJc2IwSkJRV1JvUWl4RlFVRkxTeXhMUVVOa0xFOUJRVTlNTEVWQlFVdFRMRk5CUVZkT0xFVkJRVWxJTEVWQlFVdHBRaXhUUVVGVmFFSXNSVUZCYVVKSExFZEJRM1JFTEVkQlFXbENMRzlDUVVGaVNpeEZRVUZMU3l4TlFVRTRRa3dzUlVGQlMydENMRk5CUTJwRUxFdEJRVTBzZDBOQlJVUXNSMEZCYVVJc2IwSkJRV0pzUWl4RlFVRkxTeXhOUVVFclFrd3NSVUZCUzJ0Q0xGTkJTVGRETEVOQlFVRXNSMEZCYTBJc1dVRkJaR3hDTEVWQlFVdExMRXRCUTJRc1QwRkJUMHdzUlVGQlMyMUNMRWxCUTFBc1IwRkJhMElzWlVGQlpHNUNMRVZCUVV0TExFdEJRWFZDTEVOQlEzSkRMRWxCUVVsbExFVkJRVXR3UWl4RlFVRkxjVUlzUzBGRFpDeFBRVUZKYWtJc1JVRkJjVUpJTEVWQlFXZENiVUlzUlVGQlNXeENMRWRCUVZVc1MwRkRNME5yUWl4RlFVTlFMRWRCUVd0Q0xEQkNRVUZrY0VJc1JVRkJTMHNzUzBGRFpDeE5RVUZQTEVsQlFVMUdMRVZCUVVsSUxFVkJRVXR6UWl4TFFVRk5ja0lzUlVGQmFVSkhMRWRCUVdkQ0xFMUJRVkZFTEVWQlFVbElMRVZCUVV0MVFpeFhRVUZaZEVJc1JVRkJhVUpITEVkQlFXZENMRTFCUVZGRUxFVkJRVWxJTEVWQlFVdDNRaXhWUVVGWGRrSXNSVUZCYVVKSExFZEJRV2RDTEVsQlEyNU1MRXRCUVd0Q0xHRkJRV1JLTEVWQlFVdExMRXRCUTFJc2RVUkJRWGxFUml4RlFVRkpTQ3hGUVVGTGVVSXNTMEZCU3l4SFFVRkplRUlzUjBGQlFVRXNSMEZGTTBVc2VVTkJRVEpEUkN4RlFVRkxTeXhMUVdSMFJDeEpRVUZKY1VJc1JVRkJTM1pDTEVWQlFVbElMRVZCUVVzeVFpeFBRVUZSTVVJc1IwRkJRVUVzUjBGQk1FSXNTVUZCVFVVc1JVRkJTVWdzUlVGQlN6UkNMRk5CUVZVelFpeEhRVUZCUVN4SFFVTTNSU3hQUVVGSlJ5eEhRVUZ4UXl4VFFVRnlRa29zUlVGQlN6SkNMRTlCUVU5T0xFMUJRWGRETEZWQlFYSkNja0lzUlVGQlN6SkNMRTlCUVU5T0xFMUJRWGxETEZOQlFYSkNja0lzUlVGQlN6SkNMRTlCUVU5T0xFdEJRWGRDY0VJc1JVRkJaMEo1UWl4RlFVRkplRUlzUjBGQlZTeExRVU01U1hkQ0xFVkJjRUpZTEVOQmIwTlhNVUlzUlVGQlRVTXNUMEZCUVVFc1JVRkJORUpETEVsQlJ6TkRNa0lzYTBKQlFXOUNMRk5CUVZORExFVkJRVmszUWl4RlFVRnBRamhDTEVkQlF6VkVMRWxCUVVsRExFVkJRMG9zVVVGQlFTeEpRVUZYUkN4SFFVRnBSQ3hQUVVGcVFrRXNSVUZCZFVJc1EwRkRhRVVzU1VGQlNVVXNSVUZCVVVnc1JVRkJWMGtzVDBGQlQzUkVMRkZCUVZFc2MwTkJRWFZETEdGQlJUZEZMRWRCUVdFc1kwRkVZbkZFTEVWQlFWRkJMRVZCUVUxeVJDeFJRVUZSTEhORFFVRjFReXhUUVVOdVEyOUVMRWRCUVZjc1MwRkJUVVFzVVVGSmVrTXNSMEZHUVVVc1JVRkJVU3hKUVVGTlFTeEZRVUZOY2tRc1VVRkJVU3hoUVVGakxGRkJRVlVzVFVGRGNFUnZSQ3hGUVVGVlJDeEZRVUZoUnl4UFFVRlBReXhOUVVGTkxFbEJRVWxETEU5QlFVOUlMRXRCU1RkRExFMUJSRUV6UkN4UlFVRlJLMFFzU1VGQlNTeHpRa0ZCZFVKTUxFVkJRVk1zVFVGQlQwUXNSVUZCWTBRc1JVRkJXVWNzUlVGQlQwZ3NSMEZET1VVc2FVTkJRVzFEUVN4RlFVRmhMRTlCUVZORExFVkJTWEpGTEVsQlEwVXNTVUZCU1U4c1JVRkJUeXhGUVVOUVF5eEZRVUZUTEVsQlFVMVVMRVZCUVZkc1JDeFJRVUZSTERCRFFVRXlReXhUUVVGVGRVUXNSVUZCVDBzc1JVRkJTVU1zUlVGQlNVTXNSMEZGZGtjc1IwRkJTVUVzUlVGQlNTeE5RVUZQTEV0QlFVOUJMRVZCUTNSQ1NpeEpRVU5CTEVsQlEwbHdReXhGUVVSQmVVTXNSVUZCVlVnc1IwRkJUVU1zUlVGVmNFSXNSMEZTU1ZRc1UwRkJRVUVzU1VGRFUwRXNSVUZCVVUwc1IwRkRha0p3UXl4RlFVRlRPRUlzUlVGQlVVMHNSMEZCVFVvc1QwRkZka0kxUkN4UlFVRlJLMFFzU1VGQlNTeHpRMEZCZFVOTkxFVkJRVk1zUzBGQlRWZ3NSVUZCVXl4TFFVRk5UU3hKUVVscVJrVXNSVUZCU1N4RFFVTk9MRWxCUVVsSkxFVkJRVmx3UlN4TFFVRkxaMFVzUjBGRmNrSXNUVUZCVHl4TFFVUlBla01zYjBKQlFXOUNOa01zUlVGQlZ6TkRMRVZCUVdsQ1F5eEhRVU4wUXl4TFFVVXhRaXhOUVVGUExFdEJRVTlFTEVWQlFXZENNRU1zUlVGQlUzcERMRWRCUVZVc1UwRkRPVU1zU1VGTlRDeFBRVXhCY1VNc1JVRkJVMEVzUlVGQlR6TkVMRkZCUVZFc2FVSkJRV3RDTEUxQlFVMUJMRkZCUVZFc1VVRkJVeXhKUVVWd1JDeEpRVUZVTUVRc1IwRkJlVUlzVlVGQldFTXNSMEZCYVVNc1UwRkJXRUVzUjBGRGRFTnFSU3hSUVVGUmRVVXNUVUZCVFN3eVJFRkJORVJtTEVkQlJYSkZVeXhGUVVOUUxFMUJRVTlQTEVkQlExQXNTMEZCVFN4blEwRkJhME5vUWl4RlFVRmhMRWxCUVUxblFpeEpRVWt6UkVNc2FVSkJRVzFDTEZOQlFWTkRMRVZCUVZjdlF5eEhRVU42UXl4SlFVRkpNa01zUlVGQldYQkZMRXRCUVV0M1JTeEhRVVZ5UWl4UFFVUmpha1FzYjBKQlFXOUNOa01zUlVGQlZ6TkRMRWxCU1M5RFowUXNUMEZCVDBNc1UwRkRUSGhGTEZkQlFWbEJMRmRCUTFwSExGbEJRV0ZCTEZsQlEySnJSU3hwUWtGQmEwSkJMR2xDUVVOc1FteENMR3RDUVVGdFFrRWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmMzSmpMMnB6TDJOdmJuWmxjblJsY2k5MWRHbHNjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKTtmdW5jdGlvbiB3cmFwKGUpe3ZhciB0PXR5cGVvZiBlO2lmKFwib2JqZWN0XCI9PT10JiYoZT9lLmNvbnN0cnVjdG9yPT1EYXRlP3Q9XCJkYXRlXCI6XCJbb2JqZWN0IEFycmF5XVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkmJih0PVwiYXJyYXlcIik6dD1cIm51bGxcIiksXCJhcnJheVwiPT10KXt2YXIgbj1rby5vYnNlcnZhYmxlQXJyYXkoKTtpZighZXx8MD09PWUubGVuZ3RoKXJldHVybiBuO2Zvcih2YXIgbz0wLHI9ZS5sZW5ndGg7bzxyOysrbyluLnB1c2god3JhcChlW29dKSk7cmV0dXJuIG59aWYoXCJvYmplY3RcIj09dCl7dmFyIGE9e307Zm9yKHZhciBpIGluIGUpe3ZhciBsPWVbaV07YVtpXT13cmFwKGwpfXJldHVybiBrby5vYnNlcnZhYmxlKGEpfWlmKFwiZnVuY3Rpb25cIj09dClyZXR1cm4gZTt2YXIgcz1rby5vYnNlcnZhYmxlKCk7cmV0dXJuIHMoZSksc312YXIgX2dldE9wdGlvbnNPYmplY3RLZXlzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLnNwbGl0KFwifFwiKSxuPVtdLG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHI9dFtvXS5zcGxpdChcIj1cIik7bi5wdXNoKHJbMF0udHJpbSgpKX1yZXR1cm4gbn0sX21ha2VDb21wdXRlZD1mdW5jdGlvbihlLHQsbixvLHIsYSl7cmV0dXJuIGtvLmNvbXB1dGVkKHtyZWFkOmZ1bmN0aW9uKCl7dmFyIG49ZSgpO2lmKG51bGw9PT1uKXt2YXIgaT1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKG8pO3JldHVybiB2b2lkIDA9PT1pfHxcImN1c3RvbVwiPT1pP2tvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodCk6YVtpXVtyXX1yZXR1cm4gbn0sd3JpdGU6ZnVuY3Rpb24oaSl7dmFyIGwscz1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKG8pO2lmKGw9dm9pZCAwPT09c3x8XCJjdXN0b21cIj09cz9rby51dGlscy5wZWVrT2JzZXJ2YWJsZSh0KTphW3NdW3JdLG4pZShpPT1sP251bGw6aSk7ZWxzZXt2YXIgdT1rby51dGlscy5wZWVrT2JzZXJ2YWJsZShlKTtpPT1sJiZudWxsPT09dXx8ZShpKX19fSl9LF9uZXh0VmFyaWFudEZ1bmN0aW9uPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIG89ZS51dGlscy51bndyYXBPYnNlcnZhYmxlKHQpLHI9MDtyPG4ubGVuZ3RoJiZlLnV0aWxzLnBlZWtPYnNlcnZhYmxlKG5bcl0pIT1vO3IrKyk7cj09bi5sZW5ndGgmJihjb25zb2xlLndhcm4oXCJEaWRuJ3QgZmluZCBhIHZhcmlhbnQhXCIsdCxvLG4pLHI9bi5sZW5ndGgtMSk7dmFyIGE9cisxO2E9PW4ubGVuZ3RoJiYoYT0wKSx0KGUudXRpbHMucGVla09ic2VydmFibGUoblthXSkpfSxfZ2V0VmFyaWFudHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5fdmFyaWFudDtpZihcIm9iamVjdFwiIT10eXBlb2YgZVt0XXx8dm9pZCAwPT09ZVt0XS5fd2lkZ2V0fHxcInN0cmluZ1wiIT10eXBlb2YgZVt0XS5fb3B0aW9ucyYmXCJib29sZWFuXCIhPT1lW3RdLl93aWRnZXQpdGhyb3cgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgdmFyaWFudCBkZWNsYXJhdGlvblwiLHQsZVt0XSksXCJVbmV4cGVjdGVkIHZhcmlhbnQgZGVjbGFyYXRpb246IGNhbm5vdCBmaW5kIHByb3BlcnR5IFwiK3QrXCIgb3IgaXRzIF9vcHRpb25zIHN0cmluZyBhbmQgaXQgaXMgbm90IGEgYm9vbGVhblwiO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlW3RdLl9vcHRpb25zP19nZXRPcHRpb25zT2JqZWN0S2V5cyhlW3RdLl9vcHRpb25zKTpbITAsITFdfSxfbWFrZUNvbXB1dGVkRnVuY3Rpb249ZnVuY3Rpb24oZSx0LG4sbyxyLGEsaSl7aWYodm9pZCAwPT09ZSl7aWYodm9pZCAwPT09by51dGlscy51bndyYXBPYnNlcnZhYmxlKGkpLnR5cGUpdGhyb3cgY29uc29sZS5sb2coXCJUT0RPIEVSUk9SIEZvdW5kIGEgbm9uLXR5cGVkIGRlZiBcIixlLGkpLFwiRm91bmQgYSBub24tdHlwZWQgZGVmIFwiK2U7dmFyIGw9by51dGlscy51bndyYXBPYnNlcnZhYmxlKG8udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpKS50eXBlKTtcIm9iamVjdFwiIT10eXBlb2YoZT10W2xdKSYmY29uc29sZS5sb2coXCJUT0RPIEVSUk9SIEZvdW5kIGEgbm9uLW9iamVjdCBkZWYgXCIsZSxcImZvclwiLGwpfXZvaWQgMD09PXImJnZvaWQgMCE9PWEmJmEmJihyPWkpO3ZhciBzPVwiJHJvb3QuY29udGVudCgpLlwiLHU9ZS5fZ2xvYmFsU3R5bGVzO2lmKHZvaWQgMCE9PXUpZm9yKHZhciBwIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShwKSl7dmFyIGIsYyx2LGQ9XCIkcm9vdC5jb250ZW50KCkudGhlbWUoKS5zY2hlbWVcIjtpZih1W3BdLnN1YnN0cigwLHMubGVuZ3RoKSE9cyl0aHJvd1wiVU5FWFBFQ1RFRCBnbG9iYWxTdHlsZSBwYXRoIChcIit1W3BdK1wiKSBvdXRzaWRlIHNlbGZQYXRoIChcIitzK1wiKVwiO3Y9dVtwXS5zdWJzdHIocy5sZW5ndGgpLGM9cixkLnN1YnN0cigwLHMubGVuZ3RoKT09cz9iPWQuc3Vic3RyKHMubGVuZ3RoKTooY29uc29sZS5sb2coXCJJUyBUSElTIENPUlJFQ1Q/XCIsZCxzKSxiPWQpO2Zvcih2YXIgZj1jLGg9di5zcGxpdChcIigpLlwiKSxfPVwiXCIsZz0hMCxrPTA7azxoLmxlbmd0aDtrKyspYz1vLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYylbaFtrXV0sZz9cInRoZW1lXCI9PWhba10mJihnPSExKTooXy5sZW5ndGg+MCYmKF8rPVwiLlwiKSxfKz1oW2tdKTtmb3IodmFyIHc9Yi5zcGxpdChcIigpLlwiKSxtPTA7bTx3Lmxlbmd0aDttKyspZj1vLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZilbd1ttXV07Zm9yKHZhciBPPXAuc3BsaXQoXCIuXCIpLHk9aSxSPTA7UjxPLmxlbmd0aDtSKyspeT1vLnV0aWxzLnVud3JhcE9ic2VydmFibGUoeSlbT1tSXV07aWYoIW8uaXNPYnNlcnZhYmxlKHkpKXRocm93XCJVbmV4cGVjdGVkIG5vbiBvYnNlcnZhYmxlIHRhcmdldCBcIitwK1wiL1wiK187eS5fZGVmYXVsdENvbXB1dGVkPV9tYWtlQ29tcHV0ZWQoeSxjLCEwLGYsXyxuKX1pZih2b2lkIDAhPT1lLl92YXJpYW50KXtmb3IodmFyIEY9ZS5fdmFyaWFudC5zcGxpdChcIi5cIiksUz1pLGo9by51dGlscy51bndyYXBPYnNlcnZhYmxlKGkpLEM9MDtDPEYubGVuZ3RoO0MrKylTPW8udXRpbHMudW53cmFwT2JzZXJ2YWJsZShTKVtGW0NdXTtpZih2b2lkIDAhPT1TLl9kZWZhdWx0Q29tcHV0ZWQmJihjb25zb2xlLmxvZyhcIkZvdW5kIHZhcmlhbnQgb24gYSBzdHlsZSBwcm9wZXJ0eTogYmV3YXJlIHZhcmlhbnRzIHNob3VsZCBiZSBvbmx5IHVzZWQgb24gY29udGVudCBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBtYXRjaCB0aGUgdGhlbWUgZmFsbGJhY2sgYmVoYXZpb3VyXCIsZS5fdmFyaWFudCksUz1TLl9kZWZhdWx0Q29tcHV0ZWQpLHZvaWQgMD09PVMpdGhyb3cgY29uc29sZS5sb2coXCJFUlJPUiBsb29raW5nIGZvciB2YXJpYW50IHRhcmdldFwiLGUuX3ZhcmlhbnQsaSksXCJFUlJPUiBsb29raW5nIGZvciB2YXJpYW50IHRhcmdldCBcIitlLl92YXJpYW50O2ouX25leHRWYXJpYW50PV9uZXh0VmFyaWFudEZ1bmN0aW9uLmJpbmQoUyxvLFMsX2dldFZhcmlhbnRzKGUpKX1mb3IodmFyIHggaW4gZSlpZihlLmhhc093blByb3BlcnR5KHgpKXt2YXIgUD1lW3hdO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBQJiZudWxsIT09UCYmdm9pZCAwIT09UC5fY29udGV4dCYmXCJibG9ja1wiPT1QLl9jb250ZXh0KXt2YXIgQj1yW3hdKCksRT1fbWFrZUNvbXB1dGVkRnVuY3Rpb24odFt4XSx0LG4sbyxyLGEsQik7aVt4XShFKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBQJiZudWxsIT09UCYmXCJibG9ja3NcIj09UC50eXBlKXtmb3IodmFyIEQsSSxULEE9clt4XSgpLFY9QS5ibG9ja3MoKSxVPTA7VTxWLmxlbmd0aDtVKyspRD1vLnV0aWxzLnVud3JhcE9ic2VydmFibGUoVltVXSksST1vLnV0aWxzLnVud3JhcE9ic2VydmFibGUoRC50eXBlKSxUPV9tYWtlQ29tcHV0ZWRGdW5jdGlvbih0W0ldLHQsbixvLHIsYSxEKSxWW1VdKFQpO3ZhciBXPUEuYmxvY2tzO19hdWdtZW50QmxvY2tzT2JzZXJ2YWJsZShXLF9ibG9ja0luc3RydW1lbnRGdW5jdGlvbi5iaW5kKEEsdm9pZCAwLHQsbixvLHZvaWQgMCxyLGEpKSxyW3hdLl93cmFwPV9tYWtlQmxvY2tzV3JhcC5iaW5kKHJbeF0sVy5faW5zdHJ1bWVudEJsb2NrKSxyW3hdLl91bndyYXA9X3Vud3JhcC5iaW5kKHJbeF0pfX1yZXR1cm4gaX0sX2F1Z21lbnRCbG9ja3NPYnNlcnZhYmxlPWZ1bmN0aW9uKGUsdCl7ZS5faW5zdHJ1bWVudEJsb2NrPXQsdm9pZCAwPT09ZS5vcmlnUHVzaCYmKGUub3JpZ1B1c2g9ZS5wdXNoLGUucHVzaD1fbWFrZVB1c2guYmluZChlKSxlLm9yaWdTcGxpY2U9ZS5zcGxpY2UsZS5zcGxpY2U9X21ha2VTcGxpY2UuYmluZChlKSl9LF9tYWtlQmxvY2tzV3JhcD1mdW5jdGlvbihlLHQpe3ZhciBuPWtvLnRvSlModCksbz1uLmJsb2NrcztuLmJsb2Nrcz1bXTt2YXIgcj13cmFwKG4pKCk7X2F1Z21lbnRCbG9ja3NPYnNlcnZhYmxlKHIuYmxvY2tzLGUpO2Zvcih2YXIgYT0wO2E8by5sZW5ndGg7YSsrKXt2YXIgaT1rby50b0pTKG9bYV0pO2kuaWQ9XCJibG9ja19cIithLHIuYmxvY2tzLnB1c2goaSl9dGhpcyhyKX0sX21ha2VQdXNoPWZ1bmN0aW9uKCl7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXRocm93XCJBcnJheSBwdXNoIHdpdGggbXVsdGlwbGUgYXJndW1lbnRzIG5vdCBpbXBsZW1lbnRlZFwiO2lmKGFyZ3VtZW50cy5sZW5ndGg+MCYma28uaXNPYnNlcnZhYmxlKGFyZ3VtZW50c1swXSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0uX3Vud3JhcD9hcmd1bWVudHNbMF09YXJndW1lbnRzWzBdLl91bndyYXAoKTpjb25zb2xlLmxvZyhcIldBUk46IHB1c2hpbmcgb2JzZXJ2YWJsZSB3aXRoIG5vIF91bndyYXAgZnVuY3Rpb24gKFRPRE8gcmVtb3ZlIG1lLCBleHBlY3RlZCBjb25kaXRpb24pXCIpKSxrby5pc09ic2VydmFibGUoYXJndW1lbnRzWzBdKSlyZXR1cm4gdGhpcy5vcmlnUHVzaC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGU9dGhpcy5faW5zdHJ1bWVudEJsb2NrKGFyZ3VtZW50c1swXSk7cmV0dXJuIHRoaXMub3JpZ1B1c2guYXBwbHkodGhpcyxbZV0pfSxfbWFrZVNwbGljZT1mdW5jdGlvbigpe2lmKGFyZ3VtZW50cy5sZW5ndGg+Myl0aHJvd1wiQXJyYXkgc3BsaWNlIHdpdGggbXVsdGlwbGUgb2JqZWN0cyBub3QgaW1wbGVtZW50ZWRcIjtpZihhcmd1bWVudHMubGVuZ3RoPjImJmtvLmlzT2JzZXJ2YWJsZShhcmd1bWVudHNbMl0pJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgYXJndW1lbnRzWzJdLl91bndyYXA/YXJndW1lbnRzWzJdPWFyZ3VtZW50c1syXS5fdW53cmFwKCk6Y29uc29sZS5sb2coXCJXQVJOOiBzcGxpY2luZyBvYnNlcnZhYmxlIHdpdGggbm8gX3Vud3JhcCBmdW5jdGlvbiAoVE9ETyByZW1vdmUgbWUsIGV4cGVjdGVkIGNvbmRpdGlvbilcIikpLGFyZ3VtZW50cy5sZW5ndGg+MiYmIWtvLmlzT2JzZXJ2YWJsZShhcmd1bWVudHNbMl0pKXt2YXIgZT10aGlzLl9pbnN0cnVtZW50QmxvY2soYXJndW1lbnRzWzJdKTtyZXR1cm4gdGhpcy5vcmlnU3BsaWNlLmFwcGx5KHRoaXMsW2FyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sZV0pfXJldHVybiB0aGlzLm9yaWdTcGxpY2UuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxfYmxvY2tJbnN0cnVtZW50RnVuY3Rpb249ZnVuY3Rpb24oZSx0LG4sbyxyLGEsaSxsKXt2b2lkIDA9PT1yJiYocj1sKTt2YXIgcz13cmFwKHIpO3JldHVybiBzKF9tYWtlQ29tcHV0ZWRGdW5jdGlvbihlLHQsbixvLGEsaSxzKCkpKSxzLl91bndyYXA9X3Vud3JhcC5iaW5kKHMpLHN9LF93cmFwPWZ1bmN0aW9uKGUsdCl7dGhpcyhrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGUoa28sdCx2b2lkIDAsITApKSl9LF91bndyYXA9ZnVuY3Rpb24oKXtyZXR1cm4ga28udG9KUyh0aGlzKX0sX21vZGVsSW5zdHJ1bWVudD1mdW5jdGlvbihlLHQsbil7dmFyIG89X2Jsb2NrSW5zdHJ1bWVudEZ1bmN0aW9uLmJpbmQodm9pZCAwLHQsbixuLnRoZW1lcykscj1vKGtvLGUsdm9pZCAwLCEwKTtyZXR1cm4gci5fd3JhcD1fd3JhcC5iaW5kKHIsbyksci5fdW53cmFwPV91bndyYXAuYmluZChyKSxyfTttb2R1bGUuZXhwb3J0cz1fbW9kZWxJbnN0cnVtZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5keVlYQndaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lhMjhpTENKM2FXNWtiM2NpTENKbmJHOWlZV3dpTENKamIyNXpiMnhsSWl3aWNtVnhkV2x5WlNJc0luZHlZWEFpTENKMklpd2lkSGx3WlU5bWRpSXNJbU52Ym5OMGNuVmpkRzl5SWl3aVJHRjBaU0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0luUnZVM1J5YVc1bklpd2lZMkZzYkNJc0luSWlMQ0p2WW5ObGNuWmhZbXhsUVhKeVlYa2lMQ0pzWlc1bmRHZ2lMQ0pwSWl3aWJDSXNJbkIxYzJnaUxDSjBJaXdpYXlJc0luZDJJaXdpYjJKelpYSjJZV0pzWlNJc0luUXlJaXdpWDJkbGRFOXdkR2x2Ym5OUFltcGxZM1JMWlhseklpd2liM0IwYVc5dWN5SXNJbTl3ZEdsdmJuTkRiM1Z3YkdWeklpd2ljM0JzYVhRaUxDSnZjSFJ6SWl3aWIzQjBJaXdpZEhKcGJTSXNJbDl0WVd0bFEyOXRjSFYwWldRaUxDSjBZWEpuWlhRaUxDSmtaV1lpTENKdWRXeHNTV1pGY1hWaGJDSXNJbk5qYUdWdFpWTmxiR1ZqZEc5eUlpd2lkR2hsYldWUVlYUm9JaXdpZEdobGJXVnpJaXdpWTI5dGNIVjBaV1FpTENKeVpXRmtJaXdpZG1Gc0lpd2ljMk5vWlcxbElpd2lkWFJwYkhNaUxDSjFibmR5WVhCUFluTmxjblpoWW14bElpd2lkM0pwZEdVaUxDSjJZV3gxWlNJc0ltUmxabFpoYkNJc0luQmxaV3RQWW5ObGNuWmhZbXhsSWl3aVkzVnljbVZ1ZENJc0lsOXVaWGgwVm1GeWFXRnVkRVoxYm1OMGFXOXVJaXdpY0hKdmNDSXNJblpoY21saGJuUnpJaXdpWTNWeWNtVnVkRlpoYkhWbElpd2lkMkZ5YmlJc0ltNWxlSFJXWVhKcFlXNTBJaXdpWDJkbGRGWmhjbWxoYm5Seklpd2lkbUZ5YVdGdWRGQnliM0FpTENKZmRtRnlhV0Z1ZENJc0lsOTNhV1JuWlhRaUxDSmZiM0IwYVc5dWN5SXNJbVZ5Y205eUlpd2lYMjFoYTJWRGIyMXdkWFJsWkVaMWJtTjBhVzl1SWl3aVpHVm1jeUlzSW5Sb2JYTWlMQ0pqYjI1MFpXNTBUVzlrWld3aUxDSnBjME52Ym5SbGJuUWlMQ0owZVhCbElpd2liRzluSWl3aWMyVnNabEJoZEdnaUxDSndjQ0lzSWw5bmJHOWlZV3hUZEhsc1pYTWlMQ0p3SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKelkyaGxiV1ZRWVhSb0lpd2lkbTBpTENKd1lYUm9JaXdpYzJOb1pXMWxVR0YwYUU5eWFXY2lMQ0p6ZFdKemRISWlMQ0p3WVhSb1VHRnlkSE1pTENKemEybHdJaXdpYzJOb1pXMWxVR0Z5ZEhNaUxDSnBNeUlzSW5SUVlYSjBjeUlzSW1reUlpd2lhWE5QWW5ObGNuWmhZbXhsSWl3aVgyUmxabUYxYkhSRGIyMXdkWFJsWkNJc0luQlFZWEowY3lJc0luQlVZWEpuWlhRaUxDSndVR0Z5Wlc1MElpd2lhVFFpTENKZmJtVjRkRlpoY21saGJuUWlMQ0ppYVc1a0lpd2ljSEp2Y0RJaUxDSmZZMjl1ZEdWNGRDSXNJbkJ5YjNCV2JTSXNJbTVsZDFadElpd2liMnhrUW14dlkyc2lMQ0ppYkc5amExUjVjR1VpTENKdVpYZENiRzlqYXlJc0ltMWhhVzVXYlNJc0ltSnNiMk5yYzFadElpd2lZbXh2WTJ0eklpd2lhV0lpTENKaWJHOWphM05QWW5NaUxDSmZZWFZuYldWdWRFSnNiMk5yYzA5aWMyVnlkbUZpYkdVaUxDSmZZbXh2WTJ0SmJuTjBjblZ0Wlc1MFJuVnVZM1JwYjI0aUxDSmZkM0poY0NJc0lsOXRZV3RsUW14dlkydHpWM0poY0NJc0lsOXBibk4wY25WdFpXNTBRbXh2WTJzaUxDSmZkVzUzY21Gd0lpd2lhVzV6ZEhKMWJXVnVkQ0lzSW05eWFXZFFkWE5vSWl3aVgyMWhhMlZRZFhOb0lpd2liM0pwWjFOd2JHbGpaU0lzSW5Od2JHbGpaU0lzSWw5dFlXdGxVM0JzYVdObElpd2lhVzV3ZFhSTmIyUmxiQ0lzSW0xdlpHVnNJaXdpZEc5S1V5SXNJbWx1Y0hWMElpd2ljbVZ6SWl3aWIySnFJaXdpYVdRaUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2lZWEJ3YkhraUxDSnBibk4wY25WdFpXNTBaV1FpTENKcmJtOWphMjkxZENJc0luTmxiR1lpTENKdGIyUmxiRU52Ym5SbGJuUWlMQ0p6Wld4bU1pSXNJblZ1ZDNKaGNIQmxaQ0lzSW5WdVpHVm1hVzVsWkNJc0lsOXRiMlJsYkVsdWMzUnlkVzFsYm5RaUxDSnRiMlJsYkVSbFppSXNJbDlwYm5OMGNuVnRaVzUwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRk5RU3hKUVVGSlFTeEhRVUYzUWl4dlFrRkJXRU1zVDBGQmVVSkJMRTlCUVZkRUxFZEJRWE5DTEc5Q1FVRllSU3hQUVVGNVFrRXNUMEZCVjBZc1IwRkJTU3hMUVVOd1IwY3NVVUZCVlVNc1VVRkJVU3h6UWtGRmRFSXNVMEZCVTBNc1MwRkJTME1zUjBGRFdpeEpRVUZKUXl4VFFVRnBRa1FzUlVGVmNrSXNSMEZVWjBJc1YwRkJXa01zU1VGRFJVUXNSVUZEUlVFc1JVRkJSVVVzWVVGQlpVTXNTMEZCVFVZc1JVRkJWU3hQUVVOVExHdENRVUZ5UTBjc1QwRkJUME1zVlVGQlZVTXNVMEZCVTBNc1MwRkJTMUFzUzBGQmQwSkRMRVZCUVZVc1UwRkZNVVZCTEVWQlFWVXNVVUZKUXl4VFFVRllRU3hGUVVGdlFpeERRVVYwUWl4SlFVRkpUeXhGUVVGSlpDeEhRVUZIWlN4clFrRkRXQ3hKUVVGTFZDeEhRVUZyUWl4SlFVRmlRU3hGUVVGRlZTeFBRVUZqTEU5QlFVOUdMRVZCUTJwRExFbEJRVXNzU1VGQlNVY3NSVUZCU1N4RlFVRkhReXhGUVVGSldpeEZRVUZGVlN4UFFVRlJReXhGUVVGSlF5eEpRVUZMUkN4RlFVRkhTQ3hGUVVGRlN5eExRVUZMWkN4TFFVRkxReXhGUVVGRlZ5eExRVU40UkN4UFFVRlBTQ3hGUVVWR0xFZEJRV1VzVlVGQldGQXNSVUZCY1VJc1EwRkZPVUlzU1VGQlNXRXNTMEZEU2l4SlFVRkxMRWxCUVVsRExFdEJRVXRtTEVWQlFVY3NRMEZEWml4SlFVRkpaMElzUlVGQlMyaENMRVZCUVVWbExFZEJRMWhFTEVWQlFVVkRMRWRCUVV0b1FpeExRVUZMYVVJc1IwRkZaQ3hQUVVGUGRFSXNSMEZCUjNWQ0xGZEJRVmRJTEVkQlJXaENMRWRCUVdVc1dVRkJXR0lzUlVGRlZDeFBRVUZQUkN4RlFVbFFMRWxCUVVsclFpeEZRVUZMZUVJc1IwRkJSM1ZDTEdGQlJWb3NUMEZFUVVNc1JVRkJSMnhDTEVkQlEwbHJRaXhGUVU5WUxFbEJRVWxETEhOQ1FVRjNRaXhUUVVGVFF5eEhRVWR1UXl4SlFVWkJMRWxCUVVsRExFVkJRV2xDUkN4RlFVRlJSU3hOUVVGTkxFdEJReTlDUXl4TFFVTkxXaXhGUVVGSkxFVkJRVWRCTEVWQlFVbFZMRVZCUVdWWUxFOUJRVkZETEVsQlFVc3NRMEZET1VNc1NVRkJTV0VzUlVGQlRVZ3NSVUZCWlZZc1IwRkJSMWNzVFVGQlRTeExRVU5zUTBNc1JVRkJTMVlzUzBGQlMxY3NSVUZCU1N4SFFVRkhReXhSUVVWdVFpeFBRVUZQUml4SFFVbE1SeXhqUVVGblFpeFRRVUZUUXl4RlFVRlJReXhGUVVGTFF5eEZRVUZoUXl4RlFVRm5Ra01zUlVGQlYwTXNSMEZyUTJoR0xFOUJha05WZEVNc1IwRkJSM1ZETEZWQlExaERMRXRCUVZFc1YwRkRUaXhKUVVGSlF5eEZRVUZOVWl4SlFVTldMRWRCUVZrc1QwRkJVbEVzUlVGQll5eERRVU5vUWl4SlFVRkpReXhGUVVGVE1VTXNSMEZCUnpKRExFMUJRVTFETEdsQ1FVRnBRbElzUjBGRGRrTXNXVUZCUVN4SlFVRlhUU3hIUVVGdFF5eFZRVUZXUVN4RlFVTXpRakZETEVkQlFVY3lReXhOUVVGTlF5eHBRa0ZCYVVKV0xFZEJSVEZDU1N4RlFVRlBTU3hIUVVGUlRDeEhRVWQ0UWl4UFFVRlBTU3hIUVVkWVNTeE5RVUZUTEZOQlFWTkRMRWRCUTJoQ0xFbEJRMGxETEVWQlJFRk1MRVZCUVZNeFF5eEhRVUZITWtNc1RVRkJUVU1zYVVKQlFXbENVaXhIUVZGMlF5eEhRVXhGVnl4UFFVRkJRU3hKUVVSVFRDeEhRVUZ0UXl4VlFVRldRU3hGUVVONlFqRkRMRWRCUVVjeVF5eE5RVUZOU3l4bFFVRmxaQ3hIUVVWNFFra3NSVUZCVDBrc1IwRkJVVXdzUjBGSGNFSkdMRVZCUTJsQ1JpeEZRVUZxUW1Fc1IwRkJVME1zUlVGQlpTeExRVU5vUWtRc1QwRkRVQ3hEUVVOTUxFbEJRVWxITEVWQlFWVnFSQ3hIUVVGSE1rTXNUVUZCVFVzc1pVRkJaV1lzUjBGRGJFTmhMRWRCUVZORExFZEJRWE5DTEU5QlFWcEZMRWRCUVd0Q2FFSXNSVUZCVDJFc1VVRlJjRVJKTEhGQ1FVRjFRaXhUUVVGVGJFUXNSVUZCU1cxRUxFVkJRVTFETEVkQlNUVkRMRWxCU0VFc1NVRkJTVU1zUlVGQlpYSkVMRVZCUVVjeVF5eE5RVUZOUXl4cFFrRkJhVUpQTEVkQlIzQkRiRU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpiVU1zUlVGQlUzQkRMRkZCUTFwb1FpeEZRVUZITWtNc1RVRkJUVXNzWlVGQlpVa3NSVUZCVTI1RExFdEJRelZDYjBNc1JVRkdaWEJETEV0QlMycERRU3hIUVVGTGJVTXNSVUZCVTNCRExGTkJRMmhDWWl4UlFVRlJiVVFzUzBGQlN5eDVRa0ZCTUVKSUxFVkJRVTFGTEVWQlFXTkVMRWRCUXpORWJrTXNSVUZCU1cxRExFVkJRVk53UXl4UFFVRlRMRWRCUjNoQ0xFbEJRVWwxUXl4RlFVRmpkRU1zUlVGQlNTeEZRVU5zUW5ORExFZEJRV1ZJTEVWQlFWTndReXhUUVVGUmRVTXNSVUZCWXl4SFFVZHNSRW9zUlVGR1owSnVSQ3hGUVVGSE1rTXNUVUZCVFVzc1pVRkJaVWtzUlVGQlUwY3NUVUZMTDBORExHRkJRV1VzVTBGQlUzUkNMRWRCUXpGQ0xFbEJRVWwxUWl4RlFVRmpka0lzUlVGQlNYZENMRk5CUlhSQ0xFZEJRV2RETEdsQ1FVRnlRbmhDTEVWQlFVbDFRaXhUUVVGQlFTeEpRVUZ2UTNaQ0xFVkJRVWwxUWl4SFFVRmhSU3hUUVVGcFJTeHBRa0ZCT1VKNlFpeEZRVUZKZFVJc1IwRkJZVWNzVlVGQmMwUXNXVUZCTjBJeFFpeEZRVUZKZFVJc1IwRkJZVVVzVVVGRmFFc3NUVUZFUVhoRUxGRkJRVkV3UkN4TlFVRk5MR2xEUVVGclEwb3NSVUZCWVhaQ0xFVkJRVWwxUWl4SlFVTXpSQ3gzUkVGQk1FUkJMRVZCUVdNc2EwUkJUMmhHTEUxQlRIZERMR2xDUVVFM1FuWkNMRVZCUVVsMVFpeEhRVUZoUnl4VFFVTlVia01zYzBKQlFYTkNVeXhGUVVGSmRVSXNSMEZCWVVjc1dVRkJRVUVzUjBGRmRFTXNTVUZMYkVKRkxITkNRVUYzUWl4VFFVRlROVUlzUlVGQlN6WkNMRVZCUVUxRExFVkJRVTFvUlN4RlFVRkphVVVzUlVGQlkwTXNSVUZCVnpsRExFZEJRMnBHTEZGQlFVRXNTVUZCVjJNc1JVRkJiMElzUTBGRE4wSXNVVUZCUVN4SlFVRlhiRU1zUlVGQlJ6SkRMRTFCUVUxRExHbENRVUZwUW5oQ0xFZEJRVWNyUXl4TFFVVjBReXhOUVVSQmFFVXNVVUZCVVdsRkxFbEJRVWtzYjBOQlFYRkRiRU1zUlVGQlMyUXNSMEZEYUVRc2VVSkJRVEpDWXl4RlFVVnVReXhKUVVGSmFVTXNSVUZCVDI1RkxFVkJRVWN5UXl4TlFVRk5ReXhwUWtGQmFVSTFReXhGUVVGSE1rTXNUVUZCVFVNc2FVSkJRV2xDZUVJc1IwRkJSeXRETEUxQlJTOURMR2xDUVVSdVFtcERMRVZCUVUwMlFpeEZRVUZMU1N4TFFVTnJRbWhGTEZGQlFWRnBSU3hKUVVGSkxIRkRRVUZ6UTJ4RExFVkJRVXNzVFVGQlQybERMRkZCUVVGQkxFbEJSMnhHUml4UlFVRkJRU3hKUVVGelEwTXNSMEZCTkVKQkxFbEJRek5GUkN4RlFVRmxOME1zUjBGSGFrSXNTVUZCU1dsRUxFVkJRVmNzYlVKQlJWaERMRVZCUVV0d1F5eEZRVUZKY1VNc1kwRkRZaXhSUVVGQkxFbEJRVmRFTEVWQlExUXNTVUZCU3l4SlFVRkpSU3hMUVVGTFJpeEZRVU5hTEVkQlFVbEJMRVZCUVVkSExHVkJRV1ZFTEVkQlFVa3NRMEZEZUVJc1NVRkRTVVVzUlVGQldVTXNSVUZCU1VNc1JVRkVhRUpETEVWQlFXbENMR2xEUVVkeVFpeEhRVUZKVUN4RlFVRkhSU3hIUVVGSFRTeFBRVUZQTEVWQlFVZFVMRVZCUVZOeVJDeFRRVUZYY1VRc1JVRkpkRU1zUzBGQlRTeG5RMEZCYTBORExFVkJRVWRGTEVkQlFVc3NkVUpCUVhsQ1NDeEZRVUZYTEVsQlNIQkdUeXhGUVVGUFRpeEZRVUZIUlN4SFFVRkhUU3hQUVVGUFZDeEZRVUZUY2tRc1VVRkROMEl5UkN4RlFVRkxWaXhGUVVsSVdTeEZRVUZsUXl4UFFVRlBMRVZCUVVkVUxFVkJRVk55UkN4VFFVRlhjVVFzUlVGREwwTkxMRVZCUVdGSExFVkJRV1ZETEU5QlFVOVVMRVZCUVZOeVJDeFRRVVUxUTJJc1VVRkJVV2xGTEVsQlFVa3NiVUpCUVc5Q1V5eEZRVUZuUWxJc1IwRkRhRVJMTEVWQlFXRkhMRWRCVVdZc1NVRk1RU3hKUVVGSmVrTXNSVUZCYVVKMVF5eEZRVVZxUWtrc1JVRkJXVWdzUlVGQlMyaEVMRTFCUVUwc1QwRkRka0pUTEVWQlFWa3NSMEZEV2pKRExFZEJRVUZCTEVWQlEwc3ZSQ3hGUVVGSkxFVkJRVWRCTEVWQlFVazRSQ3hGUVVGVkwwUXNUMEZCVVVNc1NVRkRjRU13UkN4RlFVRkxNMFVzUlVGQlJ6SkRMRTFCUVUxRExHbENRVUZwUWl0Q0xFZEJRVWxKTEVWQlFWVTVSQ3hKUVVWNlF5dEVMRVZCUTJ0Q0xGTkJRV2hDUkN4RlFVRlZPVVFzUzBGQlpTdEVMRWRCUVVGQkxFbEJSWHBDTTBNc1JVRkJWWEpDTEU5QlFWTXNTVUZCUjNGQ0xFZEJRV0VzUzBGRGRrTkJMRWRCUVdFd1F5eEZRVUZWT1VRc1NVRkxNMElzU1VGRVFTeEpRVUZKWjBVc1JVRkJZMUFzUlVGQlZ6bERMRTFCUVUwc1QwRkRNVUp6UkN4RlFVRkxMRVZCUVVkQkxFVkJRVXRFTEVWQlFWbHFSU3hQUVVGUmEwVXNTVUZEZUVNNVF5eEZRVUZwUW5CRExFVkJRVWN5UXl4TlFVRk5ReXhwUWtGQmFVSlNMRWRCUVdkQ05rTXNSVUZCV1VNc1NVRk5la1VzU1VGSVFTeEpRVU5KUXl4RlFVRlRXQ3hGUVVGRk5VTXNUVUZCVFN4TFFVTnFRa3NzUlVGQlUySXNSVUZEU21kRkxFVkJRVXNzUlVGQlIwRXNSVUZCUzBRc1JVRkJUMjVGTEU5QlFWRnZSU3hKUVVOdVEyNUVMRVZCUVZOcVF5eEZRVUZITWtNc1RVRkJUVU1zYVVKQlFXbENXQ3hIUVVGUmEwUXNSVUZCVDBNc1NVRkhjRVFzU1VGQlMzQkdMRVZCUVVkeFJpeGhRVUZoY0VRc1IwRkJVeXhMUVVGTkxHOURRVUZ6UTNWRExFVkJRVWtzU1VGQlRXNURMRVZCUlhCR1NpeEZRVUZQY1VRc2FVSkJRVzFDZEVRc1kwRkJZME1zUlVGQlVUQkRMRWRCUVVGQkxFVkJRV2xDZGtNc1JVRkJaMEpETEVWQlFWY3lRaXhIUVVkc1J5eFJRVUZCTEVsQlFWYzVRaXhGUVVGSmQwSXNVMEZCZVVJc1EwRkxkRU1zU1VGS1FTeEpRVUZKTmtJc1JVRkJVM0pFTEVWQlFVbDNRaXhUUVVGVE9VSXNUVUZCVFN4TFFVVTFRalJFTEVWQlFWVndSU3hGUVVOV2NVVXNSVUZCVlhwR0xFVkJRVWN5UXl4TlFVRk5ReXhwUWtGQmFVSjRRaXhIUVVNdlFuTkZMRVZCUVVzc1JVRkJSMEVzUlVGQlMwZ3NSVUZCVDNaRkxFOUJRVkV3UlN4SlFVTnVRMFlzUlVGQlZYaEdMRVZCUVVjeVF5eE5RVUZOUXl4cFFrRkJhVUkwUXl4SFFVRlRSQ3hGUVVGUFJ5eEpRVTEwUkN4UlFVRkJMRWxCU2xkR0xFVkJRVkZHTEcxQ1FVTnFRbTVHTEZGQlFWRnBSU3hKUVVGSkxIRktRVUZ6U214RExFVkJRVWwzUWl4VlFVTjBTemhDTEVWQlFWVkJMRVZCUVZGR0xIVkNRVUZCUVN4SlFVVlVSU3hGUVVWVUxFMUJSRUZ5Uml4UlFVRlJhVVVzU1VGQlNTeHRRMEZCYjBOc1F5eEZRVUZKZDBJc1UwRkJWWFJETEVkQlEzaEVMRzlEUVVGelEyTXNSVUZCU1hkQ0xGTkJSV3hFSzBJc1JVRkJVVVVzWVVGQlpYcERMSEZDUVVGeFFqQkRMRXRCUVV0S0xFVkJRVk40Uml4RlFVRkpkMFlzUlVGQlUyaERMR0ZCUVdGMFFpeEpRVWQwUml4SlFVRkxMRWxCUVVreVJDeExRVUZUTTBRc1JVRkRhRUlzUjBGQlNVRXNSVUZCU1hWRExHVkJRV1Z2UWl4SFFVRlJMRU5CUXpkQ0xFbEJRVWx3UkN4RlFVRk5VQ3hGUVVGSk1rUXNSMEZEWkN4SFFVRnJRaXhwUWtGQlVIQkVMRWRCUVRKQ0xFOUJRVkpCTEZGQlFVRkJMRWxCUVhWQ1FTeEZRVUZKY1VRc1ZVRkJNa01zVTBGQmFFSnlSQ3hGUVVGSmNVUXNVMEZCY1VJc1EwRkRNMGNzU1VGQlNVTXNSVUZCVXpsQ0xFVkJRV0UwUWl4TFFVTjBRa2NzUlVGQlVXeERMSE5DUVVGelFrTXNSVUZCU3poQ0xFZEJRVkU1UWl4RlFVRk5ReXhGUVVGTmFFVXNSVUZCU1dsRkxFVkJRV05ETEVWQlFWYzJRaXhIUVVONFJqTkZMRVZCUVVWNVJTeEhRVUZQUnl4UlFVTktMRWRCUVd0Q0xHbENRVUZRZGtRc1IwRkJNa0lzVDBGQlVrRXNSMEZCTkVJc1ZVRkJXa0VzUlVGQlNUQkNMRXRCUVd0Q0xFTkJTWHBGTEVsQlNFRXNTVUZGU1RoQ0xFVkJRVlZETEVWQlFWZERMRVZCUm5KQ1F5eEZRVUZUYmtNc1JVRkJZVFJDTEV0QlEzUkNVU3hGUVVGWFJDeEZRVUZQUlN4VFFVVmlReXhGUVVGTExFVkJRVWRCTEVWQlFVdEdMRVZCUVZOeVJpeFBRVUZSZFVZc1NVRkRja05PTEVWQlFWZHFSeXhGUVVGSE1rTXNUVUZCVFVNc2FVSkJRV2xDZVVRc1JVRkJVMFVzU1VGRE9VTk1MRVZCUVZsc1J5eEZRVUZITWtNc1RVRkJUVU1zYVVKQlFXbENjVVFzUlVGQlV6bENMRTFCUXk5RFowTXNSVUZCVjNKRExITkNRVUZ6UWtNc1JVRkJTMjFETEVkQlFWbHVReXhGUVVGTlF5eEZRVUZOYUVVc1JVRkJTV2xGTEVWQlFXTkRMRVZCUVZjclFpeEhRVU16Umtrc1JVRkJVMFVzUjBGQlNVb3NSMEZIWml4SlFVRkpTeXhGUVVGWlNpeEZRVUZQUlN4UFFVVjJRa2NzZVVKQlFYbENSQ3hGUVVGWFJTeDVRa0ZCZVVKa0xFdEJRVXRSTEU5QlFVRkJMRVZCUVcxQ2NrTXNSVUZCVFVNc1JVRkJUV2hGTEU5QlFVRkJMRVZCUVdWcFJTeEZRVUZqUXl4SlFVVTVTRVFzUlVGQllUUkNMRWRCUVU5akxFMUJRVkZETEdkQ1FVRm5RbWhDTEV0QlFVc3pRaXhGUVVGaE5FSXNSMEZCVVZjc1JVRkJWVXNzYTBKQlEyaEdOVU1zUlVGQllUUkNMRWRCUVU5cFFpeFJRVUZWUVN4UlFVRlJiRUlzUzBGQlN6TkNMRVZCUVdFMFFpeExRVWs1UkN4UFFVRlBla1VzUjBGSFRIRkdMSGxDUVVFeVFpeFRRVUZUUkN4RlFVRlhUeXhIUVVOcVJGQXNSVUZCVlVzc2FVSkJRVzFDUlN4UFFVRkJRU3hKUVVOc1FsQXNSVUZCVlZFc1YwRkRia0pTTEVWQlFWVlJMRk5CUVZkU0xFVkJRVlZ5Uml4TFFVTXZRbkZHTEVWQlFWVnlSaXhMUVVGUE9FWXNWVUZCVlhKQ0xFdEJRVXRaTEVkQlEyaERRU3hGUVVGVlZTeFhRVUZoVml4RlFVRlZWeXhQUVVOcVExZ3NSVUZCVlZjc1QwRkJVME1zV1VGQldYaENMRXRCUVV0WkxFdEJTWEJEU1N4blFrRkJhMElzVTBGQlUwY3NSVUZCV1Uwc1IwRkRla01zU1VGQlNVTXNSVUZCVVhSSUxFZEJRVWQxU0N4TFFVRkxSaXhIUVVOb1FrY3NSVUZCVVVZc1JVRkJUV2hDTEU5QlEyeENaMElzUlVGQlRXaENMRlZCUTA0c1NVRkJTVzFDTEVWQlFVMXdTQ3hMUVVGTGFVZ3NSVUZCVEdwSUxFZEJRMVp2Unl4NVFrRkJlVUpuUWl4RlFVRkpia0lzVDBGQlVWTXNSMEZEY2tNc1NVRkJTeXhKUVVGSk9VWXNSVUZCU1N4RlFVRkhRU3hGUVVGSmRVY3NSVUZCVFhoSExFOUJRVkZETEVsQlFVc3NRMEZEY2tNc1NVRkJTWGxITEVWQlFVMHhTQ3hIUVVGSGRVZ3NTMEZCUzBNc1JVRkJUWFpITEVsQlJYaENlVWNzUlVGQlNVTXNSMEZCU3l4VFFVRlhNVWNzUlVGRGNFSjNSeXhGUVVGSmJrSXNUMEZCVDI1R0xFdEJRVXQxUnl4SFFVVnNRa1VzUzBGQlMwZ3NTVUZIU0ZJc1ZVRkJXU3hYUVVOa0xFZEJRVWxaTEZWQlFWVTNSeXhQUVVGVExFVkJRVWNzUzBGQlRTeHhSRUZUYUVNc1IwRlFTVFpITEZWQlFWVTNSeXhQUVVGVExFZEJRVXRvUWl4SFFVRkhjVVlzWVVGQllYZERMRlZCUVZVc1RVRkRha0lzYlVKQlFYaENRU3hWUVVGVkxFZEJRVWRtTEZGQlEzUkNaU3hWUVVGVkxFZEJRVXRCTEZWQlFWVXNSMEZCUjJZc1ZVRkZOVUl6Unl4UlFVRlJhVVVzU1VGQlNTd3lSa0ZIV0hCRkxFZEJRVWR4Uml4aFFVRmhkME1zVlVGQlZTeEpRVWszUWl4UFFVRlBSQ3hMUVVGTFdpeFRRVUZUWXl4TlFVRk5SaXhMUVVGTlF5eFhRVWhxUXl4SlFVRkpSU3hGUVVGbFNDeExRVUZMWml4cFFrRkJhVUpuUWl4VlFVRlZMRWxCUTI1RUxFOUJRVTlFTEV0QlFVdGFMRk5CUVZOakxFMUJRVTFHTEUxQlFVOUhMRXRCVFd4RFdDeFpRVUZqTEZkQlEyaENMRWRCUVVsVExGVkJRVlUzUnl4UFFVRlRMRVZCUVVjc1MwRkJUU3h4UkVGUmFFTXNSMEZRU1RaSExGVkJRVlUzUnl4UFFVRlRMRWRCUVV0b1FpeEhRVUZIY1VZc1lVRkJZWGRETEZWQlFWVXNUVUZEYWtJc2JVSkJRWGhDUVN4VlFVRlZMRWRCUVVkbUxGRkJRM1JDWlN4VlFVRlZMRWRCUVV0QkxGVkJRVlVzUjBGQlIyWXNWVUZGTlVJelJ5eFJRVUZSYVVVc1NVRkJTU3cwUmtGSFdubEVMRlZCUVZVM1J5eFBRVUZUTEVsQlFVMW9RaXhIUVVGSGNVWXNZVUZCWVhkRExGVkJRVlVzU1VGQlN5eERRVU14UkN4SlFVRkpSU3hGUVVGbFNDeExRVUZMWml4cFFrRkJhVUpuUWl4VlFVRlZMRWxCUTI1RUxFOUJRVTlFTEV0QlFVdFdMRmRCUVZkWkxFMUJRVTFHTEUxQlFVOURMRlZCUVZVc1IwRkJTVUVzVlVGQlZTeEhRVUZKUlN4SlFVVm9SU3hQUVVGUFNDeExRVUZMVml4WFFVRlhXU3hOUVVGTlJpeExRVUZOUXl4WlFVdHVRMjVDTEhsQ1FVRXlRaXhUUVVGVGVFVXNSVUZCU3paQ0xFVkJRVTE2UWl4RlFVRlJNRVlzUlVGQlZVTXNSVUZCVFVNc1JVRkJZMmhGTEVWQlFWZHBSU3hSUVVGQlFTeEpRVVYyUmtZc1NVRkJjVUpCTEVWQlFVOUZMRWRCUlhaRExFbEJRVWxXTEVWQlFVMXdTQ3hMUVVGTE5FZ3NSMEZMWml4UFFVaEJVaXhGUVVGSk0wUXNjMEpCUVhOQ05VSXNSVUZCU3paQ0xFVkJRVTE2UWl4RlFVRlJNRVlzUlVGQlZVVXNSVUZCWTJoRkxFVkJRVmQxUkN4TlFVVm9Sa0VzUlVGQlNWZ3NVVUZCVlVFc1VVRkJVV3hDTEV0QlFVczJRaXhIUVVOd1FrRXNSMEZIVEdRc1RVRkJVU3hUUVVGVFNTeEZRVUZaY1VJc1IwRkZMMEpTTEV0QlJHbENOVWdzUjBGQlJ6SkRMRTFCUVUxRExHbENRVUZwUW0xRkxFVkJRVmN2Unl4SFFVRkpiMGtzVDBGQlFVRXNSMEZCVjBNc1RVRkpia1YyUWl4UlFVRlZMRmRCUTFvc1QwRkJUemxITEVkQlFVZDFTQ3hMUVVGTFN5eFBRVWRpVlN4cFFrRkJiVUlzVTBGQlUyaENMRVZCUVU5cFFpeEZRVUZWZUVVc1IwRkRMME1zU1VGQlNYbEZMRVZCUVdNNVFpeDVRa0ZCZVVKa0xGVkJRVUZCTEVWQlFXZENNa01zUlVGQlZYaEZMRVZCUVUxQkxFVkJRV0Y2UWl4UlFVTndSbTFHTEVWQlFVMWxMRVZCUVZsNFNTeEhRVUZKYzBnc1QwRkJRVUVzUjBGQlQyVXNSMEZKYWtNc1QwRkdRVm9zUlVGQlNXUXNUVUZCVVVFc1RVRkJUV1lzUzBGQlN6WkNMRVZCUVV0bExFZEJRelZDWml4RlFVRkpXQ3hSUVVGVlFTeFJRVUZSYkVJc1MwRkJTelpDTEVkQlEzQkNRU3hIUVVkVVowSXNUMEZCVDBNc1VVRkJWVW9pTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwyTnZiblpsY25SbGNpOTNjbUZ3Y0dWeUxtcHpJbjA9IiwidmFyIHRpbnljb2xvcj1yZXF1aXJlKFwidGlueWNvbG9yMlwiKTtmdW5jdGlvbiBDb2xvcih0KXt0aGlzLmdldEJyaWdodG5lc3M9ZnVuY3Rpb24obil7cmV0dXJuIHQobikuZ2V0QnJpZ2h0bmVzcygpfSx0aGlzLmlzTGlnaHQ9ZnVuY3Rpb24obil7cmV0dXJuIHQobikuaXNMaWdodCgpfSx0aGlzLmlzRGFyaz1mdW5jdGlvbihuKXtyZXR1cm4gdChuKS5pc0RhcmsoKX0sdGhpcy5nZXRMdW1pbmFuY2U9ZnVuY3Rpb24obil7cmV0dXJuIHQobikuZ2V0THVtaW5hbmNlKCl9LHRoaXMubGlnaHRlbj1mdW5jdGlvbihuLGkpe3JldHVybiB0KG4pLmxpZ2h0ZW4oaSkudG9IZXhTdHJpbmcoKX0sdGhpcy5icmlnaHRlbj1mdW5jdGlvbihuLGkpe3JldHVybiB0KG4pLmJyaWdodGVuKGkpLnRvSGV4U3RyaW5nKCl9LHRoaXMuZGFya2VuPWZ1bmN0aW9uKG4saSl7cmV0dXJuIHQobikuZGFya2VuKGkpLnRvSGV4U3RyaW5nKCl9LHRoaXMuZGVzYXR1cmF0ZT1mdW5jdGlvbihuLGkpe3JldHVybiB0KG4pLmRlc2F0dXJhdGUoaSkudG9IZXhTdHJpbmcoKX0sdGhpcy5zYXR1cmF0ZT1mdW5jdGlvbihuLGkpe3JldHVybiB0KG4pLnNhdHVyYXRlKGkpLnRvSGV4U3RyaW5nKCl9LHRoaXMuZ3JleXNjYWxlPWZ1bmN0aW9uKG4pe3JldHVybiB0KG4pLmdyZXlzY2FsZSgpLnRvSGV4U3RyaW5nKCl9LHRoaXMuc3Bpbj1mdW5jdGlvbihuLGkpe3JldHVybiB0KG4pLnNwaW4oaSkudG9IZXhTdHJpbmcoKX0sdGhpcy5jb21wbGVtZW50PWZ1bmN0aW9uKG4pe3JldHVybiB0KG4pLmNvbXBsZW1lbnQoKS50b0hleFN0cmluZygpfSx0aGlzLm1peD10Lm1peCx0aGlzLnJlYWRhYmlsaXR5PXQucmVhZGFiaWxpdHksdGhpcy5pc1JlYWRhYmxlPXQuaXNSZWFkYWJsZSx0aGlzLm1vc3RSZWFkYWJsZT10Lm1vc3RSZWFkYWJsZX12YXIgY29sb3JQbHVnaW49ZnVuY3Rpb24odCl7Z2xvYmFsLkNvbG9yPW5ldyBDb2xvcih0aW55Y29sb3IpfTttb2R1bGUuZXhwb3J0cz1jb2xvclBsdWdpbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiRzl5TG1weklsMHNJbTVoYldWeklqcGJJblJwYm5samIyeHZjaUlzSW5KbGNYVnBjbVVpTENKRGIyeHZjaUlzSW5Sb2FYTWlMQ0puWlhSQ2NtbG5hSFJ1WlhOeklpd2lZMjlzYjNJaUxDSnBjMHhwWjJoMElpd2lhWE5FWVhKcklpd2laMlYwVEhWdGFXNWhibU5sSWl3aWJHbG5hSFJsYmlJc0ltRnRiM1Z1ZENJc0luUnZTR1Y0VTNSeWFXNW5JaXdpWW5KcFoyaDBaVzRpTENKa1lYSnJaVzRpTENKa1pYTmhkSFZ5WVhSbElpd2ljMkYwZFhKaGRHVWlMQ0puY21WNWMyTmhiR1VpTENKemNHbHVJaXdpWTI5dGNHeGxiV1Z1ZENJc0ltMXBlQ0lzSW5KbFlXUmhZbWxzYVhSNUlpd2lhWE5TWldGa1lXSnNaU0lzSW0xdmMzUlNaV0ZrWVdKc1pTSXNJbU52Ykc5eVVHeDFaMmx1SWl3aWRtMGlMQ0puYkc5aVlXd2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFZRVUZaUXl4UlFVRlJMR05CUlhoQ0xGTkJRVk5ETEUxQlFVMUdMRWRCUTJKSExFdEJRVXRETEdOQlFXZENMRk5CUVZORExFZEJRelZDTEU5QlFVOU1MRVZCUVZWTExFZEJRVTlFTEdsQ1FVVXhRa1FzUzBGQlMwY3NVVUZCVlN4VFFVRlRSQ3hIUVVOMFFpeFBRVUZQVEN4RlFVRlZTeXhIUVVGUFF5eFhRVVV4UWtnc1MwRkJTMGtzVDBGQlV5eFRRVUZUUml4SFFVTnlRaXhQUVVGUFRDeEZRVUZWU3l4SFFVRlBSU3hWUVVVeFFrb3NTMEZCUzBzc1lVRkJaU3hUUVVGVFNDeEhRVU16UWl4UFFVRlBUQ3hGUVVGVlN5eEhRVUZQUnl4blFrRkpNVUpNTEV0QlFVdE5MRkZCUVZVc1UwRkJVMG9zUlVGQlQwc3NSMEZETjBJc1QwRkJUMVlzUlVGQlZVc3NSMEZCVDBrc1VVRkJVVU1zUjBGQlVVTXNaVUZGTVVOU0xFdEJRVXRUTEZOQlFWY3NVMEZCVTFBc1JVRkJUMHNzUjBGRE9VSXNUMEZCVDFZc1JVRkJWVXNzUjBGQlQwOHNVMEZCVTBZc1IwRkJVVU1zWlVGRk0wTlNMRXRCUVV0VkxFOUJRVk1zVTBGQlUxSXNSVUZCVDBzc1IwRkROVUlzVDBGQlQxWXNSVUZCVlVzc1IwRkJUMUVzVDBGQlQwZ3NSMEZCVVVNc1pVRkZla05TTEV0QlFVdFhMRmRCUVdFc1UwRkJVMVFzUlVGQlQwc3NSMEZEYUVNc1QwRkJUMVlzUlVGQlZVc3NSMEZCVDFNc1YwRkJWMG9zUjBGQlVVTXNaVUZGTjBOU0xFdEJRVXRaTEZOQlFWY3NVMEZCVTFZc1JVRkJUMHNzUjBGRE9VSXNUMEZCVDFZc1JVRkJWVXNzUjBGQlQxVXNVMEZCVTB3c1IwRkJVVU1zWlVGRk0wTlNMRXRCUVV0aExGVkJRVmtzVTBGQlUxZ3NSMEZEZUVJc1QwRkJUMHdzUlVGQlZVc3NSMEZCVDFjc1dVRkJXVXdzWlVGRmRFTlNMRXRCUVV0akxFdEJRVThzVTBGQlUxb3NSVUZCVDBzc1IwRkRNVUlzVDBGQlQxWXNSVUZCVlVzc1IwRkJUMWtzUzBGQlMxQXNSMEZCVVVNc1pVRkZka05TTEV0QlFVdGxMRmRCUVdFc1UwRkJVMklzUjBGRGVrSXNUMEZCVDB3c1JVRkJWVXNzUjBGQlQyRXNZVUZCWVZBc1pVRkhka05TTEV0QlFVdG5RaXhKUVVGTmJrSXNSVUZCVlcxQ0xFbEJRM0pDYUVJc1MwRkJTMmxDTEZsQlFXTndRaXhGUVVGVmIwSXNXVUZETjBKcVFpeExRVUZMYTBJc1YwRkJZWEpDTEVWQlFWVnhRaXhYUVVNMVFteENMRXRCUVV0dFFpeGhRVUZsZEVJc1JVRkJWWE5DTEdGQlIyaERMRWxCUVVsRExGbEJRV01zVTBGQlUwTXNSMEZEZWtKRExFOUJRVTkyUWl4TlFVRlJMRWxCUVVsQkxFMUJRVTFHTEZsQlJ6TkNNRUlzVDBGQlQwTXNVVUZCVlVvaUxDSm1hV3hsSWpvaUwzWmhjaTkzZDNjdmJXOXpZV2xqYnkxdFlYTjBaWEl2YzNKakwycHpMMlY0ZEM5amIyeHZjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsaW5saW5lRG9jdW1lbnQ9cmVxdWlyZShcImp1aWNlL2xpYi9pbmxpbmVcIikoe30pLmlubGluZURvY3VtZW50LGlubGluZXJQbHVnaW49ZnVuY3Rpb24oZSl7ZS5pbmxpbmU9ZnVuY3Rpb24oZSl7JChcIltzdHlsZV06bm90KFtyZXBsYWNlZHN0eWxlXSlcIixlKS5lYWNoKGZ1bmN0aW9uKGUsbil7dmFyIGk9JChuKTtpLmF0dHIoXCJyZXBsYWNlZHN0eWxlXCIsaS5hdHRyKFwic3R5bGVcIikpfSk7dmFyIG49W107JCgnc3R5bGVbZGF0YS1pbmxpbmU9XCJ0cnVlXCJdJyxlKS5lYWNoKGZ1bmN0aW9uKGUsaSl7dmFyIHQ9JChpKS5odG1sKCk7dD0odD10LnJlcGxhY2UoLzwhLS0ga28gKCg/IS0tKS4pKj8gLS0+L2csXCJcIikpLnJlcGxhY2UoLzwhLS0gXFwva28gLS0+L2csXCJcIiksbi5wdXNoKHQpLCQoaSkucmVtb3ZlQXR0cihcImRhdGEtaW5saW5lXCIpfSk7dmFyIGk9bi5qb2luKFwiXFxuXCIpLHQ9ZnVuY3Rpb24obixpKXtyZXR1cm4gdm9pZCAwPT09aSYmKGk9ZSksJChuLGkpfTt0LnJvb3Q9ZnVuY3Rpb24oKXtyZXR1cm4gJChcIjpyb290XCIsZSl9LGlubGluZURvY3VtZW50KHQsaSx7c3R5bGVBdHRyaWJ1dGVOYW1lOlwicmVwbGFjZWRzdHlsZVwifSl9fTttb2R1bGUuZXhwb3J0cz1pbmxpbmVyUGx1Z2luO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWJHbHVaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lZMjl1YzI5c1pTSXNJbkpsY1hWcGNtVWlMQ0lrSWl3aWQybHVaRzkzSWl3aWFsRjFaWEo1SWl3aVoyeHZZbUZzSWl3aWFXNXNhVzVsUkc5amRXMWxiblFpTENKcGJteHBibVZ5VUd4MVoybHVJaXdpZG0waUxDSnBibXhwYm1VaUxDSmtiMk1pTENKbFlXTm9JaXdpYVc1a1pYZ2lMQ0psYkNJc0lpUmxiQ0lzSW1GMGRISWlMQ0p6ZEhsc1pTSXNJbVZzWlcxbGJuUWlMQ0pqYjI1MFpXNTBJaXdpYUhSdGJDSXNJbkpsY0d4aFkyVWlMQ0p3ZFhOb0lpd2ljbVZ0YjNabFFYUjBjaUlzSW5OMGVXeGxWR1Y0ZENJc0ltcHZhVzRpTENJa1kyOXVkR1Y0ZENJc0luTmxiR1ZqZEc5eUlpd2lZMjl1ZEdWNGRDSXNJbkp2YjNRaUxDSnpkSGxzWlVGMGRISnBZblYwWlU1aGJXVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc2MwSkJRMnhDUXl4RlFVRjFRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRV1ZETEU5QlFYTkNMRzlDUVVGWVF5eFBRVUY1UWtFc1QwRkJaVVFzVDBGQlNTeExRVU16UjBVc1pVRkJhVUpNTEZGQlFWRXNiVUpCUVZKQkxFdEJRV2REU3l4bFFVVnFSRU1zWTBGQlowSXNVMEZCVTBNc1IwRkRNMEpCTEVWQlFVZERMRTlCUVZNc1UwRkJVME1zUjBGRmJrSlNMRVZCUVVVc0swSkJRV2REVVN4SFFVRkxReXhMUVVGTExGTkJRVk5ETEVWQlFVOURMRWRCUXpGRUxFbEJRVWxETEVWQlFVMWFMRVZCUVVWWExFZEJRMXBETEVWQlFVbERMRXRCUVVzc1owSkJRV2xDUkN4RlFVRkpReXhMUVVGTExGbEJSM0pETEVsQlFVbERMRXRCUTBwa0xFVkJRVVVzTkVKQlFUWkNVU3hIUVVGTFF5eExRVUZMTEZOQlFWTkRMRVZCUVU5TExFZEJRM1pFTEVsQlFVbERMRVZCUVZWb1FpeEZRVUZGWlN4SFFVRlRSU3hQUVVWNlFrUXNSMEZFUVVFc1JVRkJWVUVzUlVGQlVVVXNVVUZCVVN3eVFrRkJORUlzUzBGRGNFTkJMRkZCUVZFc2FVSkJRV3RDTEVsQlF6VkRTaXhGUVVGTlN5eExRVUZMU0N4SFFVTllhRUlzUlVGQlJXVXNSMEZCVTBzc1YwRkJWeXhwUWtGRmVFSXNTVUZCU1VNc1JVRkJXVkFzUlVGQlRWRXNTMEZCU3l4TlFVTjJRa01zUlVGQlZ5eFRRVUZUUXl4RlFVRlZReXhIUVVWb1F5eFpRVUZCTEVsQlJGZEJMRWxCUVhkQ1FTeEZRVUZWYWtJc1IwRkRkRU5TTEVWQlFVVjNRaXhGUVVGVlF5eEpRVVZ5UWtZc1JVRkJVMGNzUzBGQlR5eFhRVU5rTEU5QlFVOHhRaXhGUVVGRkxGRkJRVk5STEVsQlJYQkNTaXhsUVVGbGJVSXNSVUZCVlVZc1IwRkJZVTBzYlVKQlFXOUNMRzlDUVVrNVJFTXNUMEZCVDBNc1VVRkJWWGhDSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWxlSFF2YVc1c2FXNWxjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCwkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnk6bnVsbCxsc0xvYWRlcj1mdW5jdGlvbihlLHQpe3ZhciBhPWdsb2JhbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm1ldGFkYXRhLVwiK2UpO2lmKG51bGwhPT1hKXt2YXIgbyxsPWdsb2JhbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRlbXBsYXRlLVwiK2UpO251bGwhPT1sJiYobz1KU09OLnBhcnNlKGwpKTt2YXIgbj1KU09OLnBhcnNlKGEpO3JldHVybnttZXRhZGF0YTpuLG1vZGVsOm8sZXh0ZW5zaW9uOmxzQ29tbWFuZFBsdWdpbkZhY3Rvcnkobix0KX19dGhyb3dcIkNhbm5vdCBmaW5kIHN0b3JlZCBkYXRhIGZvciBcIitlfSxsc0NvbW1hbmRQbHVnaW5GYWN0b3J5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsYSxvKXt2YXIgbD17bmFtZTpcIlNhdmVcIixlbmFibGVkOmtvLm9ic2VydmFibGUoITApLGV4ZWN1dGU6ZnVuY3Rpb24oKXtsLmVuYWJsZWQoITEpLG8ubWV0YWRhdGEuY2hhbmdlZD1EYXRlLm5vdygpLHZvaWQgMD09PW8ubWV0YWRhdGEua2V5JiYoY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGZpbmQga2V5IGluIG1ldGFkYXRhIG9iamVjdC4uLlwiLG8ubWV0YWRhdGEpLG8ubWV0YWRhdGEua2V5PWUpLGdsb2JhbC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm1ldGFkYXRhLVwiK2Usby5leHBvcnRNZXRhZGF0YSgpKSxnbG9iYWwubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZW1wbGF0ZS1cIitlLG8uZXhwb3J0SlNPTigpKSxsLmVuYWJsZWQoITApfX0sbj17bmFtZTpcIlRlc3RcIixlbmFibGVkOmtvLm9ic2VydmFibGUoITApfSxyPXtuYW1lOlwiRG93bmxvYWRcIixlbmFibGVkOmtvLm9ic2VydmFibGUoITApfTtuLmV4ZWN1dGU9ZnVuY3Rpb24oKXtuLmVuYWJsZWQoITEpO3ZhciBsPWdsb2JhbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRlc3RlbWFpbFwiKTtpZihudWxsIT09bCYmXCJudWxsXCIhPWx8fChsPW8udChcIkluc2VydCBoZXJlIHRoZSByZWNpcGllbnQgZW1haWwgYWRkcmVzc1wiKSksXCJmdW5jdGlvblwiIT10eXBlb2YgZ2xvYmFsLnByb21wdClnbG9iYWwuYWxlcnQoby50KFwiVGhpcyBmZWF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyXCIpKSxuLmVuYWJsZWQoITApO2Vsc2UgaWYodm9pZCAwIT09KGw9Z2xvYmFsLnByb21wdChvLnQoXCJUZXN0IGVtYWlsIGFkZHJlc3NcIiksbCkpJiZudWxsIT09bCYmbC5tYXRjaCgvQC8pKXtnbG9iYWwubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZXN0ZW1haWxcIixsKTt2YXIgcj10fHxcIi9kbC9cIixkPSQucG9zdChyLHthY3Rpb246XCJlbWFpbFwiLHJjcHQ6bCxzdWJqZWN0OlwiW3Rlc3RdIFwiK2UrXCIgLSBcIithLGh0bWw6by5leHBvcnRIVE1MKCl9LG51bGwsXCJodG1sXCIpO2QuZmFpbChmdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiZmFpbFwiLGFyZ3VtZW50cyksby5ub3RpZmllci5lcnJvcihvLnQoXCJVbmV4cGVjdGVkIGVycm9yIHRhbGtpbmcgdG8gc2VydmVyOiBjb250YWN0IHVzIVwiKSl9KSxkLnN1Y2Nlc3MoZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcInN1Y2Nlc3NcIixhcmd1bWVudHMpLG8ubm90aWZpZXIuc3VjY2VzcyhvLnQoXCJUZXN0IGVtYWlsIHNlbnQuLi5cIikpfSksZC5hbHdheXMoZnVuY3Rpb24oKXtuLmVuYWJsZWQoITApfSl9ZWxzZSBnbG9iYWwuYWxlcnQoby50KFwiSW52YWxpZCBlbWFpbCBhZGRyZXNzXCIpKSxuLmVuYWJsZWQoITApfSxyLmV4ZWN1dGU9ZnVuY3Rpb24oKXtyLmVuYWJsZWQoITEpLG8ubm90aWZpZXIuaW5mbyhvLnQoXCJEb3dubG9hZGluZy4uLlwiKSksby5leHBvcnRIVE1MdG9UZXh0YXJlYShcIiNkb3dubG9hZEh0bWxUZXh0YXJlYVwiKTt2YXIgZT10fHxcIi9kbC9cIjtnbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZEZvcm1cIikuc2V0QXR0cmlidXRlKFwiYWN0aW9uXCIsZSksZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZG93bmxvYWRGb3JtXCIpLnN1Ym1pdCgpLHIuZW5hYmxlZCghMCl9LG8uc2F2ZT1sLG8udGVzdD1uLG8uZG93bmxvYWQ9cn0uYmluZCh2b2lkIDAsZS5rZXksZS5uYW1lKX07bW9kdWxlLmV4cG9ydHM9bHNMb2FkZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXh2WTJGc2MzUnZjbUZuWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpqYjI1emIyeGxJaXdpY21WeGRXbHlaU0lzSW10dklpd2lkMmx1Wkc5M0lpd2laMnh2WW1Gc0lpd2lKQ0lzSW1wUmRXVnllU0lzSW14elRHOWhaR1Z5SWl3aWFHRnphRjlyWlhraUxDSmxiV0ZwYkZCeWIyTmxjM052Y2tKaFkydGxibVFpTENKdFpGTjBjaUlzSW14dlkyRnNVM1J2Y21GblpTSXNJbWRsZEVsMFpXMGlMQ0p0YjJSbGJDSXNJblJrSWl3aVNsTlBUaUlzSW5CaGNuTmxJaXdpYldRaUxDSnRaWFJoWkdGMFlTSXNJbVY0ZEdWdWMybHZiaUlzSW14elEyOXRiV0Z1WkZCc2RXZHBia1poWTNSdmNua2lMQ0p0Wkd0bGVTSXNJbTFrYm1GdFpTSXNJblpwWlhkTmIyUmxiQ0lzSW5OaGRtVkRiV1FpTENKdVlXMWxJaXdpWlc1aFlteGxaQ0lzSW05aWMyVnlkbUZpYkdVaUxDSmxlR1ZqZFhSbElpd2lZMmhoYm1kbFpDSXNJa1JoZEdVaUxDSnViM2NpTENKclpYa2lMQ0ozWVhKdUlpd2ljMlYwU1hSbGJTSXNJbVY0Y0c5eWRFMWxkR0ZrWVhSaElpd2laWGh3YjNKMFNsTlBUaUlzSW5SbGMzUkRiV1FpTENKa2IzZHViRzloWkVOdFpDSXNJbVZ0WVdsc0lpd2lkQ0lzSW5CeWIyMXdkQ0lzSW1Gc1pYSjBJaXdpYldGMFkyZ2lMQ0p3YjNOMFZYSnNJaXdpY0c5emRDSXNJbUZqZEdsdmJpSXNJbkpqY0hRaUxDSnpkV0pxWldOMElpd2lhSFJ0YkNJc0ltVjRjRzl5ZEVoVVRVd2lMQ0ptWVdsc0lpd2liRzluSWl3aVlYSm5kVzFsYm5Seklpd2libTkwYVdacFpYSWlMQ0psY25KdmNpSXNJbk4xWTJObGMzTWlMQ0poYkhkaGVYTWlMQ0pwYm1adklpd2laWGh3YjNKMFNGUk5USFJ2VkdWNGRHRnlaV0VpTENKa2IyTjFiV1Z1ZENJc0ltZGxkRVZzWlcxbGJuUkNlVWxrSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpYzNWaWJXbDBJaXdpYzJGMlpTSXNJblJsYzNRaUxDSmtiM2R1Ykc5aFpDSXNJbUpwYm1RaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYzBKQlEyeENReXhIUVVGM1FpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFWZEVMRWRCUVhOQ0xHOUNRVUZZUlN4UFFVRjVRa0VzVDBGQlYwWXNSMEZCU1N4TFFVTndSMGNzUlVGQmRVSXNiMEpCUVZoR0xFOUJRWGxDUVN4UFFVRmxSeXhQUVVGelFpeHZRa0ZCV0VZc1QwRkJlVUpCTEU5QlFXVkZMRTlCUVVrc1MwRkZNMGRETEZOQlFWY3NVMEZCVTBNc1JVRkJWVU1zUjBGRGFFTXNTVUZCU1VNc1JVRkJVVTRzVDBGQlQwOHNZVUZCWVVNc1VVRkJVU3haUVVGalNpeEhRVU4wUkN4SFFVRmpMRTlCUVZaRkxFVkJRV2RDTEVOQlEyeENMRWxCUVVsSExFVkJRMEZETEVWQlFVdFdMRTlCUVU5UExHRkJRV0ZETEZGQlFWRXNXVUZCWTBvc1IwRkRlRU1zVDBGQlVFMHNTVUZCWVVRc1JVRkJVVVVzUzBGQlMwTXNUVUZCVFVZc1NVRkRjRU1zU1VGQlNVY3NSVUZCUzBZc1MwRkJTME1zVFVGQlRVNHNSMEZEY0VJc1QwRkRSVkVzVTBGQlZVUXNSVUZEVmtvc1RVRkJUMEVzUlVGRFVFMHNWVUZCVjBNc2RVSkJRWFZDU0N4RlFVRkpVaXhKUVVkNFF5eExRVUZOTEN0Q1FVRXJRa1FzUjBGSmNrTlpMSFZDUVVGNVFpeFRRVUZUU0N4RlFVRkpVaXhIUVRaRmVFTXNUMEUxUlhGQ0xGTkJRVk5aTEVWQlFVOURMRVZCUVZGRExFZEJSek5ETEVsQlFVbERMRWRCUTBaRExFdEJRVTBzVDBGRFRrTXNVVUZCVTNoQ0xFZEJRVWQ1UWl4WlFVRkJRU3hIUVVWa1F5eFJRVUZyUWl4WFFVTm9Ra29zUlVGQlVVVXNVMEZCUVVFc1IwRkRVa2dzUlVGQlZVd3NVMEZCVTFjc1VVRkJWVU1zUzBGQlMwTXNWMEZCUVVFc1NVRkRka0pTTEVWQlFWVk1MRk5CUVZOakxFMUJRelZDYUVNc1VVRkJVV2xETEV0QlFVc3NNa05CUVRSRFZpeEZRVUZWVEN4VlFVTnVSVXNzUlVGQlZVd3NVMEZCVTJNc1NVRkJUVmdzUjBGRk0wSnFRaXhQUVVGUFR5eGhRVUZoZFVJc1VVRkJVU3haUVVGallpeEZRVUZQUlN4RlFVRlZXU3hyUWtGRE0wUXZRaXhQUVVGUFR5eGhRVUZoZFVJc1VVRkJVU3haUVVGallpeEZRVUZQUlN4RlFVRlZZU3hqUVVNelJGb3NSVUZCVVVVc1UwRkJRVUVzUzBGRlRsY3NSMEZEUmxvc1MwRkJUU3hQUVVOT1F5eFJRVUZUZUVJc1IwRkJSM2xDTEZsQlFVRkJMRWxCUlZaWExFZEJRMFppTEV0QlFVMHNWMEZEVGtNc1VVRkJVM2hDTEVkQlFVZDVRaXhaUVVGQlFTeEpRVVZrVlN4RlFVRlJWQ3hSUVVGVkxGZEJRMmhDVXl4RlFVRlJXQ3hUUVVGQlFTeEhRVU5TTEVsQlFVbGhMRVZCUVZGdVF5eFBRVUZQVHl4aFFVRmhReXhSUVVGUkxHRkJSWGhETEVkQlJHTXNUMEZCVmpKQ0xFZEJRVEpDTEZGQlFWUkJMRWxCUVdsQ1FTeEZRVUZSYUVJc1JVRkJWV2xDTEVWQlFVVXNORU5CUXpsQ0xHMUNRVUZzUW5CRExFOUJRVTl4UXl4UFFVTm9RbkpETEU5QlFVOXpReXhOUVVGTmJrSXNSVUZCVldsQ0xFVkJRVVVzYTBSQlEzcENTQ3hGUVVGUldDeFRRVUZCUVN4UlFVZFNMRkZCUVVFc1MwRkVRV0VzUlVGQlVXNURMRTlCUVU5eFF5eFBRVUZQYkVJc1JVRkJWV2xDTEVWQlFVVXNjMEpCUVhWQ1JDeExRVU5ZTEU5QlFWWkJMRWRCUVd0Q1FTeEZRVUZOU1N4TlFVRk5MRXRCUVUwc1EwRkRkRVYyUXl4UFFVRlBUeXhoUVVGaGRVSXNVVUZCVVN4WlFVRmhTeXhIUVVONlF5eEpRVUZKU3l4RlFVRlZia01zUjBGQlowUXNUMEZETVVSdlF5eEZRVUZQZUVNc1JVRkJSWGRETEV0QlFVdEVMRWRCUTJoQ1JTeFBRVUZSTEZGQlExSkRMRXRCUVUxU0xFVkJRMDVUTEZGQlFWTXNWVUZCV1ROQ0xFVkJRVkVzVFVGQlVVTXNSVUZEY2tNeVFpeExRVUZOTVVJc1JVRkJWVEpDTEdOQlEyWXNTMEZCVFN4UlFVTlVUQ3hGUVVGTFRTeExRVUZMTEZkQlExSnVSQ3hSUVVGUmIwUXNTVUZCU1N4UFFVRlJReXhYUVVOd1FqbENMRVZCUVZVclFpeFRRVUZUUXl4TlFVRk5hRU1zUlVGQlZXbENMRVZCUVVVc2MwUkJSWFpEU3l4RlFVRkxWeXhSUVVGUkxGZEJRMWg0UkN4UlFVRlJiMFFzU1VGQlNTeFZRVUZYUXl4WFFVTjJRamxDTEVWQlFWVXJRaXhUUVVGVFJTeFJRVUZSYWtNc1JVRkJWV2xDTEVWQlFVVXNlVUpCUlhwRFN5eEZRVUZMV1N4UFFVRlBMRmRCUTFad1FpeEZRVUZSV0N4VFFVRkJRU3hWUVVkV2RFSXNUMEZCVDNORExFMUJRVTF1UWl4RlFVRlZhVUlzUlVGQlJTd3dRa0ZEZWtKSUxFVkJRVkZZTEZOQlFVRkJMRWxCU1dSWkxFVkJRVmxXTEZGQlFWVXNWMEZEY0VKVkxFVkJRVmxhTEZOQlFVRkJMRWRCUTFwSUxFVkJRVlVyUWl4VFFVRlRTU3hMUVVGTGJrTXNSVUZCVldsQ0xFVkJRVVVzYlVKQlEzQkRha0lzUlVGQlZXOURMSEZDUVVGeFFpeDVRa0ZETDBJc1NVRkJTV1lzUlVGQlZXNURMRWRCUVdkRUxFOUJRemxFVEN4UFFVRlBkMFFzVTBGQlUwTXNaVUZCWlN4blFrRkJaMEpETEdGQlFXRXNVMEZCVld4Q0xFZEJRM1JGZUVNc1QwRkJUM2RFTEZOQlFWTkRMR1ZCUVdVc1owSkJRV2RDUlN4VFFVTXZRM3BDTEVWQlFWbGFMRk5CUVVGQkxFbEJSMlJJTEVWQlFWVjVReXhMUVVGUGVFTXNSVUZEYWtKRUxFVkJRVlV3UXl4TFFVRlBOVUlzUlVGRGFrSmtMRVZCUVZVeVF5eFRRVUZYTlVJc1IwRkRja0kyUWl4VlFVRkJRU3hGUVVGblFteEVMRVZCUVVkbExFbEJRVXRtTEVWQlFVZFJMRTlCU3k5Q01rTXNUMEZCVDBNc1VVRkJWVGxFSWl3aVptbHNaU0k2SWk5MllYSXZkM2QzTDIxdmMyRnBZMjh0YldGemRHVnlMM055WXk5cWN5OWxlSFF2Ykc5allXeHpkRzl5WVdkbExtcHpJbjA9IiwidmFyIHV0aWxQbHVnaW49ZnVuY3Rpb24oZSl7Z2xvYmFsLlV0aWw9e2RlY29kZVVSSTpkZWNvZGVVUkksZW5jb2RlVVJJOmVuY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQ6ZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSUNvbXBvbmVudDplbmNvZGVVUklDb21wb25lbnR9fTttb2R1bGUuZXhwb3J0cz11dGlsUGx1Z2luO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5WMGFXd3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWRYUnBiRkJzZFdkcGJpSXNJblp0SWl3aVoyeHZZbUZzSWl3aVZYUnBiQ0lzSW1SbFkyOWtaVlZTU1NJc0ltVnVZMjlrWlZWU1NTSXNJbVJsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ0lzSW1WdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZkQlFXRXNVMEZCVTBNc1IwRkRlRUpETEU5QlFVOURMRTFCUTB4RExGVkJRV0ZCTEZWQlEySkRMRlZCUVdGQkxGVkJRMkpETEcxQ1FVRnpRa0VzYlVKQlEzUkNReXh0UWtGQmMwSkJMSEZDUVVreFFrTXNUMEZCVDBNc1VVRkJWVlFpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwyVjRkQzkxZEdsc0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcImtub2Nrb3V0LXNvcnRhYmxlXCIpLHJlcXVpcmUoXCIuL2JpbmRpbmdzL2pxdWVyeXVpLXNwaW5uZXIuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3MvanF1ZXJ5dWktdGFicy5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9jb2xvcnBpY2tlci5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9ibG9ja3MuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3MvY3NzdGV4dC5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9iaW5kLWlmcmFtZS5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9leHRkcm9wcGFibGUuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3MvcHJlbG9hZGVyLmpzXCIpLHJlcXVpcmUoXCIuL2JpbmRpbmdzL2ZpbGV1cGxvYWQuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3MvdmlydHVhbHMuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3Mvd3lzaXd5Z3MuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3Mvc2Nyb2xsZml4LmpzXCIpLHJlcXVpcmUoXCIuL2JpbmRpbmdzL2lmLXN1YnMuanNcIikscmVxdWlyZShcIi4vYmluZGluZ3MvZXh0c29ydGFibGVzLmpzXCIpLHJlcXVpcmUoXCIuL2JpbmRpbmdzL2V2ZW50YWJsZS5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy90b29sdGlwcy5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9leHRlbmRlci1wYWdpbmF0aW9uLmpzXCIpLHJlcXVpcmUoXCIuL2JpbmRpbmdzL3ZhbGlkYXRlZC12YWx1ZS5qc1wiKSxyZXF1aXJlKFwiLi9iaW5kaW5ncy9zY3JvbGxpbnRvdmlldy5qc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltdHZMV0pwYm1ScGJtZHpMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEZGQlFWRXNjVUpCUlZKQkxGRkJRVkVzYTBOQlExSkJMRkZCUVZFc0swSkJRMUpCTEZGQlFWRXNOa0pCUTFKQkxGRkJRVkVzZDBKQlExSkJMRkZCUVZFc2VVSkJRMUpCTEZGQlFWRXNOa0pCUTFKQkxGRkJRVkVzT0VKQlExSkJMRkZCUVZFc01rSkJRMUpCTEZGQlFWRXNORUpCUTFKQkxGRkJRVkVzTUVKQlExSkJMRkZCUVZFc01FSkJRMUpCTEZGQlFWRXNNa0pCUTFKQkxGRkJRVkVzZVVKQlExSkJMRkZCUVZFc09FSkJRMUpCTEZGQlFWRXNNa0pCUTFKQkxGRkJRVkVzTUVKQlExSkJMRkZCUVZFc2NVTkJRMUpCTEZGQlFWRXNhVU5CUTFKQkxGRkJRVkVpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwydHZMV0pwYm1ScGJtZHpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmpRdWVyeTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5qUXVlcnk6bnVsbCxrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGtvanF1aT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rb2pxdWk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua29qcXVpOm51bGwsdGVtcGxhdGVDb252ZXJ0ZXI9cmVxdWlyZShcIi4vY29udmVydGVyL21haW4uanNcIiksY29uc29sZT1yZXF1aXJlKFwiY29uc29sZS1icm93c2VyaWZ5XCIpLGluaXRpYWxpemVWaWV3bW9kZWw9cmVxdWlyZShcIi4vdmlld21vZGVsLmpzXCIpLHRlbXBsYXRlU3lzdGVtPXJlcXVpcmUoXCIuL2JpbmRpbmdzL2Nob29zZS10ZW1wbGF0ZS5qc1wiKTtpZighJC51aS52ZXJzaW9uLm1hdGNoKC9eMVxcLjExXFwuLiokLykpdGhyb3dcIlVzdXBwb3J0ZWQgalF1ZXJ5IFVJIHZlcnNpb24gZGV0ZWN0ZWQ6IFwiKyQudWkudmVyc2lvbitcIiAod2Ugb25seSBzdXBwb3J0IDEuMTEuKilcIjt2YXIgcGx1Z2luc0NhbGw9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIGksYSxkLHIsbDtsPVtdLHZvaWQgMCE9PW8mJm8/KGk9ZS5sZW5ndGgtMSxhPTAsZD0tMSk6KGk9MCxhPWUubGVuZ3RoLTEsZD0xKTtmb3IodmFyIHM9aTtzIT1hK2Q7cys9ZCl2b2lkIDAhPT1lW3NdW3RdJiZ2b2lkIDAhPT0ocj1lW3NdW3RdLmFwcGx5KGVbc10sbikpJiZsLnB1c2gocik7cmV0dXJuIGx9LG9yaWdEaXNwb3NlQ2FsbGJhY2s9a28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjaztrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrPWZ1bmN0aW9uKGUsdCl7b3JpZ0Rpc3Bvc2VDYWxsYmFjayhlLGZ1bmN0aW9uKGUpe3RyeXt0KGUpfWNhdGNoKGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUuZGVidWcmJmNvbnNvbGUuZGVidWcoXCJDYXVnaHQgdW5leHBlY3RlZCBkaXNwb3NlIGNhbGxiYWNrIGV4Y2VwdGlvblwiLGUpfX0pfTt2YXIgYmluZGluZ1BsdWdpbk1ha2VyPWZ1bmN0aW9uKGUpe3JldHVybnt2aWV3TW9kZWw6ZnVuY3Rpb24odCl7dHJ5e2UoXCJhcHBseUJpbmRpbmdzXCIsa28uYXBwbHlCaW5kaW5ncy5iaW5kKHZvaWQgMCx0KSl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS53YXJuKGUsZS5zdGFjayksZX19LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0cnl7ZShcInVuYXBwbHlCaW5kaW5nc1wiLGtvLmNsZWFuTm9kZS5iaW5kKHRoaXMsZ2xvYmFsLmRvY3VtZW50LmJvZHkpKX1jYXRjaChlKXt0aHJvdyBjb25zb2xlLndhcm4oZSxlLnN0YWNrKSxlfX19fSx0ZW1wbGF0ZUNyZWF0b3I9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIGk9bjtmb3Iodm9pZCAwIT09biYmdm9pZCAwIT09byYmKFwib2JqZWN0XCI9PXR5cGVvZiB0JiZcInJlcGxhY2VkaHRtbFwiPT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8KGkrPVwiLVwiK28pKTt2b2lkIDA9PT1pfHxudWxsPT09aXx8ZS5leGlzdHMoaSk7KWk9XCJhbm9ueW1vdXMtXCIrTWF0aC5mbG9vcigxZTUqTWF0aC5yYW5kb20oKSsxKTtpZihcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJyZXBsYWNlZGh0bWxcIj09dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpe3ZhciBhPSQodCksZD0kKFwicmVwbGFjZWRoZWFkXCIsYSkscj0kKFwicmVwbGFjZWRib2R5XCIsYSk7ZS5hZGRlcihpK1wiLWhlYWRcIixkLmh0bWwoKXx8XCJcIiksZS5hZGRlcihpK1wiLXNob3dcIixyLmh0bWwoKXx8XCJcIiksZS5hZGRlcihpK1wiLXByZXZpZXdcIixhLmh0bWwoKSksZS5hZGRlcihpK1wiLXd5c2l3eWdcIixhLmh0bWwoKSksZC5jaGlsZHJlbigpLmRldGFjaCgpLGQuaHRtbChcIlxceDNjIS0tIGtvIGJsb2NrOiBjb250ZW50IC0tXFx4M2VcXHgzYyEtLSAva28gLS1cXHgzZVwiKSxkLmJlZm9yZShcIlxceDNjIS0tIGtvIHdpdGhQcm9wZXJ0aWVzOiB7IHRlbXBsYXRlTW9kZTogJ2hlYWQnIH0gLS1cXHgzZVwiKSxkLmFmdGVyKFwiXFx4M2MhLS0gL2tvIC0tXFx4M2VcIiksci5odG1sKFwiXFx4M2MhLS0ga28gYmxvY2s6IGNvbnRlbnQgLS1cXHgzZVxceDNjIS0tIC9rbyAtLVxceDNlXCIpLGUuYWRkZXIoaStcIi1pZnJhbWVcIixhWzBdLm91dGVySFRNTCl9ZWxzZVwib2JqZWN0XCI9PXR5cGVvZiB0P2UuYWRkZXIoaSx0Lm91dGVySFRNTCk6ZS5hZGRlcihpLHQpO3JldHVybiBpfTtmdW5jdGlvbiBfdmlld01vZGVsUGx1Z2luSW5zdGFuY2UoZSl7dmFyIHQ7cmV0dXJue3ZpZXdNb2RlbDpmdW5jdGlvbihuKXt0PWUobil9LGluaXQ6ZnVuY3Rpb24oKXt2b2lkIDAhPT10JiZ2b2lkIDAhPT10LmluaXQmJnQuaW5pdCgpfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dm9pZCAwIT09dCYmdm9pZCAwIT09dC5kaXNwb3NlJiZ0LmRpc3Bvc2UoKX19fXZhciBfdGVtcGxhdGVVcmxDb252ZXJ0ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5tYXRjaCgvXlteXFwvXSo6Lyl8fHQubWF0Y2goL15cXC8vKXx8dC5tYXRjaCgvXlxcWy8pfHx0Lm1hdGNoKC9eIz8kLyk/bnVsbDplK3R9LHRlbXBsYXRlTG9hZGVyPWZ1bmN0aW9uKGUsdCxuLG8saSxhKXt2YXIgZD1cInN0cmluZ1wiPT10eXBlb2YgdD90Om4udGVtcGxhdGUscj1cIi4vXCIsbD1kLmxhc3RJbmRleE9mKFwiL1wiKTstMSE9bCYmKHI9ZC5zdWJzdHIoMCxsKzEpKTt2YXIgcyxjPV90ZW1wbGF0ZVVybENvbnZlcnRlci5iaW5kKHZvaWQgMCxyKTtzPXZvaWQgMD09PW4/e3RlbXBsYXRlOmQsbmFtZTpcIk5vIG5hbWVcIixjcmVhdGVkOkRhdGUubm93KCl9Om4sJC5nZXQoZCxmdW5jdGlvbih0KXt0ZW1wbGF0ZUNvbXBpbGVyKGUsYyxcInRlbXBsYXRlXCIsdCxvLHMsaSxhKS5pbml0KCl9KX0sdGVtcGxhdGVDb21waWxlcj1mdW5jdGlvbihlLHQsbixvLGksYSxkLHIpe3ZhciBsPW8ubWF0Y2goL14oW1xcU1xcc10qKShbPF1odG1sW14+XSo+W1xcU1xcc10qPFxcL2h0bWw+KShbXFxTXFxzXSopJC9pKTtpZihudWxsPT09bCl0aHJvd1wiVW5hYmxlIHRvIGZpbmQgPGh0bWw+IG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyBpbiB0aGUgdGVtcGxhdGVcIjt2YXIgcz1sWzFdLGM9e1wiPGh0bWxcIjowLFwiPGhlYWRcIjowLFwiPGJvZHlcIjowLFwiPC9odG1sXCI6MCxcIjwvYm9keVwiOjAsXCI8L2hlYWRcIjowfSx1PWxbMl0ucmVwbGFjZSgvKDxcXC8/KShodG1sfGhlYWR8Ym9keSkoW14+XSo+KS9naSxmdW5jdGlvbihlLHQsbixvKXtyZXR1cm4gY1sodCtuKS50b0xvd2VyQ2FzZSgpXSs9MSx0K1wicmVwbGFjZWRcIituK299KTtmb3IodmFyIG0gaW4gYylpZihjLmhhc093blByb3BlcnR5KG0pJiYxIT1jW21dKXtpZigwPT09Y1ttXSl0aHJvd1wiRVJST1I6IG1pc3NpbmcgbWFuZGF0b3J5IGVsZW1lbnQgXCIrbStcIj5cIjtpZihjW21dPjEpdGhyb3dcIkVSUk9SOiBtdWx0aXBsZSBlbGVtZW50IFwiK20rXCI+IG9jY291cmVuY2VzIGFyZSBub3Qgc3VwcG9ydGVkIChmb3VuZCBcIitjW21dK1wiIG9jY291cmVuY2VzKVwifXZhciBwPWxbM10sYj1bXSxoPVtdO2lmKHZvaWQgMCE9PWQpZm9yKHZhciBnPTA7ZzxkLmxlbmd0aDtnKyspXCJmdW5jdGlvblwiPT10eXBlb2YgZFtnXT9oLnB1c2goX3ZpZXdNb2RlbFBsdWdpbkluc3RhbmNlKGRbZ10pKTpoLnB1c2goZFtnXSk7dmFyIHY9W10sZj17YWRkZXI6ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvd1wiVGVtcGxhdGUgc3lzdGVtOiBjYW5ub3QgY3JlYXRlIG5ldyB0ZW1wbGF0ZSBcIitlO3ZhciBuPXQubWF0Y2goLyhkYXRhKT8ta28tW14gPTpdKi9nKTtuJiZjb25zb2xlLmVycm9yKFwiRVJST1I6IGZvdW5kIHVuZXhwZWN0ZWQgLWtvLSBhdHRyaWJ1dGUgaW4gY29tcGlsZWQgdGVtcGxhdGVcIixlLFwiLCB5b3UgcHJvYmFibHkgbWlzcGVsbGVkIGl0OlwiLG4pLHRlbXBsYXRlU3lzdGVtLmFkZFRlbXBsYXRlKGUsdCksdi5wdXNoKGUpfSxleGlzdHM6ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PXRlbXBsYXRlU3lzdGVtLmdldFRlbXBsYXRlQ29udGVudChlKX0sZGlzcG9zZTpmdW5jdGlvbigpe2Zvcih2YXIgZT12Lmxlbmd0aC0xO2U+PTA7ZS0tKXRlbXBsYXRlU3lzdGVtLnJlbW92ZVRlbXBsYXRlKHZbZV0pfX07a28uYmluZGluZ0hhbmRsZXJzLmJsb2NrLnRlbXBsYXRlRXhpc3RzPWYuZXhpc3RzO2Zvcih2YXIgeT10ZW1wbGF0ZUNyZWF0b3IuYmluZCh2b2lkIDAsZiksdz1lKFwidHJhbnNsYXRlVGVtcGxhdGVcIix0ZW1wbGF0ZUNvbnZlcnRlci50cmFuc2xhdGVUZW1wbGF0ZS5iaW5kKHZvaWQgMCxuLHUsdCx5KSksaz1lKFwiZ2VuZXJhdGVNb2RlbFwiLHRlbXBsYXRlQ29udmVydGVyLndyYXBwZWRSZXN1bHRNb2RlbC5iaW5kKHZvaWQgMCx3KSksQz17fSx4PXBsdWdpbnNDYWxsKGgsXCJ3aWRnZXRcIixbJCxrbyxrb2pxdWldKSxTPTA7Uzx4Lmxlbmd0aDtTKyspQ1t4W1NdLndpZGdldF09eFtTXTtiLnB1c2guYXBwbHkoYixlKFwiZ2VuZXJhdGVFZGl0b3JzXCIsdGVtcGxhdGVDb252ZXJ0ZXIuZ2VuZXJhdGVFZGl0b3JzLmJpbmQodm9pZCAwLHcsQyx0LHksXCIrJHJvb3QuY29udGVudExpc3RlbmVycygpXCIpKSk7dmFyIEU9ITE7aWYodm9pZCAwIT09aSYmbnVsbCE9PWkpe3ZhciBNO009XCJzdHJpbmdcIj09dHlwZW9mIGk/a28udXRpbHMucGFyc2VKc29uKGkpOmksMj09ZShcImNoZWNrTW9kZWxcIix0ZW1wbGF0ZUNvbnZlcnRlci5jaGVja01vZGVsLmJpbmQodm9pZCAwLGsuX3Vud3JhcCgpLGIsTSkpJiYoY29uc29sZS5lcnJvcihcIlRyeWluZyB0byBjb21waWxlIGFuIGluY29tcGF0aWJsZSB0ZW1wbGF0ZSB2ZXJzaW9uIVwiLGsuX3Vud3JhcCgpLGIsTSksRT0hMCk7dHJ5e2suX3dyYXAoTSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbmplY3QgbW9kZWwgY29udGVudCFcIixlKSxFPSEwfX12YXIgVD1zK3RlbXBsYXRlU3lzdGVtLmdldFRlbXBsYXRlQ29udGVudChuK1wiLWlmcmFtZVwiKS5yZXBsYWNlKC8oPFxcLz8pcmVwbGFjZWQoaHRtbHxoZWFkfGJvZHkpKFtePl0qPikvZ2ksZnVuY3Rpb24oZSx0LG4sbyl7cmV0dXJuIHQrbitvfSkrcCxJPWtvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lLnRwbDtrby5iaW5kaW5nSGFuZGxlcnMuYmluZElmcmFtZS50cGw9VDt2YXIgTD17ZGlzcG9zZTpmdW5jdGlvbigpe2tvLmJpbmRpbmdIYW5kbGVycy5iaW5kSWZyYW1lLnRwbD1JfX07aC5wdXNoKEwpLGgucHVzaChmKTt2YXIgRD1lKFwiaW5pdGlhbGl6ZVZpZXdtb2RlbFwiLGluaXRpYWxpemVWaWV3bW9kZWwuYmluZCh0aGlzLGssYix0LHIpKTtyZXR1cm4gRC5tZXRhZGF0YT1hLHZvaWQgMCE9PUQubWV0YWRhdGEuZWRpdG9ydmVyc2lvbiYmXCIwLjE3LjNcIiE9PUQubWV0YWRhdGEuZWRpdG9ydmVyc2lvbiYmY29uc29sZS5sb2coXCJUaGUgbW9kZWwgYmVpbmcgbG9hZGVkIGhhcyBiZWVuIGNyZWF0ZWQgd2l0aCBhIGRpZmZlcmVudCBlZGl0b3IgdmVyc2lvblwiLEQubWV0YWRhdGEuZWRpdG9ydmVyc2lvbixcInJ1bnRpbWU6XCIsXCIwLjE3LjNcIiksRC5tZXRhZGF0YS5lZGl0b3J2ZXJzaW9uPVwiMC4xNy4zXCIsdm9pZCAwIT09dy52ZXJzaW9uJiYodm9pZCAwIT09RC5tZXRhZGF0YS50ZW1wbGF0ZXZlcnNpb24mJkQubWV0YWRhdGEudGVtcGxhdGV2ZXJzaW9uIT09dy52ZXJzaW9uJiZjb25zb2xlLmxvZyhcIlRoZSBtb2RlbCBiZWluZyBsb2FkZWQgaGFzIGJlZW4gY3JlYXRlZCB3aXRoIGEgZGlmZmVyZW50IHRlbXBsYXRlIHZlcnNpb25cIixELm1ldGFkYXRhLnRlbXBsYXRldmVyc2lvbixcInJ1bnRpbWU6XCIsdy52ZXJzaW9uKSxELm1ldGFkYXRhLnRlbXBsYXRldmVyc2lvbj13LnZlcnNpb24pLHRlbXBsYXRlU3lzdGVtLmluaXQoKSxoLnB1c2goYmluZGluZ1BsdWdpbk1ha2VyKGUpKSxwbHVnaW5zQ2FsbChoLFwidmlld01vZGVsXCIsW0RdKSxFJiYkKFwiI2luY29tcGF0aWJsZS10ZW1wbGF0ZVwiKS5kaWFsb2coe21vZGFsOiEwLGFwcGVuZFRvOlwiI21vLWJvZHlcIixidXR0b25zOntPazpmdW5jdGlvbigpeyQodGhpcykuZGlhbG9nKFwiY2xvc2VcIil9fX0pLHttb2RlbDpELGluaXQ6ZnVuY3Rpb24oKXtwbHVnaW5zQ2FsbChoLFwiaW5pdFwiLHZvaWQgMCwhMCl9LGRpc3Bvc2U6ZnVuY3Rpb24oKXtwbHVnaW5zQ2FsbChoLFwiZGlzcG9zZVwiLHZvaWQgMCwhMCl9fX0sY2hlY2tGZWF0dXJlPWZ1bmN0aW9uKGUsdCl7aWYoIXQoKSl0aHJvdyBjb25zb2xlLndhcm4oXCJNaXNzaW5nIGZlYXR1cmVcIixlKSxcIk1pc3NpbmcgZmVhdHVyZSBcIitlfSxpc0NvbXBhdGlibGU9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGNoZWNrRmVhdHVyZShcIm1hdGNoTWVkaWFcIixmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1nbG9iYWwubWF0Y2hNZWRpYX0pLGNoZWNrRmVhdHVyZShcIlhNTEh0dHBSZXF1ZXN0IDJcIixmdW5jdGlvbigpe3JldHVyblwiWE1MSHR0cFJlcXVlc3RcImluIGdsb2JhbCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3R9KSxjaGVja0ZlYXR1cmUoXCJFUzUgc3RyaWN0XCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpc30oKX0pLGNoZWNrRmVhdHVyZShcIkNTUyBib3JkZXJSYWRpdXNcIixmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1nbG9iYWwuZG9jdW1lbnQuYm9keS5zdHlsZS5ib3JkZXJSYWRpdXN9KSxjaGVja0ZlYXR1cmUoXCJDU1MgYm94U2hhZG93XCIsZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09Z2xvYmFsLmRvY3VtZW50LmJvZHkuc3R5bGUuYm94U2hhZG93fSksY2hlY2tGZWF0dXJlKFwiQ1NTIGJveFNpemluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PWdsb2JhbC5kb2N1bWVudC5ib2R5LnN0eWxlLmJveFNpemluZ30pLGNoZWNrRmVhdHVyZShcIkNTUyBiYWNrZ3JvdW5kU2l6ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PWdsb2JhbC5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRTaXplfSksY2hlY2tGZWF0dXJlKFwiQ1NTIGJhY2tncm91bmRPcmlnaW5cIixmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1nbG9iYWwuZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kT3JpZ2lufSksY2hlY2tCYWRCcm93c2VyRXh0ZW5zaW9ucygpLCEwfWNhdGNoKGUpe3JldHVybiExfX0sY2hlY2tCYWRCcm93c2VyRXh0ZW5zaW9ucz1mdW5jdGlvbigpe3ZhciBlPVwiY2hlY2tiYWRicm93c2Vyc2ZyYW1lXCIsdD1rby5iaW5kaW5nSGFuZGxlcnMuYmluZElmcmFtZS50cGw7a28uYmluZGluZ0hhbmRsZXJzLmJpbmRJZnJhbWUudHBsPSc8IURPQ1RZUEUgaHRtbD5cXHJcXG48aHRtbD5cXHJcXG48aGVhZD48dGl0bGU+QTwvdGl0bGU+XFxyXFxuPC9oZWFkPlxcclxcbjxib2R5PjxwIHN0eWxlPVwiY29sb3I6IGJsdWVcIiBhbGlnbj1cInJpZ2h0XCIgZGF0YS1iaW5kPVwic3R5bGU6IHsgY29sb3I6IFxcJ3JlZFxcJyB9XCI+QjwvcD48ZGl2IGRhdGEtYmluZD1cInRleHQ6IGNvbnRlbnRcIj48L2Rpdj48L2JvZHk+XFxyXFxuPC9odG1sPlxcclxcbicsJChcImJvZHlcIikuYXBwZW5kKCc8aWZyYW1lIGlkPVwiJytlKydcIiBkYXRhLWJpbmQ9XCJiaW5kSWZyYW1lOiAkZGF0YVwiPjwvaWZyYW1lPicpO3ZhciBuPWdsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtrby5hcHBseUJpbmRpbmdzKHtjb250ZW50OlwiZHVtbXkgY29udGVudFwifSxuKTt2YXIgbz1uLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuZG9jdHlwZSxpPVwiPCFET0NUWVBFIFwiK28ubmFtZSsoby5wdWJsaWNJZD8nIFBVQkxJQyBcIicrby5wdWJsaWNJZCsnXCInOlwiXCIpKyghby5wdWJsaWNJZCYmby5zeXN0ZW1JZD9cIiBTWVNURU1cIjpcIlwiKSsoby5zeXN0ZW1JZD8nIFwiJytvLnN5c3RlbUlkKydcIic6XCJcIikrXCI+XFxuXCIrbi5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUw7a28uY2xlYW5Ob2RlKG4pLGtvLnJlbW92ZU5vZGUobiksa28uYmluZGluZ0hhbmRsZXJzLmJpbmRJZnJhbWUudHBsPXQ7dmFyIGE9JzwhRE9DVFlQRSBodG1sPlxcbjxodG1sPjxoZWFkPjx0aXRsZT5BPC90aXRsZT5cXG48L2hlYWQ+XFxuPGJvZHk+PHAgYWxpZ249XCJyaWdodFwiIHN0eWxlPVwiY29sb3I6IHJlZDtcIiBkYXRhLWJpbmQ9XCJzdHlsZTogeyBjb2xvcjogXFwncmVkXFwnIH1cIj5CPC9wPjxkaXYgZGF0YS1iaW5kPVwidGV4dDogY29udGVudFwiPmR1bW15IGNvbnRlbnQ8L2Rpdj5cXG5cXG48L2JvZHk+PC9odG1sPicsZD0nPCFET0NUWVBFIGh0bWw+XFxuPGh0bWw+PGhlYWQ+PHRpdGxlPkE8L3RpdGxlPlxcbjwvaGVhZD5cXG48Ym9keT48cCBzdHlsZT1cImNvbG9yOiByZWQ7XCIgZGF0YS1iaW5kPVwic3R5bGU6IHsgY29sb3I6IFxcJ3JlZFxcJyB9XCIgYWxpZ249XCJyaWdodFwiPkI8L3A+PGRpdiBkYXRhLWJpbmQ9XCJ0ZXh0OiBjb250ZW50XCI+ZHVtbXkgY29udGVudDwvZGl2PlxcblxcbjwvYm9keT48L2h0bWw+JyxyPSc8IURPQ1RZUEUgaHRtbD5cXG48aHRtbD48aGVhZD48dGl0bGU+QTwvdGl0bGU+XFxuPC9oZWFkPlxcbjxib2R5PjxwIHN0eWxlPVwiY29sb3I6IHJlZDtcIiBhbGlnbj1cInJpZ2h0XCIgZGF0YS1iaW5kPVwic3R5bGU6IHsgY29sb3I6IFxcJ3JlZFxcJyB9XCI+QjwvcD48ZGl2IGRhdGEtYmluZD1cInRleHQ6IGNvbnRlbnRcIj5kdW1teSBjb250ZW50PC9kaXY+XFxuXFxuPC9ib2R5PjwvaHRtbD4nO2lmKGEhPT1pJiZkIT09aSYmciE9PWkpdGhyb3cgY29uc29sZS5pbmZvKFwiQmFkQnJvd3Nlci5GcmFtZUNvbnRlbnRDaGVja1wiLGkubGVuZ3RoLGEubGVuZ3RoLGQubGVuZ3RoLHIubGVuZ3RoLGk9PWEsaT09ZCxpPT1yKSxjb25zb2xlLmluZm8oaSksXCJVbmV4cGVjdGVkIGZyYW1lIGNvbnRlbnQuIE1pc2JlaGF2aW5nIGJyb3dzZXI6IFwiK2kubGVuZ3RoK1wiL1wiK2EubGVuZ3RoK1wiL1wiK2QubGVuZ3RoK1wiL1wiK3IubGVuZ3RofSxmaXhQYWdlRXZlbnRzPWZ1bmN0aW9uKCl7Z2xvYmFsLmFkZEV2ZW50TGlzdGVuZXImJihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdcIixmdW5jdGlvbihlKXsoZT1lfHxnbG9iYWwuZXZlbnQpLnByZXZlbnREZWZhdWx0KCl9LCExKSxnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLGZ1bmN0aW9uKGUpeyhlPWV8fGdsb2JhbC5ldmVudCkucHJldmVudERlZmF1bHQoKX0sITEpLGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIixmdW5jdGlvbihlKXsoZT1lfHxnbG9iYWwuZXZlbnQpLnByZXZlbnREZWZhdWx0KCl9LCExKSxnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIixmdW5jdGlvbihlKXsoZT1lfHxnbG9iYWwuZXZlbnQpLnByZXZlbnREZWZhdWx0KCl9LCExKSxnbG9iYWwuZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKX0sITEpKSxnbG9iYWwuZG9jdW1lbnQub25kcmFnc3RhcnQmJihnbG9iYWwuZG9jdW1lbnQub25kcmFnc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0pfTttb2R1bGUuZXhwb3J0cz17Y29tcGlsZTp0ZW1wbGF0ZUNvbXBpbGVyLGxvYWQ6dGVtcGxhdGVMb2FkZXIsaXNDb21wYXRpYmxlOmlzQ29tcGF0aWJsZSxmaXhQYWdlRXZlbnRzOmZpeFBhZ2VFdmVudHN9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SbGJYQnNZWFJsTFd4dllXUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtJaXdpZDJsdVpHOTNJaXdpYWxGMVpYSjVJaXdpWjJ4dlltRnNJaXdpYTI4aUxDSnJiMnB4ZFdraUxDSjBaVzF3YkdGMFpVTnZiblpsY25SbGNpSXNJbkpsY1hWcGNtVWlMQ0pqYjI1emIyeGxJaXdpYVc1cGRHbGhiR2w2WlZacFpYZHRiMlJsYkNJc0luUmxiWEJzWVhSbFUzbHpkR1Z0SWl3aWRXa2lMQ0oyWlhKemFXOXVJaXdpYldGMFkyZ2lMQ0p3YkhWbmFXNXpRMkZzYkNJc0luQnNkV2RwYm5NaUxDSnRaWFJvYjJST1lXMWxJaXdpWVhKbmN5SXNJbkpsZG1WeWMyVWlMQ0p6ZEdGeWRDSXNJbVZ1WkNJc0ltUnBabVlpTENKeVpYTWlMQ0p5WlhOMWJIUnpJaXdpYkdWdVozUm9JaXdpYVNJc0ltRndjR3g1SWl3aWNIVnphQ0lzSW05eWFXZEVhWE53YjNObFEyRnNiR0poWTJzaUxDSjFkR2xzY3lJc0ltUnZiVTV2WkdWRWFYTndiM05oYkNJc0ltRmtaRVJwYzNCdmMyVkRZV3hzWW1GamF5SXNJbTV2WkdVaUxDSmpZV3hzWW1GamF5SXNJbVVpTENKa1pXSjFaeUlzSW1KcGJtUnBibWRRYkhWbmFXNU5ZV3RsY2lJc0luQmxjbVp2Y20xaGJtTmxRWGRoY21WRFlXeHNaWElpTENKMmFXVjNUVzlrWld3aUxDSmhjSEJzZVVKcGJtUnBibWR6SWl3aVltbHVaQ0lzSW1WeWNpSXNJbmRoY200aUxDSnpkR0ZqYXlJc0ltUnBjM0J2YzJVaUxDSmpiR1ZoYms1dlpHVWlMQ0owYUdseklpd2laRzlqZFcxbGJuUWlMQ0ppYjJSNUlpd2lkR1Z0Y0d4aGRHVkRjbVZoZEc5eUlpd2lkR1Z0Y0d4aGRHVlFiSFZuYVc0aUxDSm9kRzFzVDNKRmJHVnRaVzUwSWl3aWIzQjBhVzl1WVd4T1lXMWxJaXdpZEdWdGNHeGhkR1ZOYjJSbElpd2lkRzF3VG1GdFpTSXNJblJoWjA1aGJXVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0ltVjRhWE4wY3lJc0lrMWhkR2dpTENKbWJHOXZjaUlzSW5KaGJtUnZiU0lzSWlSbGJDSXNJaVJvWldGa0lpd2lKR0p2WkhraUxDSmhaR1JsY2lJc0ltaDBiV3dpTENKamFHbHNaSEpsYmlJc0ltUmxkR0ZqYUNJc0ltSmxabTl5WlNJc0ltRm1kR1Z5SWl3aWIzVjBaWEpJVkUxTUlpd2lYM1pwWlhkTmIyUmxiRkJzZFdkcGJrbHVjM1JoYm1ObElpd2ljR3gxWjJsdVJuVnVZM1JwYjI0aUxDSnBibk4wWVc1alpTSXNJbWx1YVhRaUxDSmZkR1Z0Y0d4aGRHVlZjbXhEYjI1MlpYSjBaWElpTENKaVlYTmxVR0YwYUNJc0luVnliQ0lzSW5SbGJYQnNZWFJsVEc5aFpHVnlJaXdpZEdWdGNHeGhkR1ZHYVd4bFRtRnRaU0lzSW5SbGJYQnNZWFJsVFdWMFlXUmhkR0VpTENKcWMyOXlhbk52YmlJc0ltVjRkR1Z1YzJsdmJuTWlMQ0puWVd4c1pYSjVWWEpzSWl3aWRHVnRjR3hoZEdWR2FXeGxJaXdpZEdWdGNHeGhkR1VpTENKMFpXMXdiR0YwWlZCaGRHZ2lMQ0p3SWl3aWJHRnpkRWx1WkdWNFQyWWlMQ0p6ZFdKemRISWlMQ0p0WlhSaFpHRjBZU0lzSW5SbGJYQnNZWFJsVlhKc1EyOXVkbVZ5ZEdWeUlpd2libUZ0WlNJc0ltTnlaV0YwWldRaUxDSkVZWFJsSWl3aWJtOTNJaXdpWjJWMElpd2lkR1Z0Y0d4aGRHVmpiMlJsSWl3aWRHVnRjR3hoZEdWRGIyMXdhV3hsY2lJc0luUmxiWEJzWVhSbFRtRnRaU0lzSW5CeVpXWnBlQ0lzSW1KaGMybGpVM1J5ZFdOMGRYSmxJaXdpUEdoMGJXd2lMQ0k4YUdWaFpDSXNJanhpYjJSNUlpd2lQQzlvZEcxc0lpd2lQQzlpYjJSNUlpd2lQQzlvWldGa0lpd2ljbVZ3YkdGalpTSXNJbkF4SWl3aWNESWlMQ0p3TXlJc0ltVnNaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY0c5emRHWnBlQ0lzSW1Kc2IyTnJSR1ZtY3lJc0ltTnlaV0YwWldSVVpXMXdiR0YwWlhNaUxDSjBaVzF3YkdGMFpYTlFiSFZuYVc0aUxDSnBaQ0lzSW5SeVlYTm9JaXdpWlhKeWIzSWlMQ0poWkdSVVpXMXdiR0YwWlNJc0ltZGxkRlJsYlhCc1lYUmxRMjl1ZEdWdWRDSXNJbkpsYlc5MlpWUmxiWEJzWVhSbElpd2lZbWx1WkdsdVowaGhibVJzWlhKeklpd2lZbXh2WTJzaUxDSjBaVzF3YkdGMFpVVjRhWE4wY3lJc0ltMTVWR1Z0Y0d4aGRHVkRjbVZoZEc5eUlpd2lkR1Z0Y0d4aGRHVkVaV1lpTENKMGNtRnVjMnhoZEdWVVpXMXdiR0YwWlNJc0ltTnZiblJsYm5RaUxDSjNjbUZ3Y0dWa1VtVnpkV3gwVFc5a1pXd2lMQ0ozYVdSblpYUnpJaXdpZDJsa1oyVjBVR3gxWjJsdWN5SXNJbmRwSWl3aWQybGtaMlYwSWl3aVoyVnVaWEpoZEdWRlpHbDBiM0p6SWl3aWFXNWpiMjF3WVhScFlteGxWR1Z0Y0d4aGRHVWlMQ0oxYm5keVlYQndaV1FpTENKd1lYSnpaVXB6YjI0aUxDSmphR1ZqYTAxdlpHVnNJaXdpWDNWdWQzSmhjQ0lzSWw5M2NtRndJaXdpWlhnaUxDSnBabkpoYldWVWNHd2lMQ0p2Y21sbmFVWnlZVzFsVkhCc0lpd2lZbWx1WkVsbWNtRnRaU0lzSW5Sd2JDSXNJbWxHY21GdFpWQnNkV2RwYmlJc0ltVmthWFJ2Y25abGNuTnBiMjRpTENKc2IyY2lMQ0owWlcxd2JHRjBaWFpsY25OcGIyNGlMQ0prYVdGc2IyY2lMQ0p0YjJSaGJDSXNJbUZ3Y0dWdVpGUnZJaXdpWW5WMGRHOXVjeUlzSWs5cklpd2liVzlrWld3aUxDSjFibVJsWm1sdVpXUWlMQ0pqYUdWamEwWmxZWFIxY21VaUxDSm1aV0YwZFhKbElpd2lablZ1WXlJc0ltbHpRMjl0Y0dGMGFXSnNaU0lzSW0xaGRHTm9UV1ZrYVdFaUxDSllUVXhJZEhSd1VtVnhkV1Z6ZENJc0luTjBlV3hsSWl3aVltOXlaR1Z5VW1Ga2FYVnpJaXdpWW05NFUyaGhaRzkzSWl3aVltOTRVMmw2YVc1bklpd2lZbUZqYTJkeWIzVnVaRk5wZW1VaUxDSmlZV05yWjNKdmRXNWtUM0pwWjJsdUlpd2lZMmhsWTJ0Q1lXUkNjbTkzYzJWeVJYaDBaVzV6YVc5dWN5SXNJbVY0WTJWd2RHbHZiaUlzSW05eWFXZFVjR3dpTENKaGNIQmxibVFpTENKbWNtRnRaVVZzSWl3aVoyVjBSV3hsYldWdWRFSjVTV1FpTENKamIyNTBaVzUwVjJsdVpHOTNJaXdpWkc5amRIbHdaU0lzSW5CMVlteHBZMGxrSWl3aWMzbHpkR1Z0U1dRaUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaUxDSnlaVzF2ZG1WT2IyUmxJaXdpWlhod1pXTjBaV1FpTENKbGVIQmxZM1JsWkRJaUxDSmxlSEJsWTNSbFpETWlMQ0pwYm1adklpd2labWw0VUdGblpVVjJaVzUwY3lJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmxkbVZ1ZENJc0luQnlaWFpsYm5SRVpXWmhkV3gwSWl3aWIyNWtjbUZuYzNSaGNuUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWTI5dGNHbHNaU0lzSW14dllXUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUjBFc1NVRkJTVUVzUlVGQmRVSXNiMEpCUVZoRExFOUJRWGxDUVN4UFFVRmxReXhQUVVGelFpeHZRa0ZCV0VNc1QwRkJlVUpCTEU5QlFXVkVMRTlCUVVrc1MwRkRNMGRGTEVkQlFYZENMRzlDUVVGWVNDeFBRVUY1UWtFc1QwRkJWMGNzUjBGQmMwSXNiMEpCUVZoRUxFOUJRWGxDUVN4UFFVRlhReXhIUVVGSkxFdEJRM0JIUXl4UFFVRTBRaXh2UWtGQldFb3NUMEZCZVVKQkxFOUJRV1ZKTEU5QlFYTkNMRzlDUVVGWVJpeFBRVUY1UWtFc1QwRkJaVVVzVDBGQlNTeExRVU5vU0VNc2EwSkJRVzlDUXl4UlFVRlJMSFZDUVVNMVFrTXNVVUZCVlVRc1VVRkJVU3h6UWtGRGJFSkZMRzlDUVVGelFrWXNVVUZCVVN4clFrRkRPVUpITEdWQlFXbENTQ3hSUVVGUkxHbERRVVUzUWl4SlFVRkxVQ3hGUVVGRlZ5eEhRVUZIUXl4UlFVRlJReXhOUVVGTkxHVkJRV2RDTEV0QlFVMHNNRU5CUVRCRFlpeEZRVUZGVnl4SFFVRkhReXhSUVVGUkxEUkNRVWx5Unl4SlFVRkpSU3haUVVGakxGTkJRVk5ETEVWQlFWTkRMRVZCUVZsRExFVkJRVTFETEVkQlEzQkVMRWxCUVVsRExFVkJRVTlETEVWQlFVdERMRVZCUVUxRExFVkJRVXRETEVWQlF6TkNRU3hWUVVGQlFTeEpRVU5YVEN4SFFVRXlRa0VzUjBGRGNFTkRMRVZCUVZGS0xFVkJRVkZUTEU5QlFWTXNSVUZEZWtKS0xFVkJRVTBzUlVGRFRrTXNSMEZCVVN4SlFVVlNSaXhGUVVGUkxFVkJRMUpETEVWQlFVMU1MRVZCUVZGVExFOUJRVk1zUlVGRGRrSklMRVZCUVU4c1IwRkZWQ3hKUVVGTExFbEJRVWxKTEVWQlFVbE9MRVZCUVU5TkxFZEJRVXRNTEVWQlFVMURMRVZCUVUxSkxFZEJRVXRLTEU5QlFVRkJMRWxCUXpkQ1RpeEZRVUZSVlN4SFFVRkhWQ3hUUVVGQlFTeExRVU53UWswc1JVRkJUVkFzUlVGQlVWVXNSMEZCUjFRc1IwRkJXVlVzVFVGQlRWZ3NSVUZCVVZVc1IwRkJTVklzUzBGRFprMHNSVUZCVVVrc1MwRkJTMHdzUjBGSGFrUXNUMEZCVDBNc1IwRkxURXNzYjBKQlFYTkNlRUlzUjBGQlIzbENMRTFCUVUxRExHZENRVUZuUWtNc2JVSkJRMjVFTTBJc1IwRkJSM2xDTEUxQlFVMURMR2RDUVVGblFrTXNiVUpCUVhGQ0xGTkJRVk5ETEVWQlFVMURMRWRCVXpORVRDeHZRa0ZCYjBKSkxFVkJVa1lzVTBGQlUwRXNSMEZEZWtJc1NVRkRSVU1zUlVGQlUwUXNSMEZEVkN4TlFVRlBSU3hIUVVWeFFpeHRRa0ZCYWtJeFFpeFJRVUZSTWtJc1QwRkJjVUl6UWl4UlFVRlJNa0lzVFVGQlRTd3JRMEZCWjBSRUxFOUJUVFZITEVsQlFVbEZMRzFDUVVGeFFpeFRRVUZUUXl4SFFVTm9ReXhQUVVORlF5eFZRVUZYTEZOQlFWTkJMRWRCUTJ4Q0xFbEJRMFZFTEVWQlFYVkNMR2RDUVVGcFFtcERMRWRCUVVkdFF5eGpRVUZqUXl4VlFVRkJRU3hGUVVGblFrWXNTVUZEZWtVc1RVRkJUMGNzUjBGRlVDeE5RVVJCYWtNc1VVRkJVV3RETEV0QlFVdEVMRVZCUVV0QkxFVkJRVWxGTEU5QlEyaENSaXhKUVVkV1J5eFJRVUZUTEZkQlExQXNTVUZEUlZBc1JVRkJkVUlzYTBKQlFXMUNha01zUjBGQlIzbERMRlZCUVZWTUxFdEJRVXROTEV0QlFVMHpReXhQUVVGUE5FTXNVMEZCVTBNc1QwRkRiRVlzVFVGQlQxQXNSMEZGVUN4TlFVUkJha01zVVVGQlVXdERMRXRCUVV0RUxFVkJRVXRCTEVWQlFVbEZMRTlCUTJoQ1JpeE5RVTFXVVN4blFrRkJhMElzVTBGQlUwTXNSVUZCWjBKRExFVkJRV1ZETEVWQlFXTkRMRWRCUXpGRkxFbEJRVWxETEVWQlFWVkdMRVZCUzJRc1UwRkJRU3hKUVVwWFFTeFJRVUZCUVN4SlFVRnpRME1zU1VGRGJrSXNhVUpCUVdwQ1JpeEhRVUZ2UlN4blFrRkJka05CTEVWQlFXTkpMRkZCUVZGRExHZENRVUZwUTBZc1IwRkJWeXhKUVVGTlJDeFRRVUZCUVN4SlFVZHdSME1zUjBGQmMwTXNUMEZCV2tFc1IwRkJiMEpLTEVWQlFXVlBMRTlCUVU5SUxFbEJRMmhHUVN4RlFVRlZMR0ZCUVdWSkxFdEJRVXRETEUxQlFYVkNMRWxCUVdoQ1JDeExRVUZMUlN4VFFVRnhRaXhIUVVkcVJTeEhRVUUwUWl4cFFrRkJha0pVTEVkQlFXOUZMR2RDUVVGMlEwRXNSVUZCWTBrc1VVRkJVVU1zWTBGQmFVTXNRMEZETjBZc1NVRkJTVXNzUlVGQlRUZEVMRVZCUVVWdFJDeEhRVU5TVnl4RlFVRlJPVVFzUlVGQlJTeGxRVUZuUWpaRUxFZEJRekZDUlN4RlFVRlJMMFFzUlVGQlJTeGxRVUZuUWpaRUxFZEJRemxDV0N4RlFVRmxZeXhOUVVGTlZpeEZRVUZWTEZGQlFWTlJMRVZCUVUxSExGRkJRVlVzU1VGRGVFUm1MRVZCUVdWakxFMUJRVTFXTEVWQlFWVXNVVUZCVTFNc1JVRkJUVVVzVVVGQlZTeEpRVU40UkdZc1JVRkJaV01zVFVGQlRWWXNSVUZCVlN4WFFVRlpUeXhGUVVGSlNTeFJRVU12UTJZc1JVRkJaV01zVFVGQlRWWXNSVUZCVlN4WFFVRlpUeXhGUVVGSlNTeFJRVWN2UTBnc1JVRkJUVWtzVjBGQlYwTXNVMEZEYWtKTUxFVkJRVTFITEV0QlFVc3NjMFJCUTFoSUxFVkJRVTFOTEU5QlFVOHNPRVJCUTJKT0xFVkJRVTFQTEUxQlFVMHNjMEpCUTFwT0xFVkJRVTFGTEV0QlFVc3NjMFJCUlZobUxFVkJRV1ZqTEUxQlFVMVdMRVZCUVZVc1ZVRkJWMDhzUlVGQlNTeEhRVUZIVXl4bFFVVm9RaXhwUWtGQmFrSnVRaXhGUVVOb1FrUXNSVUZCWldNc1RVRkJUVllzUlVGQlUwZ3NSVUZCWTIxQ0xGZEJSVFZEY0VJc1JVRkJaV01zVFVGQlRWWXNSVUZCVTBnc1IwRkhhRU1zVDBGQlQwY3NSMEZKVkN4VFFVRlRhVUlzZVVKQlFYbENReXhIUVVOb1F5eEpRVUZKUXl4RlFVTktMRTlCUTBWdVF5eFZRVUZYTEZOQlFWTkJMRWRCUTJ4Q2JVTXNSVUZCVjBRc1JVRkJaV3hETEVsQlJUVkNiME1zUzBGQlRTeG5Ra0ZCUVN4SlFVTlBSQ3hSUVVGQlFTeEpRVUZ0UTBFc1JVRkJVME1zVFVGQmMwSkVMRVZCUVZORExGRkJSWGhHT1VJc1VVRkJVeXhuUWtGQlFTeEpRVU5KTmtJc1VVRkJRVUVzU1VGQmJVTkJMRVZCUVZNM1FpeFRRVUY1UWpaQ0xFVkJRVk0zUWl4WlFVc3ZSaXhKUVVGSkswSXNjMEpCUVhkQ0xGTkJRVk5ETEVWQlFWVkRMRWRCUXpkRExFOUJRVXRCTEVWQlFVbG9SU3hOUVVGTkxHRkJRV2RDWjBVc1JVRkJTV2hGTEUxQlFVMHNVVUZCVjJkRkxFVkJRVWxvUlN4TlFVRk5MRkZCUVZkblJTeEZRVUZKYUVVc1RVRkJUU3hSUVVreFJTeExRVVpCSzBRc1JVRkJWME1zUjBGTmJFSkRMR1ZCUVdsQ0xGTkJRVk42UXl4RlFVRjNRakJETEVWQlFXdENReXhGUVVGclFrTXNSVUZCVlVNc1JVRkJXVU1zUjBGRE9VY3NTVUZCU1VNc1JVRkJNRU1zYVVKQlFYQkNUQ3hGUVVFclFrRXNSVUZCYlVKRExFVkJRV2xDU3l4VFFVTjZSa01zUlVGQlpTeExRVU5tUXl4RlFVRkpTQ3hGUVVGaFNTeFpRVUZaTEUxQlEzWkNMRWRCUVU1RUxFbEJRMFpFTEVWQlFXVkdMRVZCUVdGTExFOUJRVThzUlVGQlIwWXNSVUZCU1N4SlFVYzFReXhKUVVWSlJ5eEZRVVpCUXl4RlFVRjFRbWhDTEhOQ1FVRnpRbTVETEZWQlFVRkJMRVZCUVdkQ09FTXNSMEZKTDBSSkxFOUJRVUZCTEVsQlJGTldMRWRCUlZCTExGTkJRVlZFTEVWQlJWWlJMRXRCUVUwc1ZVRkRUa01zVVVGQlUwTXNTMEZCUzBNc1QwRkhUR1lzUlVGSFltaEdMRVZCUVVWblJ5eEpRVUZKV2l4RlFVRmpMRk5CUVZOaExFZEJRMnBDUXl4cFFrRkJhVUkzUkN4RlFVRjNRbk5FTEVWQlFYTkNMRmRCUVZsTkxFVkJRV05vUWl4RlFVRlZVeXhGUVVGVlVpeEZRVUZaUXl4SFFVTXZTRlFzVlVGSlNuZENMR2xDUVVGdFFpeFRRVUZUTjBRc1JVRkJkMEp6UkN4RlFVRnpRbEVzUlVGQlkwWXNSVUZCWTJoQ0xFVkJRVlZUTEVWQlFWVlNMRVZCUVZsRExFZEJSM2hKTEVsQlFVazNSQ3hGUVVGTk1rVXNSVUZCWVhCR0xFMUJRVTBzZFVSQlF6ZENMRWRCUVZrc1QwRkJVbE1zUlVGQll5eExRVUZOTEdsRlFVTjRRaXhKUVVGSk9FVXNSVUZCVXpsRkxFVkJRVWtzUjBGRllpdEZMRWRCUVcxQ1F5eFJRVUZUTEVWQlFVZERMRkZCUVZNc1JVRkJSME1zVVVGQlV5eEZRVUZIUXl4VFFVRlZMRVZCUVVkRExGTkJRVlVzUlVGQlIwTXNVMEZCVlN4SFFVTXpSakZETEVWQlFVOHpReXhGUVVGSkxFZEJRVWR6Uml4UlFVRlJMRzFEUVVGdlF5eFRRVUZUTDBZc1JVRkJUMmRITEVWQlFVbERMRVZCUVVsRExFZEJSWEJHTEU5QlJFRldMRWRCUVdkQ1VTeEZRVUZIUXl4SFFVRkpkRVFzWjBKQlFXdENMRVZCUTJ4RGNVUXNSVUZCU3l4WFFVRmhReXhGUVVGTFF5eEpRVVZvUXl4SlFVRkxMRWxCUVVsRExFdEJRVTlZTEVWQlFXZENMRWRCUVVsQkxFVkJRV1ZaTEdWQlFXVkVMRWxCUVdsRExFZEJRWFpDV0N4RlFVRmxWeXhIUVVGWExFTkJRM0JITEVkQlFUUkNMRWxCUVhoQ1dDeEZRVUZsVnl4SFFVRlpMRXRCUVUwc2IwTkJRVzlEUVN4RlFVRkpMRWxCUXpkRkxFZEJRVWxZTEVWQlFXVlhMRWRCUVU4c1JVRkJSeXhMUVVGTkxESkNRVUV5UWtFc1JVRkJTU3d3UTBGQk1FTllMRVZCUVdWWExFZEJRVXNzWjBKQlJXeEpMRWxCUVVsRkxFVkJRVlUxUml4RlFVRkpMRWRCUTJRMlJpeExRVXRCY0Vjc1MwRkZTaXhSUVVGQkxFbEJRVmR0UlN4RlFVTlVMRWxCUVVzc1NVRkJTWHBFTEVWQlFVa3NSVUZCUjBFc1JVRkJTWGxFTEVWQlFWY3hSQ3hQUVVGUlF5eEpRVU5VTEcxQ1FVRnFRbmxFTEVWQlFWZDZSQ3hIUVVOd1FsWXNSVUZCVVZrc1MwRkJTelJETEhsQ1FVRjVRbGNzUlVGQlYzcEVMRXRCUldwRVZpeEZRVUZSV1N4TFFVRkxkVVFzUlVGQlYzcEVMRWxCU3psQ0xFbEJRVWt5Uml4TFFVTkJReXhIUVVOR2NrUXNUVUZCVHl4VFFVRlRjMFFzUlVGQlNYSkVMRWRCUTJ4Q0xFZEJRVzlDTEdsQ1FVRlVRU3hGUVVGdFFpeExRVUZOTEN0RFFVRnBSSEZFTEVWQlEzSkdMRWxCUVVsRExFVkJRVkYwUkN4RlFVRkxjRVFzVFVGQlRTeDFRa0ZEYmtJd1J5eEhRVU5HTDBjc1VVRkJVV2RJTEUxQlFVMHNPRVJCUVN0RVJpeEZRVUZKTEN0Q1FVRm5RME1zUjBGRmJrZzNSeXhsUVVGbEswY3NXVUZCV1Vnc1JVRkJTWEpFTEVkQlF5OUNiVVFzUlVGQmFVSjZSaXhMUVVGTE1rWXNTVUZGZUVJM1JDeFBRVUZSTEZOQlFWTTJSQ3hIUVVWbUxGbEJRVUVzU1VGRVV6VkhMR1ZCUVdWblNDeHRRa0ZCYlVKS0xFbEJTVGRETVVVc1VVRkJVeXhYUVVOUUxFbEJRVXNzU1VGQlNXNUNMRVZCUVVreVJpeEZRVUZwUWpWR0xFOUJRVk1zUlVGQlIwTXNSMEZCU3l4RlFVRkhRU3hKUVVOb1JHWXNaVUZCWldsSUxHVkJRV1ZRTEVWQlFXbENNMFlzVFVGTGNrUnlRaXhIUVVGSGQwZ3NaMEpCUVhWQ1F5eE5RVUZGUXl4bFFVRnBRbFFzUlVGQlowSTFSQ3hQUVdNM1JDeEpRVmhCTEVsQlFVbHpSU3hGUVVGdlFqbEZMR2RDUVVGblFsUXNWVUZCUVVFc1JVRkJaMEkyUlN4SFFVZHdSRmNzUlVGQll6TkdMRVZCUVhWQ0xHOUNRVUZ4UWk5Q0xHdENRVUZyUWpKSUxHdENRVUZyUW5wR0xGVkJRVUZCTEVWQlFXZENNa1FzUlVGQlkyeERMRVZCUVUwd1FpeEZRVUZ6UW05RExFbEJSM2hLUnl4RlFVRlZOMFlzUlVGQmRVSXNaMEpCUVdsQ0wwSXNhMEpCUVd0Q05rZ3NiVUpCUVcxQ00wWXNWVUZCUVVFc1JVRkJaMEozUml4SlFVZDJSMGtzUzBGRFFVTXNSVUZCWjBKMlNDeFpRVUZaUXl4RlFVRlRMRlZCUVZkbUxFVkJRVWRKTEVkQlFVbERMRk5CUTJ4RWFVa3NSVUZCU3l4RlFVRkhRU3hGUVVGTFJDeEZRVUZqTjBjc1QwRkJVVGhITEVsQlF6RkRSaXhGUVVGUlF5eEZRVUZqUXl4SFFVRkpReXhSUVVGVlJpeEZRVUZqUXl4SFFVVndSRzVDTEVWQlFWVjRSaXhMUVVGTFJDeE5RVUZOZVVZc1JVRkJWemxGTEVWQlFYVkNMR3RDUVVGdFFpOUNMR3RDUVVGclFtdEpMR2RDUVVGblFtaEhMRlZCUVVGQkxFVkJRV2RDZDBZc1JVRkJZVWtzUlVGQlUzcERMRVZCUVhOQ2IwTXNSVUYwUkhCS0xDdENRWGRFY0VJc1NVRkJTVlVzUjBGQlFVRXNSVUZEU2l4UlFVRkJMRWxCUVZkNFJDeEhRVUY1UXl4UFFVRmlRU3hGUVVGdFFpeERRVU40UkN4SlFVRkplVVFzUlVGRlJrRXNSVUZFY1VJc2FVSkJRVnA2UkN4RlFVTkhOMFVzUjBGQlIzbENMRTFCUVUwNFJ5eFZRVUZWTVVRc1IwRkZia0pCTEVWQlRVOHNSMEZHUkRWRExFVkJRWFZDTEdGQlFXTXZRaXhyUWtGQmEwSnpTU3hYUVVGWGNFY3NWVUZCUVVFc1JVRkJaMEl3Uml4RlFVRlJWeXhWUVVGWE1VSXNSVUZCVjNWQ0xFMUJSMnhKYkVrc1VVRkJVV2RJTEUxQlFVMHNjMFJCUVhWRVZTeEZRVUZSVnl4VlFVRlhNVUlzUlVGQlYzVkNMRWRCUTI1SFJDeEhRVUZCUVN4SFFVZEdMRWxCUTBWUUxFVkJRVkZaTEUxQlFVMUtMRWRCUTJRc1RVRkJUMHNzUjBGRFVIWkpMRkZCUVZGblNDeE5RVUZOTEd0RFFVRnRRM1ZDTEVkQlEycEVUaXhIUVVGQlFTeEhRVXRLTEVsQlFVbFBMRVZCUVZrMVF5eEZRVUZUTVVZc1pVRkJaV2RJTEcxQ1FVRnRRblpDTEVWQlFXVXNWMEZCVjFNc1VVRkJVU3d5UTBGQk5FTXNVMEZCVXk5R0xFVkJRVTluUnl4RlFVRkpReXhGUVVGSlF5eEhRVU12U2l4UFFVRlBSaXhGUVVGTFF5eEZRVUZMUXl4SlFVTmtSeXhGUVVkRUswSXNSVUZCWjBJM1NTeEhRVUZIZDBnc1owSkJRV2RDYzBJc1YwRkJWME1zU1VGRGJFUXZTU3hIUVVGSGQwZ3NaMEpCUVdkQ2MwSXNWMEZCVjBNc1NVRkJUVWdzUlVGRGNFTXNTVUZCU1Vrc1IwRkRSbmhITEZGQlFWTXNWMEZEVUhoRExFZEJRVWQzU0N4blFrRkJaMEp6UWl4WFFVRlhReXhKUVVGTlJpeEpRVWw0UTJ4SkxFVkJRVkZaTEV0QlFVdDVTQ3hIUVVOaWNra3NSVUZCVVZrc1MwRkJTekJHTEVkQlIySXNTVUZCU1M5RkxFVkJRVmxFTEVWQlFYVkNMSE5DUVVGMVFqVkNMRzlDUVVGdlFpdENMRXRCUVV0TkxFdEJRVTF2Uml4RlFVRlRaaXhGUVVGWGVFSXNSVUZCYzBKU0xFbEJjVU4yU1N4UFFXNURRVGRETEVWQlFWVnZSQ3hUUVVGWFFTeFBRVzFEY2tJc1NVRXZRbGR3UkN4RlFVRlZiMFFzVTBGQlV6SkVMR1ZCUkdoQ0xGZEJRMmxFTDBjc1JVRkJWVzlFTEZOQlFWTXlSQ3hsUVVOb1JqZEpMRkZCUVZFNFNTeEpRVUZKTERCRlFVRXlSV2hJTEVWQlFWVnZSQ3hUUVVGVE1rUXNZMEZCWlN4WFFVWTNSeXhWUVVsa0wwY3NSVUZCVlc5RUxGTkJRVk15UkN4alFVcE1MR05CUVVFc1NVRk5TSEpDTEVWQlFWbHdTQ3hsUVVGQlFTeEpRVU5XTUVJc1JVRkJWVzlFTEZOQlFWTTJSQ3hwUWtGQmJVTnFTQ3hGUVVGVmIwUXNVMEZCVXpaRUxHdENRVUZ2UW5aQ0xFVkJRVmx3U0N4VFFVTnNTRW9zVVVGQlVUaEpMRWxCUVVrc05FVkJRVFpGYUVnc1JVRkJWVzlFTEZOQlFWTTJSQ3huUWtGQmFVSXNWMEZCV1haQ0xFVkJRVmx3U0N4VFFVVjJTakJDTEVWQlFWVnZSQ3hUUVVGVE5rUXNaMEpCUVd0Q2RrSXNSVUZCV1hCSUxGTkJSMjVFUml4bFFVRmxaMFVzVDBGSFpqTkVMRVZCUVZGWkxFdEJRVXRUTEcxQ1FVRnRRa01zU1VGRmFFTjJRaXhaUVVGWlF5eEZRVUZUTEdGQlFXTjFRaXhKUVVVdlFtMUhMRWRCUTBaNlNTeEZRVUZGTERCQ1FVRXdRbmRLTEZGQlF6RkNReXhQUVVGQlFTeEZRVU5CUXl4VFFVRlZMRmRCUTFaRExGTkJRMFZETEVkQlFVa3NWMEZEUmpWS0xFVkJRVVU0UXl4TlFVRk5NRWNzVDBGQlR5eGpRVTl5UWtzc1RVRkJUM1pJTEVWQlExQnZReXhMUVVGTkxGZEJRMG8xUkN4WlFVRlpReXhGUVVGVExGbEJRVUVzUjBGQlVTdEpMRWxCUlM5Q2JFZ3NVVUZCVXl4WFFVTlFPVUlzV1VGQldVTXNSVUZCVXl4bFFVRkJMRWRCUVZjclNTeE5RVTlzUTBNc1lVRkJaU3hUUVVGVFF5eEZRVUZUUXl4SFFVTnVReXhKUVVGTFFTeEpRVVZJTEUxQlJFRjZTaXhSUVVGUmEwTXNTMEZCU3l4clFrRkJiVUp6U0N4SFFVTXhRaXh0UWtGQmNVSkJMRWRCU1ROQ1JTeGhRVUZsTEZkQlEycENMRWxCT0VKRkxFOUJNMEpCU0N4aFFVRmhMR0ZCUVdNc1YwRkRla0lzV1VGQlFTeEpRVUZqTlVvc1QwRkJUMmRMTEdGQlJYWkNTaXhoUVVGaExHMUNRVUZ2UWl4WFFVTXZRaXhOUVVGUExHMUNRVUZ2UWpWS0xGRkJRVlVzYjBKQlFYRkNMRWxCUVVsQkxFOUJRVTlwU3l4cFFrRkZka1ZNTEdGQlFXRXNZVUZCWXl4WFFVTjZRaXhQUVVGUExGZEJRMHdzV1VGQlFTeEpRVUZqYWtnc1MwRkVWQ3hMUVVsVWFVZ3NZVUZCWVN4dFFrRkJiMElzVjBGREwwSXNXVUZCUVN4SlFVRmpOVW9zVDBGQlR6UkRMRk5CUVZORExFdEJRVXR4U0N4TlFVRnZRa01zWlVGRmVrUlFMR0ZCUVdFc1owSkJRV2xDTEZkQlF6VkNMRmxCUVVFc1NVRkJZelZLTEU5QlFVODBReXhUUVVGVFF5eExRVUZMY1Vnc1RVRkJhVUpGTEZsQlJYUkVVaXhoUVVGaExHZENRVUZwUWl4WFFVTTFRaXhaUVVGQkxFbEJRV00xU2l4UFFVRlBORU1zVTBGQlUwTXNTMEZCUzNGSUxFMUJRV2xDUnl4WlFVVjBSRlFzWVVGQllTeHhRa0ZCYzBJc1YwRkRha01zV1VGQlFTeEpRVUZqTlVvc1QwRkJUelJETEZOQlFWTkRMRXRCUVV0eFNDeE5RVUZ6UWtrc2FVSkJSVE5FVml4aFFVRmhMSFZDUVVGM1FpeFhRVU51UXl4WlFVRkJMRWxCUVdNMVNpeFBRVUZQTkVNc1UwRkJVME1zUzBGQlMzRklMRTFCUVhkQ1N5eHRRa0ZGTjBSRExEWkNRVUZCUVN4RlFVVkJMRTFCUVU5RExFZEJRMUFzVDBGQlFTeEpRVWxCUkN3d1FrRkJORUlzVjBGRE9VSXNTVUZCU1hKRUxFVkJRVXNzZDBKQlEweDFSQ3hGUVVGVmVrc3NSMEZCUjNkSUxHZENRVUZuUW5OQ0xGZEJRVmRETEVsQlF6VkRMMGtzUjBGQlIzZElMR2RDUVVGblFuTkNMRmRCUVZkRExFbEJRVTBzYzA1QlEzQkRia29zUlVGQlJTeFJRVUZST0Vzc1QwRkJUeXhsUVVGcFFuaEVMRVZCUVVzc05rTkJRM1pETEVsQlFVbDVSQ3hGUVVGVk5Vc3NUMEZCVHpSRExGTkJRVk5wU1N4bFFVRmxNVVFzUjBGRE4wTnNTQ3hIUVVGSGJVTXNaVUZCWjBJeVJpeFJRVUZUTEdsQ1FVRnRRalpETEVkQlJ5OURMRWxCUVVrdlNTeEZRVUZQSzBrc1JVRkJVVVVzWTBGQlkyeEpMRk5CUVZOdFNTeFJRVXQwUTJoRUxFVkJTbFVzWVVGQlpXeEhMRVZCUVVzMFJDeE5RVU12UWpWRUxFVkJRVXR0U2l4VFFVRlhMRmxCUVdOdVNpeEZRVUZMYlVvc1UwRkJWeXhKUVVGTkxFMUJRMjVFYmtvc1JVRkJTMjFLTEZWQlFWbHVTaXhGUVVGTGIwb3NVMEZCVnl4VlFVRlpMRXRCUXpsRGNFb3NSVUZCUzI5S0xGTkJRVmNzUzBGQlQzQktMRVZCUVV0dlNpeFRRVUZYTEVsQlFVMHNTVUZCVFN4TlFVTjJRa3dzUlVGQlVVVXNZMEZCWTJ4SkxGTkJRVk56U1N4blFrRkJaMEl2Unl4VlFVTTVSV3hGTEVkQlFVZDVReXhWUVVGVmEwa3NSMEZEWWpOTExFZEJRVWRyVEN4WFFVRlhVQ3hIUVVOa00wc3NSMEZCUjNkSUxHZENRVUZuUW5OQ0xGZEJRVmRETEVsQlFVMHdRaXhGUVVWd1F5eEpRVUZKVlN4RlFVRlhMSEZPUVVOWVF5eEZRVUZaTEhGT1FVTmFReXhGUVVGWkxIRk9RVU5vUWl4SFFVRkpSaXhKUVVGaGNrUXNSMEZCVjNORUxFbEJRV04wUkN4SFFVRlhkVVFzU1VGQlkzWkVMRVZCUjJwRkxFMUJSa0V4U0N4UlFVRlJhMHdzUzBGQlN5d3JRa0ZCWjBONFJDeEZRVUZSTVVjc1QwRkJVU3RLTEVWQlFWTXZTaXhQUVVGUlowc3NSVUZCVldoTExFOUJRVkZwU3l4RlFVRlZha3NzVDBGQlVUQkhMRWRCUVZkeFJDeEZRVUZWY2tRc1IwRkJWM05FTEVWQlFWZDBSQ3hIUVVGWGRVUXNSMEZEZUV0cVRDeFJRVUZSYTB3c1MwRkJTM2hFTEVkQlExQXNhMFJCUVd0RVFTeEZRVUZSTVVjc1QwRkJUeXhKUVVGSkswb3NSVUZCVXk5S0xFOUJRVThzU1VGQlNXZExMRVZCUVZWb1N5eFBRVUZQTEVsQlFVbHBTeXhGUVVGVmFrc3NVVUZKT1VodFN5eGpRVUZuUWl4WFFVZGtlRXdzVDBGQlQzbE1MRzFDUVVWVWVrd3NUMEZCVDNsTUxHbENRVUZwUWl4UFFVRlJMRk5CUVZNeFNpeEpRVVYyUTBFc1JVRkJTVUVzUjBGQlN5OUNMRTlCUVU4d1RDeFBRVU5rUXl4dFFrRkJRVUVzUjBGRlNqTk1MRTlCUVU5NVRDeHBRa0ZCYVVJc1dVRkJZU3hUUVVGVE1Vb3NTVUZGTlVOQkxFVkJRVWxCTEVkQlFVc3ZRaXhQUVVGUE1Fd3NUMEZEWkVNc2JVSkJRVUZCTEVkQlJVb3pUQ3hQUVVGUGVVd3NhVUpCUVdsQ0xGZEJRVmtzVTBGQlV6RktMRWxCUnpORFFTeEZRVUZKUVN4SFFVRkxMMElzVDBGQlR6Qk1MRTlCUTJSRExHMUNRVUZCUVN4SFFVVktNMHdzVDBGQlQzbE1MR2xDUVVGcFFpeFBRVUZSTEZOQlFWTXhTaXhKUVVWMlEwRXNSVUZCU1VFc1IwRkJTeTlDTEU5QlFVOHdUQ3hQUVVOa1F5eHRRa0ZCUVVFc1IwRkZTak5NTEU5QlFVODBReXhUUVVGVFF5eExRVUZMTkVrc2FVSkJRV2xDTEU5QlFWRXNVMEZCVXpGS0xFZEJSM0pFUVN4RlFVRkZORW9zYlVKQlFVRkJMRWxCUjBZelRDeFBRVUZQTkVNc1UwRkJVMmRLTEdOQlEyeENOVXdzVDBGQlR6UkRMRk5CUVZOblNpeFpRVUZqTEZkQlJUVkNMRTlCUVVFc1MwRkxUa01zVDBGQlQwTXNVMEZEVEVNc1VVRkJVMmhITEdsQ1FVTlVhVWNzUzBGQlRYSklMR1ZCUTA1dlJpeGhRVUZqUVN4aFFVTmtlVUlzWTBGQlpVRWlMQ0ptYVd4bElqb2lMM1poY2k5M2QzY3ZiVzl6WVdsamJ5MXRZWE4wWlhJdmMzSmpMMnB6TDNSbGJYQnNZWFJsTFd4dllXUmxjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIiksX2NhbGw9ZnVuY3Rpb24oZSl7cmV0dXJuIGUoKX0sbG9ncz1bXSxfdGltZWRDYWxsPWZ1bmN0aW9uKGUsbyl7dmFyIHQsbD0obmV3IERhdGUpLmdldFRpbWUoKTtcIm9iamVjdFwiPT10eXBlb2YgY29uc29sZSYmY29uc29sZS50aW1lJiZjb25zb2xlLnRpbWUoZSksdD1fY2FsbChvKSxcIm9iamVjdFwiPT10eXBlb2YgY29uc29sZSYmY29uc29sZS50aW1lJiZjb25zb2xlLnRpbWVFbmQoZSk7dmFyIG49KG5ldyBEYXRlKS5nZXRUaW1lKCktbDtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgY29uc29sZXx8Y29uc29sZS50aW1lfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmRlYnVnJiZjb25zb2xlLmRlYnVnKGUsXCJ0b29rXCIsbixcIm1zXCIpLGxvZ3MucHVzaCh7bmFtZTplLHRpbWU6bn0pLGxvZ3MubGVuZ3RoPjEwMCYmbG9ncy51bnNoaWZ0KCksdH07bW9kdWxlLmV4cG9ydHM9e3RpbWVkQ2FsbDpfdGltZWRDYWxsLGxvZ3M6bG9nc307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJwYldWa0xXTmhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2lZMjl1YzI5c1pTSXNJbkpsY1hWcGNtVWlMQ0pmWTJGc2JDSXNJbmRvWVhSVWIwTmhiR3dpTENKc2IyZHpJaXdpWDNScGJXVmtRMkZzYkNJc0ltNWhiV1VpTENKeVpYTWlMQ0p6ZEdGeWRDSXNJa1JoZEdVaUxDSm5aWFJVYVcxbElpd2lkR2x0WlNJc0luUnBiV1ZGYm1RaUxDSmthV1ptSWl3aVpHVmlkV2NpTENKd2RYTm9JaXdpYkdWdVozUm9JaXdpZFc1emFHbG1kQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKMGFXMWxaRU5oYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3h6UWtGRmJFSkRMRTFCUVZFc1UwRkJVME1zUjBGRGJrSXNUMEZCVDBFc1MwRkhURU1zVVVGRlFVTXNWMEZCWVN4VFFVRlRReXhGUVVGTlNDeEhRVU01UWl4SlFVRkpTU3hGUVVOQlF5eEhRVUZCUVN4SlFVRlpReXhOUVVGUFF5eFZRVU5FTEdsQ1FVRllWaXhUUVVGMVFrRXNVVUZCVVZjc1RVRkJUVmdzVVVGQlVWY3NTMEZCUzB3c1IwRkROMFJETEVWQlFVMU1MRTFCUVUxRExFZEJRMVVzYVVKQlFWaElMRk5CUVhWQ1FTeFJRVUZSVnl4TlFVRk5XQ3hSUVVGUldTeFJRVUZSVGl4SFFVTm9SU3hKUVVGSlR5eEhRVUZCUVN4SlFVRlhTaXhOUVVGUFF5eFZRVUZaUml4RlFWRnNReXhOUVZCelFpeHBRa0ZCV0ZJc1UwRkJkMEpCTEZGQlFWRlhMRTFCUVd0RExHMUNRVUZxUWxnc1VVRkJVV01zVDBGQmNVSmtMRkZCUVZGakxFMUJRVTFTTEVWQlFVMHNUMEZCVVU4c1JVRkJUU3hOUVVNelNGUXNTMEZCUzFjc1RVRkRTRlFzUzBGQlRVRXNSVUZEVGtzc1MwRkJUVVVzU1VGSFNsUXNTMEZCUzFrc1QwRkJVeXhMUVVGTFdpeExRVUZMWVN4VlFVTnlRbFlzUjBGSFZGY3NUMEZCVDBNc1UwRkRURU1zVlVGQlYyWXNWMEZEV0VRc1MwRkJUVUVpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwzUnBiV1ZrTFdOaGJHd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLHVuZG9NYW5hZ2VyPXJlcXVpcmUoXCIuL3VuZG9tYW5hZ2VyLmpzXCIpLHVuZG9zZXJpYWxpemVyPXJlcXVpcmUoXCIuL3VuZG9zZXJpYWxpemVyLmpzXCIpLGFkZFVuZG9TdGFja0V4dGVuc2lvbk1ha2VyPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihuKXtuLmNvbnRlbnRMaXN0ZW5lcnMobi5jb250ZW50TGlzdGVuZXJzKCkrMik7dmFyIG89dW5kb01hbmFnZXIobi5jb250ZW50LHtsZXZlbHM6MTAwLHVuZG9MYWJlbDprby5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBuLnQoXCJVbmRvICgjQ09VTlQjKVwiKX0pLHJlZG9MYWJlbDprby5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBuLnQoXCJSZWRvXCIpfSl9KTtyZXR1cm4gbi51bmRvPW8udW5kb0NvbW1hbmQsbi51bmRvLmV4ZWN1dGU9ZS5iaW5kKG4sXCJ1bmRvXCIsbi51bmRvLmV4ZWN1dGUpLG4ucmVkbz1vLnJlZG9Db21tYW5kLG4ucmVkby5leGVjdXRlPWUuYmluZChuLFwicmVkb1wiLG4ucmVkby5leGVjdXRlKSxuLnVuZG9SZXNldD1lLmJpbmQobixcInVuZG9SZXNldFwiLG8ucmVzZXQpLG4uc2V0VW5kb01vZGVNZXJnZT1vLnNldE1vZGVNZXJnZSxuLnNldFVuZG9Nb2RlT25jZT1vLnNldE1vZGVPbmNlLG8uc2V0TW9kZUlnbm9yZSgpLG8uc2V0VW5kb0FjdGlvbk1ha2VyKHVuZG9zZXJpYWxpemVyLm1ha2VVbmRvQWN0aW9uLmJpbmQodm9pZCAwLG4uY29udGVudCkpLHVuZG9zZXJpYWxpemVyLndhdGNoRW5hYmxlZCghMCkse3BhdXNlOmZ1bmN0aW9uKCl7by5zZXRNb2RlSWdub3JlKCl9LHJ1bjpmdW5jdGlvbigpe28uc2V0TW9kZU9uY2UoKX0saW5pdDpmdW5jdGlvbigpe28uc2V0TW9kZU9uY2UoKX0sZGlzcG9zZTpmdW5jdGlvbigpe24uY29udGVudExpc3RlbmVycyhuLmNvbnRlbnRMaXN0ZW5lcnMoKS0yKSx1bmRvc2VyaWFsaXplci53YXRjaEVuYWJsZWQoITEpLG8uZGlzcG9zZSgpfX19fTttb2R1bGUuZXhwb3J0cz1hZGRVbmRvU3RhY2tFeHRlbnNpb25NYWtlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluVnVaRzl0WVdsdUxtcHpJbDBzSW01aGJXVnpJanBiSW10dklpd2lkMmx1Wkc5M0lpd2laMnh2WW1Gc0lpd2lkVzVrYjAxaGJtRm5aWElpTENKeVpYRjFhWEpsSWl3aWRXNWtiM05sY21saGJHbDZaWElpTENKaFpHUlZibVJ2VTNSaFkydEZlSFJsYm5OcGIyNU5ZV3RsY2lJc0luQmxjbVp2Y20xaGJtTmxRWGRoY21WRFlXeHNaWElpTENKMmFXVjNUVzlrWld3aUxDSmpiMjUwWlc1MFRHbHpkR1Z1WlhKeklpd2lkVzVrYjFKbFpHOVRkR0ZqYXlJc0ltTnZiblJsYm5RaUxDSnNaWFpsYkhNaUxDSjFibVJ2VEdGaVpXd2lMQ0pqYjIxd2RYUmxaQ0lzSW5RaUxDSnlaV1J2VEdGaVpXd2lMQ0oxYm1Sdklpd2lkVzVrYjBOdmJXMWhibVFpTENKbGVHVmpkWFJsSWl3aVltbHVaQ0lzSW5KbFpHOGlMQ0p5WldSdlEyOXRiV0Z1WkNJc0luVnVaRzlTWlhObGRDSXNJbkpsYzJWMElpd2ljMlYwVlc1a2IwMXZaR1ZOWlhKblpTSXNJbk5sZEUxdlpHVk5aWEpuWlNJc0luTmxkRlZ1Wkc5TmIyUmxUMjVqWlNJc0luTmxkRTF2WkdWUGJtTmxJaXdpYzJWMFRXOWtaVWxuYm05eVpTSXNJbk5sZEZWdVpHOUJZM1JwYjI1TllXdGxjaUlzSW0xaGEyVlZibVJ2UVdOMGFXOXVJaXdpZDJGMFkyaEZibUZpYkdWa0lpd2ljR0YxYzJVaUxDSnlkVzRpTENKcGJtbDBJaXdpWkdsemNHOXpaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1IwRkJkMElzYjBKQlFWaERMRTlCUVhsQ1FTeFBRVUZYUkN4SFFVRnpRaXh2UWtGQldFVXNUMEZCZVVKQkxFOUJRVmRHTEVkQlFVa3NTMEZEY0VkSExGbEJRV05ETEZGQlFWRXNiMEpCUTNSQ1F5eGxRVUZwUWtRc1VVRkJVU3gxUWtGRmVrSkZMREpDUVVFMlFpeFRRVUZUUXl4SFFVTjRReXhQUVVGUExGTkJRVk5ETEVkQlJXUkJMRVZCUVZWRExHbENRVUZwUWtRc1JVRkJWVU1zYlVKQlFYRkNMRWRCUnpGRUxFbEJRVWxETEVWQlFXZENVQ3haUVVGWlN5eEZRVUZWUnl4VFFVTjRRME1zVDBGQlVTeEpRVU5TUXl4VlFVRlhZaXhIUVVGSFl5eFRRVUZUTEZkQlFXRXNUMEZCVDA0c1JVRkJWVThzUlVGQlJTeHZRa0ZEZGtSRExGVkJRVmRvUWl4SFFVRkhZeXhUUVVGVExGZEJRV0VzVDBGQlQwNHNSVUZCVlU4c1JVRkJSU3haUVdGNlJDeFBRVmhCVUN4RlFVRlZVeXhMUVVGUFVDeEZRVUZqVVN4WlFVTXZRbFlzUlVGQlZWTXNTMEZCUzBVc1VVRkJWVm9zUlVGQmRVSmhMRXRCUVV0YUxFVkJRVmNzVDBGQlVVRXNSVUZCVlZNc1MwRkJTMFVzVTBGRGRrWllMRVZCUVZWaExFdEJRVTlZTEVWQlFXTlpMRmxCUXk5Q1pDeEZRVUZWWVN4TFFVRkxSaXhSUVVGVldpeEZRVUYxUW1Fc1MwRkJTMW9zUlVGQlZ5eFBRVUZSUVN4RlFVRlZZU3hMUVVGTFJpeFRRVU4yUmxnc1JVRkJWV1VzVlVGQldXaENMRVZCUVhWQ1lTeExRVUZMV2l4RlFVRlhMRmxCUVdGRkxFVkJRV05qTEU5QlEzaEdhRUlzUlVGQlZXbENMR2xDUVVGdFFtWXNSVUZCWTJkQ0xHRkJRek5EYkVJc1JVRkJWVzFDTEdkQ1FVRnJRbXBDTEVWQlFXTnJRaXhaUVVNeFEyeENMRVZCUVdOdFFpeG5Ra0ZEWkc1Q0xFVkJRV052UWl4dFFrRkJiVUo2UWl4bFFVRmxNRUlzWlVGQlpWZ3NWVUZCUVVFc1JVRkJaMEphTEVWQlFWVkhMRlZCUTNwR1RpeGxRVUZsTWtJc1kwRkJRVUVzU1VGSFlrTXNUVUZCVHl4WFFVTk1ka0lzUlVGQlkyMUNMR2xDUVVWb1Frc3NTVUZCU3l4WFFVTkllRUlzUlVGQlkydENMR1ZCUldoQ1R5eExRVUZOTEZkQlEwcDZRaXhGUVVGamEwSXNaVUZGYUVKUkxGRkJRVk1zVjBGRFVEVkNMRVZCUVZWRExHbENRVUZwUWtRc1JVRkJWVU1zYlVKQlFYRkNMRWRCUXpGRVNpeGxRVUZsTWtJc1kwRkJRVUVzUjBGRFpuUkNMRVZCUVdNd1FpeGpRVTkwUWtNc1QwRkJUME1zVVVGQlZXaERJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwzTnlZeTlxY3k5MWJtUnZiV0Z1WVdkbGNpOTFibVJ2YldGcGJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGtvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LmtvOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsLmtvOm51bGwscmVhY3Rvcj1yZXF1aXJlKFwia28tcmVhY3Rvci9kaXN0L2tvLXJlYWN0b3IubWluLmpzXCIpLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKSx1bmRvTWFuYWdlcj1mdW5jdGlvbihlLG8pe3ZhciBuLHQ9a28ub2JzZXJ2YWJsZUFycmF5KCksaT1rby5vYnNlcnZhYmxlQXJyYXkoKSxyPTAsZD0wLGw9e2xldmVsczoxMDAsdW5kb0xhYmVsOlwidW5kbyAoI0NPVU5UIylcIixyZWRvTGFiZWw6XCJyZWRvICgjQ09VTlQjKVwifTtvPVwib2JqZWN0XCI9PXR5cGVvZiBvP2tvLnV0aWxzLmV4dGVuZChsLG8pOmw7dmFyIHU9ZnVuY3Rpb24oZSl7MT09cj9hKGUsaSk6Mj09cj9hKGUsdCk6MD09ciYmKGEoZSx0KSxpLnJlbW92ZUFsbCgpKX0sYT1mdW5jdGlvbihlLHQpe2lmKHQoKS5sZW5ndGg+MCl7dmFyIGk9KGQ9ZSx2b2lkIDAhPT0ocj10KClbdCgpLmxlbmd0aC0xXSkubWVyZ2VkQWN0aW9uP3IubWVyZ2VkQWN0aW9uKGQpOm51bGwpO2lmKG51bGwhPT1pKXJldHVybiB2b2lkKHQoKVt0KCkubGVuZ3RoLTFdPWkpfXZhciByLGQ7dCgpLmxlbmd0aD49by5sZXZlbHMmJnQuc2hpZnQoKSxuPXQsdC5wdXNoKGUpfSxjPWZ1bmN0aW9uKGUsbyx0KXtyZXR1cm57bmFtZTprby5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGUpLnJlcGxhY2UoLyNDT1VOVCMvLHQoKS5sZW5ndGgpfSksZW5hYmxlZDprby5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiAwIT09dCgpLmxlbmd0aH0pLGV4ZWN1dGU6ZnVuY3Rpb24oKXt2YXIgZT10LnBvcCgpO2lmKGUpe3ZhciBpPXI7cj1vO3ZhciBsPWQ7ZD0zLGUoKSxzKG4pLGQ9bCxyPWl9cmV0dXJuITB9fX0scz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXRocm93XCJVbmV4cGVjdGVkIG9wZXJhdGlvbjogc3RhY2sgY2xlYW5lciBjYWxsZWQgd2l0aCB1bmRlZmluZWQgc3RhY2tcIjtlKCkubGVuZ3RoPjAmJnZvaWQgMCE9PWUoKVtlKCkubGVuZ3RoLTFdLm1lcmdlZEFjdGlvbiYmZGVsZXRlIGUoKVtlKCkubGVuZ3RoLTFdLm1lcmdlZEFjdGlvbn0sZj1mdW5jdGlvbihlLG8pe3ZhciBuPWZ1bmN0aW9uKGUsbyl7ZSgpLG8oKX0uYmluZCh2b2lkIDAsZSxvKTtyZXR1cm4gdm9pZCAwIT09ZS5tZXJnZWRBY3Rpb24mJihuLm1lcmdlZEFjdGlvbj1lLm1lcmdlZEFjdGlvbiksbn0sbT1mdW5jdGlvbihlLG8sbil7aWYodm9pZCAwIT09byllKG8pO2Vsc2V7aWYoIW4pdGhyb3dcIlVuZXhwZWN0ZWQgY29uZGl0aW9uOiBubyBpdGVtIGFuZCBubyBjaGlsZC5vbGRWYWx1ZXMhXCI7aWYoXCJkZWxldGVkXCI9PW4uc3RhdHVzKWUuc3BsaWNlKG4uaW5kZXgsMCxuLnZhbHVlKTtlbHNle2lmKFwiYWRkZWRcIiE9bi5zdGF0dXMpdGhyb3dcIlVuc3VwcG9ydGVkIGl0ZW0uc3RhdHVzOiBcIituLnN0YXR1cztlLnNwbGljZShuLmluZGV4LDEpfX19LHY9ZnVuY3Rpb24oZSxvLG4sdCxpKXtyZXR1cm4gZS5iaW5kKHZvaWQgMCxuLHQsaSl9LGc9KFwiZnVuY3Rpb25cIj09dHlwZW9mIHJlYWN0b3I/cmVhY3Rvcjprby53YXRjaCkoZSx7ZGVwdGg6LTEsb2xkVmFsdWVzOjEsbXV0YWJsZTohMCx0YWdGaWVsZHM6ITB9LGZ1bmN0aW9uKGUsbyxuKXt2YXIgdD12b2lkIDAhPT1vLm9sZFZhbHVlcz9vLm9sZFZhbHVlc1swXTp2b2lkIDAsaT12KG0sZSxvLHQsbik7MSE9ZCYmKDM9PWQ/dm9pZCAwIT09aSYmKGkubWVyZ2VkQWN0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lLm1lcmdlTWUmJmUubWVyZ2VNZT9mKGUsdGhpcyk6bnVsbH0saS5tZXJnZU1lPSEwKTp2b2lkIDAhPT1pJiYoby5vbGRWYWx1ZXMmJjI9PWQmJihpLm1lcmdlZEFjdGlvbj1mdW5jdGlvbihlLG8sbil7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG4ubWVyZ2VhYmxlQWN0aW9uJiZlPT1uLm1lcmdlYWJsZUFjdGlvbi5jaGlsZD90aGlzOm51bGx9LmJpbmQoaSxvLG4pLGkubWVyZ2VhYmxlQWN0aW9uPXtjaGlsZDpvLGl0ZW06bn0pLG4mJlwiZGVsZXRlZFwiPT1uLnN0YXR1cz9pLm1lcmdlZEFjdGlvbj1mdW5jdGlvbihlLG8sbil7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG4ubWVyZ2VhYmxlTW92ZSYmby52YWx1ZT09bi5tZXJnZWFibGVNb3ZlLml0ZW0udmFsdWU/ZihuLHRoaXMpOm51bGx9LmJpbmQoaSxvLG4pOm4mJlwiYWRkZWRcIj09bi5zdGF0dXM/aS5tZXJnZWFibGVNb3ZlPXtjaGlsZDpvLGl0ZW06bn06biYmY29uc29sZS53YXJuKFwiVW5zdXBwb3J0ZWQgaXRlbS5zdGF0dXNcIixuLnN0YXR1cykpLHZvaWQgMCE9PWkmJnUoaSkpfSx7fSk7cmV0dXJue3B1c2g6dSx1bmRvQ29tbWFuZDpjKG8udW5kb0xhYmVsLDEsdCkscmVkb0NvbW1hbmQ6YyhvLnJlZG9MYWJlbCwyLGkpLHJlc2V0OmZ1bmN0aW9uKCl7dC5yZW1vdmVBbGwoKSxpLnJlbW92ZUFsbCgpfSxzZXRNb2RlT25jZTpmdW5jdGlvbigpe2Q9MixzKHQpfSxzZXRNb2RlTWVyZ2U6ZnVuY3Rpb24oKXtkPTMscyh0KX0sc2V0TW9kZU5vcm1hbDpmdW5jdGlvbigpe2Q9MCxzKHQpfSxzZXRNb2RlSWdub3JlOmZ1bmN0aW9uKCl7ZD0xLHModCl9LHNldFVuZG9BY3Rpb25NYWtlcjpmdW5jdGlvbihlKXt2PWV9LGRpc3Bvc2U6ZnVuY3Rpb24oKXtnLmRpc3Bvc2UoKX19fTttb2R1bGUuZXhwb3J0cz11bmRvTWFuYWdlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluVnVaRzl0WVc1aFoyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltdHZJaXdpZDJsdVpHOTNJaXdpWjJ4dlltRnNJaXdpY21WaFkzUnZjaUlzSW5KbGNYVnBjbVVpTENKamIyNXpiMnhsSWl3aWRXNWtiMDFoYm1GblpYSWlMQ0p0YjJSbGJDSXNJbTl3ZEdsdmJuTWlMQ0pzWVhOMFVIVnphR1ZrVTNSaFkyc2lMQ0oxYm1SdlUzUmhZMnNpTENKdlluTmxjblpoWW14bFFYSnlZWGtpTENKeVpXUnZVM1JoWTJzaUxDSnpkR0YwWlNJc0ltMXZaR1VpTENKa1pXWmhkV3gwVDNCMGFXOXVjeUlzSW14bGRtVnNjeUlzSW5WdVpHOU1ZV0psYkNJc0luSmxaRzlNWVdKbGJDSXNJblYwYVd4eklpd2laWGgwWlc1a0lpd2lYM0IxYzJnaUxDSmhZM1JwYjI0aUxDSmZjSFZ6YUVsdWRDSXNJbkpsYlc5MlpVRnNiQ0lzSW0xNVUzUmhZMnNpTENKc1pXNW5kR2dpTENKdFpYSm5aV1FpTENKdVpYZEJZM1JwYjI0aUxDSndjbVYySWl3aWJXVnlaMlZrUVdOMGFXOXVJaXdpYzJocFpuUWlMQ0p3ZFhOb0lpd2lYM2hrYjBOdmJXMWhibVFpTENKc1lXSmxiQ0lzSW5kdmNtdFRkR0YwWlNJc0luTjBZV05ySWl3aWJtRnRaU0lzSW1OdmJYQjFkR1ZrSWl3aWRXNTNjbUZ3VDJKelpYSjJZV0pzWlNJc0luSmxjR3hoWTJVaUxDSmxibUZpYkdWa0lpd2laWGhsWTNWMFpTSXNJbkJ2Y0NJc0luQnlaWFpUZEdGMFpTSXNJbTlzWkUxdlpHVWlMQ0pmY21WdGIzWmxUV1Z5WjJWa1FXTjBhVzl1SWl3aVgyTnZiV0pwYm1Wa1JuVnVZM1JwYjI0aUxDSm1hWEp6ZENJc0luTmxZMjl1WkNJc0luSmxjeUlzSW1ZeElpd2laaklpTENKaWFXNWtJaXdpWlhobFkzVjBaVlZ1Wkc5QlkzUnBiMjRpTENKamFHbHNaQ0lzSW5aaGJIVmxJaXdpYVhSbGJTSXNJbk4wWVhSMWN5SXNJbk53YkdsalpTSXNJbWx1WkdWNElpd2liV0ZyWlZWdVpHOUJZM1JwYjI0aUxDSjFibVJ2Um5WdVl5SXNJbkJoY21WdWRITWlMQ0p2YkdSV1lXd2lMQ0ozWVhSamFDSXNJbVJsY0hSb0lpd2liMnhrVm1Gc2RXVnpJaXdpYlhWMFlXSnNaU0lzSW5SaFowWnBaV3hrY3lJc0ltRmpkQ0lzSW0xbGNtZGxUV1VpTENKMGFHbHpJaXdpYjJ4a1EyaHBiR1FpTENKdmJHUkpkR1Z0SWl3aWJXVnlaMlZoWW14bFFXTjBhVzl1SWl3aWJXVnlaMlZoWW14bFRXOTJaU0lzSW5kaGNtNGlMQ0oxYm1SdlEyOXRiV0Z1WkNJc0luSmxaRzlEYjIxdFlXNWtJaXdpY21WelpYUWlMQ0p6WlhSTmIyUmxUMjVqWlNJc0luTmxkRTF2WkdWTlpYSm5aU0lzSW5ObGRFMXZaR1ZPYjNKdFlXd2lMQ0p6WlhSTmIyUmxTV2R1YjNKbElpd2ljMlYwVlc1a2IwRmpkR2x2YmsxaGEyVnlJaXdpYldGclpYSWlMQ0prYVhOd2IzTmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4SFFVRjNRaXh2UWtGQldFTXNUMEZCZVVKQkxFOUJRVmRFTEVkQlFYTkNMRzlDUVVGWVJTeFBRVUY1UWtFc1QwRkJWMFlzUjBGQlNTeExRVU53UjBjc1VVRkJWVU1zVVVGQlVTeHhRMEZEYkVKRExGRkJRVlZFTEZGQlFWRXNjMEpCVjJ4Q1JTeFpRVUZqTEZOQlFWVkRMRVZCUVU5RExFZEJRMnBETEVsQlJVbERMRVZCUmtGRExFVkJRVmxXTEVkQlFVZFhMR3RDUVVObVF5eEZRVUZaV2l4SFFVRkhWeXhyUWtGTFprVXNSVUZJWXl4RlFWTmtReXhGUVVwakxFVkJUV1JETEVkQlEwWkRMRTlCUVZFc1NVRkRVa01zVlVGQlZ5eHBRa0ZEV0VNc1ZVRkJWeXhyUWtGSldGWXNSVUZFYjBJc2FVSkJRVmhCTEVWQlEwTlNMRWRCUVVkdFFpeE5RVUZOUXl4UFFVRlBUQ3hGUVVGblFsQXNSMEZGYUVOUExFVkJSMW9zU1VGQlNVMHNSVUZCVVN4VFFVRlZReXhIUVhSQ1JpeEhRWGRDWkZRc1JVRkRSbFVzUlVGQlUwUXNSVUZCVVZZc1IwRjRRa1FzUjBGNVFsQkRMRVZCUTFSVkxFVkJRVk5FTEVWQlFWRmFMRWRCTlVKSUxFZEJOa0pNUnl4SlFVTlVWU3hGUVVGVFJDeEZRVUZSV2l4SFFVTnFRa1VzUlVGQlZWa3NZMEZWVmtRc1JVRkJWeXhUUVVGVlJDeEZRVUZSUnl4SFFVa3ZRaXhIUVVGSlFTeEpRVUZWUXl4UFFVRlRMRVZCUVVjc1EwRkRlRUlzU1VGQlNVTXNSMEZZZDBKRExFVkJWelJDVGl4UFFVRkJRU3hMUVZoc1EwOHNSVUZYUTBvc1NVRkJWVUVzU1VGQlZVTXNUMEZCVXl4SlFWWjBRMGtzWVVGRFVFUXNSVUZCUzBNc1lVRkJZVVlzUjBGRFlpeE5RVlZhTEVkQlFXVXNUMEZCV0VRc1JVRkZSaXhaUVVSQlJpeEpRVUZWUVN4SlFVRlZReXhQUVVGVExFZEJRVXRETEVkQlpIaENMRWxCUVZWRkxFVkJRVTFFTEVWQmEwSXhRa2dzU1VGQlZVTXNVVUZCVld4Q0xFVkJRVkZSTEZGQlFWRlRMRVZCUVZGTkxGRkJRMmhFZEVJc1JVRkJhMEpuUWl4RlFVTnNRa0VzUlVGQlVVOHNTMEZCUzFZc1NVRkhXRmNzUlVGQll5eFRRVUZUUXl4RlFVRlBReXhGUVVGWFF5eEhRVU16UXl4UFFVTkZReXhMUVVGTmNrTXNSMEZCUjNORExGTkJRVk1zVjBGRGFFSXNUMEZCVDNSRExFZEJRVWR0UWl4TlFVRk5iMElzYVVKQlFXbENUQ3hIUVVGUFRTeFJRVUZSTEZWQlFWZEtMRWxCUVZGV0xGVkJSWEpGWlN4UlFVRlRla01zUjBGQlIzTkRMRk5CUVZNc1YwRkRia0lzVDBGQk1FSXNTVUZCYmtKR0xFbEJRVkZXTEZOQlJXcENaMElzVVVGQlV5eFhRVU5RTEVsQlFVbHdRaXhGUVVGVFl5eEZRVUZOVHl4TlFVTnVRaXhIUVVGSmNrSXNSVUZCVVN4RFFVTldMRWxCUVVselFpeEZRVUZaTDBJc1JVRkRhRUpCTEVWQlFWRnpRaXhGUVVOU0xFbEJRVWxWTEVWQlFWVXZRaXhGUVVOa1FTeEZRV2hGVXl4RlFXdEZWRkVzU1VGRlFYZENMRVZCUVc5Q2NrTXNSMEZEY0VKTExFVkJRVThyUWl4RlFVTlFhRU1zUlVGQlVTdENMRVZCUlZZc1QwRkJRU3hMUVV0R1JTeEZRVUZ6UWl4VFFVRlRja0lzUjBGRGFrTXNVVUZCUVN4SlFVRlhRU3hGUVVGM1FpeExRVUZOTEd0RlFVVnlRMEVzU1VGQlZVTXNUMEZCVXl4UlFVRkJMRWxCUVZsRUxFbEJRVlZCTEVsQlFWVkRMRTlCUVZNc1IwRkJSMGtzY1VKQlJURkVUQ3hKUVVGVlFTeEpRVUZWUXl4UFFVRlRMRWRCUVVkSkxHTkJTWFpEYVVJc1JVRkJiMElzVTBGQlUwTXNSVUZCVDBNc1IwRkRkRU1zU1VGQlNVTXNSVUZCVFN4VFFVRlZReXhGUVVGSlF5eEhRVU4wUWtRc1NVRkRRVU1zUzBGRFEwTXNWVUZCUVVFc1JVRkJaMEpNTEVWQlFVOURMRWRCU1RGQ0xGbEJRVUVzU1VGSVYwUXNSVUZCVFd4Q0xHVkJRMlp2UWl4RlFVRkpjRUlzWVVGQlpXdENMRVZCUVUxc1FpeGpRVVZ3UW05Q0xFZEJSMHhKTEVWQlFXOUNMRk5CUVZORExFVkJRVTlETEVWQlFVOURMRWRCUlRkRExGRkJRVUVzU1VGQlYwUXNSVUZEVkVRc1JVRkJUVU1zVDBGRFJDeERRVUZCTEVsQlFVbERMRVZCVTFRc1MwRkJUU3gzUkVGU1RpeEhRVUZ0UWl4WFFVRm1RU3hGUVVGTFF5eFBRVU5RU0N4RlFVRk5TU3hQUVVGUFJpeEZRVUZMUnl4TlFVRlBMRVZCUVVkSUxFVkJRVXRFTEZkQlF6VkNMRU5CUVVFc1IwRkJiVUlzVTBGQlprTXNSVUZCUzBNc1QwRkhaQ3hMUVVGTkxEUkNRVUUwUWtRc1JVRkJTME1zVDBGR2RrTklMRVZCUVUxSkxFOUJRVTlHTEVWQlFVdEhMRTFCUVU4c1RVRmhNMEpETEVWQlNuZENMRk5CUVZORExFVkJRVlZETEVWQlFWTlNMRVZCUVU5VExFVkJRVkZRTEVkQlEzSkZMRTlCUVU5TExFVkJRVk5VTEZWQlFVRkJMRVZCUVdkQ1JTeEZRVUZQVXl4RlFVRlJVQ3hKUVhkRk4wTlFMRWRCUkRCQ0xHMUNRVUZZTDBNc1VVRkJkMEpCTEZGQlFWVklMRWRCUVVkcFJTeFBRVU40UXpGRUxFZEJTazh5UkN4UFFVRlJMRVZCUVVkRExGVkJRVmNzUlVGQlIwTXNVMEZCUVVFc1JVRkJPRU5ETEZkQlFVRkJMRWRCTDBRelJTeFRRVUZUVGl4RlFVRlRVaXhGUVVGUFJTeEhRVVV4UXl4SlFVRkpUeXhQUVVGQlFTeEpRVUZuUWxRc1JVRkJUVmtzVlVGQk1rSmFMRVZCUVUxWkxGVkJRVlVzVVVGQlFTeEZRVU5xUlVjc1JVRkJUVlFzUlVGQlpWQXNSVUZCYlVKVExFVkJRVk5TTEVWQlFVOVRMRVZCUVZGUUxFZEJOMGh3UkN4SFFTdElXak5ETEVsQk4waFhMRWRCSzBoWVFTeFBRVUZCUVN4SlFVVlRkMFFzU1VGRFZFRXNSVUZCU1hoRExHRkJRV1VzVTBGQlUwWXNSMEZETVVJc1dVRkJRU3hKUVVGWFFTeEZRVUZWTWtNc1UwRkJNa0l6UXl4RlFVRlZNa01zVVVGRGFrUjRRaXhGUVVGclFtNUNMRVZCUVZjMFF5eE5RVU40UWl4TlFVVm9Ra1lzUlVGQlNVTXNVMEZCUVVFc1VVRkJWU3hKUVVkTVJDeEpRVU5NWml4RlFVRk5XU3hYUVRWSlFTeEhRVFJKWVhKRUxFbEJRM0pDZDBRc1JVRkJTWGhETEdGQlFXVXNVMEZCVXpKRExFVkJRVlZETEVWQlFWTTVReXhIUVVNM1F5eE5RVUYzUXl4cFFrRkJOMEpCTEVWQlFWVXJReXhwUWtGQkswSkdMRWRCUVZrM1F5eEZRVUZWSzBNc1owSkJRV2RDY0VJc1RVRkZha1pwUWl4TFFVTkxMRTFCUTJSdVFpeExRVUZMYVVJc1JVRkJTMllzUlVGQlQwVXNSMEZEYmtKaExFVkJRVWxMTEdsQ1FVRnZRbkJDTEUxQlFVOUJMRVZCUVU5RkxFdEJRVTFCTEVsQlVURkRRU3hIUVVGMVFpeFhRVUZtUVN4RlFVRkxReXhQUVVkbVdTeEZRVUZKZUVNc1lVRkJaU3hUUVVGVE1rTXNSVUZCVlVNc1JVRkJVemxETEVkQlNUZERMRTFCUVhORExHbENRVUV6UWtFc1JVRkJWV2RFTEdWQlFUWkNSaXhGUVVGUmJFSXNUMEZCVXpWQ0xFVkJRVlZuUkN4alFVRmpia0lzUzBGQlMwUXNUVUZIZGtaVUxFVkJRV3RDYmtJc1JVRkJWelJETEUxQlN5OUNMRTFCUTFCdVFpeExRVUZMYVVJc1JVRkJTMllzUlVGQlQwVXNSMEZEVmtFc1IwRkJkVUlzVTBGQlprRXNSVUZCUzBNc1QwRkhkRUpaTEVWQlFVbE5MR1ZCUVd0Q2NrSXNUVUZCVDBFc1JVRkJUMFVzUzBGQlRVRXNSMEZEYWtOQkxFZEJRMVJ3UkN4UlFVRlJkMFVzUzBGQlN5d3dRa0ZCTWtKd1FpeEZRVUZMUXl4alFVRkJRU3hKUVVsNFExa3NSMEZCY1VKcVJDeEZRVUZOYVVRc1UwRlRlRU1zVDBGRFJYUkRMRXRCUVUxWUxFVkJRMDU1UkN4WlFVRmhOME1zUlVGQldYcENMRVZCUVZGVExGVkJkRTFtTEVWQmMwMTVRMUFzUjBGRE0wUnhSU3haUVVGaE9VTXNSVUZCV1hwQ0xFVkJRVkZWTEZWQmRFMW1MRVZCYzAxNVEwNHNSMEZETTBSdlJTeE5RVUZQTEZkQlFXRjBSU3hGUVVGVll5eFpRVUZoV2l4RlFVRlZXU3hoUVVWeVJIbEVMRmxCUVdFc1YwRkJZVzVGTEVWQmNFMWFMRVZCYjAwNFFtZERMRVZCUVc5Q2NFTXNTVUZEYUVWM1JTeGhRVUZqTEZkQlFXRndSU3hGUVhCTldpeEZRVzlOSzBKblF5eEZRVUZ2UW5CRExFbEJRMnhGZVVVc1kwRkJaU3hYUVVGaGNrVXNSVUY0VFZvc1JVRjNUV2REWjBNc1JVRkJiMEp3UXl4SlFVTndSVEJGTEdOQlFXVXNWMEZCWVhSRkxFVkJlRTFhTEVWQmQwMW5RMmRETEVWQlFXOUNjRU1zU1VGRGNFVXlSU3h0UWtGQmIwSXNVMEZCVTBNc1IwRkJVM3BDTEVWQlFXbENlVUlzUjBGRGRrUkRMRkZCUVZNc1YwRkJiMFZ5UXl4RlFVRkpjVU1zWVVGSmNrWkRMRTlCUVU5RExGRkJRVlZ1UmlJc0ltWnBiR1VpT2lJdmRtRnlMM2QzZHk5dGIzTmhhV052TFcxaGMzUmxjaTl6Y21NdmFuTXZkVzVrYjIxaGJtRm5aWEl2ZFc1a2IyMWhibUZuWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGxpc3RlbmVyLHdhdGNoRW5hYmxlZCxrbz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5rbzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbC5rbzpudWxsLGNvbnNvbGU9cmVxdWlyZShcImNvbnNvbGUtYnJvd3NlcmlmeVwiKSxfcmVmZXJlbmNlPWZ1bmN0aW9uKGUsbil7Zm9yKHZhciB0LG8scj0wLGE9ZTtyPG4ubGVuZ3RoOylzd2l0Y2gobi5jaGFyQXQocikpe2Nhc2VcIihcIjpcIilcIj09bi5jaGFyQXQocisxKSYmKGE9YSgpKSxyKz0yO2JyZWFrO2Nhc2VcIltcIjpvPW4uaW5kZXhPZihcIl1cIixyKSxhPWFbbi5zdWJzdHJpbmcocisxLG8pXSxyPW8rMTticmVhaztjYXNlXCIuXCI6LTE9PSh0PW4uaW5kZXhPZihcIihcIixyKSkmJih0PW4ubGVuZ3RoKSwtMT09KG89bi5pbmRleE9mKFwiW1wiLHIpKSYmKG89bi5sZW5ndGgpLG89TWF0aC5taW4odCxvKSxhPWFbbi5zdWJzdHJpbmcocisxLG8pXSxyPW99cmV0dXJuIGF9LF9nZXRQYXRoPWZ1bmN0aW9uKGUsbil7Zm9yKHZhciB0LG89XCJcIixyPTA7cjw9ZS5sZW5ndGg7cisrKWlmKHQ9cjxlLmxlbmd0aD9lW3JdOm4sa28uaXNPYnNlcnZhYmxlKHQpJiYobys9XCIoKVwiKSx2b2lkIDAhPT10Ll9maWVsZE5hbWUpbys9XCIuXCIrdC5fZmllbGROYW1lO2Vsc2V7aWYoIShyPjAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGVbci0xXS5wb3ApKXRocm93IGNvbnNvbGUuZXJyb3IoXCJVbmV4cGVjdGVkIHBhcmVudCB3aXRoIG5vIF9maWVsZE5hbWUgYW5kIG5vIHBhcmVudCBhcnJheVwiLHIsZSksXCJVbmV4cGVjdGVkIHBhcmVudCB3aXRoIG5vIF9maWVsZE5hbWUgYW5kIG5vIHBhcmVudCBhcnJheVwiO3ZhciBhPWtvLmlzT2JzZXJ2YWJsZShlW3ItMV0pP2tvLnV0aWxzLnBlZWtPYnNlcnZhYmxlKGVbci0xXSk6ZVtyLTFdLGk9a28udXRpbHMuYXJyYXlJbmRleE9mKGEsdCk7aWYoLTE9PWkpdGhyb3cgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgb2JqZWN0IG5vdCBmb3VuZCBpbiBwYXJlbnQgYXJyYXlcIixhLHQscixlLmxlbmd0aCxrby50b0pTKGEpLGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodCkpLFwiVW5leHBlY3RlZCBvYmplY3Qgbm90IGZvdW5kIGluIHBhcmVudCBhcnJheVwiO28rPVwiW1wiK2krXCJdXCJ9cmV0dXJuIG99LG1ha2VEZXJlZmVyZW5jZWRVbmRvQWN0aW9uPWZ1bmN0aW9uKGUsbix0LG8scil7ZShfcmVmZXJlbmNlKG4sdCksbyxyKX0sX3NldExpc3RlbmVyPWZ1bmN0aW9uKGUpe2xpc3RlbmVyPWV9LG1ha2VVbmRvQWN0aW9uRGVyZWZlcmVuY2VkPWZ1bmN0aW9uKGUsbix0LG8scixhKXt0cnl7dmFyIGk9X2dldFBhdGgodCxvKTtpZihcIm9iamVjdFwiIT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2Ygcnx8KHI9a28udG9KUyhyKSksdm9pZCAwPT09YXx8XCJvYmplY3RcIiE9dHlwZW9mIGEudmFsdWUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGEudmFsdWV8fChhPWtvLnRvSlMoYSkpLHZvaWQgMCE9PWxpc3RlbmVyKXRyeXtsaXN0ZW5lcihpLG8scixhKX1jYXRjaChlKXtjb25zb2xlLmxvZyhcIlVuZG9zZXJpYWxpemVyIGlnbm9yaW5nIGV4Y2VwdGlvbiBpbiBsaXN0ZW5lciBjYWxsYmFja1wiKX1yZXR1cm4gbWFrZURlcmVmZXJlbmNlZFVuZG9BY3Rpb24uYmluZCh2b2lkIDAsbixlLGkscixhKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwiRXhjZXB0aW9uIHByb2Nlc3NpbmcgdW5kb1wiLGUsdCxvLGEpfX0sX3dhdGNoRW5hYmxlZD1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXJldHVybiB3YXRjaEVuYWJsZWQ7d2F0Y2hFbmFibGVkPWV9O21vZHVsZS5leHBvcnRzPXtkZXJlZmVyZW5jZTpfZ2V0UGF0aCxyZWZlcmVuY2U6X3JlZmVyZW5jZSxtYWtlVW5kb0FjdGlvbjptYWtlVW5kb0FjdGlvbkRlcmVmZXJlbmNlZCxzZXRMaXN0ZW5lcjpfc2V0TGlzdGVuZXIsd2F0Y2hFbmFibGVkOl93YXRjaEVuYWJsZWR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5WdVpHOXpaWEpwWVd4cGVtVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklteHBjM1JsYm1WeUlpd2lkMkYwWTJoRmJtRmliR1ZrSWl3aWEyOGlMQ0ozYVc1a2IzY2lMQ0puYkc5aVlXd2lMQ0pqYjI1emIyeGxJaXdpY21WeGRXbHlaU0lzSWw5eVpXWmxjbVZ1WTJVaUxDSnRiMlJsYkNJc0luQmhkR2dpTENKd01TSXNJbkF5SWl3aWNDSXNJbTBpTENKc1pXNW5kR2dpTENKamFHRnlRWFFpTENKcGJtUmxlRTltSWl3aWMzVmljM1J5YVc1bklpd2lUV0YwYUNJc0ltMXBiaUlzSWw5blpYUlFZWFJvSWl3aWNHRnlaVzUwY3lJc0ltTm9hV3hrSWl3aWF5SXNJbWx6VDJKelpYSjJZV0pzWlNJc0lsOW1hV1ZzWkU1aGJXVWlMQ0p3YjNBaUxDSmxjbkp2Y2lJc0luQmhjbVZ1ZEVGeWNtRjVJaXdpZFhScGJITWlMQ0p3WldWclQySnpaWEoyWVdKc1pTSXNJbkJ2Y3lJc0ltRnljbUY1U1c1a1pYaFBaaUlzSW5SdlNsTWlMQ0oxYm5keVlYQlBZbk5sY25aaFlteGxJaXdpYldGclpVUmxjbVZtWlhKbGJtTmxaRlZ1Wkc5QlkzUnBiMjRpTENKMWJtUnZSblZ1WXlJc0luWmhiSFZsSWl3aWFYUmxiU0lzSWw5elpYUk1hWE4wWlc1bGNpSXNJbXhwYzNSbGJtWjFibU1pTENKdFlXdGxWVzVrYjBGamRHbHZia1JsY21WbVpYSmxibU5sWkNJc0ltOXNaRlpoYkNJc0ltVWlMQ0pzYjJjaUxDSmlhVzVrSWl3aVgzZGhkR05vUlc1aFlteGxaQ0lzSW01bGQxWmhiQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKa1pYSmxabVZ5Wlc1alpTSXNJbkpsWm1WeVpXNWpaU0lzSW0xaGEyVlZibVJ2UVdOMGFXOXVJaXdpYzJWMFRHbHpkR1Z1WlhJaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGMVJVbEJMRk5CYVVOQlF5eGhRWGhIUVVNc1IwRkJkMElzYjBKQlFWaERMRTlCUVhsQ1FTeFBRVUZYUkN4SFFVRnpRaXh2UWtGQldFVXNUMEZCZVVKQkxFOUJRVmRHTEVkQlFVa3NTMEZEY0VkSExGRkJRVlZETEZGQlFWRXNjMEpCU1d4Q1F5eFhRVUZoTEZOQlFWTkRMRVZCUVU5RExFZEJTUzlDTEVsQlNFRXNTVUZEU1VNc1JVRkJTVU1zUlVGRVNrTXNSVUZCU1N4RlFVVktReXhGUVVGSlRDeEZRVU5FU1N4RlFVRkpTQ3hGUVVGTFN5eFJRVU5rTEU5QlFWRk1MRVZCUVV0TkxFOUJRVTlJTEVsQlEyeENMRWxCUVVzc1NVRkRkVUlzUzBGQmRFSklMRVZCUVV0TkxFOUJRVTlJTEVWQlFVa3NTMEZEYkVKRExFVkJRVWxCTEV0QlNVNUVMRWRCUVVzc1JVRkRUQ3hOUVVOR0xFbEJRVXNzU1VGRFNFUXNSVUZCUzBZc1JVRkJTMDhzVVVGQlVTeEpRVUZMU2l4SFFVTjJRa01zUlVGQlNVRXNSVUZCUlVvc1JVRkJTMUVzVlVGQlZVd3NSVUZCU1N4RlFVRkhSQ3hKUVVNMVFrTXNSVUZCU1VRc1JVRkJTeXhGUVVOVUxFMUJRMFlzU1VGQlN5eExRVVZSTEVsQlJGaEVMRVZCUVV0RUxFVkJRVXRQTEZGQlFWRXNTVUZCUzBvc1RVRkRWRVlzUlVGQlMwUXNSVUZCUzBzc1UwRkZZaXhKUVVSWVNDeEZRVUZMUml4RlFVRkxUeXhSUVVGUkxFbEJRVXRLTEUxQlExUkVMRVZCUVV0R0xFVkJRVXRMTEZGQlEzaENTQ3hGUVVGTFR5eExRVUZMUXl4SlFVRkpWQ3hGUVVGSlF5eEhRVU5zUWtVc1JVRkJTVUVzUlVGQlJVb3NSVUZCUzFFc1ZVRkJWVXdzUlVGQlNTeEZRVUZIUkN4SlFVTTFRa01zUlVGQlNVUXNSVUZOVml4UFFVRlBSU3hIUVVkTVR5eFRRVUZYTEZOQlFWTkRMRVZCUVZORExFZEJSeTlDTEVsQlJrRXNTVUZEU1ZZc1JVRkVRVWdzUlVGQlR5eEhRVVZHWXl4RlFVRkpMRVZCUVVkQkxFZEJRVXRHTEVWQlFWRlFMRTlCUVZGVExFbEJSMjVETEVkQlJrRllMRVZCUVVsWExFVkJRVWxHTEVWQlFWRlFMRTlCUVZOUExFVkJRVkZGTEVkQlFVdEVMRVZCUTJ4RGNFSXNSMEZCUjNOQ0xHRkJRV0ZhTEV0QlFVbElMRWRCUVZFc1YwRkJRU3hKUVVOeVFrY3NSVUZCUldFc1YwRkRXR2hDTEVkQlFWRXNTVUZCVFVjc1JVRkJSV0VzWlVGRFdDeERRVUZCTEV0QlFVbEdMRVZCUVVrc1IwRkJhME1zYlVKQlFYUkNSaXhGUVVGUlJTeEZRVUZKTEVkQlFVZEhMRXRCV1hoRExFMUJSRUZ5UWl4UlFVRlJjMElzVFVGQlRTd3lSRUZCTkVSS0xFVkJRVWRHTEVkQlEzWkZMREpFUVZoT0xFbEJRVWxQTEVWQlFXTXhRaXhIUVVGSGMwSXNZVUZCWVVnc1JVRkJVVVVzUlVGQlNTeEpRVUZOY2tJc1IwRkJSekpDTEUxQlFVMURMR1ZCUVdWVUxFVkJRVkZGTEVWQlFVa3NTVUZCVFVZc1JVRkJVVVVzUlVGQlNTeEhRVU4wUjFFc1JVRkJUVGRDTEVkQlFVY3lRaXhOUVVGTlJ5eGhRVUZoU2l4RlFVRmhhRUlzUjBGRE4wTXNTVUZCV1N4SFFVRlNiVUlzUlVGTFJpeE5RVVJCTVVJc1VVRkJVWE5DTEUxQlFVMHNPRU5CUVN0RFF5eEZRVUZoYUVJc1JVRkJSMWNzUlVGQlIwWXNSVUZCVVZBc1QwRkJVVm9zUjBGQlJ5dENMRXRCUVV0TUxFZEJRV014UWl4SFFVRkhNa0lzVFVGQlRVc3NhVUpCUVdsQ2RFSXNTVUZETVVrc09FTkJTazVJTEVkQlFWRXNTVUZCVFhOQ0xFVkJRVTBzU1VGWE1VSXNUMEZCVDNSQ0xFZEJSMHd3UWl3eVFrRkJOa0lzVTBGQlUwTXNSVUZCVlRWQ0xFVkJRVTlETEVWQlFVMDBRaXhGUVVGUFF5eEhRVVYwUlVZc1JVRkVXVGRDTEZkQlFWZERMRVZCUVU5RExFZEJRMlEwUWl4RlFVRlBReXhKUVV0eVFrTXNZVUZCWlN4VFFVRlRReXhIUVVNeFFuaERMRk5CUVZkM1F5eEhRVWxVUXl3eVFrRkJOa0lzVTBGQlUycERMRVZCUVU4MFFpeEZRVUZWWml4RlFVRlRReXhGUVVGUGIwSXNSVUZCVVVvc1IwRkRha1lzU1VGRFJTeEpRVUZKTjBJc1JVRkJUMWNzVTBGQlUwTXNSVUZCVTBNc1IwRlROMElzUjBGT2MwSXNhVUpCUVZodlFpeEhRVUY1UXl4dFFrRkJXRUVzU1VGQmRVSkJMRVZCUVZONFF5eEhRVUZISzBJc1MwRkJTMU1zVTBGQlFVRXNTVUZEZEVWS0xFZEJRU3RETEdsQ1FVRm1RU3hGUVVGTFJDeFBRVUUwUXl4dFFrRkJaa01zUlVGQlMwUXNVVUZGYUVaRExFVkJSR053UXl4SFFVRkhLMElzUzBGQlMwc3NVMEZKZUVJc1NVRkJWM1JETEZOQlExUXNTVUZEUlVFc1UwRkJVMU1zUlVGQlRXRXNSVUZCVDI5Q0xFVkJRVkZLTEVkQlF6bENMRTFCUVU5TExFZEJRMUIwUXl4UlFVRlJkVU1zU1VGQlNTd3dSRUZKYUVJc1QwRkJUMVFzTWtKQlFUSkNWU3hWUVVGQlFTeEZRVUZuUWxRc1JVRkJWVFZDTEVWQlFVOURMRVZCUVUxcFF5eEZRVUZSU2l4SFFVTnFSaXhOUVVGUFN5eEhRVVZRZEVNc1VVRkJVWE5DTEUxQlFVMHNORUpCUVRaQ1owSXNSVUZCUjNSQ0xFVkJRVk5ETEVWQlFVOW5RaXhMUVVzNVJGRXNZMEZCWjBJc1UwRkJVME1zUjBGRE0wSXNVVUZCUVN4SlFVRlhRU3hGUVVkVUxFOUJRVTg1UXl4aFFVWlFRU3hoUVVGbE9FTXNSMEZMYmtKRExFOUJRVTlETEZOQlEweERMRmxCUVdFNVFpeFRRVU5pSzBJc1ZVRkJWelZETEZkQlExZzJReXhsUVVGblFsZ3NNa0pCUTJoQ1dTeFpRVUZoWkN4aFFVTmlkRU1zWVVGQll6WkRJaXdpWm1sc1pTSTZJaTkyWVhJdmQzZDNMMjF2YzJGcFkyOHRiV0Z6ZEdWeUwzTnlZeTlxY3k5MWJtUnZiV0Z1WVdkbGNpOTFibVJ2YzJWeWFXRnNhWHBsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5qUXVlcnk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwualF1ZXJ5Om51bGwsa289XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3cua286XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWwua286bnVsbCxjb25zb2xlPXJlcXVpcmUoXCJjb25zb2xlLWJyb3dzZXJpZnlcIikscGVyZm9ybWFuY2VBd2FyZUNhbGxlcj1yZXF1aXJlKFwiLi90aW1lZC1jYWxsLmpzXCIpLnRpbWVkQ2FsbCx0b2FzdHI9cmVxdWlyZShcInRvYXN0clwiKTtmdW5jdGlvbiBpbml0aWFsaXplRWRpdG9yKGUsbyx0LGwpe3ZhciByPXtnYWxsZXJ5UmVjZW50OmtvLm9ic2VydmFibGVBcnJheShbXSkuZXh0ZW5kKHtwYWdpbmc6MTZ9KSxnYWxsZXJ5UmVtb3RlOmtvLm9ic2VydmFibGVBcnJheShbXSkuZXh0ZW5kKHtwYWdpbmc6MTZ9KSxzZWxlY3RlZEJsb2NrOmtvLm9ic2VydmFibGUobnVsbCksc2VsZWN0ZWRJdGVtOmtvLm9ic2VydmFibGUobnVsbCksc2VsZWN0ZWRUb29sOmtvLm9ic2VydmFibGUoMCksc2VsZWN0ZWRJbWFnZVRhYjprby5vYnNlcnZhYmxlKDApLGRyYWdnaW5nOmtvLm9ic2VydmFibGUoITEpLGRyYWdnaW5nSW1hZ2U6a28ub2JzZXJ2YWJsZSghMSksZ2FsbGVyeUxvYWRlZDprby5vYnNlcnZhYmxlKCExKSxzaG93UHJldmlld0ZyYW1lOmtvLm9ic2VydmFibGUoITEpLHByZXZpZXdNb2RlOmtvLm9ic2VydmFibGUoXCJtb2JpbGVcIiksc2hvd1Rvb2xib3g6a28ub2JzZXJ2YWJsZSghMCksc2hvd1RoZW1lOmtvLm9ic2VydmFibGUoITEpLHNob3dHYWxsZXJ5OmtvLm9ic2VydmFibGUoITEpLGRlYnVnOmtvLm9ic2VydmFibGUoITEpLGNvbnRlbnRMaXN0ZW5lcnM6a28ub2JzZXJ2YWJsZSgwKSxsb2dvUGF0aDpcInJzL2ltZy9tb3NhaWNvMzIucG5nXCIsbG9nb1VybDpcIi5cIixsb2dvQWx0OlwibW9zYWljb1wifTtyZXR1cm4gci5jb250ZW50PWUsci5ibG9ja0RlZnM9byxyLm5vdGlmaWVyPXRvYXN0cixyLnR0PWZ1bmN0aW9uKGUsbyl7aWYodm9pZCAwIT09bylmb3IodmFyIHQgaW4gbylvLmhhc093blByb3BlcnR5KHQpJiYoZT1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9fXCIrdCtcIl9fXCIsXCJnXCIpLG9bdF0pKTtyZXR1cm4gZX0sci50PXIudHQsci51dD1mdW5jdGlvbihlLG8pe3JldHVybiBvfSxyLnRlbXBsYXRlUGF0aD10LHIucmVtb3RlVXJsUHJvY2Vzc29yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxyLnJlbW90ZUZpbGVQcm9jZXNzb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWUudXJsJiYoZS51cmw9ci5yZW1vdGVVcmxQcm9jZXNzb3IoZS51cmwpKSx2b2lkIDAhPT1lLnRodW1ibmFpbFVybCYmKGUudGh1bWJuYWlsVXJsPXIucmVtb3RlVXJsUHJvY2Vzc29yKGUudGh1bWJuYWlsVXJsKSksZX0sci5sb2FkR2FsbGVyeT1mdW5jdGlvbigpe3IuZ2FsbGVyeUxvYWRlZChcImxvYWRpbmdcIik7dmFyIGU9bHx8XCIvdXBsb2FkL1wiOyQuZ2V0SlNPTihlLGZ1bmN0aW9uKGUpe2Zvcih2YXIgbz0wO288ZS5maWxlcy5sZW5ndGg7bysrKWUuZmlsZXNbb109ci5yZW1vdGVGaWxlUHJvY2Vzc29yKGUuZmlsZXNbb10pO3IuZ2FsbGVyeUxvYWRlZChlLmZpbGVzLmxlbmd0aCksci5nYWxsZXJ5UmVtb3RlKGUuZmlsZXMucmV2ZXJzZSgpKX0pLmZhaWwoZnVuY3Rpb24oKXtyLmdhbGxlcnlMb2FkZWQoITEpLHIubm90aWZpZXIuZXJyb3Ioci50KFwiVW5leHBlY3RlZCBlcnJvciBsaXN0aW5nIGZpbGVzXCIpKX0pfSxyLmZpbGVUb0ltYWdlPWZ1bmN0aW9uKGUsbyx0KXtyZXR1cm4gZS51cmx9LHIucmVtb3ZlQmxvY2s9ZnVuY3Rpb24oZSxvKXtrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHIuc2VsZWN0ZWRCbG9jayk9PWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZSkmJnIuc2VsZWN0QmxvY2sobnVsbCwhMCk7dmFyIHQ9by5ibG9ja3MucmVtb3ZlKGUpO3JldHVybiByLm5vdGlmaWVyLmluZm8oci50KFwiQmxvY2sgcmVtb3ZlZDogdXNlIHVuZG8gYnV0dG9uIHRvIHJlc3RvcmUgaXQuLi5cIikpLHR9LHIuZHVwbGljYXRlQmxvY2s9ZnVuY3Rpb24oZSxvKXt2YXIgdD1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGUpLGw9a28udG9KUyhrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG8uYmxvY2tzKVt0XSk7dm9pZCAwIT09bC5pZCYmKGwuaWQ9XCJcIiksby5ibG9ja3Muc3BsaWNlKHQrMSwwLGwpfSxyLm1vdmVCbG9jaz1mdW5jdGlvbihlLG8sdCl7dmFyIGw9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShlKSxuPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoby5ibG9ja3MpO2lmKHQmJmw+MHx8IXQmJmw8bi5sZW5ndGgtMSl7dmFyIGE9bCsodD8tMToxKSxpPW5bYV07ci5zdGFydE11bHRpcGxlKCksby5ibG9ja3Muc3BsaWNlKGEsMSksby5ibG9ja3Muc3BsaWNlKGwsMCxpKSxyLnN0b3BNdWx0aXBsZSgpfX0sci5sb2FkRGVmYXVsdEJsb2Nrcz1mdW5jdGlvbigpe3ZhciBlPWtvLnRvSlMoci5jb250ZW50KCkubWFpbkJsb2Nrcyk7ZS5ibG9ja3M9W107Zm9yKHZhciBvPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoci5ibG9ja0RlZnMpLHQ9MDt0PG8ubGVuZ3RoO3QrKyl7dmFyIGw9a28udG9KUyhvW3RdKTtsLmlkPVwiYmxvY2tfXCIrdCxlLmJsb2Nrcy5wdXNoKGwpfXBlcmZvcm1hbmNlQXdhcmVDYWxsZXIoXCJzZXRNYWluQmxvY2tzXCIsci5jb250ZW50KCkubWFpbkJsb2Nrcy5fd3JhcC5iaW5kKHIuY29udGVudCgpLm1haW5CbG9ja3MsZSkpfSxyLmFkZEltYWdlPWZ1bmN0aW9uKGUpe3ZhciBvPSQoXCIjbWFpbi13eXNpd3lnLWFyZWEgLnNlbGVjdGFibGUtaW1nLnNlbGVjdGVkaXRlbVwiKTtyZXR1cm4gMT09by5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZ2b2lkIDAhPT1lLnVybCYmKGtvLmNvbnRleHRGb3Iob1swXSkuX3NyYyhlLnVybCksITApfSxyLmFkZEJsb2NrPWZ1bmN0aW9uKGUsbyl7dmFyIHQsbCxuPXIuc2VsZWN0ZWRCbG9jaygpO2lmKG51bGwhPT1uKWZvcih2YXIgYT1yLmNvbnRlbnQoKS5tYWluQmxvY2tzKCkuYmxvY2tzKCkubGVuZ3RoLTE7YT49MDthLS0paWYoci5jb250ZW50KCkubWFpbkJsb2NrcygpLmJsb2NrcygpW2FdKCk9PW4pe3Q9YTticmVha312b2lkIDAhPT10PyhsPXQrMSxyLmNvbnRlbnQoKS5tYWluQmxvY2tzKCkuYmxvY2tzLnNwbGljZShsLDAsZSksci5ub3RpZmllci5pbmZvKHIudChcIk5ldyBibG9jayBhZGRlZCBhZnRlciB0aGUgc2VsZWN0ZWQgb25lIChfX3Bvc19fKVwiLHtwb3M6bH0pKSk6KHIuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3MucHVzaChlKSxsPXIuY29udGVudCgpLm1haW5CbG9ja3MoKS5ibG9ja3MoKS5sZW5ndGgtMSxyLm5vdGlmaWVyLmluZm8oci50KFwiTmV3IGJsb2NrIGFkZGVkIGF0IHRoZSBtb2RlbCBib3R0b20gKF9fcG9zX18pXCIse3BvczpsfSkpKTt2YXIgaT1yLmNvbnRlbnQoKS5tYWluQmxvY2tzKCkuYmxvY2tzKClbbF0oKTtyZXR1cm4gci5zZWxlY3RCbG9jayhpLCEwKSwhMX0sci5maW5kT2JqZWN0c09mVHlwZT1mdW5jdGlvbihlLG8pe3ZhciB0PVtdLGw9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShlKTtmb3IodmFyIHIgaW4gbClpZihsLmhhc093blByb3BlcnR5KHIpKXt2YXIgbj1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGxbcl0pO2lmKHIubWF0Y2goL0Jsb2NrcyQvKSlmb3IodmFyIGE9a28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShuLmJsb2NrcyksaT0wO2k8YS5sZW5ndGg7aSsrKXt2YXIgYz1rby51dGlscy51bndyYXBPYnNlcnZhYmxlKGFbaV0pO251bGwhPT1vJiZrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGMudHlwZSkhPW98fHQucHVzaChjKX1lbHNlXCJvYmplY3RcIj09dHlwZW9mIG4mJm51bGwhPT1uJiYobnVsbCE9PW8mJmtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobi50eXBlKSE9b3x8dC5wdXNoKG4pKX1yZXR1cm4gdH0sci5wbGFjZWhvbGRlckhlbHBlcj17ZWxlbWVudDpmdW5jdGlvbihlKXtyZXR1cm4gJChlWzBdLm91dGVySFRNTCkucmVtb3ZlQ2xhc3MoXCJ1aS1kcmFnZ2FibGVcIikuYWRkQ2xhc3MoXCJzb3J0YWJsZS1wbGFjZWhvbGRlclwiKS5jc3MoXCJkaXNwbGF5XCIsXCJibG9ja1wiKS5jc3MoXCJwb3NpdGlvblwiLFwicmVsYXRpdmVcIikuY3NzKFwid2lkdGhcIixcIjEwMCVcIikuY3NzKFwiaGVpZ2h0XCIsXCJhdXRvXCIpLmNzcyhcIm9wYWNpdHlcIixcIi44XCIpWzBdfSx1cGRhdGU6ZnVuY3Rpb24oZSxvKXt9fSxyLnN0YXJ0TXVsdGlwbGU9ZnVuY3Rpb24oKXt2b2lkIDAhPT1yLnNldFVuZG9Nb2RlTWVyZ2UmJnIuc2V0VW5kb01vZGVNZXJnZSgpfSxyLnN0b3BNdWx0aXBsZT1mdW5jdGlvbigpe3ZvaWQgMCE9PXIuc2V0VW5kb01vZGVPbmNlJiZyLnNldFVuZG9Nb2RlT25jZSgpfSxyLmxvY2FsR2xvYmFsU3dpdGNoPWZ1bmN0aW9uKGUsbyl7cmV0dXJuIGUobnVsbD09PWUoKT9vKCk6bnVsbCksITF9LHIuc2VsZWN0SXRlbT1mdW5jdGlvbihlLG8sdCl7dmFyIGw9a28udXRpbHMucGVla09ic2VydmFibGUoZSk7cmV0dXJuIHZvaWQgMCE9PXQmJnIuc2VsZWN0QmxvY2sodCwhMSwhMCksbCE9byYmKGUobyksbnVsbCE9PW8mJjA9PT1yLnNlbGVjdGVkVG9vbCgpJiZyLnNlbGVjdGVkVG9vbCgxKSksITF9LmJpbmQocixyLnNlbGVjdGVkSXRlbSksci5pc1NlbGVjdGVkSXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gci5zZWxlY3RlZEl0ZW0oKT09ZX0sci5zZWxlY3RCbG9jaz1mdW5jdGlvbihlLG8sdCxsKXt2YXIgbj1rby51dGlscy5wZWVrT2JzZXJ2YWJsZShlKTtsfHxyLnNlbGVjdEl0ZW0obnVsbCksbiE9byYmKGUobyksci5zaG93R2FsbGVyeSghMSksbnVsbD09PW98fHR8fDAhPT1yLnNlbGVjdGVkVG9vbCgpfHxyLnNlbGVjdGVkVG9vbCgxKSl9LmJpbmQocixyLnNlbGVjdGVkQmxvY2spLHIuY291bnRTdWJzY3JpcHRpb25zPWZ1bmN0aW9uKGUsbyl7dmFyIHQ9MDtmb3IodmFyIGwgaW4gZSlpZihlLmhhc093blByb3BlcnR5KGwpKXt2YXIgbj1lW2xdO2lmKGtvLmlzT2JzZXJ2YWJsZShuKSYmKHZvaWQgMCE9PW4uX2RlZmF1bHRDb21wdXRlZCYmKHZvaWQgMCE9PW8mJmNvbnNvbGUubG9nKG8rXCIvXCIrbCtcIi9fXCIsbi5fZGVmYXVsdENvbXB1dGVkLmdldFN1YnNjcmlwdGlvbnNDb3VudCgpKSx0Kz1uLl9kZWZhdWx0Q29tcHV0ZWQuZ2V0U3Vic2NyaXB0aW9uc0NvdW50KCkpLHZvaWQgMCE9PW8mJmNvbnNvbGUubG9nKG8rXCIvXCIrbCtcIi8tXCIsbi5nZXRTdWJzY3JpcHRpb25zQ291bnQoKSksdCs9bi5nZXRTdWJzY3JpcHRpb25zQ291bnQoKSxuPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobikpLFwib2JqZWN0XCI9PXR5cGVvZiBuJiZudWxsIT09bil7dmFyIGE9ci5jb3VudFN1YnNjcmlwdGlvbnMobix2b2lkIDAhPT1vP28rXCIvXCIrbCtcIkBcIjp2b2lkIDApO3ZvaWQgMCE9PW8mJmNvbnNvbGUubG9nKG8rXCIvXCIrbCtcIkBcIixhKSx0Kz1hfX1yZXR1cm4gdH0sci5sb29wU3Vic2NyaXB0aW9uc0NvdW50PWZ1bmN0aW9uKCl7dmFyIGU9ci5jb3VudFN1YnNjcmlwdGlvbnMoci5jb250ZW50KCkpO2dsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1YnNjcmlwdGlvbnNDb3VudFwiKS5pbm5lckhUTUw9ZSxnbG9iYWwuc2V0VGltZW91dChyLmxvb3BTdWJzY3JpcHRpb25zQ291bnQsMWUzKX0sci5leHBvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2VBd2FyZUNhbGxlcihcImV4cG9ydEhUTUxcIixyLmV4cG9ydEhUTUwpfSxyLmV4cG9ydEhUTUw9ZnVuY3Rpb24oKXt2YXIgZT1cImV4cG9ydGZyYW1lXCI7JChcImJvZHlcIikuYXBwZW5kKCc8aWZyYW1lIGlkPVwiJytlKydcIiBkYXRhLWJpbmQ9XCJiaW5kSWZyYW1lOiAkZGF0YVwiPjwvaWZyYW1lPicpO3ZhciBvPWdsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtrby5hcHBseUJpbmRpbmdzKHIsbyksa28uY2xlYW5Ob2RlKG8pLHIuaW5saW5lJiZyLmlubGluZShvLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpO3ZhciB0PW8uY29udGVudFdpbmRvdy5kb2N1bWVudC5kb2N0eXBlLGw9XCI8IURPQ1RZUEUgXCIrdC5uYW1lKyh0LnB1YmxpY0lkPycgUFVCTElDIFwiJyt0LnB1YmxpY0lkKydcIic6XCJcIikrKCF0LnB1YmxpY0lkJiZ0LnN5c3RlbUlkP1wiIFNZU1RFTVwiOlwiXCIpKyh0LnN5c3RlbUlkPycgXCInK3Quc3lzdGVtSWQrJ1wiJzpcIlwiKStcIj5cXG5cIitvLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTDtrby5yZW1vdmVOb2RlKG8pO3ZhciBuPShsPShsPShsPShsPShsPShsPShsPShsPShsPShsPShsPShsPWwucmVwbGFjZSgvPHNjcmlwdCAoW14+XSogKT90eXBlPVwidGV4dFxcL2h0bWxcIltePl0qPltcXHNcXFNdKj88XFwvc2NyaXB0Pi9nbSxcIlwiKSkucmVwbGFjZSgvPCEtLSBrbyAoKD8hLS0pLikqPyAtLT4vZyxcIlwiKSkucmVwbGFjZSgvPCEtLSBcXC9rbyAtLT4vZyxcIlwiKSkucmVwbGFjZSgvIGRhdGEtYmluZD1cIlteXCJdKlwiL2dtLFwiXCIpKS5yZXBsYWNlKC8gZGF0YS1tY2UtKGhyZWZ8c3JjfHN0eWxlKT1cIlteXCJdKlwiL2dtLFwiXCIpKS5yZXBsYWNlKC8gc3R5bGU9XCJbXlwiXSpcIihbXj5dKikgcmVwbGFjZWQoc3R5bGU9XCJbXlwiXSpcIikvZ20sXCIkMSAkMlwiKSkucmVwbGFjZSgvIHJlcGxhY2VkKHN0eWxlPVwiW15cIl0qXCIpKFtePl0qKSBzdHlsZT1cIlteXCJdKlwiL2dtLFwiICQxJDJcIikpLnJlcGxhY2UoLyByZXBsYWNlZChzdHlsZT1cIlteXCJdKlwiKS9nbSxcIiAkMVwiKSkucmVwbGFjZSgvIGh0dHAtZXF1aXY9XCJbXlwiXSpcIihbXj5dKikgcmVwbGFjZWQoaHR0cC1lcXVpdj1cIlteXCJdKlwiKS9nbSxcIiQxICQyXCIpKS5yZXBsYWNlKC8gcmVwbGFjZWQoaHR0cC1lcXVpdj1cIlteXCJdKlwiKShbXj5dKikgaHR0cC1lcXVpdj1cIlteXCJdKlwiL2dtLFwiICQxJDJcIikpLnJlcGxhY2UoLyByZXBsYWNlZChodHRwLWVxdWl2PVwiW15cIl0qXCIpL2dtLFwiICQxXCIpKS5yZXBsYWNlKC88cmVwbGFjZWRjY1tePl0qIGNvbmRpdGlvbj1cIihbXlwiXSopXCJbXj5dKj4oW1xcc1xcU10qPyk8XFwvcmVwbGFjZWRjYz4vZyxmdW5jdGlvbihlLG8sdCl7dmFyIGw9XCJcXHgzYyEtLVtpZiBcIitvLnJlcGxhY2UoLyZhbXA7LyxcIiZcIikrXCJdPlwiO3JldHVybihsKz10LnJlcGxhY2UoLzwhLS0gY2M6YmM6KFtBLVphLXo6XSopIC0tPig8XFwvY2M+KT88IS0tIGNjOmFjOlxcMSAtLT4vZyxcIjwvJDE+XCIpLnJlcGxhY2UoLz48XFwvY2M+PCEtLSBjYzpzYyAtLT4vZyxcIi8+XCIpLnJlcGxhY2UoLzwhLS0gY2M6Ym86KFtBLVphLXo6XSopIC0tPjxjYy9nLFwiPCQxXCIpLnJlcGxhY2UoL14uKjwhLS0gY2M6c3RhcnQgLS0+LyxcIlwiKS5yZXBsYWNlKC88IS0tIGNjOmVuZCAtLT4uKiQvLFwiXCIpKStcIjwhW2VuZGlmXS0tXFx4M2VcIn0pKS5tYXRjaCgvIGRhdGEtW14gPV0rKD1cIlteXCJdK1wiKT8gLyl8fGwubWF0Y2goLyByZXBsYWNlZChbXj0gXSo9KS8pO3JldHVybiBuJiZjb25zb2xlLndhcm4oXCJPdXRwdXQgSFRNTCBjb250YWlucyB1bmV4cGVjdGVkIGRhdGEtIGF0dHJpYnV0ZXMgb3IgcmVwbGFjZWQgYXR0cmlidXRlc1wiLG4pLGx9LHIuZXhwb3J0SFRNTHRvVGV4dGFyZWE9ZnVuY3Rpb24oZSl7JChlKS52YWwoci5leHBvcnRIVE1MKCkpfSxyLmV4cG9ydEpTT050b1RleHRhcmVhPWZ1bmN0aW9uKGUpeyQoZSkudmFsKHIuZXhwb3J0SlNPTigpKX0sci5pbXBvcnRKU09OZnJvbVRleHRhcmVhPWZ1bmN0aW9uKGUpe3IuaW1wb3J0SlNPTigkKGUpLnZhbCgpKX0sci5leHBvcnRNZXRhZGF0YT1mdW5jdGlvbigpe3JldHVybiBrby50b0pTT04oci5tZXRhZGF0YSl9LHIuZXhwb3J0SlNPTj1mdW5jdGlvbigpe3JldHVybiBrby50b0pTT04oci5jb250ZW50KX0sci5leHBvcnRKUz1mdW5jdGlvbigpe3JldHVybiBrby50b0pTKHIuY29udGVudCl9LHIuaW1wb3J0SlNPTj1mdW5jdGlvbihlKXt2YXIgbz1rby51dGlscy5wYXJzZUpzb24oZSk7ci5jb250ZW50Ll93cmFwKG8pfSxyLmV4cG9ydFRoZW1lPWZ1bmN0aW9uKCl7dmFyIGU9e30sbz1yLmNvbnRlbnQoKS50aGVtZSgpLHQ9ZnVuY3Rpb24oZSxvLGwpe2Zvcih2YXIgciBpbiBsKWlmKGwuaGFzT3duUHJvcGVydHkocikpe3ZhciBuPWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobFtyXSk7bnVsbCE9PW4mJlwib2JqZWN0XCI9PXR5cGVvZiBuP3QocitcIi5cIixvLG4pOm9bZStyXT1ufX07dChcIlwiLGUsbyk7dmFyIGw9XCJcIjtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiZcInR5cGVcIiE9biYmKGwrPW4rXCI6IFwiK2Vbbl0rXCI7XFxuXCIpO3JldHVybiBsfSxyLmxvYWRJbWFnZT1mdW5jdGlvbihlKXtyLmdhbGxlcnlSZWNlbnQudW5zaGlmdChlKSxyLnNlbGVjdGVkSW1hZ2VUYWIoMCl9LHIuc2VsZWN0SW1hZ2U9ZnVuY3Rpb24oZSl7ci5zaG93R2FsbGVyeSghMCl9LHIuZGlhbG9nPWZ1bmN0aW9uKGUsbyl7JChlKS5kaWFsb2cobyl9LHIubG9nPWZ1bmN0aW9uKGUsbyl7fSxyLnNlbGVjdGVkSW1hZ2VUYWIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpezE9PWUmJiExPT09ci5nYWxsZXJ5TG9hZGVkKCkmJnIubG9hZEdhbGxlcnkoKX0scixcImNoYW5nZVwiKSxyfXRvYXN0ci5vcHRpb25zPXtjbG9zZUJ1dHRvbjohMSxkZWJ1ZzohMSxwb3NpdGlvbkNsYXNzOlwidG9hc3QtYm90dG9tLWZ1bGwtd2lkdGhcIix0YXJnZXQ6XCIjbW8tYm9keVwiLG9uY2xpY2s6bnVsbCxzaG93RHVyYXRpb246XCIzMDBcIixoaWRlRHVyYXRpb246XCIxMDAwXCIsdGltZU91dDpcIjUwMDBcIixleHRlbmRlZFRpbWVPdXQ6XCIxMDAwXCIsc2hvd0Vhc2luZzpcInN3aW5nXCIsaGlkZUVhc2luZzpcImxpbmVhclwiLHNob3dNZXRob2Q6XCJmYWRlSW5cIixoaWRlTWV0aG9kOlwiZmFkZU91dFwifSxtb2R1bGUuZXhwb3J0cz1pbml0aWFsaXplRWRpdG9yO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5acFpYZHRiMlJsYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrSWl3aWQybHVaRzkzSWl3aWFsRjFaWEo1SWl3aVoyeHZZbUZzSWl3aWEyOGlMQ0pqYjI1emIyeGxJaXdpY21WeGRXbHlaU0lzSW5CbGNtWnZjbTFoYm1ObFFYZGhjbVZEWVd4c1pYSWlMQ0owYVcxbFpFTmhiR3dpTENKMGIyRnpkSElpTENKcGJtbDBhV0ZzYVhwbFJXUnBkRzl5SWl3aVkyOXVkR1Z1ZENJc0ltSnNiMk5yUkdWbWN5SXNJblJvZFcxaVVHRjBhRU52Ym5abGNuUmxjaUlzSW1kaGJHeGxjbmxWY213aUxDSjJhV1YzVFc5a1pXd2lMQ0puWVd4c1pYSjVVbVZqWlc1MElpd2liMkp6WlhKMllXSnNaVUZ5Y21GNUlpd2laWGgwWlc1a0lpd2ljR0ZuYVc1bklpd2laMkZzYkdWeWVWSmxiVzkwWlNJc0luTmxiR1ZqZEdWa1FteHZZMnNpTENKdlluTmxjblpoWW14bElpd2ljMlZzWldOMFpXUkpkR1Z0SWl3aWMyVnNaV04wWldSVWIyOXNJaXdpYzJWc1pXTjBaV1JKYldGblpWUmhZaUlzSW1SeVlXZG5hVzVuSWl3aVpISmhaMmRwYm1kSmJXRm5aU0lzSW1kaGJHeGxjbmxNYjJGa1pXUWlMQ0p6YUc5M1VISmxkbWxsZDBaeVlXMWxJaXdpY0hKbGRtbGxkMDF2WkdVaUxDSnphRzkzVkc5dmJHSnZlQ0lzSW5Ob2IzZFVhR1Z0WlNJc0luTm9iM2RIWVd4c1pYSjVJaXdpWkdWaWRXY2lMQ0pqYjI1MFpXNTBUR2x6ZEdWdVpYSnpJaXdpYkc5bmIxQmhkR2dpTENKc2IyZHZWWEpzSWl3aWJHOW5iMEZzZENJc0ltNXZkR2xtYVdWeUlpd2lkSFFpTENKclpYa2lMQ0p3WVhKaGJVOWlhaUlzSW5CeWIzQWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbkpsY0d4aFkyVWlMQ0pTWldkRmVIQWlMQ0owSWl3aWRYUWlMQ0pqWVhSbFoyOXllU0lzSW5SbGJYQnNZWFJsVUdGMGFDSXNJbkpsYlc5MFpWVnliRkJ5YjJObGMzTnZjaUlzSW5WeWJDSXNJbkpsYlc5MFpVWnBiR1ZRY205alpYTnpiM0lpTENKbWFXeGxUMkpxSWl3aWRHaDFiV0p1WVdsc1ZYSnNJaXdpYkc5aFpFZGhiR3hsY25raUxDSm5aWFJLVTA5T0lpd2laR0YwWVNJc0lta2lMQ0ptYVd4bGN5SXNJbXhsYm1kMGFDSXNJbkpsZG1WeWMyVWlMQ0ptWVdsc0lpd2laWEp5YjNJaUxDSm1hV3hsVkc5SmJXRm5aU0lzSW05aWFpSXNJbVYyWlc1MElpd2lkV2tpTENKeVpXMXZkbVZDYkc5amF5SXNJbkJoY21WdWRDSXNJblYwYVd4eklpd2lkVzUzY21Gd1QySnpaWEoyWVdKc1pTSXNJbk5sYkdWamRFSnNiMk5ySWl3aWNtVnpJaXdpWW14dlkydHpJaXdpY21WdGIzWmxJaXdpYVc1bWJ5SXNJbVIxY0d4cFkyRjBaVUpzYjJOcklpd2lhVzVrWlhnaUxDSnBaSGdpTENKMWJuZHlZWEJ3WldRaUxDSjBiMHBUSWl3aWFXUWlMQ0p6Y0d4cFkyVWlMQ0p0YjNabFFteHZZMnNpTENKMWNDSXNJbkJoY21WdWRFSnNiMk5yY3lJc0ltUmxjM1JKYm1SbGVDSXNJbVJsYzNSQ2JHOWpheUlzSW5OMFlYSjBUWFZzZEdsd2JHVWlMQ0p6ZEc5d1RYVnNkR2x3YkdVaUxDSnNiMkZrUkdWbVlYVnNkRUpzYjJOcmN5SXNJbTFoYVc1Q2JHOWphM01pTENKcGJuQjFkQ0lzSW5CMWMyZ2lMQ0pmZDNKaGNDSXNJbUpwYm1RaUxDSmhaR1JKYldGblpTSXNJbWx0WnlJc0luTmxiR1ZqZEdWa1NXMW5JaXdpWTI5dWRHVjRkRVp2Y2lJc0lsOXpjbU1pTENKaFpHUkNiRzlqYXlJc0ltWnZkVzVrSWl3aWNHOXpJaXdpYzJWc1pXTjBaV1FpTENKaFpHUmxaQ0lzSW1acGJtUlBZbXBsWTNSelQyWlVlWEJsSWl3aWRIbHdaU0lzSW5aaGJDSXNJbTFoZEdOb0lpd2lZMjl1ZEdWdWRITWlMQ0pqSWl3aWNHeGhZMlZvYjJ4a1pYSklaV3h3WlhJaUxDSmxiR1Z0Wlc1MElpd2lZM1Z5Y21WdWRFbDBaVzBpTENKdmRYUmxja2hVVFV3aUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1Ga1pFTnNZWE56SWl3aVkzTnpJaXdpZFhCa1lYUmxJaXdpWTI5dWRHRnBibVZ5SWl3aWNDSXNJbk5sZEZWdVpHOU5iMlJsVFdWeVoyVWlMQ0p6WlhSVmJtUnZUVzlrWlU5dVkyVWlMQ0pzYjJOaGJFZHNiMkpoYkZOM2FYUmphQ0lzSW1kc2IySmhiRkJ5YjNBaUxDSnpaV3hsWTNSSmRHVnRJaXdpZG1Gc2RXVkJZMk5sYzNOdmNpSXNJbWwwWlcwaUxDSmliRzlqYXlJc0luQmxaV3RQWW5ObGNuWmhZbXhsSWl3aWFYTlRaV3hsWTNSbFpFbDBaVzBpTENKa2IwNXZkRk5sYkdWamRDSXNJbVJ2VG05MFZXNXpaV3hsWTNSSmRHVnRJaXdpWTI5MWJuUlRkV0p6WTNKcGNIUnBiMjV6SWl3aWJXOWtaV3dpTENKcGMwOWljMlZ5ZG1GaWJHVWlMQ0pmWkdWbVlYVnNkRU52YlhCMWRHVmtJaXdpYkc5bklpd2laMlYwVTNWaWMyTnlhWEIwYVc5dWMwTnZkVzUwSWl3aWRHOTBJaXdpZFc1a1pXWnBibVZrSWl3aWJHOXZjRk4xWW5OamNtbHdkR2x2Ym5ORGIzVnVkQ0lzSW1OdmRXNTBJaXdpWkc5amRXMWxiblFpTENKblpYUkZiR1Z0Wlc1MFFubEpaQ0lzSW1sdWJtVnlTRlJOVENJc0luTmxkRlJwYldWdmRYUWlMQ0psZUhCdmNuUWlMQ0psZUhCdmNuUklWRTFNSWl3aVlYQndaVzVrSWl3aVpuSmhiV1ZGYkNJc0ltRndjR3g1UW1sdVpHbHVaM01pTENKamJHVmhiazV2WkdVaUxDSnBibXhwYm1VaUxDSmpiMjUwWlc1MFYybHVaRzkzSWl3aWJtOWtaU0lzSW1SdlkzUjVjR1VpTENKdVlXMWxJaXdpY0hWaWJHbGpTV1FpTENKemVYTjBaVzFKWkNJc0ltUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENJc0luSmxiVzkyWlU1dlpHVWlMQ0owY21GemFDSXNJbU52Ym1ScGRHbHZiaUlzSW1KdlpIa2lMQ0prWkNJc0luZGhjbTRpTENKbGVIQnZjblJJVkUxTWRHOVVaWGgwWVhKbFlTSXNJblJsZUhSaGNtVmhhV1FpTENKbGVIQnZjblJLVTA5T2RHOVVaWGgwWVhKbFlTSXNJbVY0Y0c5eWRFcFRUMDRpTENKcGJYQnZjblJLVTA5T1puSnZiVlJsZUhSaGNtVmhJaXdpYVcxd2IzSjBTbE5QVGlJc0ltVjRjRzl5ZEUxbGRHRmtZWFJoSWl3aWRHOUtVMDlPSWl3aWJXVjBZV1JoZEdFaUxDSmxlSEJ2Y25SS1V5SXNJbXB6YjI0aUxDSndZWEp6WlVwemIyNGlMQ0psZUhCdmNuUlVhR1Z0WlNJc0ltWnNZWFFpTENKdGIyUWlMQ0owYUdWdFpTSXNJbDlsZUhCdmNuUWlMQ0p3Y21WbWFYZ2lMQ0poSWl3aWIzVjBjSFYwSWl3aWJHOWhaRWx0WVdkbElpd2lkVzV6YUdsbWRDSXNJbk5sYkdWamRFbHRZV2RsSWl3aVpHbGhiRzluSWl3aWMyVnNaV04wYjNJaUxDSnZjSFJwYjI1eklpd2liWE5uSWl3aWMzVmljMk55YVdKbElpd2libVYzVm1Gc2RXVWlMQ0pqYkc5elpVSjFkSFJ2YmlJc0luQnZjMmwwYVc5dVEyeGhjM01pTENKMFlYSm5aWFFpTENKdmJtTnNhV05ySWl3aWMyaHZkMFIxY21GMGFXOXVJaXdpYUdsa1pVUjFjbUYwYVc5dUlpd2lkR2x0WlU5MWRDSXNJbVY0ZEdWdVpHVmtWR2x0WlU5MWRDSXNJbk5vYjNkRllYTnBibWNpTENKb2FXUmxSV0Z6YVc1bklpd2ljMmh2ZDAxbGRHaHZaQ0lzSW1ocFpHVk5aWFJvYjJRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVWRCTEVsQlFVbEJMRVZCUVhWQ0xHOUNRVUZZUXl4UFFVRjVRa0VzVDBGQlpVTXNUMEZCYzBJc2IwSkJRVmhETEU5QlFYbENRU3hQUVVGbFJDeFBRVUZKTEV0QlF6TkhSU3hIUVVGM1FpeHZRa0ZCV0Vnc1QwRkJlVUpCTEU5QlFWZEhMRWRCUVhOQ0xHOUNRVUZZUkN4UFFVRjVRa0VzVDBGQlYwTXNSMEZCU1N4TFFVTndSME1zVVVGQlZVTXNVVUZCVVN4elFrRkRiRUpETEhWQ1FVRjVRa1FzVVVGQlVTeHRRa0ZCYlVKRkxGVkJSWEJFUXl4UFFVRlRTQ3hSUVVGUkxGVkJhVUp5UWl4VFFVRlRTU3hwUWtGQmFVSkRMRVZCUVZORExFVkJRVmRETEVWQlFXOUNReXhIUVVWb1JTeEpRVUZKUXl4SFFVTkdReXhqUVVGbFdpeEhRVUZIWVN4dlFrRkJiMEpETEZGQlEzQkRReXhQUVVGUkxFdEJSVlpETEdOQlFXVm9RaXhIUVVGSFlTeHZRa0ZCYjBKRExGRkJRM0JEUXl4UFFVRlJMRXRCUlZaRkxHTkJRV1ZxUWl4SFFVRkhhMElzVjBGQlZ5eE5RVU0zUWtNc1lVRkJZMjVDTEVkQlFVZHJRaXhYUVVGWExFMUJRelZDUlN4aFFVRmpjRUlzUjBGQlIydENMRmRCUVZjc1IwRkROVUpITEdsQ1FVRnJRbkpDTEVkQlFVZHJRaXhYUVVGWExFZEJRMmhEU1N4VFFVRlZkRUlzUjBGQlIydENMRmxCUVVGQkxFZEJRMkpMTEdOQlFXVjJRaXhIUVVGSGEwSXNXVUZCUVVFc1IwRkRiRUpOTEdOQlFXVjRRaXhIUVVGSGEwSXNXVUZCUVVFc1IwRkRiRUpQTEdsQ1FVRnJRbnBDTEVkQlFVZHJRaXhaUVVGQlFTeEhRVU55UWxFc1dVRkJZVEZDTEVkQlFVZHJRaXhYUVVGWExGVkJRek5DVXl4WlFVRmhNMElzUjBGQlIydENMRmxCUVVGQkxFZEJRMmhDVlN4VlFVRlhOVUlzUjBGQlIydENMRmxCUVVGQkxFZEJRMlJYTEZsQlFXRTNRaXhIUVVGSGEwSXNXVUZCUVVFc1IwRkRhRUpaTEUxQlFVODVRaXhIUVVGSGEwSXNXVUZCUVVFc1IwRkRWbUVzYVVKQlFXdENMMElzUjBGQlIydENMRmRCUVZjc1IwRkZhRU5qTEZOQlFWVXNkVUpCUTFaRExGRkJRVk1zU1VGRFZFTXNVVUZCVXl4WFFXdGpXQ3hQUVRsaVFYWkNMRVZCUVZWS0xGRkJRVlZCTEVWQlEzQkNTU3hGUVVGVlNDeFZRVUZaUVN4RlFVVjBRa2NzUlVGQlZYZENMRk5CUVZjNVFpeFBRVWR5UWswc1JVRkJWWGxDTEVkQlFVc3NVMEZCVTBNc1JVRkJTME1zUjBGRE0wSXNVVUZCUVN4SlFVRlhRU3hGUVVOVUxFbEJRVXNzU1VGQlNVTXNTMEZCVVVRc1JVRkRXRUVzUlVGQlUwVXNaVUZCWlVRc1MwRkRNVUpHTEVWQlFVMUJMRVZCUVVsSkxGRkJRVkVzU1VGQlNVTXNUMEZCVHl4TFFVRlBTQ3hGUVVGUExFdEJRVTBzUzBGQlRVUXNSVUZCVTBNc1MwRkZkRVVzVDBGQlQwWXNSMEZQVkRGQ0xFVkJRVlZuUXl4RlFVRkphRU1zUlVGQlZYbENMRWRCUzNoQ2VrSXNSVUZCVldsRExFZEJRVXNzVTBGQlUwTXNSVUZCVlZJc1IwRkRhRU1zVDBGQlQwRXNSMEZIVkRGQ0xFVkJRVlZ0UXl4aFFVRmxja01zUlVGRmVrSkZMRVZCUVZWdlF5eHRRa0ZCY1VJc1UwRkJVME1zUjBGRGRFTXNUMEZCVDBFc1IwRkhWSEpETEVWQlFWVnpReXh2UWtGQmMwSXNVMEZCVTBNc1IwRkpka01zV1VGQlFTeEpRVWhYUVN4RlFVRlJSaXhOUVVGeFFrVXNSVUZCVVVZc1NVRkJUWEpETEVWQlFWVnZReXh0UWtGQmJVSkhMRVZCUVZGR0xGZEJRVUZCTEVsQlEyaEdSU3hGUVVGUlF5eGxRVUU0UWtRc1JVRkJVVU1zWVVGQlpYaERMRVZCUVZWdlF5eHRRa0ZCYlVKSExFVkJRVkZETEdWQlJYUkhSQ3hIUVVsVWRrTXNSVUZCVlhsRExGbEJRV01zVjBGRGRFSjZReXhGUVVGVllTeGpRVUZqTEZkQlEzaENMRWxCUVVsM1FpeEZRVUZOZEVNc1IwRkJNRUlzVjBGRmNFTmtMRVZCUVVWNVJDeFJRVUZSVEN4RlFVRkxMRk5CUVZOTkxFZEJRM1JDTEVsQlFVc3NTVUZCU1VNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUkN4RlFVRkxSU3hOUVVGTlF5eFBRVUZSUml4SlFVRkxSQ3hGUVVGTFJTeE5RVUZOUkN4SFFVRkxOVU1zUlVGQlZYTkRMRzlDUVVGdlFrc3NSVUZCUzBVc1RVRkJUVVFzU1VGRGNrYzFReXhGUVVGVllTeGpRVUZqT0VJc1JVRkJTMFVzVFVGQlRVTXNVVUZGYmtNNVF5eEZRVUZWU3l4alFVRmpjME1zUlVGQlMwVXNUVUZCVFVVc1lVRkRiRU5ETEV0QlFVc3NWMEZEVG1oRUxFVkJRVlZoTEdWQlFVRkJMRWRCUTFaaUxFVkJRVlYzUWl4VFFVRlRlVUlzVFVGQlRXcEVMRVZCUVZWblF5eEZRVUZGTEhORFFVdDZRMmhETEVWQlFWVnJSQ3haUVVGakxGTkJRVk5ETEVWQlFVdERMRVZCUVU5RExFZEJSVE5ETEU5QlFVOUdMRVZCUVVsa0xFdEJTV0p5UXl4RlFVRlZjMFFzV1VGQll5eFRRVUZUV0N4RlFVRk5XU3hIUVVWcVEyeEZMRWRCUVVkdFJTeE5RVUZOUXl4cFFrRkJhVUo2UkN4RlFVRlZUU3huUWtGQmEwSnFRaXhIUVVGSGJVVXNUVUZCVFVNc2FVSkJRV2xDWkN4SlFVTnNSak5ETEVWQlFWVXdSQ3haUVVGWkxFMUJRVUVzUjBGRmVFSXNTVUZCU1VNc1JVRkJUVW9zUlVGQlQwc3NUMEZCVDBNc1QwRkJUMnhDTEVkQlJ5OUNMRTlCUkVFelF5eEZRVUZWZDBJc1UwRkJVM05ETEV0QlFVczVSQ3hGUVVGVlowTXNSVUZCUlN4dlJFRkROMEl5UWl4SFFVbFVNMFFzUlVGQlZTdEVMR1ZCUVdsQ0xGTkJRVk5ETEVWQlFVOVVMRWRCUTNwRExFbEJRVWxWTEVWQlFVMDFSU3hIUVVGSGJVVXNUVUZCVFVNc2FVSkJRV2xDVHl4SFFVVm9RMFVzUlVGQldUZEZMRWRCUVVjNFJTeExRVUZMT1VVc1IwRkJSMjFGTEUxQlFVMURMR2xDUVVGcFFrWXNSVUZCVDBzc1VVRkJVVXNzVTBGQlFVRXNTVUZGZEVSRExFVkJRVlZGTEV0QlFXOUNSaXhGUVVGVlJTeEhRVUZMTEVsQlJYaEVZaXhGUVVGUFN5eFBRVUZQVXl4UFFVRlBTaXhGUVVGTkxFVkJRVWNzUlVGQlIwTXNTVUZKYmtOc1JTeEZRVUZWYzBVc1ZVRkJXU3hUUVVGVFRpeEZRVUZQVkN4RlFVRlJaMElzUjBGRE5VTXNTVUZCU1U0c1JVRkJUVFZGTEVkQlFVZHRSU3hOUVVGTlF5eHBRa0ZCYVVKUExFZEJRMmhEVVN4RlFVRmxia1lzUjBGQlIyMUZMRTFCUVUxRExHbENRVUZwUWtZc1JVRkJUMHNzVVVGRGNFUXNSMEZCUzFjc1IwRkJUVTRzUlVGQlRTeEpRVUZSVFN4SFFVRk5UaXhGUVVGTlR5eEZRVUZoTVVJc1QwRkJVeXhGUVVGSkxFTkJRemRFTEVsQlFVa3lRaXhGUVVGWlVpeEhRVUZQVFN4SFFVRk5MRVZCUVVrc1IwRkROMEpITEVWQlFWbEdMRVZCUVdGRExFZEJRemRDZWtVc1JVRkJWVEpGTEdkQ1FVTldjRUlzUlVGQlQwc3NUMEZCVDFNc1QwRkJUMGtzUlVGQlZ5eEhRVU5vUTJ4Q0xFVkJRVTlMTEU5QlFVOVRMRTlCUVU5S0xFVkJRVXNzUlVGQlIxTXNSMEZETjBJeFJTeEZRVUZWTkVVc2FVSkJTMlExUlN4RlFVRlZOa1VzYTBKQlFXOUNMRmRCUnpWQ0xFbEJRVWxzUWl4RlFVRk5kRVVzUjBGQlJ6aEZMRXRCUVV0dVJTeEZRVUZWU2l4VlFVRlZhMFlzV1VGRGRFTnVRaXhGUVVGSlF5eFZRVVZLTEVsQlJFRXNTVUZCU1cxQ0xFVkJRVkV4Uml4SFFVRkhiVVVzVFVGQlRVTXNhVUpCUVdsQ2VrUXNSVUZCVlVnc1YwRkRka01yUXl4RlFVRkpMRVZCUVVkQkxFVkJRVWx0UXl4RlFVRk5ha01zVDBGQlVVWXNTVUZCU3l4RFFVTnlReXhKUVVGSlR5eEZRVUZOT1VRc1IwRkJSemhGTEV0QlFVdFpMRVZCUVUxdVF5eEpRVVY0UWs4c1JVRkJTV2xDTEVkQlFVc3NVMEZCVjNoQ0xFVkJRM0JDWlN4RlFVRkpReXhQUVVGUGIwSXNTMEZCU3pkQ0xFZEJSV3hDTTBRc2RVSkJRWFZDTEdkQ1FVRnBRbEVzUlVGQlZVb3NWVUZCVld0R0xGZEJRVmRITEUxQlFVMURMRXRCUVV0c1JpeEZRVUZWU2l4VlFVRlZhMFlzVjBGQldXNUNMRXRCU1hCSU0wUXNSVUZCVlcxR0xGTkJRVmNzVTBGQlUwTXNSMEZETlVJc1NVRkJTVU1zUlVGQlkzQkhMRVZCUVVVc2JVUkJRM0JDTEU5QlFUQkNMRWRCUVhSQ2IwY3NSVUZCV1haRExGRkJRVFpDTEdsQ1FVRlFjME1zVVVGQlFVRXNTVUZCTUVKQkxFVkJRVWt2UXl4TlFVTnNSV2hFTEVkQlFVZHBSeXhYUVVGWFJDeEZRVUZaTEVsQlFVbEZMRXRCUVV0SUxFVkJRVWt2UXl4TlFVRkJRU3hKUVZFelEzSkRMRVZCUVZWM1JpeFRRVUZYTEZOQlFWTnlReXhGUVVGTFF5eEhRVVZxUXl4SlFVVkpjVU1zUlVGVlFVTXNSVUZhUVVNc1JVRkJWek5HTEVWQlFWVk5MR2RDUVVkNlFpeEhRVUZwUWl4UFFVRmljVVlzUlVGRlJpeEpRVUZMTEVsQlFVa3ZReXhGUVVGSk5VTXNSVUZCVlVvc1ZVRkJWV3RHTEdGQlFXRnNRaXhUUVVGVFpDeFBRVUZUTEVWQlFVZEdMRWRCUVVzc1JVRkJSMEVzU1VGRGVrVXNSMEZCU1RWRExFVkJRVlZLTEZWQlFWVnJSaXhoUVVGaGJFSXNVMEZCVTJoQ0xFMUJRVkVyUXl4RlFVRlZMRU5CUXpsRVJpeEZRVUZSTjBNc1JVRkRVaXhYUVVGQkxFbEJTMHMyUXl4SFFVTlVReXhGUVVGTlJDeEZRVUZSTEVWQlEyUjZSaXhGUVVGVlNpeFZRVUZWYTBZc1lVRkJZV3hDTEU5QlFVOVRMRTlCUVU5eFFpeEZRVUZMTEVWQlFVZDJReXhIUVVOMlJHNUVMRVZCUVZWM1FpeFRRVUZUYzBNc1MwRkJTemxFTEVWQlFWVm5ReXhGUVVGRkxHOUVRVU5zUXpCRUxFbEJRVXRCTEU5QlIxQXhSaXhGUVVGVlNpeFZRVUZWYTBZc1lVRkJZV3hDTEU5QlFVOXZRaXhMUVVGTE4wSXNSMEZETjBOMVF5eEZRVUZOTVVZc1JVRkJWVW9zVlVGQlZXdEdMR0ZCUVdGc1FpeFRRVUZUWkN4UFFVRlRMRVZCUTNwRU9VTXNSVUZCVlhkQ0xGTkJRVk56UXl4TFFVRkxPVVFzUlVGQlZXZERMRVZCUVVVc2FVUkJRMnhETUVRc1NVRkJTMEVzVFVGSlZDeEpRVUZKUlN4RlFVRlJOVVlzUlVGQlZVb3NWVUZCVld0R0xHRkJRV0ZzUWl4VFFVRlRPRUlzUzBGSGRFUXNUMEZHUVRGR0xFVkJRVlV3UkN4WlFVRlphME1zUjBGQlFVRXNTVUZCVHl4SFFVMHZRalZHTEVWQlFWVTJSaXhyUWtGQmIwSXNVMEZCVTJ4RUxFVkJRVTF0UkN4SFFVTXpReXhKUVVGSmJrTXNTMEZEUVZJc1JVRkJUVGxFTEVkQlFVZHRSU3hOUVVGTlF5eHBRa0ZCYVVKa0xFZEJRM0JETEVsQlFVc3NTVUZCU1dZc1MwRkJVWFZDTEVWQlEyWXNSMEZCU1VFc1JVRkJTWFJDTEdWQlFXVkVMRWRCUVU4c1EwRkROVUlzU1VGQlNXMUZMRVZCUVUweFJ5eEhRVUZIYlVVc1RVRkJUVU1zYVVKQlFXbENUaXhGUVVGSmRrSXNTVUZGZUVNc1IwRkJTVUVzUlVGQlMyOUZMRTFCUVUwc1YwRkZZaXhKUVVSQkxFbEJRVWxETEVWQlFWYzFSeXhIUVVGSGJVVXNUVUZCVFVNc2FVSkJRV2xDYzBNc1JVRkJTVzVETEZGQlEzQkRhRUlzUlVGQlNTeEZRVUZIUVN4RlFVRkpjVVFzUlVGQlUyNUVMRTlCUVZGR0xFbEJRVXNzUTBGRGVFTXNTVUZCU1hORUxFVkJRVWszUnl4SFFVRkhiVVVzVFVGQlRVTXNhVUpCUVdsQ2QwTXNSVUZCVTNKRUxFbEJRemxDTEU5QlFWUnJSQ3hIUVVGcFFucEhMRWRCUVVkdFJTeE5RVUZOUXl4cFFrRkJhVUo1UXl4RlFVRkZTaXhQUVVGVFFTeEhRVUZOYmtNc1JVRkJTWEZDTEV0QlFVdHJRaXhQUVVkd1JDeHBRa0ZCVUVnc1IwRkJNa0lzVDBGQlVrRXNTVUZEZEVJc1QwRkJWRVFzUjBGQmFVSjZSeXhIUVVGSGJVVXNUVUZCVFVNc2FVSkJRV2xDYzBNc1JVRkJTVVFzVDBGQlUwRXNSMEZCVFc1RExFVkJRVWx4UWl4TFFVRkxaU3hKUVVkcVJpeFBRVUZQY0VNc1IwRnJRbFF6UkN4RlFVRlZiVWNzYlVKQlExSkRMRkZCUVZNc1UwRkJVME1zUjBGRGFFSXNUMEZCVDNCSUxFVkJRVVZ2U0N4RlFVRlpMRWRCUVVkRExGZEJRVmRETEZsQlFWa3NaMEpCUVdkQ1F5eFRRVUZUTEhkQ1FVRjNRa01zU1VGQlNTeFZRVUZYTEZOQlFWTkJMRWxCUVVrc1YwRkJXU3haUVVGWlFTeEpRVUZKTEZGQlFWTXNVVUZCVVVFc1NVRkJTU3hUUVVGVkxGRkJRVkZCTEVsQlFVa3NWVUZCVnl4TlFVRk5MRWxCUlhST1F5eFBRVUZSTEZOQlFWTkRMRVZCUVZkRExFMUJUemxDTlVjc1JVRkJWVEpGTEdOQlFXZENMR2RDUVVGQkxFbEJRMkl6UlN4RlFVRlZOa2NzYTBKQlFXdEROMGNzUlVGQlZUWkhMRzlDUVVWdVJUZEhMRVZCUVZVMFJTeGhRVUZsTEdkQ1FVRkJMRWxCUTFvMVJTeEZRVUZWT0Vjc2FVSkJRV2xET1Vjc1JVRkJWVGhITEcxQ1FVbHNSVGxITEVWQlFWVXJSeXhyUWtGQmIwSXNVMEZCVTI1R0xFVkJRVTF2Uml4SFFVa3pReXhQUVVaelFuQkdMRVZCUVU0c1QwRkVSa0VzU1VGRFlXOUdMRWxCUTJwQ0xFOUJRVUVzUjBGTFdtaElMRVZCUVZWcFNDeFhRVUZoTEZOQlFWTkRMRVZCUVdWRExFVkJRVTFETEVkQlEyNUVMRWxCUVVseVFpeEZRVUZOTVVjc1IwRkJSMjFGTEUxQlFVMDJSQ3hsUVVGbFNDeEhRVTlzUXl4WlFVRkJMRWxCVGxkRkxFZEJRWFZDY0Vnc1JVRkJWVEJFTEZsQlFWa3dSQ3hIUVVGQlFTeEhRVUZQTEVkQlF6TkVja0lzUjBGQlQyOUNMRWxCUTFSRUxFVkJRV05ETEVkQlJVUXNUMEZCVkVFc1IwRkJPRU1zU1VGQk4wSnVTQ3hGUVVGVlV5eG5Ra0ZCYzBKVUxFVkJRVlZUTEdGQlFXRXNTMEZCUVN4SFFVYzVSWGxGTEV0QlFVdHNSaXhGUVVGWFFTeEZRVUZWVVN4alFVVTFRbElzUlVGQlZYTklMR1ZCUVdsQ0xGTkJRVk5JTEVkQlEyeERMRTlCUVU5dVNDeEZRVUZWVVN4blFrRkJhMEl5Unl4SFFVZHlRMjVJTEVWQlFWVXdSQ3haUVVGakxGTkJRVk4zUkN4RlFVRmxReXhGUVVGTlNTeEZRVUZoUXl4SFFVTnFSU3hKUVVGSmVrSXNSVUZCVFRGSExFZEJRVWR0UlN4TlFVRk5Oa1FzWlVGQlpVZ3NSMEZETjBKTkxFZEJRVzFDZUVnc1JVRkJWV2xJTEZkQlFWY3NUVUZEZWtOc1FpeEhRVUZQYjBJc1NVRkRWRVFzUlVGQlkwTXNSMEZGWkc1SUxFVkJRVlZyUWl4aFFVRkJRU3hIUVVOSExFOUJRVlJwUnl4SFFVRnJRa2tzUjBGQk5FTXNTVUZCTjBKMlNDeEZRVUZWVXl4blFrRkJjMEpVTEVWQlFWVlRMR0ZCUVdFc1MwRkZPVVo1UlN4TFFVRkxiRVlzUlVGQlYwRXNSVUZCVlUwc1pVRkhOVUpPTEVWQlFWVjVTQ3h0UWtGQmNVSXNVMEZCVTBNc1JVRkJUM1pITEVkQlF6ZERMRWxCUVVsM1F5eEZRVUZOTEVWQlExWXNTVUZCU3l4SlFVRkpMMElzUzBGQlVUaEdMRVZCUTJZc1IwRkJTVUVzUlVGQlRUZEdMR1ZCUVdWRUxFZEJRVThzUTBGRE9VSXNTVUZCU1dkR0xFVkJRVWxqTEVWQlFVMDVSaXhIUVZWa0xFZEJWRWwyUXl4SFFVRkhjMGtzWVVGQllXWXNWVUZCUVVFc1NVRkRVRUVzUlVGQlJXZENMSGRDUVVGQlFTeEpRVU5CZWtjc1IwRkJjMEkzUWl4UlFVRlJkVWtzU1VGQlNURkhMRVZCUVZFc1NVRkJUVk1zUlVGQlR5eExRVUZOWjBZc1JVRkJSV2RDTEdsQ1FVRnBRa1VzZVVKQlF6Tkdia1VzUjBGQlQybEVMRVZCUVVWblFpeHBRa0ZCYVVKRkxEaENRVUZCUVN4SlFVVnFRak5ITEVkQlFYTkNOMElzVVVGQlVYVkpMRWxCUVVreFJ5eEZRVUZSTEVsQlFVMVRMRVZCUVU4c1MwRkJUV2RHTEVWQlFVVnJRaXg1UWtGRE1VVnVSU3hIUVVGUGFVUXNSVUZCUld0Q0xIZENRVU5VYkVJc1JVRkJTWFpJTEVkQlFVZHRSU3hOUVVGTlF5eHBRa0ZCYVVKdFJDeEpRVVZvUWl4cFFrRkJURUVzUjBGQmRVSXNUMEZCVGtFc1JVRkJXU3hEUVVOMFF5eEpRVUZKYlVJc1JVRkJUUzlJTEVWQlFWVjVTQ3h0UWtGQmJVSmlMRTlCUVVGQkxFbEJRVlY2Uml4RlFVRjFRa0VzUlVGQlVTeEpRVUZOVXl4RlFVRlBMRk5CUVVFc1VVRkJUVzlITEVsQlEzaEdOMGNzUjBGQmMwSTNRaXhSUVVGUmRVa3NTVUZCU1RGSExFVkJRVkVzU1VGQlRWTXNSVUZCVHl4SlFVRkxiVWNzUjBGRGRrVndSU3hIUVVGUGIwVXNSMEZIWWl4UFFVRlBjRVVzUjBGSlZETkVMRVZCUVZWcFNTeDFRa0ZCZVVJc1YwRkRha01zU1VGQlNVTXNSVUZCVVd4SkxFVkJRVlY1U0N4dFFrRkJiVUo2U0N4RlFVRlZTaXhYUVVOdVJGSXNUMEZCVHl0SkxGTkJRVk5ETEdWQlFXVXNjMEpCUVhOQ1F5eFZRVUZaU0N4RlFVTnFSVGxKTEU5QlFVOXJTaXhYUVVGWGRFa3NSVUZCVldsSkxIVkNRVUYzUWl4TlFVZDBSR3BKTEVWQlFWVjFTU3hQUVVGVExGZEJSV3BDTEU5QlJHTXZTU3gxUWtGQmRVSXNZVUZCWTFFc1JVRkJWWGRKTEdGQmFVSXZSSGhKTEVWQlFWVjNTU3hYUVVGaExGZEJRM0pDTEVsQlFVbHdSU3hGUVVGTExHTkJRMVJ1Uml4RlFVRkZMRkZCUVZGM1NpeFBRVUZQTEdWQlFXbENja1VzUlVGQlN5dzJRMEZEZGtNc1NVRkJTWE5GTEVWQlFWVjBTaXhQUVVGUEswa3NVMEZCVTBNc1pVRkJaV2hGTEVkQlF6ZERMMFVzUjBGQlIzTktMR05CUVdNelNTeEZRVUZYTUVrc1IwRkZOVUp5U2l4SFFVRkhkVW9zVlVGQlZVWXNSMEZGVkRGSkxFVkJRVlUyU1N4UlFVRlJOMGtzUlVGQlZUWkpMRTlCUVU5SUxFVkJRVkZKTEdOQlFXTllMRlZCU1RkRUxFbEJRVWxaTEVWQlFVOU1MRVZCUVZGSkxHTkJRV05ZTEZOQlFWTmhMRkZCUzNSRGNFb3NSVUZLVlN4aFFVRmxiVW9zUlVGQlMwVXNUVUZETDBKR0xFVkJRVXRITEZOQlFWY3NXVUZCWTBnc1JVRkJTMGNzVTBGQlZ5eEpRVUZOTEUxQlEyNUVTQ3hGUVVGTFJ5eFZRVUZaU0N4RlFVRkxTU3hUUVVGWExGVkJRVmtzUzBGRE9VTktMRVZCUVV0SkxGTkJRVmNzUzBGQlQwb3NSVUZCUzBrc1UwRkJWeXhKUVVGTkxFbEJRVTBzVFVGRGRrSlVMRVZCUVZGSkxHTkJRV05ZTEZOQlFWTnBRaXhuUWtGQlowSTVReXhWUVVNNVJXcElMRWRCUVVkblN5eFhRVUZYV0N4SFFUQkNaQ3hKUVVGSldTeEhRVVJLTVVvc1IwRk1RVUVzUjBGRVFVRXNSMEZFUVVFc1IwRklRVUVzUjBGRVFVRXNSMEZHUVVFc1IwRklRVUVzUjBGR1FVRXNSMEZHUVVFc1IwRkVRVUVzUjBGR1FVRXNSVUZCVlVFc1JVRkJVV3RETEZGQlFWRXNLMFJCUVdkRkxFdEJSWGhGUVN4UlFVRlJMREpDUVVFMFFpeExRVU53UTBFc1VVRkJVU3hwUWtGQmEwSXNTMEZGTVVKQkxGRkJRVkVzZFVKQlFYZENMRXRCUldoRFFTeFJRVUZSTEhWRFFVRjNReXhMUVVkb1JFRXNVVUZCVVN4clJFRkJiVVFzVlVGRk0wUkJMRkZCUVZFc2EwUkJRVzFFTEZWQlF6TkVRU3hSUVVGUkxEWkNRVUU0UWl4UlFVZDBRMEVzVVVGQlVTdzBSRUZCTmtRc1ZVRkRja1ZCTEZGQlFWRXNORVJCUVRaRUxGVkJRM0pGUVN4UlFVRlJMR3REUVVGdFF5eFJRV3hFYWtSQkxGRkJRVkVzYzBWQlFYVkZMRk5CUVZOclJTeEZRVUZQZFVRc1JVRkJWME1zUjBGRGNFZ3NTVUZCU1VNc1JVRkJTeXhqUVVGWFJpeEZRVUZWZWtnc1VVRkJVU3hSUVVGVExFdEJRVXNzUzBGUGNFUXNUMEZPUVRKSUxFZEJRVTFFTEVWQlFVc3hTQ3hSUVVGUkxIbEVRVUV3UkN4VFFVTjBSVUVzVVVGQlVTeDVRa0ZCTUVJc1RVRkRiRU5CTEZGQlFWRXNhME5CUVcxRExFOUJRek5EUVN4UlFVRlJMSFZDUVVGMVFpeEpRVU12UWtFc1VVRkJVU3h4UWtGQmNVSXNTMEZET1VJc2NVSkJhVVJaYTBVc1RVRkJUU3cyUWtGQkswSndSeXhGUVVGUmIwY3NUVUZCVFN4elFrRkxka1VzVDBGS1NYTkVMRWRCUTBab1N5eFJRVUZSYjBzc1MwRkJTeXd3UlVGQk1rVktMRWRCUjI1R01Vb3NSMEZIVkVrc1JVRkJWVEpLTEhGQ1FVRjFRaXhUUVVGVFF5eEhRVU40UXpOTExFVkJRVVV5U3l4SFFVRlpOMFFzU1VGQlNTOUdMRVZCUVZWM1NTeGxRVWM1UW5oSkxFVkJRVlUyU2l4eFFrRkJkVUlzVTBGQlUwUXNSMEZEZUVNelN5eEZRVUZGTWtzc1IwRkJXVGRFTEVsQlFVa3ZSaXhGUVVGVk9Fb3NaVUZIT1VJNVNpeEZRVUZWSzBvc2RVSkJRWGxDTEZOQlFWTklMRWRCUXpGRE5Vb3NSVUZCVldkTExGZEJRVmN2U3l4RlFVRkZNa3NzUjBGQldUZEVMRkZCUjNKREwwWXNSVUZCVldsTExHVkJRV2xDTEZkQlJYcENMRTlCUkZjMVN5eEhRVUZITmtzc1QwRkJUMnhMTEVWQlFWVnRTeXhYUVVscVEyNUxMRVZCUVZVNFNpeFhRVUZoTEZkQlJYSkNMRTlCUkZkNlN5eEhRVUZITmtzc1QwRkJUMnhMTEVWQlFWVktMRlZCU1dwRFNTeEZRVUZWYjBzc1UwRkJWeXhYUVVOdVFpeFBRVUZQTDBzc1IwRkJSemhGTEV0QlFVdHVSU3hGUVVGVlNpeFZRVWN6UWtrc1JVRkJWV2RMTEZkQlFXRXNVMEZCVTBzc1IwRkRPVUlzU1VGQlNXNUhMRVZCUVZrM1JTeEhRVUZIYlVVc1RVRkJUVGhITEZWQlFWVkVMRWRCUTI1RGNrc3NSVUZCVlVvc1VVRkJVWEZHTEUxQlFVMW1MRWxCUnpGQ2JFVXNSVUZCVlhWTExGbEJRV01zVjBGRGRFSXNTVUZCU1VNc1MwRkRRVU1zUlVGQlRYcExMRVZCUVZWS0xGVkJRVlU0U3l4UlFVVXhRa01zUlVGQlZTeFRRVUZUUXl4RlFVRlJTaXhGUVVGTlF5eEhRVU51UXl4SlFVRkxMRWxCUVVrM1NTeExRVUZSTmtrc1JVRkRaaXhIUVVGSlFTeEZRVUZKTlVrc1pVRkJaVVFzUjBGQlR5eERRVU0xUWl4SlFVRkphVW9zUlVGQlNYaE1MRWRCUVVkdFJTeE5RVUZOUXl4cFFrRkJhVUpuU0N4RlFVRkpOMGtzU1VGRE5VSXNUMEZCVG1sS0xFZEJRVEJDTEdsQ1FVRk1RU3hGUVVOMlFrWXNSVUZCVVM5SkxFVkJRVThzU1VGQlN6UkpMRVZCUVUxTExFZEJSVEZDVEN4RlFVRkxTU3hGUVVGVGFFb3NSMEZCVVdsS0xFbEJTemxDUml4RlFVRlJMRWRCUVVsSUxFVkJRVTFETEVkQlJXeENMRWxCUVVsTExFVkJRVk1zUjBGRFlpeEpRVUZMTEVsQlFVbHNTaXhMUVVGUk5Fa3NSVUZEV0VFc1JVRkJTek5KTEdWQlFXVkVMRWxCUVdsQ0xGRkJRVkpCTEVsQlF5OUNhMG9zUjBGQlZXeEtMRVZCUVU4c1MwRkJUelJKTEVWQlFVczFTU3hIUVVGUkxFOUJSM3BETEU5QlFVOXJTaXhIUVZGVU9Vc3NSVUZCVlN0TExGVkJRVmtzVTBGQlV6TkdMRWRCUlRkQ2NFWXNSVUZCVlVNc1kwRkJZeXRMTEZGQlFWRTFSaXhIUVVWb1EzQkdMRVZCUVZWVkxHbENRVUZwUWl4SlFVczNRbFlzUlVGQlZXbE1MRmxCUVdNc1UwRkJVekZHTEVkQlF5OUNka1lzUlVGQlZXdENMR0ZCUVVGQkxFbEJSMXBzUWl4RlFVRlZhMHdzVDBGQlV5eFRRVUZUUXl4RlFVRlZReXhIUVVOd1EyNU5MRVZCUVVWclRTeEhRVUZWUkN4UFFVRlBSU3hKUVVseVFuQk1MRVZCUVZVMlNDeEpRVUZOTEZOQlFWTXpSaXhGUVVGVmJVb3NTMEZMYmtOeVRDeEZRVUZWVlN4cFFrRkJhVUkwU3l4VlFVRlZMRk5CUVZORExFZEJRelZDTEVkQlFWcEJMRWxCUVVGQkxFbEJRV2xDZGt3c1JVRkJWV0VzYVVKQlF6ZENZaXhGUVVGVmVVTXNaVUZGV0hwRExFVkJRVmNzVlVGRlVFRXNSVUUxWlZST0xFOUJRVTh3VEN4VFFVTk1TU3hoUVVGQlFTeEZRVU5CY2tzc1QwRkJRVUVzUlVGRFFYTkxMR05CUVdsQ0xEQkNRVU5xUWtNc1QwRkJWU3hYUVVOV1F5eFJRVUZYTEV0QlExaERMR0ZCUVdkQ0xFMUJRMmhDUXl4aFFVRm5RaXhQUVVOb1FrTXNVVUZCVnl4UFFVTllReXhuUWtGQmJVSXNUMEZEYmtKRExGZEJRV01zVVVGRFpFTXNWMEZCWXl4VFFVTmtReXhYUVVGakxGTkJRMlJETEZkQlFXTXNWMEZ0WldoQ1F5eFBRVUZQUXl4UlFVRlZNVTBpTENKbWFXeGxJam9pTDNaaGNpOTNkM2N2Ylc5ellXbGpieTF0WVhOMFpYSXZjM0pqTDJwekwzWnBaWGR0YjJSbGJDNXFjeUo5Il19
